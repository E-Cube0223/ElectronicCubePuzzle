

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Dec 11 13:56:33 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.05
    20                           ; Generated 20/12/2018 GMT
    21                           ; 
    22                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F1827 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  008C                     	;# 
    83  008D                     	;# 
    84  0091                     	;# 
    85  0092                     	;# 
    86  0093                     	;# 
    87  0094                     	;# 
    88  0095                     	;# 
    89  0096                     	;# 
    90  0097                     	;# 
    91  0098                     	;# 
    92  0099                     	;# 
    93  009A                     	;# 
    94  009B                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  010C                     	;# 
   100  010D                     	;# 
   101  0111                     	;# 
   102  0112                     	;# 
   103  0113                     	;# 
   104  0114                     	;# 
   105  0115                     	;# 
   106  0116                     	;# 
   107  0117                     	;# 
   108  0118                     	;# 
   109  0119                     	;# 
   110  011A                     	;# 
   111  011B                     	;# 
   112  011D                     	;# 
   113  011E                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  0191                     	;# 
   117  0191                     	;# 
   118  0192                     	;# 
   119  0193                     	;# 
   120  0193                     	;# 
   121  0193                     	;# 
   122  0194                     	;# 
   123  0195                     	;# 
   124  0196                     	;# 
   125  0199                     	;# 
   126  019A                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019B                     	;# 
   130  019B                     	;# 
   131  019C                     	;# 
   132  019C                     	;# 
   133  019D                     	;# 
   134  019E                     	;# 
   135  019F                     	;# 
   136  020C                     	;# 
   137  020D                     	;# 
   138  0211                     	;# 
   139  0211                     	;# 
   140  0212                     	;# 
   141  0212                     	;# 
   142  0213                     	;# 
   143  0213                     	;# 
   144  0214                     	;# 
   145  0214                     	;# 
   146  0215                     	;# 
   147  0215                     	;# 
   148  0215                     	;# 
   149  0216                     	;# 
   150  0216                     	;# 
   151  0217                     	;# 
   152  0217                     	;# 
   153  0219                     	;# 
   154  021A                     	;# 
   155  021B                     	;# 
   156  021C                     	;# 
   157  021D                     	;# 
   158  021E                     	;# 
   159  021F                     	;# 
   160  0291                     	;# 
   161  0291                     	;# 
   162  0292                     	;# 
   163  0293                     	;# 
   164  0294                     	;# 
   165  0295                     	;# 
   166  0295                     	;# 
   167  0296                     	;# 
   168  0298                     	;# 
   169  0298                     	;# 
   170  0299                     	;# 
   171  029A                     	;# 
   172  029B                     	;# 
   173  029C                     	;# 
   174  029C                     	;# 
   175  029D                     	;# 
   176  029E                     	;# 
   177  029E                     	;# 
   178  0311                     	;# 
   179  0311                     	;# 
   180  0312                     	;# 
   181  0313                     	;# 
   182  0318                     	;# 
   183  0318                     	;# 
   184  0319                     	;# 
   185  031A                     	;# 
   186  0394                     	;# 
   187  0395                     	;# 
   188  0396                     	;# 
   189  039A                     	;# 
   190  039C                     	;# 
   191  039D                     	;# 
   192  039E                     	;# 
   193  039F                     	;# 
   194  0415                     	;# 
   195  0416                     	;# 
   196  0417                     	;# 
   197  041C                     	;# 
   198  041D                     	;# 
   199  041E                     	;# 
   200  0FE4                     	;# 
   201  0FE5                     	;# 
   202  0FE6                     	;# 
   203  0FE7                     	;# 
   204  0FE8                     	;# 
   205  0FE9                     	;# 
   206  0FEA                     	;# 
   207  0FEB                     	;# 
   208  0FED                     	;# 
   209  0FEE                     	;# 
   210  0FEF                     	;# 
   211  0000                     	;# 
   212  0001                     	;# 
   213  0002                     	;# 
   214  0003                     	;# 
   215  0004                     	;# 
   216  0005                     	;# 
   217  0006                     	;# 
   218  0007                     	;# 
   219  0008                     	;# 
   220  0009                     	;# 
   221  000A                     	;# 
   222  000B                     	;# 
   223  000C                     	;# 
   224  000D                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0014                     	;# 
   229  0015                     	;# 
   230  0016                     	;# 
   231  0016                     	;# 
   232  0017                     	;# 
   233  0018                     	;# 
   234  0019                     	;# 
   235  001A                     	;# 
   236  001B                     	;# 
   237  001C                     	;# 
   238  001E                     	;# 
   239  001F                     	;# 
   240  008C                     	;# 
   241  008D                     	;# 
   242  0091                     	;# 
   243  0092                     	;# 
   244  0093                     	;# 
   245  0094                     	;# 
   246  0095                     	;# 
   247  0096                     	;# 
   248  0097                     	;# 
   249  0098                     	;# 
   250  0099                     	;# 
   251  009A                     	;# 
   252  009B                     	;# 
   253  009B                     	;# 
   254  009C                     	;# 
   255  009D                     	;# 
   256  009E                     	;# 
   257  010C                     	;# 
   258  010D                     	;# 
   259  0111                     	;# 
   260  0112                     	;# 
   261  0113                     	;# 
   262  0114                     	;# 
   263  0115                     	;# 
   264  0116                     	;# 
   265  0117                     	;# 
   266  0118                     	;# 
   267  0119                     	;# 
   268  011A                     	;# 
   269  011B                     	;# 
   270  011D                     	;# 
   271  011E                     	;# 
   272  018C                     	;# 
   273  018D                     	;# 
   274  0191                     	;# 
   275  0191                     	;# 
   276  0192                     	;# 
   277  0193                     	;# 
   278  0193                     	;# 
   279  0193                     	;# 
   280  0194                     	;# 
   281  0195                     	;# 
   282  0196                     	;# 
   283  0199                     	;# 
   284  019A                     	;# 
   285  019B                     	;# 
   286  019B                     	;# 
   287  019B                     	;# 
   288  019B                     	;# 
   289  019C                     	;# 
   290  019C                     	;# 
   291  019D                     	;# 
   292  019E                     	;# 
   293  019F                     	;# 
   294  020C                     	;# 
   295  020D                     	;# 
   296  0211                     	;# 
   297  0211                     	;# 
   298  0212                     	;# 
   299  0212                     	;# 
   300  0213                     	;# 
   301  0213                     	;# 
   302  0214                     	;# 
   303  0214                     	;# 
   304  0215                     	;# 
   305  0215                     	;# 
   306  0215                     	;# 
   307  0216                     	;# 
   308  0216                     	;# 
   309  0217                     	;# 
   310  0217                     	;# 
   311  0219                     	;# 
   312  021A                     	;# 
   313  021B                     	;# 
   314  021C                     	;# 
   315  021D                     	;# 
   316  021E                     	;# 
   317  021F                     	;# 
   318  0291                     	;# 
   319  0291                     	;# 
   320  0292                     	;# 
   321  0293                     	;# 
   322  0294                     	;# 
   323  0295                     	;# 
   324  0295                     	;# 
   325  0296                     	;# 
   326  0298                     	;# 
   327  0298                     	;# 
   328  0299                     	;# 
   329  029A                     	;# 
   330  029B                     	;# 
   331  029C                     	;# 
   332  029C                     	;# 
   333  029D                     	;# 
   334  029E                     	;# 
   335  029E                     	;# 
   336  0311                     	;# 
   337  0311                     	;# 
   338  0312                     	;# 
   339  0313                     	;# 
   340  0318                     	;# 
   341  0318                     	;# 
   342  0319                     	;# 
   343  031A                     	;# 
   344  0394                     	;# 
   345  0395                     	;# 
   346  0396                     	;# 
   347  039A                     	;# 
   348  039C                     	;# 
   349  039D                     	;# 
   350  039E                     	;# 
   351  039F                     	;# 
   352  0415                     	;# 
   353  0416                     	;# 
   354  0417                     	;# 
   355  041C                     	;# 
   356  041D                     	;# 
   357  041E                     	;# 
   358  0FE4                     	;# 
   359  0FE5                     	;# 
   360  0FE6                     	;# 
   361  0FE7                     	;# 
   362  0FE8                     	;# 
   363  0FE9                     	;# 
   364  0FEA                     	;# 
   365  0FEB                     	;# 
   366  0FED                     	;# 
   367  0FEE                     	;# 
   368  0FEF                     	;# 
   369  0000                     	;# 
   370  0001                     	;# 
   371  0002                     	;# 
   372  0003                     	;# 
   373  0004                     	;# 
   374  0005                     	;# 
   375  0006                     	;# 
   376  0007                     	;# 
   377  0008                     	;# 
   378  0009                     	;# 
   379  000A                     	;# 
   380  000B                     	;# 
   381  000C                     	;# 
   382  000D                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0013                     	;# 
   386  0014                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  001E                     	;# 
   397  001F                     	;# 
   398  008C                     	;# 
   399  008D                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0093                     	;# 
   403  0094                     	;# 
   404  0095                     	;# 
   405  0096                     	;# 
   406  0097                     	;# 
   407  0098                     	;# 
   408  0099                     	;# 
   409  009A                     	;# 
   410  009B                     	;# 
   411  009B                     	;# 
   412  009C                     	;# 
   413  009D                     	;# 
   414  009E                     	;# 
   415  010C                     	;# 
   416  010D                     	;# 
   417  0111                     	;# 
   418  0112                     	;# 
   419  0113                     	;# 
   420  0114                     	;# 
   421  0115                     	;# 
   422  0116                     	;# 
   423  0117                     	;# 
   424  0118                     	;# 
   425  0119                     	;# 
   426  011A                     	;# 
   427  011B                     	;# 
   428  011D                     	;# 
   429  011E                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  0191                     	;# 
   433  0191                     	;# 
   434  0192                     	;# 
   435  0193                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0199                     	;# 
   442  019A                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019C                     	;# 
   448  019C                     	;# 
   449  019D                     	;# 
   450  019E                     	;# 
   451  019F                     	;# 
   452  020C                     	;# 
   453  020D                     	;# 
   454  0211                     	;# 
   455  0211                     	;# 
   456  0212                     	;# 
   457  0212                     	;# 
   458  0213                     	;# 
   459  0213                     	;# 
   460  0214                     	;# 
   461  0214                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0216                     	;# 
   466  0216                     	;# 
   467  0217                     	;# 
   468  0217                     	;# 
   469  0219                     	;# 
   470  021A                     	;# 
   471  021B                     	;# 
   472  021C                     	;# 
   473  021D                     	;# 
   474  021E                     	;# 
   475  021F                     	;# 
   476  0291                     	;# 
   477  0291                     	;# 
   478  0292                     	;# 
   479  0293                     	;# 
   480  0294                     	;# 
   481  0295                     	;# 
   482  0295                     	;# 
   483  0296                     	;# 
   484  0298                     	;# 
   485  0298                     	;# 
   486  0299                     	;# 
   487  029A                     	;# 
   488  029B                     	;# 
   489  029C                     	;# 
   490  029C                     	;# 
   491  029D                     	;# 
   492  029E                     	;# 
   493  029E                     	;# 
   494  0311                     	;# 
   495  0311                     	;# 
   496  0312                     	;# 
   497  0313                     	;# 
   498  0318                     	;# 
   499  0318                     	;# 
   500  0319                     	;# 
   501  031A                     	;# 
   502  0394                     	;# 
   503  0395                     	;# 
   504  0396                     	;# 
   505  039A                     	;# 
   506  039C                     	;# 
   507  039D                     	;# 
   508  039E                     	;# 
   509  039F                     	;# 
   510  0415                     	;# 
   511  0416                     	;# 
   512  0417                     	;# 
   513  041C                     	;# 
   514  041D                     	;# 
   515  041E                     	;# 
   516  0FE4                     	;# 
   517  0FE5                     	;# 
   518  0FE6                     	;# 
   519  0FE7                     	;# 
   520  0FE8                     	;# 
   521  0FE9                     	;# 
   522  0FEA                     	;# 
   523  0FEB                     	;# 
   524  0FED                     	;# 
   525  0FEE                     	;# 
   526  0FEF                     	;# 
   527                           
   528                           	psect	idataCOMMON
   529  0187                     __pidataCOMMON:	
   530                           
   531                           ;initializer for _SPI_FLAG
   532  0187  3401               	retlw	1
   533  0011                     _PIR1bits	set	17
   534  000D                     _PORTB	set	13
   535  0015                     _TMR0	set	21
   536  005E                     _PEIE	set	94
   537  008B                     _SSP1IF	set	139
   538  005F                     _GIE	set	95
   539  005A                     _TMR0IF	set	90
   540  005D                     _TMR0IE	set	93
   541  006F                     _RB7	set	111
   542  006E                     _RB6	set	110
   543  006B                     _RB3	set	107
   544  0068                     _RB0	set	104
   545  008D                     _TRISBbits	set	141
   546  0095                     _OPTION_REG	set	149
   547  008D                     _TRISB	set	141
   548  0099                     _OSCCON	set	153
   549  048B                     _SSP1IE	set	1163
   550  04AF                     _nWPUEN	set	1199
   551  08ED                     _SS1SEL	set	2285
   552  08EE                     _SDO1SEL	set	2286
   553  018D                     _ANSELB	set	397
   554  0211                     _SSP1BUF	set	529
   555  0215                     _SSP1CON1bits	set	533
   556  0214                     _SSP1STATbits	set	532
   557  020D                     _WPUB	set	525
   558                           
   559                           ; #config settings
   560  0000                     
   561                           	psect	cinit
   562  0025                     start_initialization:	
   563  0025                     __initialization:	
   564                           
   565                           ; Initialize objects allocated to COMMON
   566  0025  3181  2187         	fcall	__pidataCOMMON	;fetch initializer
   567  0027  00FB               	movwf	__pdataCOMMON& (0+127)
   568                           
   569                           ; Clear objects allocated to COMMON
   570  0028  01F0               	clrf	__pbssCOMMON& (0+127)
   571  0029  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   572  002A  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   573  002B  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   574  002C  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   575  002D  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   576  002E  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
   577                           
   578                           ; Clear objects allocated to BANK0
   579  002F  01A0               	clrf	__pbssBANK0& (0+127)
   580  0030  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   581  0031  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   582  0032                     end_of_initialization:	
   583                           ;End of C runtime variable initialization code
   584                           
   585  0032                     __end_of__initialization:	
   586  0032  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   587  0033  0020               	movlb	0
   588  0034  3180  2836         	ljmp	_main	;jump to C main() function
   589                           
   590                           	psect	bssCOMMON
   591  0070                     __pbssCOMMON:	
   592  0070                     _TMR0_count:	
   593  0070                     	ds	2
   594  0072                     _return_SPI:	
   595  0072                     	ds	1
   596  0073                     _send_SPI_1:	
   597  0073                     	ds	1
   598  0074                     _TMR0_mode:	
   599  0074                     	ds	1
   600  0075                     _SPfunc_flag:	
   601  0075                     	ds	1
   602  0076                     _prev:	
   603  0076                     	ds	1
   604                           
   605                           	psect	dataCOMMON
   606  007B                     __pdataCOMMON:	
   607  007B                     _SPI_FLAG:	
   608  007B                     	ds	1
   609                           
   610                           	psect	bssBANK0
   611  0020                     __pbssBANK0:	
   612  0020                     _LED_ARRAY:	
   613  0020                     	ds	3
   614                           
   615                           	psect	cstackCOMMON
   616  0077                     __pcstackCOMMON:	
   617  0077                     ?_ioport:	
   618  0077                     ?_SPI_S_ioport:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0077                     ?_SPI_send:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0077                     ?_SPI_interrupt:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0077                     ??_SPI_interrupt:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0077                     ?_main:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0077                     ?_isr:	
   634                           ; 1 bytes @ 0x0
   635                           
   636                           
   637                           ; 1 bytes @ 0x0
   638  0077                     	ds	1
   639  0078                     ??_ioport:	
   640  0078                     ??_SPI_S_ioport:	
   641                           ; 1 bytes @ 0x1
   642                           
   643  0078                     ?_wait_ms:	
   644                           ; 1 bytes @ 0x1
   645                           
   646  0078                     ??_SPI_send:	
   647                           ; 1 bytes @ 0x1
   648                           
   649  0078                     ??_isr:	
   650                           ; 1 bytes @ 0x1
   651                           
   652  0078                     wait_ms@time:	
   653                           ; 1 bytes @ 0x1
   654                           
   655                           
   656                           ; 2 bytes @ 0x1
   657  0078                     	ds	1
   658  0079                     SPI_send@data:	
   659                           
   660                           ; 1 bytes @ 0x2
   661  0079                     	ds	1
   662  007A                     ??_wait_ms:	
   663  007A                     ??_main:	
   664                           ; 1 bytes @ 0x3
   665                           
   666                           
   667                           ; 1 bytes @ 0x3
   668  007A                     	ds	1
   669                           
   670                           	psect	maintext
   671  0036                     __pmaintext:	
   672 ;;
   673 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   674 ;;
   675 ;; *************** function _main *****************
   676 ;; Defined at:
   677 ;;		line 81 in file "slave_main.c"
   678 ;; Parameters:    Size  Location     Type
   679 ;;		None
   680 ;; Auto vars:     Size  Location     Type
   681 ;;		None
   682 ;; Return value:  Size  Location     Type
   683 ;;                  1    wreg      void 
   684 ;; Registers used:
   685 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   686 ;; Tracked objects:
   687 ;;		On entry : B1F/0
   688 ;;		On exit  : 0/0
   689 ;;		Unchanged: 0/0
   690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   691 ;;      Params:         0       0       0       0       0       0
   692 ;;      Locals:         0       0       0       0       0       0
   693 ;;      Temps:          1       0       0       0       0       0
   694 ;;      Totals:         1       0       0       0       0       0
   695 ;;Total ram usage:        1 bytes
   696 ;; Hardware stack levels required when called:    3
   697 ;; This function calls:
   698 ;;		_SPI_S_ioport
   699 ;;		_SPI_send
   700 ;;		_ioport
   701 ;;		_wait_ms
   702 ;; This function is called by:
   703 ;;		Startup code after reset
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           
   708                           ;psect for function _main
   709  0036                     _main:	
   710                           
   711                           ;slave_main.c: 83: ioport();
   712                           
   713                           ;incstack = 0
   714                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   715  0036  3181  2120  3180   	fcall	_ioport
   716                           
   717                           ;slave_main.c: 84: SPI_S_ioport();
   718  0039  3181  213A  3180   	fcall	_SPI_S_ioport
   719  003C  287B               	goto	l1084
   720  003D                     l1086:	
   721                           
   722                           ;slave_main.c: 88: wait_ms(10);
   723  003D  300A               	movlw	10
   724  003E  00F8               	movwf	wait_ms@time
   725  003F  3000               	movlw	0
   726  0040  00F9               	movwf	wait_ms@time+1
   727  0041  3181  2168  3180   	fcall	_wait_ms
   728  0044                     l57:	
   729                           ;slave_main.c: 89: while (!RB0);
   730                           
   731  0044  0020               	movlb	0	; select bank0
   732  0045  1C0D               	btfss	13,0	;volatile
   733  0046  2844               	goto	l57
   734                           
   735                           ;slave_main.c: 90: wait_ms(10);
   736  0047  300A               	movlw	10
   737  0048  00F8               	movwf	wait_ms@time
   738  0049  3000               	movlw	0
   739  004A  00F9               	movwf	wait_ms@time+1
   740  004B  3181  2168  3180   	fcall	_wait_ms
   741                           
   742                           ;slave_main.c: 91: if (prev == 0) {
   743  004E  0876               	movf	_prev,w
   744  004F  1D03               	btfss	3,2
   745  0050  2854               	goto	l1094
   746                           
   747                           ;slave_main.c: 92: prev = 0x01;
   748  0051  01F6               	clrf	_prev
   749  0052  0AF6               	incf	_prev,f
   750                           
   751                           ;slave_main.c: 93: } else if (prev == 0x01) {
   752  0053  287B               	goto	l1084
   753  0054                     l1094:	
   754  0054  0376               	decf	_prev,w
   755  0055  1D03               	btfss	3,2
   756  0056  2871               	goto	l1112
   757  0057                     L3:	
   758                           
   759                           ;slave_main.c: 94: if (SPfunc_flag) {
   760  0057  0875               	movf	_SPfunc_flag,w
   761  0058  1903               	btfsc	3,2
   762  0059  2862               	goto	l1104
   763                           
   764                           ;slave_main.c: 95: SPI_send(9);
   765  005A  3009               	movlw	9
   766  005B  3181  217D  3180   	fcall	_SPI_send
   767                           
   768                           ;slave_main.c: 96: SPfunc_flag--;
   769  005E  3001               	movlw	1
   770  005F  02F5               	subwf	_SPfunc_flag,f
   771                           
   772                           ;slave_main.c: 97: prev = 0;
   773  0060  01F6               	clrf	_prev
   774                           
   775                           ;slave_main.c: 98: } else {
   776  0061  287B               	goto	l1084
   777  0062                     l1104:	
   778                           
   779                           ;slave_main.c: 99: SPfunc_flag++;
   780  0062  3001               	movlw	1
   781  0063  00FA               	movwf	??_main
   782  0064  087A               	movf	??_main,w
   783  0065  07F5               	addwf	_SPfunc_flag,f
   784  0066  287B               	goto	l1084
   785  0067                     l1106:	
   786                           
   787                           ;slave_main.c: 104: SPI_send(4);
   788  0067  3004               	movlw	4
   789  0068  3181  217D  3180   	fcall	_SPI_send
   790                           
   791                           ;slave_main.c: 105: break;
   792  006B  2879               	goto	l1114
   793  006C                     l1108:	
   794                           
   795                           ;slave_main.c: 107: SPI_send(5);
   796  006C  3005               	movlw	5
   797  006D  3181  217D  3180   	fcall	_SPI_send
   798                           
   799                           ;slave_main.c: 108: break;
   800  0070  2879               	goto	l1114
   801  0071                     l1112:	
   802  0071  0876               	movf	_prev,w
   803                           
   804                           ; Switch size 1, requested type "simple"
   805                           ; Number of cases is 2, Range of values is 2 to 3
   806                           ; switch strategies available:
   807                           ; Name         Instructions Cycles
   808                           ; simple_byte            7     4 (average)
   809                           ; direct_byte           13     9 (fixed)
   810                           ; jumptable            263     9 (fixed)
   811                           ;	Chosen strategy is simple_byte
   812  0072  3A02               	xorlw	2	; case 2
   813  0073  1903               	skipnz
   814  0074  2867               	goto	l1106
   815  0075  3A01               	xorlw	1	; case 3
   816  0076  1903               	skipnz
   817  0077  286C               	goto	l1108
   818  0078  2879               	goto	l1114
   819  0079                     l1114:	
   820                           
   821                           ;slave_main.c: 112: prev = 0;
   822  0079  01F6               	clrf	_prev
   823                           
   824                           ;slave_main.c: 113: SPfunc_flag = 0;
   825  007A  01F5               	clrf	_SPfunc_flag
   826  007B                     l1084:	
   827                           
   828                           ;slave_main.c: 87: if (!RB0) {
   829  007B  0020               	movlb	0	; select bank0
   830  007C  1C0D               	btfss	13,0	;volatile
   831  007D  283D               	goto	l1086
   832  007E  198D               	btfsc	13,3	;volatile
   833  007F  28AD               	goto	l72
   834                           
   835                           ;slave_main.c: 116: wait_ms(10);
   836  0080  300A               	movlw	10
   837  0081  00F8               	movwf	wait_ms@time
   838  0082  3000               	movlw	0
   839  0083  00F9               	movwf	wait_ms@time+1
   840  0084  3181  2168  3180   	fcall	_wait_ms
   841  0087                     l73:	
   842                           ;slave_main.c: 117: while (!RB3);
   843                           
   844  0087  0020               	movlb	0	; select bank0
   845  0088  1D8D               	btfss	13,3	;volatile
   846  0089  2887               	goto	l73
   847                           
   848                           ;slave_main.c: 118: wait_ms(10);
   849  008A  300A               	movlw	10
   850  008B  00F8               	movwf	wait_ms@time
   851  008C  3000               	movlw	0
   852  008D  00F9               	movwf	wait_ms@time+1
   853  008E  3181  2168  3180   	fcall	_wait_ms
   854                           
   855                           ;slave_main.c: 119: if (prev == 0) {
   856  0091  0876               	movf	_prev,w
   857  0092  1D03               	btfss	3,2
   858  0093  2896               	goto	l1124
   859                           
   860                           ;slave_main.c: 120: prev = 0x02;
   861  0094  3002               	movlw	2
   862  0095  28F3               	goto	L2
   863  0096                     l1124:	
   864                           ;slave_main.c: 121: } else if (prev == 0x02) {
   865                           
   866  0096  3002               	movlw	2
   867  0097  0676               	xorwf	_prev,w
   868  0098  1D03               	btfss	3,2
   869  0099  28A5               	goto	l1142
   870  009A  2857               	goto	L3
   871  009B                     l1136:	
   872                           ;slave_main.c: 123: SPI_send(9);
   873                           
   874                           ;slave_main.c: 122: if (SPfunc_flag) {
   875                           
   876                           
   877                           ;slave_main.c: 132: SPI_send(8);
   878  009B  3008               	movlw	8
   879  009C  3181  217D  3180   	fcall	_SPI_send
   880                           
   881                           ;slave_main.c: 133: break;
   882  009F  2879               	goto	l1114
   883  00A0                     l1138:	
   884                           
   885                           ;slave_main.c: 135: SPI_send(3);
   886  00A0  3003               	movlw	3
   887  00A1  3181  217D  3180   	fcall	_SPI_send
   888                           
   889                           ;slave_main.c: 136: break;
   890  00A4  2879               	goto	l1114
   891  00A5                     l1142:	
   892  00A5  0876               	movf	_prev,w
   893                           
   894                           ; Switch size 1, requested type "simple"
   895                           ; Number of cases is 2, Range of values is 1 to 4
   896                           ; switch strategies available:
   897                           ; Name         Instructions Cycles
   898                           ; simple_byte            7     4 (average)
   899                           ; direct_byte           17     9 (fixed)
   900                           ; jumptable            263     9 (fixed)
   901                           ;	Chosen strategy is simple_byte
   902  00A6  3A01               	xorlw	1	; case 1
   903  00A7  1903               	skipnz
   904  00A8  289B               	goto	l1136
   905  00A9  3A05               	xorlw	5	; case 4
   906  00AA  1903               	skipnz
   907  00AB  28A0               	goto	l1138
   908  00AC  2879               	goto	l1114
   909  00AD                     l72:	
   910  00AD  1B0D               	btfsc	13,6	;volatile
   911  00AE  28DC               	goto	l88
   912                           
   913                           ;slave_main.c: 144: wait_ms(10);
   914  00AF  300A               	movlw	10
   915  00B0  00F8               	movwf	wait_ms@time
   916  00B1  3000               	movlw	0
   917  00B2  00F9               	movwf	wait_ms@time+1
   918  00B3  3181  2168  3180   	fcall	_wait_ms
   919  00B6                     l89:	
   920                           ;slave_main.c: 145: while (!RB6);
   921                           
   922  00B6  0020               	movlb	0	; select bank0
   923  00B7  1F0D               	btfss	13,6	;volatile
   924  00B8  28B6               	goto	l89
   925                           
   926                           ;slave_main.c: 146: wait_ms(10);
   927  00B9  300A               	movlw	10
   928  00BA  00F8               	movwf	wait_ms@time
   929  00BB  3000               	movlw	0
   930  00BC  00F9               	movwf	wait_ms@time+1
   931  00BD  3181  2168  3180   	fcall	_wait_ms
   932                           
   933                           ;slave_main.c: 147: if (prev == 0) {
   934  00C0  0876               	movf	_prev,w
   935  00C1  1D03               	btfss	3,2
   936  00C2  28C5               	goto	l1154
   937                           
   938                           ;slave_main.c: 148: prev = 0x03;
   939  00C3  3003               	movlw	3
   940  00C4  28F3               	goto	L2
   941  00C5                     l1154:	
   942                           ;slave_main.c: 149: } else if (prev == 0x03) {
   943                           
   944  00C5  3003               	movlw	3
   945  00C6  0676               	xorwf	_prev,w
   946  00C7  1D03               	btfss	3,2
   947  00C8  28D4               	goto	l1172
   948  00C9  2857               	goto	L3
   949  00CA                     l1166:	
   950                           ;slave_main.c: 151: SPI_send(9);
   951                           
   952                           ;slave_main.c: 150: if (SPfunc_flag) {
   953                           
   954                           
   955                           ;slave_main.c: 160: SPI_send(1);
   956  00CA  3001               	movlw	1
   957  00CB  3181  217D  3180   	fcall	_SPI_send
   958                           
   959                           ;slave_main.c: 161: break;
   960  00CE  2879               	goto	l1114
   961  00CF                     l1168:	
   962                           
   963                           ;slave_main.c: 163: SPI_send(6);
   964  00CF  3006               	movlw	6
   965  00D0  3181  217D  3180   	fcall	_SPI_send
   966                           
   967                           ;slave_main.c: 164: break;
   968  00D3  2879               	goto	l1114
   969  00D4                     l1172:	
   970  00D4  0876               	movf	_prev,w
   971                           
   972                           ; Switch size 1, requested type "simple"
   973                           ; Number of cases is 2, Range of values is 1 to 4
   974                           ; switch strategies available:
   975                           ; Name         Instructions Cycles
   976                           ; simple_byte            7     4 (average)
   977                           ; direct_byte           17     9 (fixed)
   978                           ; jumptable            263     9 (fixed)
   979                           ;	Chosen strategy is simple_byte
   980  00D5  3A01               	xorlw	1	; case 1
   981  00D6  1903               	skipnz
   982  00D7  28CA               	goto	l1166
   983  00D8  3A05               	xorlw	5	; case 4
   984  00D9  1903               	skipnz
   985  00DA  28CF               	goto	l1168
   986  00DB  2879               	goto	l1114
   987  00DC                     l88:	
   988  00DC  1B8D               	btfsc	13,7	;volatile
   989  00DD  290E               	goto	l104
   990                           
   991                           ;slave_main.c: 172: wait_ms(10);
   992  00DE  300A               	movlw	10
   993  00DF  00F8               	movwf	wait_ms@time
   994  00E0  3000               	movlw	0
   995  00E1  00F9               	movwf	wait_ms@time+1
   996  00E2  3181  2168  3180   	fcall	_wait_ms
   997  00E5                     l105:	
   998                           ;slave_main.c: 173: while (!RB7);
   999                           
  1000  00E5  0020               	movlb	0	; select bank0
  1001  00E6  1F8D               	btfss	13,7	;volatile
  1002  00E7  28E5               	goto	l105
  1003                           
  1004                           ;slave_main.c: 174: wait_ms(10);
  1005  00E8  300A               	movlw	10
  1006  00E9  00F8               	movwf	wait_ms@time
  1007  00EA  3000               	movlw	0
  1008  00EB  00F9               	movwf	wait_ms@time+1
  1009  00EC  3181  2168  3180   	fcall	_wait_ms
  1010                           
  1011                           ;slave_main.c: 175: if (prev == 0) {
  1012  00EF  0876               	movf	_prev,w
  1013  00F0  1D03               	btfss	3,2
  1014  00F1  28F7               	goto	l1184
  1015                           
  1016                           ;slave_main.c: 176: prev = 0x04;
  1017  00F2  3004               	movlw	4
  1018  00F3                     L2:	
  1019  00F3  00FA               	movwf	??_main
  1020  00F4  087A               	movf	??_main,w
  1021  00F5  00F6               	movwf	_prev
  1022                           
  1023                           ;slave_main.c: 177: } else if (prev == 0x04) {
  1024  00F6  287B               	goto	l1084
  1025  00F7                     l1184:	
  1026  00F7  3004               	movlw	4
  1027  00F8  0676               	xorwf	_prev,w
  1028  00F9  1D03               	btfss	3,2
  1029  00FA  2906               	goto	l1202
  1030  00FB  2857               	goto	L3
  1031  00FC                     l1196:	
  1032                           ;slave_main.c: 179: SPI_send(9);
  1033                           
  1034                           ;slave_main.c: 178: if (SPfunc_flag) {
  1035                           
  1036                           
  1037                           ;slave_main.c: 188: SPI_send(7);
  1038  00FC  3007               	movlw	7
  1039  00FD  3181  217D  3180   	fcall	_SPI_send
  1040                           
  1041                           ;slave_main.c: 189: break;
  1042  0100  2879               	goto	l1114
  1043  0101                     l1198:	
  1044                           
  1045                           ;slave_main.c: 191: SPI_send(2);
  1046  0101  3002               	movlw	2
  1047  0102  3181  217D  3180   	fcall	_SPI_send
  1048                           
  1049                           ;slave_main.c: 192: break;
  1050  0105  2879               	goto	l1114
  1051  0106                     l1202:	
  1052  0106  0876               	movf	_prev,w
  1053                           
  1054                           ; Switch size 1, requested type "simple"
  1055                           ; Number of cases is 2, Range of values is 2 to 3
  1056                           ; switch strategies available:
  1057                           ; Name         Instructions Cycles
  1058                           ; simple_byte            7     4 (average)
  1059                           ; direct_byte           13     9 (fixed)
  1060                           ; jumptable            263     9 (fixed)
  1061                           ;	Chosen strategy is simple_byte
  1062  0107  3A02               	xorlw	2	; case 2
  1063  0108  1903               	skipnz
  1064  0109  28FC               	goto	l1196
  1065  010A  3A01               	xorlw	1	; case 3
  1066  010B  1903               	skipnz
  1067  010C  2901               	goto	l1198
  1068  010D  2879               	goto	l1114
  1069  010E                     l104:	
  1070                           
  1071                           ;slave_main.c: 201: if (TMR0IE == 0 && prev != 0) {
  1072  010E  1A8B               	btfsc	11,5	;volatile
  1073  010F  291B               	goto	l1216
  1074  0110  0876               	movf	_prev,w
  1075  0111  1903               	btfsc	3,2
  1076  0112  291B               	goto	l1216
  1077                           
  1078                           ;slave_main.c: 202: TMR0 = 0xFF-125;
  1079  0113  3082               	movlw	130
  1080  0114  0095               	movwf	21	;volatile
  1081                           
  1082                           ;slave_main.c: 203: TMR0_count = 0;
  1083  0115  01F0               	clrf	_TMR0_count
  1084  0116  01F1               	clrf	_TMR0_count+1
  1085                           
  1086                           ;slave_main.c: 204: TMR0_mode = 1;
  1087  0117  01F4               	clrf	_TMR0_mode
  1088  0118  0AF4               	incf	_TMR0_mode,f
  1089                           
  1090                           ;slave_main.c: 205: TMR0IE = 1;
  1091  0119  168B               	bsf	11,5	;volatile
  1092                           
  1093                           ;slave_main.c: 207: } else if (prev == 0) {
  1094  011A  287B               	goto	l1084
  1095  011B                     l1216:	
  1096  011B  0876               	movf	_prev,w
  1097  011C  1D03               	btfss	3,2
  1098  011D  287B               	goto	l1084
  1099                           
  1100                           ;slave_main.c: 208: TMR0IE = 0;
  1101  011E  128B               	bcf	11,5	;volatile
  1102  011F  287B               	goto	l1084
  1103  0120                     __end_of_main:	
  1104                           
  1105                           	psect	text1
  1106  0168                     __ptext1:	
  1107 ;; *************** function _wait_ms *****************
  1108 ;; Defined at:
  1109 ;;		line 250 in file "slave_main.c"
  1110 ;; Parameters:    Size  Location     Type
  1111 ;;  time            2    1[COMMON] unsigned int 
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;		None
  1114 ;; Return value:  Size  Location     Type
  1115 ;;                  1    wreg      void 
  1116 ;; Registers used:
  1117 ;;		wreg, status,2
  1118 ;; Tracked objects:
  1119 ;;		On entry : 0/0
  1120 ;;		On exit  : 0/0
  1121 ;;		Unchanged: 0/0
  1122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1123 ;;      Params:         2       0       0       0       0       0
  1124 ;;      Locals:         0       0       0       0       0       0
  1125 ;;      Temps:          0       0       0       0       0       0
  1126 ;;      Totals:         2       0       0       0       0       0
  1127 ;;Total ram usage:        2 bytes
  1128 ;; Hardware stack levels used:    1
  1129 ;; Hardware stack levels required when called:    2
  1130 ;; This function calls:
  1131 ;;		Nothing
  1132 ;; This function is called by:
  1133 ;;		_main
  1134 ;; This function uses a non-reentrant model
  1135 ;;
  1136                           
  1137                           
  1138                           ;psect for function _wait_ms
  1139  0168                     _wait_ms:	
  1140                           
  1141                           ;slave_main.c: 251: OPTION_REG = 0b00000101;
  1142                           
  1143                           ;incstack = 0
  1144                           ; Regs used in _wait_ms: [wreg+status,2]
  1145  0168  3005               	movlw	5
  1146  0169  0021               	movlb	1	; select bank1
  1147  016A  0095               	movwf	21	;volatile
  1148                           
  1149                           ;slave_main.c: 252: TMR0 = 0xFF-125;
  1150  016B  3082               	movlw	130
  1151  016C  0020               	movlb	0	; select bank0
  1152  016D  0095               	movwf	21	;volatile
  1153                           
  1154                           ;slave_main.c: 253: TMR0IF = 0;
  1155  016E  110B               	bcf	11,2	;volatile
  1156                           
  1157                           ;slave_main.c: 254: TMR0_count = 0;
  1158  016F  01F0               	clrf	_TMR0_count
  1159  0170  01F1               	clrf	_TMR0_count+1
  1160                           
  1161                           ;slave_main.c: 255: TMR0_mode = 0;
  1162  0171  01F4               	clrf	_TMR0_mode
  1163                           
  1164                           ;slave_main.c: 256: TMR0IE = 1;
  1165  0172  168B               	bsf	11,5	;volatile
  1166  0173                     l1080:	
  1167                           ;slave_main.c: 258: while (TMR0_count < time);
  1168                           
  1169  0173  0879               	movf	wait_ms@time+1,w
  1170  0174  0271               	subwf	_TMR0_count+1,w
  1171  0175  1D03               	skipz
  1172  0176  2979               	goto	u315
  1173  0177  0878               	movf	wait_ms@time,w
  1174  0178  0270               	subwf	_TMR0_count,w
  1175  0179                     u315:	
  1176  0179  1C03               	skipc
  1177  017A  2973               	goto	l1080
  1178                           
  1179                           ;slave_main.c: 259: TMR0IE = 0;
  1180  017B  128B               	bcf	11,5	;volatile
  1181  017C  0008               	return
  1182  017D                     __end_of_wait_ms:	
  1183                           
  1184                           	psect	text2
  1185  0120                     __ptext2:	
  1186 ;; *************** function _ioport *****************
  1187 ;; Defined at:
  1188 ;;		line 231 in file "slave_main.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;		None
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;		None
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  1    wreg      void 
  1195 ;; Registers used:
  1196 ;;		wreg, status,2
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1202 ;;      Params:         0       0       0       0       0       0
  1203 ;;      Locals:         0       0       0       0       0       0
  1204 ;;      Temps:          0       0       0       0       0       0
  1205 ;;      Totals:         0       0       0       0       0       0
  1206 ;;Total ram usage:        0 bytes
  1207 ;; Hardware stack levels used:    1
  1208 ;; Hardware stack levels required when called:    2
  1209 ;; This function calls:
  1210 ;;		Nothing
  1211 ;; This function is called by:
  1212 ;;		_main
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           
  1217                           ;psect for function _ioport
  1218  0120                     _ioport:	
  1219                           
  1220                           ;slave_main.c: 234: OSCCON = 0b01110000;
  1221                           
  1222                           ;incstack = 0
  1223                           ; Regs used in _ioport: [wreg+status,2]
  1224  0120  3070               	movlw	112
  1225  0121  0021               	movlb	1	; select bank1
  1226  0122  0099               	movwf	25	;volatile
  1227                           
  1228                           ;slave_main.c: 235: ANSELB = 0b00000000;
  1229  0123  0023               	movlb	3	; select bank3
  1230  0124  018D               	clrf	13	;volatile
  1231                           
  1232                           ;slave_main.c: 236: TRISB = 0b11001001;
  1233  0125  30C9               	movlw	201
  1234  0126  0021               	movlb	1	; select bank1
  1235  0127  008D               	movwf	13	;volatile
  1236                           
  1237                           ;slave_main.c: 237: PORTB = 0b00000000;
  1238  0128  0020               	movlb	0	; select bank0
  1239  0129  018D               	clrf	13	;volatile
  1240                           
  1241                           ;slave_main.c: 239: WPUB = 0b11001001;
  1242  012A  30C9               	movlw	201
  1243  012B  0024               	movlb	4	; select bank4
  1244  012C  008D               	movwf	13	;volatile
  1245                           
  1246                           ;slave_main.c: 240: nWPUEN = 0;
  1247  012D  0021               	movlb	1	; select bank1
  1248  012E  1395               	bcf	21,7	;volatile
  1249                           
  1250                           ;slave_main.c: 242: OPTION_REG = 0b00000101;
  1251  012F  3005               	movlw	5
  1252  0130  0095               	movwf	21	;volatile
  1253                           
  1254                           ;slave_main.c: 243: TMR0 = 0xFF-125;
  1255  0131  3082               	movlw	130
  1256  0132  0020               	movlb	0	; select bank0
  1257  0133  0095               	movwf	21	;volatile
  1258                           
  1259                           ;slave_main.c: 244: TMR0IF = 0;
  1260  0134  110B               	bcf	11,2	;volatile
  1261                           
  1262                           ;slave_main.c: 245: TMR0_count = 0;
  1263  0135  01F0               	clrf	_TMR0_count
  1264  0136  01F1               	clrf	_TMR0_count+1
  1265                           
  1266                           ;slave_main.c: 246: TMR0IE = 0;
  1267  0137  128B               	bcf	11,5	;volatile
  1268                           
  1269                           ;slave_main.c: 247: GIE = 1;
  1270  0138  178B               	bsf	11,7	;volatile
  1271  0139  0008               	return
  1272  013A                     __end_of_ioport:	
  1273                           
  1274                           	psect	text3
  1275  017D                     __ptext3:	
  1276 ;; *************** function _SPI_send *****************
  1277 ;; Defined at:
  1278 ;;		line 54 in file "slave_SPI.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  data            1    wreg     unsigned char 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  data            1    2[COMMON] unsigned char 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg, status,2, status,0
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1292 ;;      Params:         0       0       0       0       0       0
  1293 ;;      Locals:         1       0       0       0       0       0
  1294 ;;      Temps:          1       0       0       0       0       0
  1295 ;;      Totals:         2       0       0       0       0       0
  1296 ;;Total ram usage:        2 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    2
  1299 ;; This function calls:
  1300 ;;		Nothing
  1301 ;; This function is called by:
  1302 ;;		_main
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           
  1307                           ;psect for function _SPI_send
  1308  017D                     _SPI_send:	
  1309                           
  1310                           ;incstack = 0
  1311                           ; Regs used in _SPI_send: [wreg+status,2+status,0]
  1312                           ;SPI_send@data stored from wreg
  1313  017D  00F9               	movwf	SPI_send@data
  1314  017E                     l896:	
  1315                           ;slave_SPI.c: 55: while (SPI_FLAG == 0);
  1316                           
  1317  017E  087B               	movf	_SPI_FLAG,w
  1318  017F  1903               	btfsc	3,2
  1319  0180  297E               	goto	l896
  1320                           
  1321                           ;slave_SPI.c: 56: send_SPI_1 = data;
  1322  0181  0879               	movf	SPI_send@data,w
  1323  0182  00F8               	movwf	??_SPI_send
  1324  0183  0878               	movf	??_SPI_send,w
  1325  0184  00F3               	movwf	_send_SPI_1
  1326                           
  1327                           ;slave_SPI.c: 57: SPI_FLAG = 0;
  1328  0185  01FB               	clrf	_SPI_FLAG
  1329  0186  0008               	return
  1330  0187                     __end_of_SPI_send:	
  1331                           
  1332                           	psect	text4
  1333  013A                     __ptext4:	
  1334 ;; *************** function _SPI_S_ioport *****************
  1335 ;; Defined at:
  1336 ;;		line 24 in file "slave_SPI.c"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;		None
  1339 ;; Auto vars:     Size  Location     Type
  1340 ;;		None
  1341 ;; Return value:  Size  Location     Type
  1342 ;;                  1    wreg      void 
  1343 ;; Registers used:
  1344 ;;		wreg, status,2, status,0
  1345 ;; Tracked objects:
  1346 ;;		On entry : 0/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1350 ;;      Params:         0       0       0       0       0       0
  1351 ;;      Locals:         0       0       0       0       0       0
  1352 ;;      Temps:          0       0       0       0       0       0
  1353 ;;      Totals:         0       0       0       0       0       0
  1354 ;;Total ram usage:        0 bytes
  1355 ;; Hardware stack levels used:    1
  1356 ;; Hardware stack levels required when called:    2
  1357 ;; This function calls:
  1358 ;;		Nothing
  1359 ;; This function is called by:
  1360 ;;		_main
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364                           
  1365                           ;psect for function _SPI_S_ioport
  1366  013A                     _SPI_S_ioport:	
  1367                           
  1368                           ;slave_SPI.c: 26: SDO1SEL = 0;
  1369                           
  1370                           ;incstack = 0
  1371                           ; Regs used in _SPI_S_ioport: [wreg+status,2+status,0]
  1372  013A  0022               	movlb	2	; select bank2
  1373  013B  131D               	bcf	29,6	;volatile
  1374                           
  1375                           ;slave_SPI.c: 27: SS1SEL = 0;
  1376  013C  129D               	bcf	29,5	;volatile
  1377                           
  1378                           ;slave_SPI.c: 29: SSP1STATbits.SMP = 0;
  1379  013D  0024               	movlb	4	; select bank4
  1380  013E  1394               	bcf	20,7	;volatile
  1381                           
  1382                           ;slave_SPI.c: 31: SSP1STATbits.CKE = 0;
  1383  013F  1314               	bcf	20,6	;volatile
  1384                           
  1385                           ;slave_SPI.c: 32: SSP1CON1bits.CKP = 0;
  1386  0140  1215               	bcf	21,4	;volatile
  1387                           
  1388                           ;slave_SPI.c: 34: SSP1CON1bits.SSPEN = 1;
  1389  0141  1695               	bsf	21,5	;volatile
  1390                           
  1391                           ;slave_SPI.c: 35: SSP1CON1bits.SSPM = 0b0100;
  1392  0142  0815               	movf	21,w	;volatile
  1393  0143  39F0               	andlw	-16
  1394  0144  3804               	iorlw	4
  1395  0145  0095               	movwf	21	;volatile
  1396                           
  1397                           ;slave_SPI.c: 37: TRISBbits.TRISB1 = 1;
  1398  0146  0021               	movlb	1	; select bank1
  1399  0147  148D               	bsf	13,1	;volatile
  1400                           
  1401                           ;slave_SPI.c: 38: TRISBbits.TRISB2 = 0;
  1402  0148  110D               	bcf	13,2	;volatile
  1403                           
  1404                           ;slave_SPI.c: 39: TRISBbits.TRISB4 = 1;
  1405  0149  160D               	bsf	13,4	;volatile
  1406                           
  1407                           ;slave_SPI.c: 40: TRISBbits.TRISB5 = 1;
  1408  014A  168D               	bsf	13,5	;volatile
  1409                           
  1410                           ;slave_SPI.c: 42: SSP1IF = 0;
  1411  014B  0020               	movlb	0	; select bank0
  1412  014C  1191               	bcf	17,3	;volatile
  1413                           
  1414                           ;slave_SPI.c: 43: SSP1IE = 1;
  1415  014D  0021               	movlb	1	; select bank1
  1416  014E  1591               	bsf	17,3	;volatile
  1417                           
  1418                           ;slave_SPI.c: 44: PEIE = 1;
  1419  014F  170B               	bsf	11,6	;volatile
  1420                           
  1421                           ;slave_SPI.c: 45: GIE = 1;
  1422  0150  178B               	bsf	11,7	;volatile
  1423  0151  0008               	return
  1424  0152                     __end_of_SPI_S_ioport:	
  1425                           
  1426                           	psect	intentry
  1427  0004                     __pintentry:	
  1428 ;; *************** function _isr *****************
  1429 ;; Defined at:
  1430 ;;		line 215 in file "slave_main.c"
  1431 ;; Parameters:    Size  Location     Type
  1432 ;;		None
  1433 ;; Auto vars:     Size  Location     Type
  1434 ;;		None
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  1    wreg      void 
  1437 ;; Registers used:
  1438 ;;		wreg, status,2, status,0, pclath, cstack
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1444 ;;      Params:         0       0       0       0       0       0
  1445 ;;      Locals:         0       0       0       0       0       0
  1446 ;;      Temps:          0       0       0       0       0       0
  1447 ;;      Totals:         0       0       0       0       0       0
  1448 ;;Total ram usage:        0 bytes
  1449 ;; Hardware stack levels used:    1
  1450 ;; Hardware stack levels required when called:    1
  1451 ;; This function calls:
  1452 ;;		_SPI_interrupt
  1453 ;; This function is called by:
  1454 ;;		Interrupt level 1
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458  0004                     _isr:	
  1459                           
  1460                           ;incstack = 0
  1461  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  1462                           
  1463                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  1464  0005  3180               	pagesel	$
  1465                           
  1466                           ;slave_main.c: 216: SPI_interrupt();
  1467  0006  3181  2152  3180   	fcall	_SPI_interrupt
  1468                           
  1469                           ;slave_main.c: 217: if (TMR0IF == 1) {
  1470  0009  1D0B               	btfss	11,2	;volatile
  1471  000A  2821               	goto	i1l133
  1472                           
  1473                           ;slave_main.c: 218: TMR0 = 0xFF-125;
  1474  000B  3082               	movlw	130
  1475  000C  0020               	movlb	0	; select bank0
  1476  000D  0095               	movwf	21	;volatile
  1477                           
  1478                           ;slave_main.c: 219: TMR0_count++;
  1479  000E  3001               	movlw	1
  1480  000F  07F0               	addwf	_TMR0_count,f
  1481  0010  3000               	movlw	0
  1482  0011  3DF1               	addwfc	_TMR0_count+1,f
  1483                           
  1484                           ;slave_main.c: 220: TMR0IF = 0;
  1485  0012  110B               	bcf	11,2	;volatile
  1486                           
  1487                           ;slave_main.c: 221: if (TMR0_mode) {
  1488  0013  0874               	movf	_TMR0_mode,w
  1489  0014  1903               	btfsc	3,2
  1490  0015  2821               	goto	i1l133
  1491                           
  1492                           ;slave_main.c: 222: if (TMR0_count >= 500) {
  1493  0016  3001               	movlw	1
  1494  0017  0271               	subwf	_TMR0_count+1,w
  1495  0018  30F4               	movlw	244
  1496  0019  1903               	skipnz
  1497  001A  0270               	subwf	_TMR0_count,w
  1498  001B  1C03               	skipc
  1499  001C  2821               	goto	i1l133
  1500                           
  1501                           ;slave_main.c: 223: TMR0_count = 0;
  1502  001D  01F0               	clrf	_TMR0_count
  1503  001E  01F1               	clrf	_TMR0_count+1
  1504                           
  1505                           ;slave_main.c: 224: prev = 0;
  1506  001F  01F6               	clrf	_prev
  1507                           
  1508                           ;slave_main.c: 225: SPfunc_flag = 0;
  1509  0020  01F5               	clrf	_SPfunc_flag
  1510  0021                     i1l133:	
  1511  0021  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1512  0022  0009               	retfie
  1513  0023                     __end_of_isr:	
  1514                           
  1515                           	psect	text6
  1516  0152                     __ptext6:	
  1517 ;; *************** function _SPI_interrupt *****************
  1518 ;; Defined at:
  1519 ;;		line 67 in file "slave_SPI.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;		None
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;		None
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  1    wreg      void 
  1526 ;; Registers used:
  1527 ;;		wreg, status,2, status,0
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1533 ;;      Params:         0       0       0       0       0       0
  1534 ;;      Locals:         0       0       0       0       0       0
  1535 ;;      Temps:          1       0       0       0       0       0
  1536 ;;      Totals:         1       0       0       0       0       0
  1537 ;;Total ram usage:        1 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; This function calls:
  1540 ;;		Nothing
  1541 ;; This function is called by:
  1542 ;;		_isr
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546                           
  1547                           ;psect for function _SPI_interrupt
  1548  0152                     _SPI_interrupt:	
  1549                           
  1550                           ;slave_SPI.c: 68: if (PIR1bits.SSP1IF == 1) {
  1551                           
  1552                           ;incstack = 0
  1553                           ; Regs used in _SPI_interrupt: [wreg+status,2+status,0]
  1554  0152  0020               	movlb	0	; select bank0
  1555  0153  1D91               	btfss	17,3	;volatile
  1556  0154  0008               	return
  1557                           
  1558                           ;slave_SPI.c: 69: if (SPI_FLAG==0) {
  1559  0155  087B               	movf	_SPI_FLAG,w
  1560  0156  1D03               	btfss	3,2
  1561  0157  2965               	goto	i1l916
  1562                           
  1563                           ;slave_SPI.c: 70: send_SPI_1 = send_SPI_1 << 1;
  1564  0158  3573               	lslf	_send_SPI_1,w
  1565  0159  00F7               	movwf	??_SPI_interrupt
  1566  015A  0877               	movf	??_SPI_interrupt,w
  1567  015B  00F3               	movwf	_send_SPI_1
  1568                           
  1569                           ;slave_SPI.c: 71: return_SPI = SSP1BUF;
  1570  015C  0024               	movlb	4	; select bank4
  1571  015D  0811               	movf	17,w	;volatile
  1572  015E  00F7               	movwf	??_SPI_interrupt
  1573  015F  0877               	movf	??_SPI_interrupt,w
  1574  0160  00F2               	movwf	_return_SPI
  1575                           
  1576                           ;slave_SPI.c: 72: SSP1BUF = send_SPI_1;
  1577  0161  0873               	movf	_send_SPI_1,w
  1578  0162  0091               	movwf	17	;volatile
  1579                           
  1580                           ;slave_SPI.c: 73: SPI_FLAG = 1;
  1581  0163  01FB               	clrf	_SPI_FLAG
  1582  0164  0AFB               	incf	_SPI_FLAG,f
  1583  0165                     i1l916:	
  1584                           
  1585                           ;slave_SPI.c: 74: };slave_SPI.c: 75: PIR1bits.SSP1IF = 0;
  1586  0165  0020               	movlb	0	; select bank0
  1587  0166  1191               	bcf	17,3	;volatile
  1588  0167  0008               	return
  1589  0168                     __end_of_SPI_interrupt:	
  1590  007E                     btemp	set	126	;btemp
  1591  007E                     int$flags	set	126
  1592  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         10
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4      12
    BANK0            80      0       3
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_SPI_send
    _main->_wait_ms

Critical Paths under _isr in COMMON

    _isr->_SPI_interrupt

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     645
                                              3 COMMON     1     1      0
                       _SPI_S_ioport
                           _SPI_send
                             _ioport
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _wait_ms                                              2     0      2     630
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ioport                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_send                                             2     2      0      15
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPI_S_ioport                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  0     0      0       0
                      _SPI_interrupt
 ---------------------------------------------------------------------------------
 (3) _SPI_interrupt                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_S_ioport
   _SPI_send
   _ioport
   _wait_ms

 _isr (ROOT)
   _SPI_interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      4       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      0       3       6        3.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0       F      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Dec 11 13:56:33 2019

           _SPI_S_ioport 013A              __CFG_CP$OFF 0000                       l72 00AD  
                     l73 0087                       l57 0044                       l88 00DC  
                     l89 00B6              __CFG_LVP$ON 0000                      l104 010E  
                    l105 00E5                      l896 017E                      _GIE 005F  
                    _RB0 0068                      _RB3 006B                      _RB6 006E  
                    _RB7 006F                      u315 0179             __CFG_CPD$OFF 0000  
                    _isr 0004             __CFG_BORV$HI 0000                     l1104 0062  
                   l1112 0071                     l1202 0106                     l1114 0079  
                   l1106 0067                     l1124 0096                     l1108 006C  
                   l1142 00A5                     l1080 0173                     l1216 011B  
                   l1136 009B                     l1154 00C5                     l1138 00A0  
                   l1172 00D4                     l1084 007B                     l1166 00CA  
                   l1094 0054                     l1086 003D                     l1184 00F7  
                   l1168 00CF                     l1196 00FC                     l1198 0101  
                   ?_isr 0077                     _PEIE 005E                     _TMR0 0015  
                   _WPUB 020D   __size_of_SPI_interrupt 0016             __CFG_WRT$OFF 0000  
                   _main 0036                     _prev 0076                     btemp 007E  
          __CFG_BOREN$ON 0000                     start 0023            __CFG_IESO$OFF 0000  
                  ??_isr 0078            __CFG_PLLEN$ON 0000                    ?_main 0077  
          __CFG_WDTE$OFF 0000                    i1l133 0021                    i1l916 0165  
                  _PORTB 000D                    _TRISB 008D            __CFG_PWRTE$ON 0000  
         __CFG_FCMEN$OFF 0000          __end_of_wait_ms 017D         __end_of_SPI_send 0187  
                  status 0003                    wtemp0 007E           __CFG_MCLRE$OFF 0000  
        __initialization 0025             __end_of_main 0120            _SPI_interrupt 0152  
                 ??_main 007A                   _ANSELB 018D                   _OSCCON 0099  
                 _SS1SEL 08ED                   _TMR0IE 005D                   _TMR0IF 005A  
                 _SSP1IE 048B                   _SSP1IF 008B              _SPfunc_flag 0075  
                 _nWPUEN 04AF           __CFG_STVREN$ON 0000           ?_SPI_interrupt 0077  
                 _ioport 0120             __pdataCOMMON 007B                ??_wait_ms 007A  
__end_of__initialization 0032           __pcstackCOMMON 0077             SPI_send@data 0079  
              ?_SPI_send 0077               __pbssBANK0 0020               __pmaintext 0036  
        ??_SPI_interrupt 0077               __pintentry 0004                  ?_ioport 0077  
             ??_SPI_send 0078                  _SDO1SEL 08EE                  _SSP1BUF 0211  
        __size_of_ioport 001A                  __ptext1 0168                  __ptext2 0120  
                __ptext3 017D                  __ptext4 013A                  __ptext6 0152  
           __size_of_isr 001F                _LED_ARRAY 0020                  _wait_ms 0168  
             _send_SPI_1 0073     end_of_initialization 0032              wait_ms@time 0078  
             _return_SPI 0072                _TMR0_mode 0074         __CFG_FOSC$INTOSC 0000  
              _TRISBbits 008D            ?_SPI_S_ioport 0077            __pidataCOMMON 0187  
         __end_of_ioport 013A      start_initialization 0025        __size_of_SPI_send 000A  
            __end_of_isr 0023           ??_SPI_S_ioport 0078                 ??_ioport 0078  
            __pbssCOMMON 0070                ___latbits 0001    __end_of_SPI_interrupt 0168  
               ?_wait_ms 0078                 _PIR1bits 0011                 _SPI_FLAG 007B  
               _SPI_send 017D     __end_of_SPI_S_ioport 0152             _SSP1CON1bits 0215  
       __size_of_wait_ms 0015            __size_of_main 00EA                 int$flags 007E  
           _SSP1STATbits 0214                 intlevel1 0000               _OPTION_REG 0095  
  __size_of_SPI_S_ioport 0018               _TMR0_count 0070  
