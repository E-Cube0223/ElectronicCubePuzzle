

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Feb 10 00:24:59 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1
   113                           	psect	text97,global,reloc=2,class=CODE,delta=1
   114                           	psect	text98,global,reloc=2,class=CODE,delta=1
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	text103,global,reloc=2,class=CODE,delta=1
   120                           	psect	text104,global,reloc=2,class=CODE,delta=1
   121                           	psect	text105,global,reloc=2,class=CODE,delta=1
   122                           	psect	text106,global,reloc=2,class=CODE,delta=1
   123                           	psect	text107,global,reloc=2,class=CODE,delta=1
   124                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   125                           	psect	text108,global,reloc=2,class=CODE,delta=1
   126                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   127  0000                     
   128                           ; Version 2.05
   129                           ; Generated 20/12/2018 GMT
   130                           ; 
   131                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   132                           ; All rights reserved.
   133                           ; 
   134                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   135                           ; 
   136                           ; Redistribution and use in source and binary forms, with or without modification, are
   137                           ; permitted provided that the following conditions are met:
   138                           ; 
   139                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   140                           ;        conditions and the following disclaimer.
   141                           ; 
   142                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   143                           ;        of conditions and the following disclaimer in the documentation and/or other
   144                           ;        materials provided with the distribution.
   145                           ; 
   146                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   147                           ;        software without specific prior written permission.
   148                           ; 
   149                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   150                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   151                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   152                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   153                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   154                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   155                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   156                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   157                           ; 
   158                           ; 
   159                           ; Code-generator required, PIC18F25K22 Definitions
   160                           ; 
   161                           ; SFR Addresses
   162  0000                     
   163                           	psect	eeprom_data
   164  F00000  FF FF FF FF FF FF FF FF 	db	255,255,255,255,255,255,255,255	;# 
   165  0000                     
   166                           	psect	idataBANK1
   167  002FB9                     __pidataBANK1:
   168                           	opt callstack 0
   169                           
   170                           ;initializer for _LED_COLOR
   171  002FB9  28                 	db	low _OUT_WHITE
   172  002FBA  29                 	db	high _OUT_WHITE
   173  002FBB  68                 	db	low _OUT_GREEN
   174  002FBC  28                 	db	high _OUT_GREEN
   175  002FBD  7E                 	db	low _OUT_RED
   176  002FBE  28                 	db	high _OUT_RED
   177  002FBF  94                 	db	low _OUT_BLUE
   178  002FC0  28                 	db	high _OUT_BLUE
   179  002FC1  AA                 	db	low _OUT_ORANGE
   180  002FC2  28                 	db	high _OUT_ORANGE
   181  002FC3  F4                 	db	low _OUT_YELLOW
   182  002FC4  28                 	db	high _OUT_YELLOW
   183  002FC5  28                 	db	low _OUT_NONE
   184  002FC6  28                 	db	high _OUT_NONE
   185                           
   186                           ;initializer for _SOUND_NOTE
   187  002FC7  04                 	db	low _do1
   188  002FC8  30                 	db	high _do1
   189  002FC9  FE                 	db	low _re1
   190  002FCA  32                 	db	high _re1
   191  002FCB  EA                 	db	low _mi1
   192  002FCC  30                 	db	high _mi1
   193  002FCD  9E                 	db	low _so1
   194  002FCE  32                 	db	high _so1
   195  002FCF  5E                 	db	low _ra1
   196  002FD0  33                 	db	high _ra1
   197  002FD1  42                 	db	low _si1
   198  002FD2  32                 	db	high _si1
   199  002FD3  BE                 	db	low _do2
   200  002FD4  33                 	db	high _do2
   201                           
   202                           ;initializer for _sound_flag
   203  002FD5  01                 	db	1
   204                           
   205                           ;initializer for _state_CE
   206  002FD6  00                 	db	0
   207  002FD7  01                 	db	1
   208  002FD8  02                 	db	2
   209  002FD9  03                 	db	3
   210  002FDA  04                 	db	4
   211  002FDB  05                 	db	5
   212  002FDC  06                 	db	6
   213  002FDD  07                 	db	7
   214  002FDE  00                 	db	0
   215  002FDF  00                 	db	0
   216  002FE0  00                 	db	0
   217  002FE1  00                 	db	0
   218  002FE2  00                 	db	0
   219  002FE3  00                 	db	0
   220  002FE4  00                 	db	0
   221  002FE5  00                 	db	0
   222  002FE6  00                 	db	0
   223  002FE7  01                 	db	1
   224  002FE8  02                 	db	2
   225  002FE9  03                 	db	3
   226  002FEA  04                 	db	4
   227  002FEB  05                 	db	5
   228  002FEC  06                 	db	6
   229  002FED  07                 	db	7
   230  002FEE  08                 	db	8
   231  002FEF  09                 	db	9
   232  002FF0  0A                 	db	10
   233  002FF1  0B                 	db	11
   234  002FF2  00                 	db	0
   235  002FF3  00                 	db	0
   236  002FF4  00                 	db	0
   237  002FF5  00                 	db	0
   238  002FF6  00                 	db	0
   239  002FF7  00                 	db	0
   240  002FF8  00                 	db	0
   241  002FF9  00                 	db	0
   242  002FFA  00                 	db	0
   243  002FFB  00                 	db	0
   244  002FFC  00                 	db	0
   245  002FFD  00                 	db	0
   246  002FFE  00                 	db	0
   247  002FFF  01                 	db	1
   248  003000  02                 	db	2
   249  003001  03                 	db	3
   250  003002  04                 	db	4
   251  003003  05                 	db	5
   252                           
   253                           	psect	mediumconst
   254  007968                     __pmediumconst:
   255                           	opt callstack 0
   256  007968  00                 	db	0
   257  007969                     _CE_IDA_LIST:
   258                           	opt callstack 0
   259  007969  E9                 	db	low _deff_CE
   260  00796A  7D                 	db	high _deff_CE
   261  00796B  99                 	db	low STR_1
   262  00796C  7F                 	db	high STR_1
   263  00796D  00                 	db	0
   264  00796E  8D                 	db	low _u_CE
   265  00796F  7D                 	db	high _u_CE
   266  007970  F6                 	db	low STR_3
   267  007971  7F                 	db	high STR_3
   268  007972  01                 	db	1
   269  007973  31                 	db	low _l_CE
   270  007974  7D                 	db	high _l_CE
   271  007975  EE                 	db	low STR_5
   272  007976  7F                 	db	high STR_5
   273  007977  01                 	db	1
   274  007978  03                 	db	low _f_CE
   275  007979  7D                 	db	high _f_CE
   276  00797A  EC                 	db	low STR_7
   277  00797B  7F                 	db	high STR_7
   278  00797C  01                 	db	1
   279  00797D  5F                 	db	low _d_CE
   280  00797E  7D                 	db	high _d_CE
   281  00797F  E8                 	db	low STR_4
   282  007980  7F                 	db	high STR_4
   283  007981  01                 	db	1
   284  007982  BB                 	db	low _r_CE
   285  007983  7D                 	db	high _r_CE
   286  007984  F2                 	db	low STR_6
   287  007985  7F                 	db	high STR_6
   288  007986  01                 	db	1
   289  007987  D5                 	db	low _b_CE
   290  007988  7C                 	db	high _b_CE
   291  007989  E6                 	db	low STR_8
   292  00798A  7F                 	db	high STR_8
   293  00798B  01                 	db	1
   294  00798C  8D                 	db	low _u_CE
   295  00798D  7D                 	db	high _u_CE
   296  00798E  B6                 	db	low STR_9
   297  00798F  7F                 	db	high STR_9
   298  007990  03                 	db	3
   299  007991  31                 	db	low _l_CE
   300  007992  7D                 	db	high _l_CE
   301  007993  AA                 	db	low STR_11
   302  007994  7F                 	db	high STR_11
   303  007995  03                 	db	3
   304  007996  03                 	db	low _f_CE
   305  007997  7D                 	db	high _f_CE
   306  007998  A7                 	db	low STR_13
   307  007999  7F                 	db	high STR_13
   308  00799A  03                 	db	3
   309  00799B  5F                 	db	low _d_CE
   310  00799C  7D                 	db	high _d_CE
   311  00799D  A1                 	db	low STR_10
   312  00799E  7F                 	db	high STR_10
   313  00799F  03                 	db	3
   314  0079A0  BB                 	db	low _r_CE
   315  0079A1  7D                 	db	high _r_CE
   316  0079A2  B0                 	db	low STR_12
   317  0079A3  7F                 	db	high STR_12
   318  0079A4  03                 	db	3
   319  0079A5  D5                 	db	low _b_CE
   320  0079A6  7C                 	db	high _b_CE
   321  0079A7  9E                 	db	low STR_14
   322  0079A8  7F                 	db	high STR_14
   323  0079A9  03                 	db	3
   324  0079AA  8D                 	db	low _u_CE
   325  0079AB  7D                 	db	high _u_CE
   326  0079AC  DA                 	db	low STR_15
   327  0079AD  7F                 	db	high STR_15
   328  0079AE  02                 	db	2
   329  0079AF  31                 	db	low _l_CE
   330  0079B0  7D                 	db	high _l_CE
   331  0079B1  CE                 	db	low STR_17
   332  0079B2  7F                 	db	high STR_17
   333  0079B3  02                 	db	2
   334  0079B4  03                 	db	low _f_CE
   335  0079B5  7D                 	db	high _f_CE
   336  0079B6  CB                 	db	low STR_19
   337  0079B7  7F                 	db	high STR_19
   338  0079B8  02                 	db	2
   339  0079B9  5F                 	db	low _d_CE
   340  0079BA  7D                 	db	high _d_CE
   341  0079BB  C5                 	db	low STR_16
   342  0079BC  7F                 	db	high STR_16
   343  0079BD  02                 	db	2
   344  0079BE  BB                 	db	low _r_CE
   345  0079BF  7D                 	db	high _r_CE
   346  0079C0  D4                 	db	low STR_18
   347  0079C1  7F                 	db	high STR_18
   348  0079C2  02                 	db	2
   349  0079C3  D5                 	db	low _b_CE
   350  0079C4  7C                 	db	high _b_CE
   351  0079C5  C2                 	db	low STR_20
   352  0079C6  7F                 	db	high STR_20
   353  0079C7  02                 	db	2
   354  0079C8                     __end_of_CE_IDA_LIST:
   355                           	opt callstack 0
   356  0079C8                     _e_CE_IDA:
   357                           	opt callstack 0
   358  0079C8  00                 	db	0
   359  0079C9  01                 	db	1
   360  0079CA  02                 	db	2
   361  0079CB  03                 	db	3
   362  0079CC  04                 	db	4
   363  0079CD  05                 	db	5
   364  0079CE  06                 	db	6
   365  0079CF  07                 	db	7
   366  0079D0  00                 	db	0
   367  0079D1  00                 	db	0
   368  0079D2  00                 	db	0
   369  0079D3  00                 	db	0
   370  0079D4  00                 	db	0
   371  0079D5  00                 	db	0
   372  0079D6  00                 	db	0
   373  0079D7  00                 	db	0
   374  0079D8  01                 	db	1
   375  0079D9  02                 	db	2
   376  0079DA  03                 	db	3
   377  0079DB  00                 	db	0
   378  0079DC  04                 	db	4
   379  0079DD  05                 	db	5
   380  0079DE  06                 	db	6
   381  0079DF  07                 	db	7
   382  0079E0  08                 	db	8
   383  0079E1  09                 	db	9
   384  0079E2  0A                 	db	10
   385  0079E3  0B                 	db	11
   386  0079E4  01                 	db	1
   387  0079E5  01                 	db	1
   388  0079E6  01                 	db	1
   389  0079E7  01                 	db	1
   390  0079E8  00                 	db	0
   391  0079E9  00                 	db	0
   392  0079EA  00                 	db	0
   393  0079EB  00                 	db	0
   394  0079EC  00                 	db	0
   395  0079ED  00                 	db	0
   396  0079EE  00                 	db	0
   397  0079EF  00                 	db	0
   398  0079F0  00                 	db	0
   399  0079F1  04                 	db	4
   400  0079F2  01                 	db	1
   401  0079F3  02                 	db	2
   402  0079F4  03                 	db	3
   403  0079F5  05                 	db	5
   404  0079F6                     __end_of_e_CE_IDA:
   405                           	opt callstack 0
   406  0079F6                     _s_CE_IDA:
   407                           	opt callstack 0
   408  0079F6  00                 	db	0
   409  0079F7  01                 	db	1
   410  0079F8  02                 	db	2
   411  0079F9  03                 	db	3
   412  0079FA  04                 	db	4
   413  0079FB  05                 	db	5
   414  0079FC  06                 	db	6
   415  0079FD  07                 	db	7
   416  0079FE  00                 	db	0
   417  0079FF  00                 	db	0
   418  007A00  00                 	db	0
   419  007A01  00                 	db	0
   420  007A02  00                 	db	0
   421  007A03  00                 	db	0
   422  007A04  00                 	db	0
   423  007A05  00                 	db	0
   424  007A06  00                 	db	0
   425  007A07  01                 	db	1
   426  007A08  02                 	db	2
   427  007A09  03                 	db	3
   428  007A0A  04                 	db	4
   429  007A0B  07                 	db	7
   430  007A0C  06                 	db	6
   431  007A0D  0B                 	db	11
   432  007A0E  08                 	db	8
   433  007A0F  05                 	db	5
   434  007A10  0A                 	db	10
   435  007A11  09                 	db	9
   436  007A12  00                 	db	0
   437  007A13  00                 	db	0
   438  007A14  00                 	db	0
   439  007A15  00                 	db	0
   440  007A16  00                 	db	0
   441  007A17  01                 	db	1
   442  007A18  00                 	db	0
   443  007A19  01                 	db	1
   444  007A1A  00                 	db	0
   445  007A1B  01                 	db	1
   446  007A1C  00                 	db	0
   447  007A1D  01                 	db	1
   448  007A1E  04                 	db	4
   449  007A1F  01                 	db	1
   450  007A20  00                 	db	0
   451  007A21  03                 	db	3
   452  007A22  05                 	db	5
   453  007A23  02                 	db	2
   454  007A24                     __end_of_s_CE_IDA:
   455                           	opt callstack 0
   456  007A24                     _m_CE_IDA:
   457                           	opt callstack 0
   458  007A24  00                 	db	0
   459  007A25  01                 	db	1
   460  007A26  02                 	db	2
   461  007A27  03                 	db	3
   462  007A28  04                 	db	4
   463  007A29  05                 	db	5
   464  007A2A  06                 	db	6
   465  007A2B  07                 	db	7
   466  007A2C  00                 	db	0
   467  007A2D  00                 	db	0
   468  007A2E  00                 	db	0
   469  007A2F  00                 	db	0
   470  007A30  00                 	db	0
   471  007A31  00                 	db	0
   472  007A32  00                 	db	0
   473  007A33  00                 	db	0
   474  007A34  00                 	db	0
   475  007A35  01                 	db	1
   476  007A36  02                 	db	2
   477  007A37  03                 	db	3
   478  007A38  08                 	db	8
   479  007A39  05                 	db	5
   480  007A3A  04                 	db	4
   481  007A3B  07                 	db	7
   482  007A3C  0A                 	db	10
   483  007A3D  09                 	db	9
   484  007A3E  06                 	db	6
   485  007A3F  0B                 	db	11
   486  007A40  00                 	db	0
   487  007A41  00                 	db	0
   488  007A42  00                 	db	0
   489  007A43  00                 	db	0
   490  007A44  01                 	db	1
   491  007A45  00                 	db	0
   492  007A46  01                 	db	1
   493  007A47  00                 	db	0
   494  007A48  01                 	db	1
   495  007A49  00                 	db	0
   496  007A4A  01                 	db	1
   497  007A4B  00                 	db	0
   498  007A4C  03                 	db	3
   499  007A4D  00                 	db	0
   500  007A4E  02                 	db	2
   501  007A4F  05                 	db	5
   502  007A50  04                 	db	4
   503  007A51  01                 	db	1
   504  007A52                     __end_of_m_CE_IDA:
   505                           	opt callstack 0
   506  007A52                     _LED_E:
   507                           	opt callstack 0
   508  007A52  03                 	db	3
   509  007A53  04                 	db	4
   510  007A54  03                 	db	3
   511  007A55  02                 	db	2
   512  007A56  01                 	db	1
   513  007A57  02                 	db	2
   514  007A58  01                 	db	1
   515  007A59  04                 	db	4
   516  007A5A  00                 	db	0
   517  007A5B  03                 	db	3
   518  007A5C  00                 	db	0
   519  007A5D  02                 	db	2
   520  007A5E  00                 	db	0
   521  007A5F  01                 	db	1
   522  007A60  00                 	db	0
   523  007A61  04                 	db	4
   524  007A62  05                 	db	5
   525  007A63  03                 	db	3
   526  007A64  05                 	db	5
   527  007A65  02                 	db	2
   528  007A66  05                 	db	5
   529  007A67  01                 	db	1
   530  007A68  05                 	db	5
   531  007A69  04                 	db	4
   532  007A6A                     __end_of_LED_E:
   533                           	opt callstack 0
   534  007A6A                     _LED_C:
   535                           	opt callstack 0
   536  007A6A  00                 	db	0
   537  007A6B  03                 	db	3
   538  007A6C  04                 	db	4
   539  007A6D  00                 	db	0
   540  007A6E  02                 	db	2
   541  007A6F  03                 	db	3
   542  007A70  00                 	db	0
   543  007A71  01                 	db	1
   544  007A72  02                 	db	2
   545  007A73  00                 	db	0
   546  007A74  04                 	db	4
   547  007A75  01                 	db	1
   548  007A76  05                 	db	5
   549  007A77  04                 	db	4
   550  007A78  03                 	db	3
   551  007A79  05                 	db	5
   552  007A7A  03                 	db	3
   553  007A7B  02                 	db	2
   554  007A7C  05                 	db	5
   555  007A7D  02                 	db	2
   556  007A7E  01                 	db	1
   557  007A7F  05                 	db	5
   558  007A80  01                 	db	1
   559  007A81  04                 	db	4
   560  007A82                     __end_of_LED_C:
   561                           	opt callstack 0
   562  007A82                     ARRAY_SIDE_TURN@side_NUM:
   563                           	opt callstack 0
   564  007A82  00                 	db	0
   565  007A83  01                 	db	1
   566  007A84  02                 	db	2
   567  007A85  05                 	db	5
   568  007A86  08                 	db	8
   569  007A87  07                 	db	7
   570  007A88  06                 	db	6
   571  007A89  03                 	db	3
   572  007A8A                     __end_ofARRAY_SIDE_TURN@side_NUM:
   573                           	opt callstack 0
   574  007A8A                     command_turn_ARRAY@for_count_LIST:
   575                           	opt callstack 0
   576  007A8A  01                 	db	1
   577  007A8B  0B                 	db	11
   578  007A8C  0B                 	db	11
   579  007A8D  01                 	db	1
   580  007A8E                     __end_ofcommand_turn_ARRAY@for_count_LIST:
   581                           	opt callstack 0
   582  007A8E                     command_turn_ARRAY_3_end@s2_2:
   583                           	opt callstack 0
   584  007A8E  00                 	db	0
   585  007A8F  32                 	db	50
   586  007A90  27                 	db	39
   587  007A91                     __end_ofcommand_turn_ARRAY_3_end@s2_2:
   588                           	opt callstack 0
   589  007A91                     _CE_LIST:
   590                           	opt callstack 0
   591  007A91  E9                 	db	low _deff_CE
   592  007A92  7D                 	db	high _deff_CE
   593  007A93  99                 	db	low STR_1
   594  007A94  7F                 	db	high STR_1
   595  007A95  00                 	db	0
   596  007A96  90                 	db	low _state_CE
   597  007A97  01                 	db	high _state_CE
   598  007A98  93                 	db	low STR_2
   599  007A99  7F                 	db	high STR_2
   600  007A9A  00                 	db	0
   601  007A9B  8D                 	db	low _u_CE
   602  007A9C  7D                 	db	high _u_CE
   603  007A9D  F6                 	db	low STR_3
   604  007A9E  7F                 	db	high STR_3
   605  007A9F  01                 	db	1
   606  007AA0  5F                 	db	low _d_CE
   607  007AA1  7D                 	db	high _d_CE
   608  007AA2  E8                 	db	low STR_4
   609  007AA3  7F                 	db	high STR_4
   610  007AA4  01                 	db	1
   611  007AA5  31                 	db	low _l_CE
   612  007AA6  7D                 	db	high _l_CE
   613  007AA7  EE                 	db	low STR_5
   614  007AA8  7F                 	db	high STR_5
   615  007AA9  01                 	db	1
   616  007AAA  BB                 	db	low _r_CE
   617  007AAB  7D                 	db	high _r_CE
   618  007AAC  F2                 	db	low STR_6
   619  007AAD  7F                 	db	high STR_6
   620  007AAE  01                 	db	1
   621  007AAF  03                 	db	low _f_CE
   622  007AB0  7D                 	db	high _f_CE
   623  007AB1  EC                 	db	low STR_7
   624  007AB2  7F                 	db	high STR_7
   625  007AB3  01                 	db	1
   626  007AB4  D5                 	db	low _b_CE
   627  007AB5  7C                 	db	high _b_CE
   628  007AB6  E6                 	db	low STR_8
   629  007AB7  7F                 	db	high STR_8
   630  007AB8  01                 	db	1
   631  007AB9  8D                 	db	low _u_CE
   632  007ABA  7D                 	db	high _u_CE
   633  007ABB  B6                 	db	low STR_9
   634  007ABC  7F                 	db	high STR_9
   635  007ABD  03                 	db	3
   636  007ABE  5F                 	db	low _d_CE
   637  007ABF  7D                 	db	high _d_CE
   638  007AC0  A1                 	db	low STR_10
   639  007AC1  7F                 	db	high STR_10
   640  007AC2  03                 	db	3
   641  007AC3  31                 	db	low _l_CE
   642  007AC4  7D                 	db	high _l_CE
   643  007AC5  AA                 	db	low STR_11
   644  007AC6  7F                 	db	high STR_11
   645  007AC7  03                 	db	3
   646  007AC8  BB                 	db	low _r_CE
   647  007AC9  7D                 	db	high _r_CE
   648  007ACA  B0                 	db	low STR_12
   649  007ACB  7F                 	db	high STR_12
   650  007ACC  03                 	db	3
   651  007ACD  03                 	db	low _f_CE
   652  007ACE  7D                 	db	high _f_CE
   653  007ACF  A7                 	db	low STR_13
   654  007AD0  7F                 	db	high STR_13
   655  007AD1  03                 	db	3
   656  007AD2  D5                 	db	low _b_CE
   657  007AD3  7C                 	db	high _b_CE
   658  007AD4  9E                 	db	low STR_14
   659  007AD5  7F                 	db	high STR_14
   660  007AD6  03                 	db	3
   661  007AD7  8D                 	db	low _u_CE
   662  007AD8  7D                 	db	high _u_CE
   663  007AD9  DA                 	db	low STR_15
   664  007ADA  7F                 	db	high STR_15
   665  007ADB  02                 	db	2
   666  007ADC  5F                 	db	low _d_CE
   667  007ADD  7D                 	db	high _d_CE
   668  007ADE  C5                 	db	low STR_16
   669  007ADF  7F                 	db	high STR_16
   670  007AE0  02                 	db	2
   671  007AE1  31                 	db	low _l_CE
   672  007AE2  7D                 	db	high _l_CE
   673  007AE3  CE                 	db	low STR_17
   674  007AE4  7F                 	db	high STR_17
   675  007AE5  02                 	db	2
   676  007AE6  BB                 	db	low _r_CE
   677  007AE7  7D                 	db	high _r_CE
   678  007AE8  D4                 	db	low STR_18
   679  007AE9  7F                 	db	high STR_18
   680  007AEA  02                 	db	2
   681  007AEB  03                 	db	low _f_CE
   682  007AEC  7D                 	db	high _f_CE
   683  007AED  CB                 	db	low STR_19
   684  007AEE  7F                 	db	high STR_19
   685  007AEF  02                 	db	2
   686  007AF0  D5                 	db	low _b_CE
   687  007AF1  7C                 	db	high _b_CE
   688  007AF2  C2                 	db	low STR_20
   689  007AF3  7F                 	db	high STR_20
   690  007AF4  02                 	db	2
   691  007AF5  4B                 	db	low _e_CE
   692  007AF6  7C                 	db	high _e_CE
   693  007AF7  EA                 	db	low STR_21
   694  007AF8  7F                 	db	high STR_21
   695  007AF9  01                 	db	1
   696  007AFA  79                 	db	low _s_CE
   697  007AFB  7C                 	db	high _s_CE
   698  007AFC  F4                 	db	low STR_22
   699  007AFD  7F                 	db	high STR_22
   700  007AFE  01                 	db	1
   701  007AFF  A7                 	db	low _m_CE
   702  007B00  7C                 	db	high _m_CE
   703  007B01  F0                 	db	low STR_23
   704  007B02  7F                 	db	high STR_23
   705  007B03  01                 	db	1
   706  007B04  4B                 	db	low _e_CE
   707  007B05  7C                 	db	high _e_CE
   708  007B06  C8                 	db	low STR_24
   709  007B07  7F                 	db	high STR_24
   710  007B08  02                 	db	2
   711  007B09  79                 	db	low _s_CE
   712  007B0A  7C                 	db	high _s_CE
   713  007B0B  D7                 	db	low STR_25
   714  007B0C  7F                 	db	high STR_25
   715  007B0D  02                 	db	2
   716  007B0E  A7                 	db	low _m_CE
   717  007B0F  7C                 	db	high _m_CE
   718  007B10  D1                 	db	low STR_26
   719  007B11  7F                 	db	high STR_26
   720  007B12  02                 	db	2
   721  007B13  4B                 	db	low _e_CE
   722  007B14  7C                 	db	high _e_CE
   723  007B15  A4                 	db	low STR_27
   724  007B16  7F                 	db	high STR_27
   725  007B17  03                 	db	3
   726  007B18  79                 	db	low _s_CE
   727  007B19  7C                 	db	high _s_CE
   728  007B1A  B3                 	db	low STR_28
   729  007B1B  7F                 	db	high STR_28
   730  007B1C  03                 	db	3
   731  007B1D  A7                 	db	low _m_CE
   732  007B1E  7C                 	db	high _m_CE
   733  007B1F  AD                 	db	low STR_29
   734  007B20  7F                 	db	high STR_29
   735  007B21  03                 	db	3
   736  007B22  EF                 	db	low _x_CE
   737  007B23  7B                 	db	high _x_CE
   738  007B24  F8                 	db	low STR_30
   739  007B25  7F                 	db	high STR_30
   740  007B26  01                 	db	1
   741  007B27  1D                 	db	low _y_CE
   742  007B28  7C                 	db	high _y_CE
   743  007B29  FA                 	db	low STR_31
   744  007B2A  7F                 	db	high STR_31
   745  007B2B  01                 	db	1
   746  007B2C  C1                 	db	low _z_CE
   747  007B2D  7B                 	db	high _z_CE
   748  007B2E  FC                 	db	low STR_32
   749  007B2F  7F                 	db	high STR_32
   750  007B30  01                 	db	1
   751  007B31  EF                 	db	low _x_CE
   752  007B32  7B                 	db	high _x_CE
   753  007B33  B9                 	db	low STR_33
   754  007B34  7F                 	db	high STR_33
   755  007B35  03                 	db	3
   756  007B36  1D                 	db	low _y_CE
   757  007B37  7C                 	db	high _y_CE
   758  007B38  BC                 	db	low STR_34
   759  007B39  7F                 	db	high STR_34
   760  007B3A  03                 	db	3
   761  007B3B  C1                 	db	low _z_CE
   762  007B3C  7B                 	db	high _z_CE
   763  007B3D  BF                 	db	low STR_35
   764  007B3E  7F                 	db	high STR_35
   765  007B3F  03                 	db	3
   766  007B40  EF                 	db	low _x_CE
   767  007B41  7B                 	db	high _x_CE
   768  007B42  DD                 	db	low STR_36
   769  007B43  7F                 	db	high STR_36
   770  007B44  02                 	db	2
   771  007B45  1D                 	db	low _y_CE
   772  007B46  7C                 	db	high _y_CE
   773  007B47  E0                 	db	low STR_37
   774  007B48  7F                 	db	high STR_37
   775  007B49  02                 	db	2
   776  007B4A  C1                 	db	low _z_CE
   777  007B4B  7B                 	db	high _z_CE
   778  007B4C  E3                 	db	low STR_38
   779  007B4D  7F                 	db	high STR_38
   780  007B4E  02                 	db	2
   781  007B4F                     __end_of_CE_LIST:
   782                           	opt callstack 0
   783  007B4F                     make_step_7@start7:
   784                           	opt callstack 0
   785  007B4F  52                 	db	82
   786  007B50  00                 	db	0
   787  007B51  00                 	db	0
   788  007B52  4C                 	db	76
   789  007B53  27                 	db	39
   790  007B54  00                 	db	0
   791  007B55  44                 	db	68
   792  007B56  00                 	db	0
   793  007B57  00                 	db	0
   794  007B58  52                 	db	82
   795  007B59  27                 	db	39
   796  007B5A  00                 	db	0
   797  007B5B  44                 	db	68
   798  007B5C  27                 	db	39
   799  007B5D  00                 	db	0
   800  007B5E  4C                 	db	76
   801  007B5F  00                 	db	0
   802  007B60  00                 	db	0
   803  007B61  44                 	db	68
   804  007B62  00                 	db	0
   805  007B63  00                 	db	0
   806  007B64  52                 	db	82
   807  007B65  00                 	db	0
   808  007B66  00                 	db	0
   809  007B67  44                 	db	68
   810  007B68  27                 	db	39
   811  007B69  00                 	db	0
   812  007B6A  52                 	db	82
   813  007B6B  27                 	db	39
   814  007B6C  00                 	db	0
   815  007B6D  52                 	db	82
   816  007B6E  27                 	db	39
   817  007B6F  00                 	db	0
   818  007B70  44                 	db	68
   819  007B71  27                 	db	39
   820  007B72  00                 	db	0
   821  007B73  52                 	db	82
   822  007B74  00                 	db	0
   823  007B75  00                 	db	0
   824  007B76  44                 	db	68
   825  007B77  00                 	db	0
   826  007B78  00                 	db	0
   827  007B79  4C                 	db	76
   828  007B7A  00                 	db	0
   829  007B7B  00                 	db	0
   830  007B7C  44                 	db	68
   831  007B7D  27                 	db	39
   832  007B7E  00                 	db	0
   833  007B7F  52                 	db	82
   834  007B80  27                 	db	39
   835  007B81  00                 	db	0
   836  007B82  44                 	db	68
   837  007B83  00                 	db	0
   838  007B84  00                 	db	0
   839  007B85  52                 	db	82
   840  007B86  00                 	db	0
   841  007B87  00                 	db	0
   842  007B88  4C                 	db	76
   843  007B89  27                 	db	39
   844  007B8A  00                 	db	0
   845  007B8B                     __end_ofmake_step_7@start7:
   846                           	opt callstack 0
   847  007B8B                     make_white_yellow_flower@command:
   848                           	opt callstack 0
   849  007B8B  46                 	db	70
   850  007B8C  27                 	db	39
   851  007B8D  00                 	db	0
   852  007B8E  45                 	db	69
   853  007B8F  00                 	db	0
   854  007B90  00                 	db	0
   855  007B91  46                 	db	70
   856  007B92  00                 	db	0
   857  007B93  00                 	db	0
   858  007B94  4D                 	db	77
   859  007B95  00                 	db	0
   860  007B96  00                 	db	0
   861  007B97  44                 	db	68
   862  007B98  32                 	db	50
   863  007B99  00                 	db	0
   864  007B9A  4D                 	db	77
   865  007B9B  27                 	db	39
   866  007B9C  00                 	db	0
   867  007B9D  45                 	db	69
   868  007B9E  27                 	db	39
   869  007B9F  00                 	db	0
   870  007BA0  46                 	db	70
   871  007BA1  27                 	db	39
   872  007BA2  00                 	db	0
   873  007BA3  45                 	db	69
   874  007BA4  00                 	db	0
   875  007BA5  00                 	db	0
   876  007BA6  46                 	db	70
   877  007BA7  00                 	db	0
   878  007BA8  00                 	db	0
   879  007BA9  00                 	db	0
   880  007BAA  00                 	db	0
   881  007BAB  00                 	db	0
   882  007BAC  00                 	db	0
   883  007BAD  00                 	db	0
   884  007BAE  00                 	db	0
   885  007BAF  00                 	db	0
   886  007BB0  00                 	db	0
   887  007BB1  00                 	db	0
   888  007BB2  00                 	db	0
   889  007BB3  00                 	db	0
   890  007BB4  00                 	db	0
   891  007BB5  00                 	db	0
   892  007BB6  00                 	db	0
   893  007BB7  00                 	db	0
   894  007BB8  00                 	db	0
   895  007BB9  00                 	db	0
   896  007BBA  00                 	db	0
   897  007BBB  00                 	db	0
   898  007BBC  00                 	db	0
   899  007BBD  00                 	db	0
   900  007BBE  00                 	db	0
   901  007BBF  00                 	db	0
   902  007BC0  00                 	db	0
   903  007BC1                     __end_ofmake_white_yellow_flower@command:
   904                           	opt callstack 0
   905  007BC1                     _z_CE:
   906                           	opt callstack 0
   907  007BC1  04                 	db	4
   908  007BC2  00                 	db	0
   909  007BC3  03                 	db	3
   910  007BC4  07                 	db	7
   911  007BC5  05                 	db	5
   912  007BC6  01                 	db	1
   913  007BC7  02                 	db	2
   914  007BC8  06                 	db	6
   915  007BC9  01                 	db	1
   916  007BCA  02                 	db	2
   917  007BCB  01                 	db	1
   918  007BCC  02                 	db	2
   919  007BCD  02                 	db	2
   920  007BCE  01                 	db	1
   921  007BCF  02                 	db	2
   922  007BD0  01                 	db	1
   923  007BD1  08                 	db	8
   924  007BD2  04                 	db	4
   925  007BD3  06                 	db	6
   926  007BD4  0A                 	db	10
   927  007BD5  00                 	db	0
   928  007BD6  07                 	db	7
   929  007BD7  03                 	db	3
   930  007BD8  0B                 	db	11
   931  007BD9  01                 	db	1
   932  007BDA  05                 	db	5
   933  007BDB  02                 	db	2
   934  007BDC  09                 	db	9
   935  007BDD  01                 	db	1
   936  007BDE  01                 	db	1
   937  007BDF  01                 	db	1
   938  007BE0  01                 	db	1
   939  007BE1  01                 	db	1
   940  007BE2  01                 	db	1
   941  007BE3  01                 	db	1
   942  007BE4  01                 	db	1
   943  007BE5  01                 	db	1
   944  007BE6  01                 	db	1
   945  007BE7  01                 	db	1
   946  007BE8  01                 	db	1
   947  007BE9  04                 	db	4
   948  007BEA  01                 	db	1
   949  007BEB  00                 	db	0
   950  007BEC  03                 	db	3
   951  007BED  05                 	db	5
   952  007BEE  02                 	db	2
   953  007BEF                     __end_of_z_CE:
   954                           	opt callstack 0
   955  007BEF                     _x_CE:
   956                           	opt callstack 0
   957  007BEF  03                 	db	3
   958  007BF0  02                 	db	2
   959  007BF1  06                 	db	6
   960  007BF2  07                 	db	7
   961  007BF3  00                 	db	0
   962  007BF4  01                 	db	1
   963  007BF5  05                 	db	5
   964  007BF6  04                 	db	4
   965  007BF7  02                 	db	2
   966  007BF8  01                 	db	1
   967  007BF9  02                 	db	2
   968  007BFA  01                 	db	1
   969  007BFB  01                 	db	1
   970  007BFC  02                 	db	2
   971  007BFD  01                 	db	1
   972  007BFE  02                 	db	2
   973  007BFF  07                 	db	7
   974  007C00  05                 	db	5
   975  007C01  09                 	db	9
   976  007C02  0B                 	db	11
   977  007C03  06                 	db	6
   978  007C04  02                 	db	2
   979  007C05  0A                 	db	10
   980  007C06  03                 	db	3
   981  007C07  04                 	db	4
   982  007C08  01                 	db	1
   983  007C09  08                 	db	8
   984  007C0A  00                 	db	0
   985  007C0B  00                 	db	0
   986  007C0C  00                 	db	0
   987  007C0D  00                 	db	0
   988  007C0E  00                 	db	0
   989  007C0F  01                 	db	1
   990  007C10  00                 	db	0
   991  007C11  01                 	db	1
   992  007C12  00                 	db	0
   993  007C13  01                 	db	1
   994  007C14  00                 	db	0
   995  007C15  01                 	db	1
   996  007C16  00                 	db	0
   997  007C17  01                 	db	1
   998  007C18  05                 	db	5
   999  007C19  02                 	db	2
  1000  007C1A  00                 	db	0
  1001  007C1B  04                 	db	4
  1002  007C1C  03                 	db	3
  1003  007C1D                     __end_of_x_CE:
  1004                           	opt callstack 0
  1005  007C1D                     _y_CE:
  1006                           	opt callstack 0
  1007  007C1D  03                 	db	3
  1008  007C1E  00                 	db	0
  1009  007C1F  01                 	db	1
  1010  007C20  02                 	db	2
  1011  007C21  07                 	db	7
  1012  007C22  04                 	db	4
  1013  007C23  05                 	db	5
  1014  007C24  06                 	db	6
  1015  007C25  00                 	db	0
  1016  007C26  00                 	db	0
  1017  007C27  00                 	db	0
  1018  007C28  00                 	db	0
  1019  007C29  00                 	db	0
  1020  007C2A  00                 	db	0
  1021  007C2B  00                 	db	0
  1022  007C2C  00                 	db	0
  1023  007C2D  03                 	db	3
  1024  007C2E  00                 	db	0
  1025  007C2F  01                 	db	1
  1026  007C30  02                 	db	2
  1027  007C31  07                 	db	7
  1028  007C32  04                 	db	4
  1029  007C33  05                 	db	5
  1030  007C34  06                 	db	6
  1031  007C35  0B                 	db	11
  1032  007C36  08                 	db	8
  1033  007C37  09                 	db	9
  1034  007C38  0A                 	db	10
  1035  007C39  01                 	db	1
  1036  007C3A  01                 	db	1
  1037  007C3B  01                 	db	1
  1038  007C3C  01                 	db	1
  1039  007C3D  00                 	db	0
  1040  007C3E  00                 	db	0
  1041  007C3F  00                 	db	0
  1042  007C40  00                 	db	0
  1043  007C41  00                 	db	0
  1044  007C42  00                 	db	0
  1045  007C43  00                 	db	0
  1046  007C44  00                 	db	0
  1047  007C45  00                 	db	0
  1048  007C46  02                 	db	2
  1049  007C47  03                 	db	3
  1050  007C48  04                 	db	4
  1051  007C49  01                 	db	1
  1052  007C4A  05                 	db	5
  1053  007C4B                     __end_of_y_CE:
  1054                           	opt callstack 0
  1055  007C4B                     _e_CE:
  1056                           	opt callstack 0
  1057  007C4B  00                 	db	0
  1058  007C4C  01                 	db	1
  1059  007C4D  02                 	db	2
  1060  007C4E  03                 	db	3
  1061  007C4F  04                 	db	4
  1062  007C50  05                 	db	5
  1063  007C51  06                 	db	6
  1064  007C52  07                 	db	7
  1065  007C53  00                 	db	0
  1066  007C54  00                 	db	0
  1067  007C55  00                 	db	0
  1068  007C56  00                 	db	0
  1069  007C57  00                 	db	0
  1070  007C58  00                 	db	0
  1071  007C59  00                 	db	0
  1072  007C5A  00                 	db	0
  1073  007C5B  01                 	db	1
  1074  007C5C  02                 	db	2
  1075  007C5D  03                 	db	3
  1076  007C5E  00                 	db	0
  1077  007C5F  04                 	db	4
  1078  007C60  05                 	db	5
  1079  007C61  06                 	db	6
  1080  007C62  07                 	db	7
  1081  007C63  08                 	db	8
  1082  007C64  09                 	db	9
  1083  007C65  0A                 	db	10
  1084  007C66  0B                 	db	11
  1085  007C67  01                 	db	1
  1086  007C68  01                 	db	1
  1087  007C69  01                 	db	1
  1088  007C6A  01                 	db	1
  1089  007C6B  00                 	db	0
  1090  007C6C  00                 	db	0
  1091  007C6D  00                 	db	0
  1092  007C6E  00                 	db	0
  1093  007C6F  00                 	db	0
  1094  007C70  00                 	db	0
  1095  007C71  00                 	db	0
  1096  007C72  00                 	db	0
  1097  007C73  00                 	db	0
  1098  007C74  04                 	db	4
  1099  007C75  01                 	db	1
  1100  007C76  02                 	db	2
  1101  007C77  03                 	db	3
  1102  007C78  05                 	db	5
  1103  007C79                     __end_of_e_CE:
  1104                           	opt callstack 0
  1105  007C79                     _s_CE:
  1106                           	opt callstack 0
  1107  007C79  00                 	db	0
  1108  007C7A  01                 	db	1
  1109  007C7B  02                 	db	2
  1110  007C7C  03                 	db	3
  1111  007C7D  04                 	db	4
  1112  007C7E  05                 	db	5
  1113  007C7F  06                 	db	6
  1114  007C80  07                 	db	7
  1115  007C81  00                 	db	0
  1116  007C82  00                 	db	0
  1117  007C83  00                 	db	0
  1118  007C84  00                 	db	0
  1119  007C85  00                 	db	0
  1120  007C86  00                 	db	0
  1121  007C87  00                 	db	0
  1122  007C88  00                 	db	0
  1123  007C89  00                 	db	0
  1124  007C8A  01                 	db	1
  1125  007C8B  02                 	db	2
  1126  007C8C  03                 	db	3
  1127  007C8D  04                 	db	4
  1128  007C8E  07                 	db	7
  1129  007C8F  06                 	db	6
  1130  007C90  0B                 	db	11
  1131  007C91  08                 	db	8
  1132  007C92  05                 	db	5
  1133  007C93  0A                 	db	10
  1134  007C94  09                 	db	9
  1135  007C95  00                 	db	0
  1136  007C96  00                 	db	0
  1137  007C97  00                 	db	0
  1138  007C98  00                 	db	0
  1139  007C99  00                 	db	0
  1140  007C9A  01                 	db	1
  1141  007C9B  00                 	db	0
  1142  007C9C  01                 	db	1
  1143  007C9D  00                 	db	0
  1144  007C9E  01                 	db	1
  1145  007C9F  00                 	db	0
  1146  007CA0  01                 	db	1
  1147  007CA1  04                 	db	4
  1148  007CA2  01                 	db	1
  1149  007CA3  00                 	db	0
  1150  007CA4  03                 	db	3
  1151  007CA5  05                 	db	5
  1152  007CA6  02                 	db	2
  1153  007CA7                     __end_of_s_CE:
  1154                           	opt callstack 0
  1155  007CA7                     _m_CE:
  1156                           	opt callstack 0
  1157  007CA7  00                 	db	0
  1158  007CA8  01                 	db	1
  1159  007CA9  02                 	db	2
  1160  007CAA  03                 	db	3
  1161  007CAB  04                 	db	4
  1162  007CAC  05                 	db	5
  1163  007CAD  06                 	db	6
  1164  007CAE  07                 	db	7
  1165  007CAF  00                 	db	0
  1166  007CB0  00                 	db	0
  1167  007CB1  00                 	db	0
  1168  007CB2  00                 	db	0
  1169  007CB3  00                 	db	0
  1170  007CB4  00                 	db	0
  1171  007CB5  00                 	db	0
  1172  007CB6  00                 	db	0
  1173  007CB7  00                 	db	0
  1174  007CB8  01                 	db	1
  1175  007CB9  02                 	db	2
  1176  007CBA  03                 	db	3
  1177  007CBB  08                 	db	8
  1178  007CBC  05                 	db	5
  1179  007CBD  04                 	db	4
  1180  007CBE  07                 	db	7
  1181  007CBF  0A                 	db	10
  1182  007CC0  09                 	db	9
  1183  007CC1  06                 	db	6
  1184  007CC2  0B                 	db	11
  1185  007CC3  00                 	db	0
  1186  007CC4  00                 	db	0
  1187  007CC5  00                 	db	0
  1188  007CC6  00                 	db	0
  1189  007CC7  01                 	db	1
  1190  007CC8  00                 	db	0
  1191  007CC9  01                 	db	1
  1192  007CCA  00                 	db	0
  1193  007CCB  01                 	db	1
  1194  007CCC  00                 	db	0
  1195  007CCD  01                 	db	1
  1196  007CCE  00                 	db	0
  1197  007CCF  03                 	db	3
  1198  007CD0  00                 	db	0
  1199  007CD1  02                 	db	2
  1200  007CD2  05                 	db	5
  1201  007CD3  04                 	db	4
  1202  007CD4  01                 	db	1
  1203  007CD5                     __end_of_m_CE:
  1204                           	opt callstack 0
  1205  007CD5                     _b_CE:
  1206                           	opt callstack 0
  1207  007CD5  01                 	db	1
  1208  007CD6  05                 	db	5
  1209  007CD7  02                 	db	2
  1210  007CD8  03                 	db	3
  1211  007CD9  00                 	db	0
  1212  007CDA  04                 	db	4
  1213  007CDB  06                 	db	6
  1214  007CDC  07                 	db	7
  1215  007CDD  01                 	db	1
  1216  007CDE  02                 	db	2
  1217  007CDF  00                 	db	0
  1218  007CE0  00                 	db	0
  1219  007CE1  02                 	db	2
  1220  007CE2  01                 	db	1
  1221  007CE3  00                 	db	0
  1222  007CE4  00                 	db	0
  1223  007CE5  04                 	db	4
  1224  007CE6  08                 	db	8
  1225  007CE7  02                 	db	2
  1226  007CE8  03                 	db	3
  1227  007CE9  01                 	db	1
  1228  007CEA  05                 	db	5
  1229  007CEB  06                 	db	6
  1230  007CEC  07                 	db	7
  1231  007CED  00                 	db	0
  1232  007CEE  09                 	db	9
  1233  007CEF  0A                 	db	10
  1234  007CF0  0B                 	db	11
  1235  007CF1  01                 	db	1
  1236  007CF2  01                 	db	1
  1237  007CF3  00                 	db	0
  1238  007CF4  00                 	db	0
  1239  007CF5  01                 	db	1
  1240  007CF6  00                 	db	0
  1241  007CF7  00                 	db	0
  1242  007CF8  00                 	db	0
  1243  007CF9  01                 	db	1
  1244  007CFA  00                 	db	0
  1245  007CFB  00                 	db	0
  1246  007CFC  00                 	db	0
  1247  007CFD  00                 	db	0
  1248  007CFE  01                 	db	1
  1249  007CFF  02                 	db	2
  1250  007D00  03                 	db	3
  1251  007D01  04                 	db	4
  1252  007D02  05                 	db	5
  1253  007D03                     __end_of_b_CE:
  1254                           	opt callstack 0
  1255  007D03                     _f_CE:
  1256                           	opt callstack 0
  1257  007D03  00                 	db	0
  1258  007D04  01                 	db	1
  1259  007D05  03                 	db	3
  1260  007D06  07                 	db	7
  1261  007D07  04                 	db	4
  1262  007D08  05                 	db	5
  1263  007D09  02                 	db	2
  1264  007D0A  06                 	db	6
  1265  007D0B  00                 	db	0
  1266  007D0C  00                 	db	0
  1267  007D0D  01                 	db	1
  1268  007D0E  02                 	db	2
  1269  007D0F  00                 	db	0
  1270  007D10  00                 	db	0
  1271  007D11  02                 	db	2
  1272  007D12  01                 	db	1
  1273  007D13  00                 	db	0
  1274  007D14  01                 	db	1
  1275  007D15  06                 	db	6
  1276  007D16  0A                 	db	10
  1277  007D17  04                 	db	4
  1278  007D18  05                 	db	5
  1279  007D19  03                 	db	3
  1280  007D1A  07                 	db	7
  1281  007D1B  08                 	db	8
  1282  007D1C  09                 	db	9
  1283  007D1D  02                 	db	2
  1284  007D1E  0B                 	db	11
  1285  007D1F  00                 	db	0
  1286  007D20  00                 	db	0
  1287  007D21  01                 	db	1
  1288  007D22  01                 	db	1
  1289  007D23  00                 	db	0
  1290  007D24  00                 	db	0
  1291  007D25  01                 	db	1
  1292  007D26  00                 	db	0
  1293  007D27  00                 	db	0
  1294  007D28  00                 	db	0
  1295  007D29  01                 	db	1
  1296  007D2A  00                 	db	0
  1297  007D2B  00                 	db	0
  1298  007D2C  01                 	db	1
  1299  007D2D  02                 	db	2
  1300  007D2E  03                 	db	3
  1301  007D2F  04                 	db	4
  1302  007D30  05                 	db	5
  1303  007D31                     __end_of_f_CE:
  1304                           	opt callstack 0
  1305  007D31                     _l_CE:
  1306                           	opt callstack 0
  1307  007D31  04                 	db	4
  1308  007D32  01                 	db	1
  1309  007D33  02                 	db	2
  1310  007D34  00                 	db	0
  1311  007D35  07                 	db	7
  1312  007D36  05                 	db	5
  1313  007D37  06                 	db	6
  1314  007D38  03                 	db	3
  1315  007D39  02                 	db	2
  1316  007D3A  00                 	db	0
  1317  007D3B  00                 	db	0
  1318  007D3C  01                 	db	1
  1319  007D3D  01                 	db	1
  1320  007D3E  00                 	db	0
  1321  007D3F  00                 	db	0
  1322  007D40  02                 	db	2
  1323  007D41  0B                 	db	11
  1324  007D42  01                 	db	1
  1325  007D43  02                 	db	2
  1326  007D44  07                 	db	7
  1327  007D45  04                 	db	4
  1328  007D46  05                 	db	5
  1329  007D47  06                 	db	6
  1330  007D48  00                 	db	0
  1331  007D49  08                 	db	8
  1332  007D4A  09                 	db	9
  1333  007D4B  0A                 	db	10
  1334  007D4C  03                 	db	3
  1335  007D4D  00                 	db	0
  1336  007D4E  00                 	db	0
  1337  007D4F  00                 	db	0
  1338  007D50  00                 	db	0
  1339  007D51  00                 	db	0
  1340  007D52  00                 	db	0
  1341  007D53  00                 	db	0
  1342  007D54  00                 	db	0
  1343  007D55  00                 	db	0
  1344  007D56  00                 	db	0
  1345  007D57  00                 	db	0
  1346  007D58  00                 	db	0
  1347  007D59  00                 	db	0
  1348  007D5A  01                 	db	1
  1349  007D5B  02                 	db	2
  1350  007D5C  03                 	db	3
  1351  007D5D  04                 	db	4
  1352  007D5E  05                 	db	5
  1353  007D5F                     __end_of_l_CE:
  1354                           	opt callstack 0
  1355  007D5F                     _d_CE:
  1356                           	opt callstack 0
  1357  007D5F  00                 	db	0
  1358  007D60  01                 	db	1
  1359  007D61  02                 	db	2
  1360  007D62  03                 	db	3
  1361  007D63  05                 	db	5
  1362  007D64  06                 	db	6
  1363  007D65  07                 	db	7
  1364  007D66  04                 	db	4
  1365  007D67  00                 	db	0
  1366  007D68  00                 	db	0
  1367  007D69  00                 	db	0
  1368  007D6A  00                 	db	0
  1369  007D6B  00                 	db	0
  1370  007D6C  00                 	db	0
  1371  007D6D  00                 	db	0
  1372  007D6E  00                 	db	0
  1373  007D6F  00                 	db	0
  1374  007D70  01                 	db	1
  1375  007D71  02                 	db	2
  1376  007D72  03                 	db	3
  1377  007D73  04                 	db	4
  1378  007D74  05                 	db	5
  1379  007D75  06                 	db	6
  1380  007D76  07                 	db	7
  1381  007D77  09                 	db	9
  1382  007D78  0A                 	db	10
  1383  007D79  0B                 	db	11
  1384  007D7A  08                 	db	8
  1385  007D7B  00                 	db	0
  1386  007D7C  00                 	db	0
  1387  007D7D  00                 	db	0
  1388  007D7E  00                 	db	0
  1389  007D7F  00                 	db	0
  1390  007D80  00                 	db	0
  1391  007D81  00                 	db	0
  1392  007D82  00                 	db	0
  1393  007D83  00                 	db	0
  1394  007D84  00                 	db	0
  1395  007D85  00                 	db	0
  1396  007D86  00                 	db	0
  1397  007D87  00                 	db	0
  1398  007D88  01                 	db	1
  1399  007D89  02                 	db	2
  1400  007D8A  03                 	db	3
  1401  007D8B  04                 	db	4
  1402  007D8C  05                 	db	5
  1403  007D8D                     __end_of_d_CE:
  1404                           	opt callstack 0
  1405  007D8D                     _u_CE:
  1406                           	opt callstack 0
  1407  007D8D  03                 	db	3
  1408  007D8E  00                 	db	0
  1409  007D8F  01                 	db	1
  1410  007D90  02                 	db	2
  1411  007D91  04                 	db	4
  1412  007D92  05                 	db	5
  1413  007D93  06                 	db	6
  1414  007D94  07                 	db	7
  1415  007D95  00                 	db	0
  1416  007D96  00                 	db	0
  1417  007D97  00                 	db	0
  1418  007D98  00                 	db	0
  1419  007D99  00                 	db	0
  1420  007D9A  00                 	db	0
  1421  007D9B  00                 	db	0
  1422  007D9C  00                 	db	0
  1423  007D9D  00                 	db	0
  1424  007D9E  01                 	db	1
  1425  007D9F  02                 	db	2
  1426  007DA0  03                 	db	3
  1427  007DA1  07                 	db	7
  1428  007DA2  04                 	db	4
  1429  007DA3  05                 	db	5
  1430  007DA4  06                 	db	6
  1431  007DA5  08                 	db	8
  1432  007DA6  09                 	db	9
  1433  007DA7  0A                 	db	10
  1434  007DA8  0B                 	db	11
  1435  007DA9  00                 	db	0
  1436  007DAA  00                 	db	0
  1437  007DAB  00                 	db	0
  1438  007DAC  00                 	db	0
  1439  007DAD  00                 	db	0
  1440  007DAE  00                 	db	0
  1441  007DAF  00                 	db	0
  1442  007DB0  00                 	db	0
  1443  007DB1  00                 	db	0
  1444  007DB2  00                 	db	0
  1445  007DB3  00                 	db	0
  1446  007DB4  00                 	db	0
  1447  007DB5  00                 	db	0
  1448  007DB6  01                 	db	1
  1449  007DB7  02                 	db	2
  1450  007DB8  03                 	db	3
  1451  007DB9  04                 	db	4
  1452  007DBA  05                 	db	5
  1453  007DBB                     __end_of_u_CE:
  1454                           	opt callstack 0
  1455  007DBB                     _r_CE:
  1456                           	opt callstack 0
  1457  007DBB  00                 	db	0
  1458  007DBC  02                 	db	2
  1459  007DBD  06                 	db	6
  1460  007DBE  03                 	db	3
  1461  007DBF  04                 	db	4
  1462  007DC0  01                 	db	1
  1463  007DC1  05                 	db	5
  1464  007DC2  07                 	db	7
  1465  007DC3  00                 	db	0
  1466  007DC4  01                 	db	1
  1467  007DC5  02                 	db	2
  1468  007DC6  00                 	db	0
  1469  007DC7  00                 	db	0
  1470  007DC8  02                 	db	2
  1471  007DC9  01                 	db	1
  1472  007DCA  00                 	db	0
  1473  007DCB  00                 	db	0
  1474  007DCC  05                 	db	5
  1475  007DCD  09                 	db	9
  1476  007DCE  03                 	db	3
  1477  007DCF  04                 	db	4
  1478  007DD0  02                 	db	2
  1479  007DD1  06                 	db	6
  1480  007DD2  07                 	db	7
  1481  007DD3  08                 	db	8
  1482  007DD4  01                 	db	1
  1483  007DD5  0A                 	db	10
  1484  007DD6  0B                 	db	11
  1485  007DD7  00                 	db	0
  1486  007DD8  00                 	db	0
  1487  007DD9  00                 	db	0
  1488  007DDA  00                 	db	0
  1489  007DDB  00                 	db	0
  1490  007DDC  00                 	db	0
  1491  007DDD  00                 	db	0
  1492  007DDE  00                 	db	0
  1493  007DDF  00                 	db	0
  1494  007DE0  00                 	db	0
  1495  007DE1  00                 	db	0
  1496  007DE2  00                 	db	0
  1497  007DE3  00                 	db	0
  1498  007DE4  01                 	db	1
  1499  007DE5  02                 	db	2
  1500  007DE6  03                 	db	3
  1501  007DE7  04                 	db	4
  1502  007DE8  05                 	db	5
  1503  007DE9                     __end_of_r_CE:
  1504                           	opt callstack 0
  1505  007DE9                     _deff_CE:
  1506                           	opt callstack 0
  1507  007DE9  00                 	db	0
  1508  007DEA  01                 	db	1
  1509  007DEB  02                 	db	2
  1510  007DEC  03                 	db	3
  1511  007DED  04                 	db	4
  1512  007DEE  05                 	db	5
  1513  007DEF  06                 	db	6
  1514  007DF0  07                 	db	7
  1515  007DF1  00                 	db	0
  1516  007DF2  00                 	db	0
  1517  007DF3  00                 	db	0
  1518  007DF4  00                 	db	0
  1519  007DF5  00                 	db	0
  1520  007DF6  00                 	db	0
  1521  007DF7  00                 	db	0
  1522  007DF8  00                 	db	0
  1523  007DF9  00                 	db	0
  1524  007DFA  01                 	db	1
  1525  007DFB  02                 	db	2
  1526  007DFC  03                 	db	3
  1527  007DFD  04                 	db	4
  1528  007DFE  05                 	db	5
  1529  007DFF  06                 	db	6
  1530  007E00  07                 	db	7
  1531  007E01  08                 	db	8
  1532  007E02  09                 	db	9
  1533  007E03  0A                 	db	10
  1534  007E04  0B                 	db	11
  1535  007E05  00                 	db	0
  1536  007E06  00                 	db	0
  1537  007E07  00                 	db	0
  1538  007E08  00                 	db	0
  1539  007E09  00                 	db	0
  1540  007E0A  00                 	db	0
  1541  007E0B  00                 	db	0
  1542  007E0C  00                 	db	0
  1543  007E0D  00                 	db	0
  1544  007E0E  00                 	db	0
  1545  007E0F  00                 	db	0
  1546  007E10  00                 	db	0
  1547  007E11  00                 	db	0
  1548  007E12  01                 	db	1
  1549  007E13  02                 	db	2
  1550  007E14  03                 	db	3
  1551  007E15  04                 	db	4
  1552  007E16  05                 	db	5
  1553  007E17                     __end_of_deff_CE:
  1554                           	opt callstack 0
  1555  007E17                     make_step_7@step7:
  1556                           	opt callstack 0
  1557  007E17  52                 	db	82
  1558  007E18  00                 	db	0
  1559  007E19  00                 	db	0
  1560  007E1A  44                 	db	68
  1561  007E1B  00                 	db	0
  1562  007E1C  00                 	db	0
  1563  007E1D  52                 	db	82
  1564  007E1E  27                 	db	39
  1565  007E1F  00                 	db	0
  1566  007E20  44                 	db	68
  1567  007E21  27                 	db	39
  1568  007E22  00                 	db	0
  1569  007E23  52                 	db	82
  1570  007E24  27                 	db	39
  1571  007E25  00                 	db	0
  1572  007E26  42                 	db	66
  1573  007E27  00                 	db	0
  1574  007E28  00                 	db	0
  1575  007E29  52                 	db	82
  1576  007E2A  32                 	db	50
  1577  007E2B  00                 	db	0
  1578  007E2C  44                 	db	68
  1579  007E2D  27                 	db	39
  1580  007E2E  00                 	db	0
  1581  007E2F  52                 	db	82
  1582  007E30  27                 	db	39
  1583  007E31  00                 	db	0
  1584  007E32  44                 	db	68
  1585  007E33  27                 	db	39
  1586  007E34  00                 	db	0
  1587  007E35  52                 	db	82
  1588  007E36  00                 	db	0
  1589  007E37  00                 	db	0
  1590  007E38  44                 	db	68
  1591  007E39  00                 	db	0
  1592  007E3A  00                 	db	0
  1593  007E3B  52                 	db	82
  1594  007E3C  27                 	db	39
  1595  007E3D  00                 	db	0
  1596  007E3E  42                 	db	66
  1597  007E3F  27                 	db	39
  1598  007E40  00                 	db	0
  1599  007E41                     __end_ofmake_step_7@step7:
  1600                           	opt callstack 0
  1601  007E41                     made_cube@start8:
  1602                           	opt callstack 0
  1603  007E41  4C                 	db	76
  1604  007E42  27                 	db	39
  1605  007E43  00                 	db	0
  1606  007E44  44                 	db	68
  1607  007E45  27                 	db	39
  1608  007E46  00                 	db	0
  1609  007E47  4C                 	db	76
  1610  007E48  00                 	db	0
  1611  007E49  00                 	db	0
  1612  007E4A  44                 	db	68
  1613  007E4B  27                 	db	39
  1614  007E4C  00                 	db	0
  1615  007E4D  4C                 	db	76
  1616  007E4E  27                 	db	39
  1617  007E4F  00                 	db	0
  1618  007E50  44                 	db	68
  1619  007E51  32                 	db	50
  1620  007E52  00                 	db	0
  1621  007E53  4C                 	db	76
  1622  007E54  00                 	db	0
  1623  007E55  00                 	db	0
  1624  007E56  42                 	db	66
  1625  007E57  00                 	db	0
  1626  007E58  00                 	db	0
  1627  007E59  44                 	db	68
  1628  007E5A  00                 	db	0
  1629  007E5B  00                 	db	0
  1630  007E5C  42                 	db	66
  1631  007E5D  27                 	db	39
  1632  007E5E  00                 	db	0
  1633  007E5F  44                 	db	68
  1634  007E60  00                 	db	0
  1635  007E61  00                 	db	0
  1636  007E62  42                 	db	66
  1637  007E63  00                 	db	0
  1638  007E64  00                 	db	0
  1639  007E65  44                 	db	68
  1640  007E66  32                 	db	50
  1641  007E67  00                 	db	0
  1642  007E68  42                 	db	66
  1643  007E69  27                 	db	39
  1644  007E6A  00                 	db	0
  1645  007E6B                     __end_ofmade_cube@start8:
  1646                           	opt callstack 0
  1647  007E6B                     all_yellow@CO:
  1648                           	opt callstack 0
  1649  007E6B  01                 	db	1
  1650  007E6C  00                 	db	0
  1651  007E6D  02                 	db	2
  1652  007E6E  00                 	db	0
  1653  007E6F  00                 	db	0
  1654  007E70  00                 	db	0
  1655  007E71  02                 	db	2
  1656  007E72  01                 	db	1
  1657  007E73  00                 	db	0
  1658  007E74  01                 	db	1
  1659  007E75  02                 	db	2
  1660  007E76  00                 	db	0
  1661  007E77  01                 	db	1
  1662  007E78  02                 	db	2
  1663  007E79  01                 	db	1
  1664  007E7A  02                 	db	2
  1665  007E7B  02                 	db	2
  1666  007E7C  02                 	db	2
  1667  007E7D  01                 	db	1
  1668  007E7E  01                 	db	1
  1669  007E7F  02                 	db	2
  1670  007E80  02                 	db	2
  1671  007E81  00                 	db	0
  1672  007E82  02                 	db	2
  1673  007E83  01                 	db	1
  1674  007E84  01                 	db	1
  1675  007E85  00                 	db	0
  1676  007E86  01                 	db	1
  1677  007E87  00                 	db	0
  1678  007E88  00                 	db	0
  1679  007E89  00                 	db	0
  1680  007E8A  00                 	db	0
  1681  007E8B                     __end_ofall_yellow@CO:
  1682                           	opt callstack 0
  1683  007E8B                     make_second_flower_perfect@command_drop_left:
  1684                           	opt callstack 0
  1685  007E8B  55                 	db	85
  1686  007E8C  27                 	db	39
  1687  007E8D  00                 	db	0
  1688  007E8E  4C                 	db	76
  1689  007E8F  27                 	db	39
  1690  007E90  00                 	db	0
  1691  007E91  55                 	db	85
  1692  007E92  00                 	db	0
  1693  007E93  00                 	db	0
  1694  007E94  4C                 	db	76
  1695  007E95  00                 	db	0
  1696  007E96  00                 	db	0
  1697  007E97  55                 	db	85
  1698  007E98  00                 	db	0
  1699  007E99  00                 	db	0
  1700  007E9A  46                 	db	70
  1701  007E9B  00                 	db	0
  1702  007E9C  00                 	db	0
  1703  007E9D  55                 	db	85
  1704  007E9E  27                 	db	39
  1705  007E9F  00                 	db	0
  1706  007EA0  46                 	db	70
  1707  007EA1  27                 	db	39
  1708  007EA2  00                 	db	0
  1709  007EA3                     __end_ofmake_second_flower_perfect@command_drop_left:
  1710                           	opt callstack 0
  1711  007EA3                     make_second_flower_perfect@command_drop_right:
  1712                           	opt callstack 0
  1713  007EA3  55                 	db	85
  1714  007EA4  00                 	db	0
  1715  007EA5  00                 	db	0
  1716  007EA6  52                 	db	82
  1717  007EA7  00                 	db	0
  1718  007EA8  00                 	db	0
  1719  007EA9  55                 	db	85
  1720  007EAA  27                 	db	39
  1721  007EAB  00                 	db	0
  1722  007EAC  52                 	db	82
  1723  007EAD  27                 	db	39
  1724  007EAE  00                 	db	0
  1725  007EAF  55                 	db	85
  1726  007EB0  27                 	db	39
  1727  007EB1  00                 	db	0
  1728  007EB2  46                 	db	70
  1729  007EB3  27                 	db	39
  1730  007EB4  00                 	db	0
  1731  007EB5  55                 	db	85
  1732  007EB6  00                 	db	0
  1733  007EB7  00                 	db	0
  1734  007EB8  46                 	db	70
  1735  007EB9  00                 	db	0
  1736  007EBA  00                 	db	0
  1737  007EBB                     __end_ofmake_second_flower_perfect@command_drop_right:
  1738                           	opt callstack 0
  1739  007EBB                     make_step_8@step8:
  1740                           	opt callstack 0
  1741  007EBB  4D                 	db	77
  1742  007EBC  32                 	db	50
  1743  007EBD  00                 	db	0
  1744  007EBE  44                 	db	68
  1745  007EBF  27                 	db	39
  1746  007EC0  00                 	db	0
  1747  007EC1  4D                 	db	77
  1748  007EC2  00                 	db	0
  1749  007EC3  00                 	db	0
  1750  007EC4  44                 	db	68
  1751  007EC5  32                 	db	50
  1752  007EC6  00                 	db	0
  1753  007EC7  4D                 	db	77
  1754  007EC8  27                 	db	39
  1755  007EC9  00                 	db	0
  1756  007ECA  44                 	db	68
  1757  007ECB  27                 	db	39
  1758  007ECC  00                 	db	0
  1759  007ECD  4D                 	db	77
  1760  007ECE  32                 	db	50
  1761  007ECF  00                 	db	0
  1762  007ED0                     __end_ofmake_step_8@step8:
  1763                           	opt callstack 0
  1764  007ED0                     all_yellow@step6:
  1765                           	opt callstack 0
  1766  007ED0  52                 	db	82
  1767  007ED1  00                 	db	0
  1768  007ED2  00                 	db	0
  1769  007ED3  44                 	db	68
  1770  007ED4  32                 	db	50
  1771  007ED5  00                 	db	0
  1772  007ED6  52                 	db	82
  1773  007ED7  27                 	db	39
  1774  007ED8  00                 	db	0
  1775  007ED9  44                 	db	68
  1776  007EDA  27                 	db	39
  1777  007EDB  00                 	db	0
  1778  007EDC  52                 	db	82
  1779  007EDD  00                 	db	0
  1780  007EDE  00                 	db	0
  1781  007EDF  44                 	db	68
  1782  007EE0  27                 	db	39
  1783  007EE1  00                 	db	0
  1784  007EE2  52                 	db	82
  1785  007EE3  27                 	db	39
  1786  007EE4  00                 	db	0
  1787  007EE5                     __end_ofall_yellow@step6:
  1788                           	opt callstack 0
  1789  007EE5                     yellow_cross@step5:
  1790                           	opt callstack 0
  1791  007EE5  42                 	db	66
  1792  007EE6  00                 	db	0
  1793  007EE7  00                 	db	0
  1794  007EE8  52                 	db	82
  1795  007EE9  00                 	db	0
  1796  007EEA  00                 	db	0
  1797  007EEB  44                 	db	68
  1798  007EEC  00                 	db	0
  1799  007EED  00                 	db	0
  1800  007EEE  52                 	db	82
  1801  007EEF  27                 	db	39
  1802  007EF0  00                 	db	0
  1803  007EF1  44                 	db	68
  1804  007EF2  27                 	db	39
  1805  007EF3  00                 	db	0
  1806  007EF4  42                 	db	66
  1807  007EF5  27                 	db	39
  1808  007EF6  00                 	db	0
  1809  007EF7                     __end_ofyellow_cross@step5:
  1810                           	opt callstack 0
  1811  007EF7                     command_turn_ARRAY@TURN_NUM_E:
  1812                           	opt callstack 0
  1813  007EF7  01                 	db	1
  1814  007EF8  02                 	db	2
  1815  007EF9  03                 	db	3
  1816  007EFA  04                 	db	4
  1817  007EFB  03                 	db	3
  1818  007EFC  04                 	db	4
  1819  007EFD  05                 	db	5
  1820  007EFE  03                 	db	3
  1821  007EFF  04                 	db	4
  1822  007F00  05                 	db	5
  1823  007F01  03                 	db	3
  1824  007F02  04                 	db	4
  1825  007F03  05                 	db	5
  1826  007F04  03                 	db	3
  1827  007F05  04                 	db	4
  1828  007F06  05                 	db	5
  1829  007F07                     __end_ofcommand_turn_ARRAY@TURN_NUM_E:
  1830                           	opt callstack 0
  1831  007F07                     command_turn_ARRAY@TURN_NUM_S:
  1832                           	opt callstack 0
  1833  007F07  00                 	db	0
  1834  007F08  02                 	db	2
  1835  007F09  05                 	db	5
  1836  007F0A  04                 	db	4
  1837  007F0B  03                 	db	3
  1838  007F0C  04                 	db	4
  1839  007F0D  05                 	db	5
  1840  007F0E  01                 	db	1
  1841  007F0F  04                 	db	4
  1842  007F10  07                 	db	7
  1843  007F11  05                 	db	5
  1844  007F12  04                 	db	4
  1845  007F13  03                 	db	3
  1846  007F14  07                 	db	7
  1847  007F15  04                 	db	4
  1848  007F16  01                 	db	1
  1849  007F17                     __end_ofcommand_turn_ARRAY@TURN_NUM_S:
  1850                           	opt callstack 0
  1851  007F17                     command_turn_ARRAY@TURN_NUM_M:
  1852                           	opt callstack 0
  1853  007F17  00                 	db	0
  1854  007F18  03                 	db	3
  1855  007F19  05                 	db	5
  1856  007F1A  01                 	db	1
  1857  007F1B  07                 	db	7
  1858  007F1C  04                 	db	4
  1859  007F1D  01                 	db	1
  1860  007F1E  01                 	db	1
  1861  007F1F  04                 	db	4
  1862  007F20  07                 	db	7
  1863  007F21  07                 	db	7
  1864  007F22  04                 	db	4
  1865  007F23  01                 	db	1
  1866  007F24  07                 	db	7
  1867  007F25  04                 	db	4
  1868  007F26  01                 	db	1
  1869  007F27                     __end_ofcommand_turn_ARRAY@TURN_NUM_M:
  1870                           	opt callstack 0
  1871  007F27                     command_turn_ARRAY@TURN_NUM_B:
  1872                           	opt callstack 0
  1873  007F27  00                 	db	0
  1874  007F28  04                 	db	4
  1875  007F29  05                 	db	5
  1876  007F2A  02                 	db	2
  1877  007F2B  02                 	db	2
  1878  007F2C  01                 	db	1
  1879  007F2D  00                 	db	0
  1880  007F2E  00                 	db	0
  1881  007F2F  03                 	db	3
  1882  007F30  06                 	db	6
  1883  007F31  06                 	db	6
  1884  007F32  07                 	db	7
  1885  007F33  08                 	db	8
  1886  007F34  08                 	db	8
  1887  007F35  05                 	db	5
  1888  007F36  02                 	db	2
  1889  007F37                     __end_ofcommand_turn_ARRAY@TURN_NUM_B:
  1890                           	opt callstack 0
  1891  007F37                     command_turn_ARRAY@TURN_NUM_D:
  1892                           	opt callstack 0
  1893  007F37  01                 	db	1
  1894  007F38  02                 	db	2
  1895  007F39  03                 	db	3
  1896  007F3A  04                 	db	4
  1897  007F3B  06                 	db	6
  1898  007F3C  07                 	db	7
  1899  007F3D  08                 	db	8
  1900  007F3E  06                 	db	6
  1901  007F3F  07                 	db	7
  1902  007F40  08                 	db	8
  1903  007F41  06                 	db	6
  1904  007F42  07                 	db	7
  1905  007F43  08                 	db	8
  1906  007F44  06                 	db	6
  1907  007F45  07                 	db	7
  1908  007F46  08                 	db	8
  1909  007F47                     __end_ofcommand_turn_ARRAY@TURN_NUM_D:
  1910                           	opt callstack 0
  1911  007F47                     command_turn_ARRAY@TURN_NUM_L:
  1912                           	opt callstack 0
  1913  007F47  00                 	db	0
  1914  007F48  03                 	db	3
  1915  007F49  05                 	db	5
  1916  007F4A  01                 	db	1
  1917  007F4B  08                 	db	8
  1918  007F4C  05                 	db	5
  1919  007F4D  02                 	db	2
  1920  007F4E  00                 	db	0
  1921  007F4F  03                 	db	3
  1922  007F50  06                 	db	6
  1923  007F51  08                 	db	8
  1924  007F52  05                 	db	5
  1925  007F53  02                 	db	2
  1926  007F54  08                 	db	8
  1927  007F55  05                 	db	5
  1928  007F56  02                 	db	2
  1929  007F57                     __end_ofcommand_turn_ARRAY@TURN_NUM_L:
  1930                           	opt callstack 0
  1931  007F57                     command_turn_ARRAY@TURN_NUM_F:
  1932                           	opt callstack 0
  1933  007F57  00                 	db	0
  1934  007F58  02                 	db	2
  1935  007F59  05                 	db	5
  1936  007F5A  04                 	db	4
  1937  007F5B  06                 	db	6
  1938  007F5C  07                 	db	7
  1939  007F5D  08                 	db	8
  1940  007F5E  00                 	db	0
  1941  007F5F  03                 	db	3
  1942  007F60  06                 	db	6
  1943  007F61  02                 	db	2
  1944  007F62  01                 	db	1
  1945  007F63  00                 	db	0
  1946  007F64  08                 	db	8
  1947  007F65  05                 	db	5
  1948  007F66  02                 	db	2
  1949  007F67                     __end_ofcommand_turn_ARRAY@TURN_NUM_F:
  1950                           	opt callstack 0
  1951  007F67                     command_turn_ARRAY@TURN_NUM_U:
  1952                           	opt callstack 0
  1953  007F67  01                 	db	1
  1954  007F68  04                 	db	4
  1955  007F69  03                 	db	3
  1956  007F6A  02                 	db	2
  1957  007F6B  02                 	db	2
  1958  007F6C  01                 	db	1
  1959  007F6D  00                 	db	0
  1960  007F6E  02                 	db	2
  1961  007F6F  01                 	db	1
  1962  007F70  00                 	db	0
  1963  007F71  02                 	db	2
  1964  007F72  01                 	db	1
  1965  007F73  00                 	db	0
  1966  007F74  02                 	db	2
  1967  007F75  01                 	db	1
  1968  007F76  00                 	db	0
  1969  007F77                     __end_ofcommand_turn_ARRAY@TURN_NUM_U:
  1970                           	opt callstack 0
  1971  007F77                     command_turn_ARRAY@TURN_NUM_R:
  1972                           	opt callstack 0
  1973  007F77  00                 	db	0
  1974  007F78  01                 	db	1
  1975  007F79  05                 	db	5
  1976  007F7A  03                 	db	3
  1977  007F7B  00                 	db	0
  1978  007F7C  03                 	db	3
  1979  007F7D  06                 	db	6
  1980  007F7E  00                 	db	0
  1981  007F7F  03                 	db	3
  1982  007F80  06                 	db	6
  1983  007F81  00                 	db	0
  1984  007F82  03                 	db	3
  1985  007F83  06                 	db	6
  1986  007F84  08                 	db	8
  1987  007F85  05                 	db	5
  1988  007F86  02                 	db	2
  1989  007F87                     __end_ofcommand_turn_ARRAY@TURN_NUM_R:
  1990                           	opt callstack 0
  1991  007F87                     yellow_cross@check_eo:
  1992                           	opt callstack 0
  1993  007F87  01                 	db	1
  1994  007F88  00                 	db	0
  1995  007F89  01                 	db	1
  1996  007F8A  00                 	db	0
  1997  007F8B  00                 	db	0
  1998  007F8C  00                 	db	0
  1999  007F8D  01                 	db	1
  2000  007F8E  01                 	db	1
  2001  007F8F                     __end_ofyellow_cross@check_eo:
  2002                           	opt callstack 0
  2003  007F8F                     yellow_cross@cross_eo:
  2004                           	opt callstack 0
  2005  007F8F  00                 	db	0
  2006  007F90  00                 	db	0
  2007  007F91  00                 	db	0
  2008  007F92  00                 	db	0
  2009  007F93                     __end_ofyellow_cross@cross_eo:
  2010                           	opt callstack 0
  2011  0000                     _ANSELCbits	set	3898
  2012  0000                     _ANSELB	set	3897
  2013  0000                     _ANSELA	set	3896
  2014  0000                     _LATBbits	set	3978
  2015  0000                     _PORTBbits	set	3969
  2016  0000                     _TRISAbits	set	3986
  2017  0000                     _TRISCbits	set	3988
  2018  0000                     _SSP1STAT	set	4039
  2019  0000                     _SSP1CON1	set	4038
  2020  0000                     _SSP1CON1bits	set	4038
  2021  0000                     _LATAbits	set	3977
  2022  0000                     _SSP1STATbits	set	4039
  2023  0000                     _SSP1BUF	set	4041
  2024  0000                     _ADCON1	set	4033
  2025  0000                     _ADCON2	set	4032
  2026  0000                     _TRISB	set	3987
  2027  0000                     _PORTB	set	3969
  2028  0000                     _PORTA	set	3968
  2029  0000                     _TRISA	set	3986
  2030  0000                     _OSCCON	set	4051
  2031  0000                     _EECON2	set	4007
  2032  0000                     _EECON1bits	set	4006
  2033  0000                     _EEDATA	set	4008
  2034  0000                     _EEADR	set	4009
  2035  0000                     _INTCONbits	set	4082
  2036  0000                     _PLLEN	set	31966
  2037  007F93                     STR_2:
  2038  007F93  73                 	db	115	;'s'
  2039  007F94  74                 	db	116	;'t'
  2040  007F95  61                 	db	97	;'a'
  2041  007F96  74                 	db	116	;'t'
  2042  007F97  65                 	db	101	;'e'
  2043  007F98  00                 	db	0
  2044  007F99                     STR_1:
  2045  007F99  64                 	db	100	;'d'
  2046  007F9A  65                 	db	101	;'e'
  2047  007F9B  66                 	db	102	;'f'
  2048  007F9C  66                 	db	102	;'f'
  2049  007F9D  00                 	db	0
  2050  007F9E                     STR_14:
  2051  007F9E  42                 	db	66	;'B'
  2052  007F9F  27                 	db	39
  2053  007FA0  00                 	db	0
  2054  007FA1                     STR_10:
  2055  007FA1  44                 	db	68	;'D'
  2056  007FA2  27                 	db	39
  2057  007FA3  00                 	db	0
  2058  007FA4                     STR_27:
  2059  007FA4  45                 	db	69	;'E'
  2060  007FA5  27                 	db	39
  2061  007FA6  00                 	db	0
  2062  007FA7                     STR_13:
  2063  007FA7  46                 	db	70	;'F'
  2064  007FA8  27                 	db	39
  2065  007FA9  00                 	db	0
  2066  007FAA                     STR_11:
  2067  007FAA  4C                 	db	76	;'L'
  2068  007FAB  27                 	db	39
  2069  007FAC  00                 	db	0
  2070  007FAD                     STR_29:
  2071  007FAD  4D                 	db	77	;'M'
  2072  007FAE  27                 	db	39
  2073  007FAF  00                 	db	0
  2074  007FB0                     STR_12:
  2075  007FB0  52                 	db	82	;'R'
  2076  007FB1  27                 	db	39
  2077  007FB2  00                 	db	0
  2078  007FB3                     STR_28:
  2079  007FB3  53                 	db	83	;'S'
  2080  007FB4  27                 	db	39
  2081  007FB5  00                 	db	0
  2082  007FB6                     STR_9:
  2083  007FB6  55                 	db	85	;'U'
  2084  007FB7  27                 	db	39
  2085  007FB8  00                 	db	0
  2086  007FB9                     STR_33:
  2087  007FB9  58                 	db	88	;'X'
  2088  007FBA  27                 	db	39
  2089  007FBB  00                 	db	0
  2090  007FBC                     STR_34:
  2091  007FBC  59                 	db	89	;'Y'
  2092  007FBD  27                 	db	39
  2093  007FBE  00                 	db	0
  2094  007FBF                     STR_35:
  2095  007FBF  5A                 	db	90	;'Z'
  2096  007FC0  27                 	db	39
  2097  007FC1  00                 	db	0
  2098  007FC2                     STR_20:
  2099  007FC2  42                 	db	66	;'B'
  2100  007FC3  32                 	db	50	;'2'
  2101  007FC4  00                 	db	0
  2102  007FC5                     STR_16:
  2103  007FC5  44                 	db	68	;'D'
  2104  007FC6  32                 	db	50	;'2'
  2105  007FC7  00                 	db	0
  2106  007FC8                     STR_24:
  2107  007FC8  45                 	db	69	;'E'
  2108  007FC9  32                 	db	50	;'2'
  2109  007FCA  00                 	db	0
  2110  007FCB                     STR_19:
  2111  007FCB  46                 	db	70	;'F'
  2112  007FCC  32                 	db	50	;'2'
  2113  007FCD  00                 	db	0
  2114  007FCE                     STR_17:
  2115  007FCE  4C                 	db	76	;'L'
  2116  007FCF  32                 	db	50	;'2'
  2117  007FD0  00                 	db	0
  2118  007FD1                     STR_26:
  2119  007FD1  4D                 	db	77	;'M'
  2120  007FD2  32                 	db	50	;'2'
  2121  007FD3  00                 	db	0
  2122  007FD4                     STR_18:
  2123  007FD4  52                 	db	82	;'R'
  2124  007FD5  32                 	db	50	;'2'
  2125  007FD6  00                 	db	0
  2126  007FD7                     STR_25:
  2127  007FD7  53                 	db	83	;'S'
  2128  007FD8  32                 	db	50	;'2'
  2129  007FD9  00                 	db	0
  2130  007FDA                     STR_15:
  2131  007FDA  55                 	db	85	;'U'
  2132  007FDB  32                 	db	50	;'2'
  2133  007FDC  00                 	db	0
  2134  007FDD                     STR_36:
  2135  007FDD  58                 	db	88	;'X'
  2136  007FDE  32                 	db	50	;'2'
  2137  007FDF  00                 	db	0
  2138  007FE0                     STR_37:
  2139  007FE0  59                 	db	89	;'Y'
  2140  007FE1  32                 	db	50	;'2'
  2141  007FE2  00                 	db	0
  2142  007FE3                     STR_38:
  2143  007FE3  5A                 	db	90	;'Z'
  2144  007FE4  32                 	db	50	;'2'
  2145  007FE5  00                 	db	0
  2146  007FE6                     STR_8:
  2147  007FE6  42                 	db	66	;'B'
  2148  007FE7  00                 	db	0
  2149  007FE8                     STR_4:
  2150  007FE8  44                 	db	68	;'D'
  2151  007FE9  00                 	db	0
  2152  007FEA                     STR_21:
  2153  007FEA  45                 	db	69	;'E'
  2154  007FEB  00                 	db	0
  2155  007FEC                     STR_7:
  2156  007FEC  46                 	db	70	;'F'
  2157  007FED  00                 	db	0
  2158  007FEE                     STR_5:
  2159  007FEE  4C                 	db	76	;'L'
  2160  007FEF  00                 	db	0
  2161  007FF0                     STR_23:
  2162  007FF0  4D                 	db	77	;'M'
  2163  007FF1  00                 	db	0
  2164  007FF2                     STR_6:
  2165  007FF2  52                 	db	82	;'R'
  2166  007FF3  00                 	db	0
  2167  007FF4                     STR_22:
  2168  007FF4  53                 	db	83	;'S'
  2169  007FF5  00                 	db	0
  2170  007FF6                     STR_3:
  2171  007FF6  55                 	db	85	;'U'
  2172  007FF7  00                 	db	0
  2173  007FF8                     STR_30:
  2174  007FF8  58                 	db	88	;'X'
  2175  007FF9  00                 	db	0
  2176  007FFA                     STR_31:
  2177  007FFA  59                 	db	89	;'Y'
  2178  007FFB  00                 	db	0
  2179  007FFC                     STR_32:
  2180  007FFC  5A                 	db	90	;'Z'
  2181  007FFD  00                 	db	0
  2182  0000                     
  2183                           ; #config settings
  2184  007FFE  00                 	db	0	; dummy byte at the end
  2185  0000                     
  2186                           	psect	cinit
  2187  00309C                     __pcinit:
  2188                           	opt callstack 0
  2189  00309C                     start_initialization:
  2190                           	opt callstack 0
  2191  00309C                     __initialization:
  2192                           	opt callstack 0
  2193                           
  2194                           ; Initialize objects allocated to BANK1 (75 bytes)
  2195                           ; load TBLPTR registers with __pidataBANK1
  2196  00309C  0EB9               	movlw	low __pidataBANK1
  2197  00309E  6EF6               	movwf	tblptrl,c
  2198  0030A0  0E2F               	movlw	high __pidataBANK1
  2199  0030A2  6EF7               	movwf	tblptrh,c
  2200  0030A4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  2201  0030A6  6EF8               	movwf	tblptru,c
  2202  0030A8  EE01  F073         	lfsr	0,__pdataBANK1
  2203  0030AC  EE10 F04B          	lfsr	1,75
  2204  0030B0                     copy_data0:
  2205  0030B0  0009               	tblrd		*+
  2206  0030B2  CFF5 FFEE          	movff	tablat,postinc0
  2207  0030B6  50E5               	movf	postdec1,w,c
  2208  0030B8  50E1               	movf	fsr1l,w,c
  2209  0030BA  E1FA               	bnz	copy_data0
  2210                           
  2211                           ; Clear objects allocated to BANK2 (46 bytes)
  2212  0030BC  EE02  F000         	lfsr	0,__pbssBANK2
  2213  0030C0  0E2E               	movlw	46
  2214  0030C2                     clear_0:
  2215  0030C2  6AEE               	clrf	postinc0,c
  2216  0030C4  06E8               	decf	wreg,f,c
  2217  0030C6  E1FD               	bnz	clear_0
  2218                           
  2219                           ; Clear objects allocated to BANK1 (115 bytes)
  2220  0030C8  EE01  F000         	lfsr	0,__pbssBANK1
  2221  0030CC  0E73               	movlw	115
  2222  0030CE                     clear_1:
  2223  0030CE  6AEE               	clrf	postinc0,c
  2224  0030D0  06E8               	decf	wreg,f,c
  2225  0030D2  E1FD               	bnz	clear_1
  2226                           
  2227                           ; Clear objects allocated to BANK0 (27 bytes)
  2228  0030D4  EE00  F0E3         	lfsr	0,__pbssBANK0
  2229  0030D8  0E1B               	movlw	27
  2230  0030DA                     clear_2:
  2231  0030DA  6AEE               	clrf	postinc0,c
  2232  0030DC  06E8               	decf	wreg,f,c
  2233  0030DE  E1FD               	bnz	clear_2
  2234  0030E0                     end_of_initialization:
  2235                           	opt callstack 0
  2236  0030E0                     __end_of__initialization:
  2237                           	opt callstack 0
  2238  0030E0  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2239  0030E2  6EF8               	movwf	tblptru,c
  2240  0030E4  0100               	movlb	0
  2241  0030E6  EF25  F02C         	goto	_main	;jump to C main() function
  2242                           
  2243                           	psect	bssBANK0
  2244  0000E3                     __pbssBANK0:
  2245                           	opt callstack 0
  2246  0000E3                     	ds	3
  2247  0000E6                     _opereation_count:
  2248                           	opt callstack 0
  2249  0000E6                     	ds	2
  2250  0000E8                     _total_number_of_moves:
  2251                           	opt callstack 0
  2252  0000E8                     	ds	2
  2253  0000EA                     _rand_seed:
  2254                           	opt callstack 0
  2255  0000EA                     	ds	2
  2256  0000EC                     _limit_count:
  2257                           	opt callstack 0
  2258  0000EC                     	ds	1
  2259  0000ED                     _opereation_over_flag:
  2260                           	opt callstack 0
  2261  0000ED                     	ds	1
  2262  0000EE                     _ARRAY_skip_CS:
  2263                           	opt callstack 0
  2264  0000EE                     	ds	1
  2265  0000EF                     _GET_COMMAND:
  2266                           	opt callstack 0
  2267  0000EF                     	ds	1
  2268  0000F0                     _POWER:
  2269                           	opt callstack 0
  2270  0000F0                     	ds	1
  2271  0000F1                     _past_command_count_3:
  2272                           	opt callstack 0
  2273  0000F1                     	ds	1
  2274  0000F2                     _past_command_3:
  2275                           	opt callstack 0
  2276  0000F2                     	ds	1
  2277  0000F3                     _mode_cube_end:
  2278                           	opt callstack 0
  2279  0000F3                     	ds	1
  2280  0000F4                     _TURN_COUNT:
  2281                           	opt callstack 0
  2282  0000F4                     	ds	1
  2283  0000F5                     _game_flag:
  2284                           	opt callstack 0
  2285  0000F5                     	ds	1
  2286  0000F6                     _seed:
  2287                           	opt callstack 0
  2288  0000F6                     	ds	8
  2289                           
  2290                           	psect	bssBANK1
  2291  000100                     __pbssBANK1:
  2292                           	opt callstack 0
  2293  000100                     	ds	3
  2294  000103                     _shortest_command:
  2295                           	opt callstack 0
  2296  000103                     	ds	2
  2297  000105                     _Special_input_0:
  2298                           	opt callstack 0
  2299  000105                     	ds	1
  2300  000106                     _shortest_depth:
  2301                           	opt callstack 0
  2302  000106                     	ds	1
  2303  000107                     _LED_ARRAY:
  2304                           	opt callstack 0
  2305  000107                     	ds	54
  2306  00013D                     _LED_Light:
  2307                           	opt callstack 0
  2308  00013D                     	ds	54
  2309                           
  2310                           	psect	dataBANK1
  2311  000173                     __pdataBANK1:
  2312                           	opt callstack 0
  2313  000173                     _LED_COLOR:
  2314                           	opt callstack 0
  2315  000173                     	ds	14
  2316  000181                     _SOUND_NOTE:
  2317                           	opt callstack 0
  2318  000181                     	ds	14
  2319  00018F                     _sound_flag:
  2320                           	opt callstack 0
  2321  00018F                     	ds	1
  2322  000190                     _state_CE:
  2323                           	opt callstack 0
  2324  000190                     	ds	46
  2325                           
  2326                           	psect	bssBANK2
  2327  000200                     __pbssBANK2:
  2328                           	opt callstack 0
  2329  000200                     _save_CE:
  2330                           	opt callstack 0
  2331  000200                     	ds	46
  2332                           
  2333                           	psect	cstackBANK1
  2334  0001BE                     __pcstackBANK1:
  2335                           	opt callstack 0
  2336  0001BE                     Special_input@SS:
  2337                           	opt callstack 0
  2338                           
  2339                           ; 1 bytes @ 0x0
  2340  0001BE                     	ds	1
  2341  0001BF                     Special_input@if_can_get:
  2342                           	opt callstack 0
  2343                           
  2344                           ; 1 bytes @ 0x1
  2345  0001BF                     	ds	1
  2346  0001C0                     Special_input@j:
  2347                           	opt callstack 0
  2348                           
  2349                           ; 2 bytes @ 0x2
  2350  0001C0                     	ds	2
  2351  0001C2                     Special_input@i:
  2352                           	opt callstack 0
  2353                           
  2354                           ; 1 bytes @ 0x4
  2355  0001C2                     	ds	1
  2356  0001C3                     Special_input@deep_flag:
  2357                           	opt callstack 0
  2358                           
  2359                           ; 1 bytes @ 0x5
  2360  0001C3                     	ds	1
  2361  0001C4                     Special_input@IDA_CE:
  2362                           	opt callstack 0
  2363                           
  2364                           ; 46 bytes @ 0x6
  2365  0001C4                     	ds	46
  2366                           
  2367                           	psect	cstackBANK0
  2368  000060                     __pcstackBANK0:
  2369                           	opt callstack 0
  2370  000060                     ??_if_perfect_white:
  2371  000060                     if_no_pair@i:
  2372                           	opt callstack 0
  2373  000060                     turn_CE@j:
  2374                           	opt callstack 0
  2375                           
  2376                           ; 2 bytes @ 0x0
  2377  000060                     	ds	2
  2378  000062                     turn_CE@past:
  2379                           	opt callstack 0
  2380                           
  2381                           ; 46 bytes @ 0x2
  2382  000062                     	ds	46
  2383  000090                     turn_CE@i:
  2384                           	opt callstack 0
  2385                           
  2386                           ; 2 bytes @ 0x30
  2387  000090                     	ds	2
  2388  000092                     ??_command_turn_ARRAY_3:
  2389                           
  2390                           ; 1 bytes @ 0x32
  2391  000092                     	ds	4
  2392  000096                     ??_yellow_cross:
  2393  000096                     ??_if_start_step8:
  2394  000096                     ??_make_step_8:
  2395  000096                     make_while_flower@i:
  2396                           	opt callstack 0
  2397  000096                     all_yellow@check_CO:
  2398                           	opt callstack 0
  2399                           
  2400                           ; 1 bytes @ 0x36
  2401  000096                     	ds	1
  2402  000097                     make_white_yellow_flower@mark_count:
  2403                           	opt callstack 0
  2404  000097                     all_yellow@i:
  2405                           	opt callstack 0
  2406                           
  2407                           ; 1 bytes @ 0x37
  2408  000097                     	ds	1
  2409  000098                     ??_make_perfect_white:
  2410  000098                     ??_make_second_flower_perfect:
  2411  000098                     ??_make_step_7:
  2412  000098                     make_white_yellow_flower@t:
  2413                           	opt callstack 0
  2414  000098                     all_yellow@j:
  2415                           	opt callstack 0
  2416  000098                     make_step_8@i:
  2417                           	opt callstack 0
  2418                           
  2419                           ; 1 bytes @ 0x38
  2420  000098                     	ds	1
  2421  000099                     if_start_step8@i:
  2422                           	opt callstack 0
  2423                           
  2424                           ; 1 bytes @ 0x39
  2425  000099                     	ds	1
  2426  00009A                     make_step_7@i:
  2427                           	opt callstack 0
  2428                           
  2429                           ; 1 bytes @ 0x3A
  2430  00009A                     	ds	1
  2431  00009B                     make_second_flower_perfect@flont_0:
  2432                           	opt callstack 0
  2433  00009B                     yellow_cross@j:
  2434                           	opt callstack 0
  2435                           
  2436                           ; 1 bytes @ 0x3B
  2437  00009B                     	ds	1
  2438  00009C                     make_second_flower_perfect@j:
  2439                           	opt callstack 0
  2440  00009C                     yellow_cross@i:
  2441                           	opt callstack 0
  2442  00009C                     make_perfect_white@i:
  2443                           	opt callstack 0
  2444                           
  2445                           ; 1 bytes @ 0x3C
  2446  00009C                     	ds	1
  2447  00009D                     make_second_flower_perfect@search_ep:
  2448                           	opt callstack 0
  2449  00009D                     make_perfect_white@EPW_count:
  2450                           	opt callstack 0
  2451                           
  2452                           ; 1 bytes @ 0x3D
  2453  00009D                     	ds	1
  2454  00009E                     make_second_flower_perfect@i:
  2455                           	opt callstack 0
  2456  00009E                     make_perfect_white@j:
  2457                           	opt callstack 0
  2458                           
  2459                           ; 1 bytes @ 0x3E
  2460  00009E                     	ds	1
  2461  00009F                     make_perfect_white@mark_count:
  2462                           	opt callstack 0
  2463                           
  2464                           ; 1 bytes @ 0x3F
  2465  00009F                     	ds	1
  2466  0000A0                     made_cube@skip_CS:
  2467                           	opt callstack 0
  2468                           
  2469                           ; 1 bytes @ 0x40
  2470  0000A0                     	ds	1
  2471  0000A1                     ??_made_cube:
  2472                           
  2473                           ; 1 bytes @ 0x41
  2474  0000A1                     	ds	2
  2475  0000A3                     made_cube@Light_ON_OFF:
  2476                           	opt callstack 0
  2477                           
  2478                           ; 1 bytes @ 0x43
  2479  0000A3                     	ds	1
  2480  0000A4                     made_cube@i:
  2481                           	opt callstack 0
  2482                           
  2483                           ; 1 bytes @ 0x44
  2484  0000A4                     	ds	1
  2485  0000A5                     made_cube@test_flag:
  2486                           	opt callstack 0
  2487                           
  2488                           ; 1 bytes @ 0x45
  2489  0000A5                     	ds	1
  2490  0000A6                     animation_4@rand_seed:
  2491                           	opt callstack 0
  2492                           
  2493                           ; 2 bytes @ 0x46
  2494  0000A6                     	ds	2
  2495  0000A8                     ??_animation_4:
  2496                           
  2497                           ; 1 bytes @ 0x48
  2498  0000A8                     	ds	2
  2499  0000AA                     animation_4@anime_4_before_CE:
  2500                           	opt callstack 0
  2501                           
  2502                           ; 46 bytes @ 0x4A
  2503  0000AA                     	ds	46
  2504  0000D8                     ??_Special_input:
  2505                           
  2506                           ; 1 bytes @ 0x78
  2507  0000D8                     	ds	3
  2508  0000DB                     ??_main:
  2509                           
  2510                           ; 1 bytes @ 0x7B
  2511  0000DB                     	ds	2
  2512  0000DD                     main@SPI_DATA:
  2513                           	opt callstack 0
  2514                           
  2515                           ; 1 bytes @ 0x7D
  2516  0000DD                     	ds	1
  2517  0000DE                     main@EEROM_FLAG:
  2518                           	opt callstack 0
  2519                           
  2520                           ; 1 bytes @ 0x7E
  2521  0000DE                     	ds	1
  2522  0000DF                     main@i_559:
  2523                           	opt callstack 0
  2524                           
  2525                           ; 2 bytes @ 0x7F
  2526  0000DF                     	ds	2
  2527  0000E1                     main@q:
  2528                           	opt callstack 0
  2529                           
  2530                           ; 1 bytes @ 0x81
  2531  0000E1                     	ds	1
  2532  0000E2                     main@i:
  2533                           	opt callstack 0
  2534                           
  2535                           ; 1 bytes @ 0x82
  2536  0000E2                     	ds	1
  2537                           
  2538                           	psect	cstackCOMRAM
  2539  000001                     __pcstackCOMRAM:
  2540                           	opt callstack 0
  2541  000001                     ??_so1:
  2542  000001                     ??_ra1:
  2543  000001                     ??_do2:
  2544  000001                     ??_SPI_readM_2:
  2545  000001                     ??_fa1:
  2546  000001                     ??_SPI0_D2S0:
  2547  000001                     ??_SPI1_D2S0:
  2548  000001                     ??_SPI2_D2S0:
  2549  000001                     ??_SPI3_D2S0:
  2550  000001                     ??_SPI4_D2S0:
  2551  000001                     ??_SPI5_D2S0:
  2552  000001                     ??_if_game_end:
  2553  000001                     ??_if_solution_end:
  2554  000001                     ??_set_E:
  2555  000001                     ??_ARRAY_SIDE_TURN:
  2556  000001                     ??_if_perfect_yellow:
  2557  000001                     ??_if_2pair:
  2558  000001                     ??_if_all_2pair:
  2559  000001                     ?___wmul:
  2560                           	opt callstack 0
  2561  000001                     ?___omul:
  2562                           	opt callstack 0
  2563  000001                     DATAEE_WriteByte@bData:
  2564                           	opt callstack 0
  2565  000001                     DATAEE_ReadByte@bAdd:
  2566                           	opt callstack 0
  2567  000001                     OUT_CHECK@LED_POWER:
  2568                           	opt callstack 0
  2569  000001                     if_CP@s_cp:
  2570                           	opt callstack 0
  2571  000001                     if_EP@s_ep:
  2572                           	opt callstack 0
  2573  000001                     initialization_shortest_command@i:
  2574                           	opt callstack 0
  2575  000001                     LED_RET@i:
  2576                           	opt callstack 0
  2577  000001                     if_yellow_eo@eo:
  2578                           	opt callstack 0
  2579  000001                     if_yellow_co@co:
  2580                           	opt callstack 0
  2581  000001                     operation_limit@count:
  2582                           	opt callstack 0
  2583  000001                     ___wmul@multiplier:
  2584                           	opt callstack 0
  2585  000001                     srand@s:
  2586                           	opt callstack 0
  2587  000001                     do1@i:
  2588                           	opt callstack 0
  2589  000001                     re1@i:
  2590                           	opt callstack 0
  2591  000001                     mi1@i:
  2592                           	opt callstack 0
  2593  000001                     si1@i:
  2594                           	opt callstack 0
  2595  000001                     ___omul@multiplier:
  2596                           	opt callstack 0
  2597  000001                     ARRAY_LINE_TURN@MEN_NUM_1:
  2598                           	opt callstack 0
  2599  000001                     over_write_CE@write_CE:
  2600                           	opt callstack 0
  2601  000001                     over_write_CE_from_A_to_B@A:
  2602                           	opt callstack 0
  2603                           
  2604                           ; 46 bytes @ 0x0
  2605  000001                     	ds	1
  2606  000002                     DATAEE_WriteByte@bAdd:
  2607                           	opt callstack 0
  2608  000002                     if_CP@e_cp:
  2609                           	opt callstack 0
  2610  000002                     if_EP@e_ep:
  2611                           	opt callstack 0
  2612  000002                     depth_add@NEXT_FLAG:
  2613                           	opt callstack 0
  2614  000002                     Create_shortest_command_depp_N1@return_num:
  2615                           	opt callstack 0
  2616  000002                     EEROM_R_DEFF@i:
  2617                           	opt callstack 0
  2618  000002                     OUT_CHECK@i:
  2619                           	opt callstack 0
  2620  000002                     fa1@i:
  2621                           	opt callstack 0
  2622  000002                     so1@i:
  2623                           	opt callstack 0
  2624  000002                     ra1@i:
  2625                           	opt callstack 0
  2626  000002                     do2@i:
  2627                           	opt callstack 0
  2628                           
  2629                           ; 4 bytes @ 0x1
  2630  000002                     	ds	1
  2631  000003                     ??_operation_limit:
  2632  000003                     ??_if_yellow_eo:
  2633  000003                     ??_if_yellow_co:
  2634  000003                     ??_srand:
  2635  000003                     SPI0_D2S0@SPI_DATA:
  2636                           	opt callstack 0
  2637  000003                     SPI1_D2S0@SPI_DATA:
  2638                           	opt callstack 0
  2639  000003                     SPI2_D2S0@SPI_DATA:
  2640                           	opt callstack 0
  2641  000003                     SPI3_D2S0@SPI_DATA:
  2642                           	opt callstack 0
  2643  000003                     SPI4_D2S0@SPI_DATA:
  2644                           	opt callstack 0
  2645  000003                     SPI5_D2S0@SPI_DATA:
  2646                           	opt callstack 0
  2647  000003                     DATAEE_WriteByte@GIEBitValue:
  2648                           	opt callstack 0
  2649  000003                     SPI_readM_2@csPIN:
  2650                           	opt callstack 0
  2651  000003                     depth_add@check_depth:
  2652                           	opt callstack 0
  2653  000003                     Create_shortest_command_depp_N1@check_depth:
  2654                           	opt callstack 0
  2655  000003                     ___wmul@multiplicand:
  2656                           	opt callstack 0
  2657                           
  2658                           ; 2 bytes @ 0x2
  2659  000003                     	ds	1
  2660  000004                     if_game_end@deff:
  2661                           	opt callstack 0
  2662  000004                     SPI_readM_2@data:
  2663                           	opt callstack 0
  2664  000004                     OUT_RED@LED_POWER:
  2665                           	opt callstack 0
  2666  000004                     OUT_GREEN@LED_POWER:
  2667                           	opt callstack 0
  2668  000004                     OUT_BLUE@LED_POWER:
  2669                           	opt callstack 0
  2670  000004                     OUT_WHITE@LED_POWER:
  2671                           	opt callstack 0
  2672  000004                     OUT_YELLOW@LED_POWER:
  2673                           	opt callstack 0
  2674  000004                     OUT_ORANGE@LED_POWER:
  2675                           	opt callstack 0
  2676  000004                     if_CP@check:
  2677                           	opt callstack 0
  2678  000004                     if_EP@check:
  2679                           	opt callstack 0
  2680  000004                     EEROM_W_SAVE@i_275:
  2681                           	opt callstack 0
  2682  000004                     EEROM_R_DEFF@i_294:
  2683                           	opt callstack 0
  2684  000004                     EEROM_W_DEFF@i:
  2685                           	opt callstack 0
  2686                           
  2687                           ; 2 bytes @ 0x3
  2688  000004                     	ds	1
  2689  000005                     if_game_end@err_flag:
  2690                           	opt callstack 0
  2691  000005                     if_perfect_yellow@distortion:
  2692                           	opt callstack 0
  2693  000005                     if_CP@DATA:
  2694                           	opt callstack 0
  2695  000005                     if_EP@i:
  2696                           	opt callstack 0
  2697  000005                     SPI_readM_2@i:
  2698                           	opt callstack 0
  2699  000005                     ___wmul@product:
  2700                           	opt callstack 0
  2701                           
  2702                           ; 2 bytes @ 0x4
  2703  000005                     	ds	1
  2704  000006                     ??_if_second_flower_perfect:
  2705  000006                     if_game_end@j:
  2706                           	opt callstack 0
  2707  000006                     if_perfect_yellow@i:
  2708                           	opt callstack 0
  2709  000006                     if_CP@i:
  2710                           	opt callstack 0
  2711  000006                     if_yellow_eo@i:
  2712                           	opt callstack 0
  2713  000006                     if_yellow_co@i:
  2714                           	opt callstack 0
  2715  000006                     EEROM_W_SAVE@i_276:
  2716                           	opt callstack 0
  2717  000006                     EEROM_R_DEFF@i_295:
  2718                           	opt callstack 0
  2719  000006                     EEROM_W_DEFF@i_301:
  2720                           	opt callstack 0
  2721                           
  2722                           ; 2 bytes @ 0x5
  2723  000006                     	ds	1
  2724  000007                     ??_set_all_LED_ARRAY:
  2725  000007                     ??_convert_ROTtoLED:
  2726  000007                     if_game_end@i:
  2727                           	opt callstack 0
  2728  000007                     SPI_RET_2@j:
  2729                           	opt callstack 0
  2730  000007                     str_cmp_const@p1:
  2731                           	opt callstack 0
  2732  000007                     OUT_LED_ARRAY@LED_COLOR_ARRAY_2D:
  2733                           	opt callstack 0
  2734  000007                     if_all_2pair@y:
  2735                           	opt callstack 0
  2736                           
  2737                           ; 2 bytes @ 0x6
  2738  000007                     	ds	1
  2739  000008                     ??_SPI_RET:
  2740  000008                     if_solution_end@xo:
  2741                           	opt callstack 0
  2742  000008                     EEROM_W_SAVE@i_277:
  2743                           	opt callstack 0
  2744  000008                     EEROM_R_DEFF@i_296:
  2745                           	opt callstack 0
  2746  000008                     EEROM_W_DEFF@i_302:
  2747                           	opt callstack 0
  2748                           
  2749                           ; 2 bytes @ 0x7
  2750  000008                     	ds	1
  2751  000009                     ARRAY_SIDE_TURN@temp:
  2752                           	opt callstack 0
  2753  000009                     OUT_LED_ARRAY@LED_POWER:
  2754                           	opt callstack 0
  2755  000009                     if_solution_end@i:
  2756                           	opt callstack 0
  2757  000009                     set_all_LED_ARRAY@color:
  2758                           	opt callstack 0
  2759  000009                     str_cmp_const@p2:
  2760                           	opt callstack 0
  2761  000009                     if_all_2pair@if_flag:
  2762                           	opt callstack 0
  2763  000009                     ___omul@multiplicand:
  2764                           	opt callstack 0
  2765                           
  2766                           ; 8 bytes @ 0x8
  2767  000009                     	ds	1
  2768  00000A                     ??_OUT_LED_ARRAY:
  2769  00000A                     SPI_RET@i:
  2770                           	opt callstack 0
  2771  00000A                     ARRAY_SIDE_TURN@surface:
  2772                           	opt callstack 0
  2773  00000A                     if_solution_end@p_start:
  2774                           	opt callstack 0
  2775  00000A                     EEROM_W_SAVE@i_278:
  2776                           	opt callstack 0
  2777  00000A                     EEROM_R_DEFF@i_297:
  2778                           	opt callstack 0
  2779  00000A                     EEROM_W_DEFF@i_303:
  2780                           	opt callstack 0
  2781  00000A                     set_all_LED_ARRAY@i:
  2782                           	opt callstack 0
  2783                           
  2784                           ; 2 bytes @ 0x9
  2785  00000A                     	ds	1
  2786  00000B                     ??_str_cmp_const:
  2787  00000B                     ARRAY_SIDE_TURN@i:
  2788                           	opt callstack 0
  2789  00000B                     if_solution_end@j:
  2790                           	opt callstack 0
  2791  00000B                     if_second_flower_perfect@j:
  2792                           	opt callstack 0
  2793  00000B                     if_all_2pair@re:
  2794                           	opt callstack 0
  2795  00000B                     convert_ROTtoLED@i:
  2796                           	opt callstack 0
  2797                           
  2798                           ; 2 bytes @ 0xA
  2799  00000B                     	ds	1
  2800  00000C                     EEROM_R_DEFF@READ_ADDRESS:
  2801                           	opt callstack 0
  2802  00000C                     if_second_flower_perfect@i:
  2803                           	opt callstack 0
  2804  00000C                     EEROM_W_SAVE@i_279:
  2805                           	opt callstack 0
  2806  00000C                     EEROM_W_DEFF@i_304:
  2807                           	opt callstack 0
  2808  00000C                     set_all_LED_ARRAY@j:
  2809                           	opt callstack 0
  2810                           
  2811                           ; 2 bytes @ 0xB
  2812  00000C                     	ds	1
  2813  00000D                     if_all_2pair@i:
  2814                           	opt callstack 0
  2815  00000D                     convert_ROTtoLED@j:
  2816                           	opt callstack 0
  2817                           
  2818                           ; 2 bytes @ 0xC
  2819  00000D                     	ds	1
  2820  00000E                     EEROM_W_SAVE@WRITE_ADDRESS:
  2821                           	opt callstack 0
  2822  00000E                     EEROM_W_DEFF@WRITE_ADDRESS:
  2823                           	opt callstack 0
  2824  00000E                     OUT_LED_ARRAY@LED_COLOR_ARRAY:
  2825                           	opt callstack 0
  2826                           
  2827                           ; 54 bytes @ 0xD
  2828  00000E                     	ds	1
  2829  00000F                     EEROM_W_SAVE@i:
  2830                           	opt callstack 0
  2831                           
  2832                           ; 2 bytes @ 0xE
  2833  00000F                     	ds	1
  2834  000010                     str_cmp_const@i:
  2835                           	opt callstack 0
  2836                           
  2837                           ; 2 bytes @ 0xF
  2838  000010                     	ds	1
  2839  000011                     ??_ARRAY_LINE_TURN:
  2840  000011                     ___omul@product:
  2841                           	opt callstack 0
  2842                           
  2843                           ; 8 bytes @ 0x10
  2844  000011                     	ds	1
  2845  000012                     SPI_D2S@SPI_DATA:
  2846                           	opt callstack 0
  2847                           
  2848                           ; 1 bytes @ 0x11
  2849  000012                     	ds	1
  2850  000013                     ??_SPI_D2S:
  2851                           
  2852                           ; 1 bytes @ 0x12
  2853  000013                     	ds	2
  2854  000015                     SPI_D2S@SPI_CS:
  2855                           	opt callstack 0
  2856                           
  2857                           ; 1 bytes @ 0x14
  2858  000015                     	ds	1
  2859  000016                     SPI_D2S@i:
  2860                           	opt callstack 0
  2861                           
  2862                           ; 2 bytes @ 0x15
  2863  000016                     	ds	2
  2864  000018                     SPI_D2S@str_SPI:
  2865                           	opt callstack 0
  2866                           
  2867                           ; 3 bytes @ 0x17
  2868  000018                     	ds	1
  2869  000019                     ?_rand:
  2870                           	opt callstack 0
  2871                           
  2872                           ; 2 bytes @ 0x18
  2873  000019                     	ds	2
  2874  00001B                     ??_rand:
  2875  00001B                     SPI_special@CS:
  2876                           	opt callstack 0
  2877  00001B                     ARRAY_LINE_TURN@temp:
  2878                           	opt callstack 0
  2879                           
  2880                           ; 1 bytes @ 0x1A
  2881  00001B                     	ds	1
  2882  00001C                     ARRAY_LINE_TURN@SURFASE:
  2883                           	opt callstack 0
  2884                           
  2885                           ; 1 bytes @ 0x1B
  2886  00001C                     	ds	1
  2887  00001D                     ARRAY_LINE_TURN@j:
  2888                           	opt callstack 0
  2889                           
  2890                           ; 1 bytes @ 0x1C
  2891  00001D                     	ds	1
  2892  00001E                     ARRAY_LINE_TURN@i:
  2893                           	opt callstack 0
  2894                           
  2895                           ; 1 bytes @ 0x1D
  2896  00001E                     	ds	1
  2897  00001F                     command_turn_ARRAY@s:
  2898                           	opt callstack 0
  2899                           
  2900                           ; 2 bytes @ 0x1E
  2901  00001F                     	ds	2
  2902  000021                     ??_command_turn_ARRAY:
  2903                           
  2904                           ; 1 bytes @ 0x20
  2905  000021                     	ds	2
  2906  000023                     ?___awmod:
  2907                           	opt callstack 0
  2908  000023                     command_turn_ARRAY@for_count:
  2909                           	opt callstack 0
  2910  000023                     ___awmod@dividend:
  2911                           	opt callstack 0
  2912                           
  2913                           ; 2 bytes @ 0x22
  2914  000023                     	ds	1
  2915  000024                     command_turn_ARRAY@for_count_2:
  2916                           	opt callstack 0
  2917                           
  2918                           ; 1 bytes @ 0x23
  2919  000024                     	ds	1
  2920  000025                     command_turn_ARRAY@SIDE_TURN_FLG:
  2921                           	opt callstack 0
  2922  000025                     ___awmod@divisor:
  2923                           	opt callstack 0
  2924                           
  2925                           ; 2 bytes @ 0x24
  2926  000025                     	ds	1
  2927  000026                     command_turn_ARRAY@SIDE_SURFACE:
  2928                           	opt callstack 0
  2929                           
  2930                           ; 1 bytes @ 0x25
  2931  000026                     	ds	1
  2932  000027                     command_turn_ARRAY@for_count_num:
  2933                           	opt callstack 0
  2934  000027                     ___awmod@counter:
  2935                           	opt callstack 0
  2936                           
  2937                           ; 1 bytes @ 0x26
  2938  000027                     	ds	1
  2939  000028                     ___awmod@sign:
  2940                           	opt callstack 0
  2941  000028                     command_turn_ARRAY@MEN_NUM:
  2942                           	opt callstack 0
  2943                           
  2944                           ; 2 bytes @ 0x27
  2945  000028                     	ds	1
  2946  000029                     ??_set_C:
  2947  000029                     ??_branch_off:
  2948  000029                     turn_CE@change:
  2949                           	opt callstack 0
  2950                           
  2951                           ; 2 bytes @ 0x28
  2952  000029                     	ds	1
  2953  00002A                     command_turn_ARRAY@MOVE_LOW:
  2954                           	opt callstack 0
  2955                           
  2956                           ; 1 bytes @ 0x29
  2957  00002A                     	ds	1
  2958  00002B                     ??_turn_CE:
  2959                           
  2960                           ; 1 bytes @ 0x2A
  2961  00002B                     	ds	1
  2962  00002C                     branch_off@a:
  2963                           	opt callstack 0
  2964                           
  2965                           ; 1 bytes @ 0x2B
  2966  00002C                     	ds	1
  2967  00002D                     branch_off@return_num:
  2968                           	opt callstack 0
  2969                           
  2970                           ; 1 bytes @ 0x2C
  2971  00002D                     	ds	1
  2972  00002E                     branch_off@c:
  2973                           	opt callstack 0
  2974                           
  2975                           ; 1 bytes @ 0x2D
  2976  00002E                     	ds	1
  2977  00002F                     ??_over_write_CE:
  2978  00002F                     branch_off@d:
  2979                           	opt callstack 0
  2980  00002F                     over_write_CE_from_A_to_B@B:
  2981                           	opt callstack 0
  2982                           
  2983                           ; 2 bytes @ 0x2E
  2984  00002F                     	ds	1
  2985  000030                     branch_off@b:
  2986                           	opt callstack 0
  2987                           
  2988                           ; 1 bytes @ 0x2F
  2989  000030                     	ds	1
  2990  000031                     ??_over_write_CE_from_A_to_B:
  2991  000031                     branch_off@i:
  2992                           	opt callstack 0
  2993  000031                     over_write_CE@i:
  2994                           	opt callstack 0
  2995                           
  2996                           ; 2 bytes @ 0x30
  2997  000031                     	ds	1
  2998  000032                     branch_off@check_depth:
  2999                           	opt callstack 0
  3000                           
  3001                           ; 1 bytes @ 0x31
  3002  000032                     	ds	1
  3003  000033                     Create_Shoretest_command_Most_deep@check_depth:
  3004                           	opt callstack 0
  3005  000033                     EEROM_R_SAVE@i:
  3006                           	opt callstack 0
  3007  000033                     command_turn_CE@s:
  3008                           	opt callstack 0
  3009                           
  3010                           ; 2 bytes @ 0x32
  3011  000033                     	ds	1
  3012  000034                     Create_Shoretest_command_Most_deep@search_flag:
  3013                           	opt callstack 0
  3014                           
  3015                           ; 1 bytes @ 0x33
  3016  000034                     	ds	1
  3017  000035                     EEROM_R_SAVE@i_283:
  3018                           	opt callstack 0
  3019  000035                     command_turn_CE@i:
  3020                           	opt callstack 0
  3021  000035                     over_write_CE_from_A_to_B@i:
  3022                           	opt callstack 0
  3023                           
  3024                           ; 2 bytes @ 0x34
  3025  000035                     	ds	2
  3026  000037                     EEROM_R_SAVE@i_284:
  3027                           	opt callstack 0
  3028  000037                     shuffle_state_CE@seed_number:
  3029                           	opt callstack 0
  3030                           
  3031                           ; 2 bytes @ 0x36
  3032  000037                     	ds	2
  3033  000039                     ??_shuffle_state_CE:
  3034  000039                     EEROM_R_SAVE@i_285:
  3035                           	opt callstack 0
  3036                           
  3037                           ; 2 bytes @ 0x38
  3038  000039                     	ds	1
  3039  00003A                     shuffle_state_CE@rand_CE:
  3040                           	opt callstack 0
  3041                           
  3042                           ; 20 bytes @ 0x39
  3043  00003A                     	ds	1
  3044  00003B                     EEROM_R_SAVE@i_286:
  3045                           	opt callstack 0
  3046                           
  3047                           ; 2 bytes @ 0x3A
  3048  00003B                     	ds	2
  3049  00003D                     EEROM_R_SAVE@READ_ADDRESS:
  3050                           	opt callstack 0
  3051                           
  3052                           ; 1 bytes @ 0x3C
  3053  00003D                     	ds	7
  3054  000044                     OUT_LED_ARRAY@i_1494:
  3055                           	opt callstack 0
  3056                           
  3057                           ; 2 bytes @ 0x43
  3058  000044                     	ds	2
  3059  000046                     OUT_LED_ARRAY@j:
  3060                           	opt callstack 0
  3061                           
  3062                           ; 2 bytes @ 0x45
  3063  000046                     	ds	2
  3064  000048                     OUT_LED_ARRAY@i:
  3065                           	opt callstack 0
  3066                           
  3067                           ; 2 bytes @ 0x47
  3068  000048                     	ds	2
  3069  00004A                     ??_animation_2:
  3070  00004A                     ??_animation_1:
  3071  00004A                     animation_3@CS:
  3072                           	opt callstack 0
  3073  00004A                     command_turn_ARRAY_2_2@s:
  3074                           	opt callstack 0
  3075  00004A                     command_turn_ARRAY_2_3@s1:
  3076                           	opt callstack 0
  3077                           
  3078                           ; 2 bytes @ 0x49
  3079  00004A                     	ds	1
  3080  00004B                     animation_3@color:
  3081                           	opt callstack 0
  3082                           
  3083                           ; 1 bytes @ 0x4A
  3084  00004B                     	ds	1
  3085  00004C                     ??_command_turn_ARRAY_2_2:
  3086  00004C                     animation_1@CS:
  3087                           	opt callstack 0
  3088  00004C                     animation_2@animation_count:
  3089                           	opt callstack 0
  3090  00004C                     animation_3@animation_count_2:
  3091                           	opt callstack 0
  3092  00004C                     command_turn_ARRAY_2_3@s2:
  3093                           	opt callstack 0
  3094                           
  3095                           ; 2 bytes @ 0x4B
  3096  00004C                     	ds	1
  3097  00004D                     animation_1@i:
  3098                           	opt callstack 0
  3099  00004D                     animation_3@flag:
  3100                           	opt callstack 0
  3101                           
  3102                           ; 1 bytes @ 0x4C
  3103  00004D                     	ds	1
  3104  00004E                     animation_1@animation_count:
  3105                           	opt callstack 0
  3106  00004E                     animation_3@POWER_change:
  3107                           	opt callstack 0
  3108  00004E                     shuffle_state_CE@i:
  3109                           	opt callstack 0
  3110  00004E                     command_turn_ARRAY_2_3@s3:
  3111                           	opt callstack 0
  3112                           
  3113                           ; 2 bytes @ 0x4D
  3114  00004E                     	ds	1
  3115  00004F                     animation_1@j:
  3116                           	opt callstack 0
  3117  00004F                     command_turn_ARRAY_2_2@j:
  3118                           	opt callstack 0
  3119                           
  3120                           ; 2 bytes @ 0x4E
  3121  00004F                     	ds	1
  3122  000050                     ??_command_turn_ARRAY_2_3:
  3123                           
  3124                           ; 1 bytes @ 0x4F
  3125  000050                     	ds	1
  3126  000051                     command_turn_ARRAY_2_2@mouitido:
  3127                           	opt callstack 0
  3128                           
  3129                           ; 1 bytes @ 0x50
  3130  000051                     	ds	1
  3131  000052                     command_turn_ARRAY_2_3@i:
  3132                           	opt callstack 0
  3133  000052                     command_turn_ARRAY_2_2@s2:
  3134                           	opt callstack 0
  3135                           
  3136                           ; 3 bytes @ 0x51
  3137  000052                     	ds	3
  3138  000055                     command_turn_ARRAY_2_2@i:
  3139                           	opt callstack 0
  3140                           
  3141                           ; 2 bytes @ 0x54
  3142  000055                     	ds	2
  3143  000057                     ??_command_turn_ARRAY_3_end:
  3144  000057                     command_turn_ARRAY_2@s:
  3145                           	opt callstack 0
  3146                           
  3147                           ; 2 bytes @ 0x56
  3148  000057                     	ds	2
  3149  000059                     ??_command_turn_ARRAY_2:
  3150                           
  3151                           ; 1 bytes @ 0x58
  3152  000059                     	ds	2
  3153  00005B                     command_turn_ARRAY_3_end@s2:
  3154                           	opt callstack 0
  3155                           
  3156                           ; 3 bytes @ 0x5A
  3157  00005B                     	ds	3
  3158  00005E                     if_perfect_white@j:
  3159                           	opt callstack 0
  3160  00005E                     command_turn_ARRAY_3@s:
  3161                           	opt callstack 0
  3162                           
  3163                           ; 2 bytes @ 0x5D
  3164  00005E                     	ds	1
  3165  00005F                     if_perfect_white@i:
  3166                           	opt callstack 0
  3167                           
  3168                           ; 1 bytes @ 0x5E
  3169  00005F                     	ds	1
  3170  000060                     
  3171                           ; 1 bytes @ 0x5F
  3172 ;;
  3173 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3174 ;;
  3175 ;; *************** function _main *****************
  3176 ;; Defined at:
  3177 ;;		line 94 in file "master/main.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;		None
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;  i               2  127[BANK0 ] int 
  3182 ;;  q               1  129[BANK0 ] unsigned char 
  3183 ;;  SPI_DATA        1  125[BANK0 ] unsigned char 
  3184 ;;  i               1  130[BANK0 ] unsigned char 
  3185 ;;  EEROM_FLAG      1  126[BANK0 ] unsigned char 
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  1    wreg      void 
  3188 ;; Registers used:
  3189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3195 ;;      Params:         0       0       0       0       0       0       0
  3196 ;;      Locals:         0       6       0       0       0       0       0
  3197 ;;      Temps:          0       2       0       0       0       0       0
  3198 ;;      Totals:         0       8       0       0       0       0       0
  3199 ;;Total ram usage:        8 bytes
  3200 ;; Hardware stack levels required when called:   12
  3201 ;; This function calls:
  3202 ;;		_EEROM_GAME_OFF
  3203 ;;		_EEROM_WR_ioport
  3204 ;;		_EEROM_W_DEFF
  3205 ;;		_LED_RET
  3206 ;;		_OUT_LED_ARRAY
  3207 ;;		_SPI_D2S
  3208 ;;		_SPI_M_ioport
  3209 ;;		_SPI_RET
  3210 ;;		_SPI_readM_2
  3211 ;;		_Special_input
  3212 ;;		_animation_2
  3213 ;;		_animation_3
  3214 ;;		_command_turn_ARRAY
  3215 ;;		_command_turn_CE
  3216 ;;		_convert_ROTtoLED
  3217 ;;		_fa1
  3218 ;;		_if_game_end
  3219 ;;		_ioport
  3220 ;;		_re1
  3221 ;;		_set_CES
  3222 ;;		_set_all_LED_ARRAY
  3223 ;; This function is called by:
  3224 ;;		Startup code after reset
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           	psect	text0
  3229  00584A                     __ptext0:
  3230                           	opt callstack 0
  3231  00584A                     _main:
  3232                           	opt callstack 19
  3233                           
  3234                           ;master/main.c: 97:             {
  3235                           
  3236                           ;incstack = 0
  3237  00584A  0E70               	movlw	112
  3238  00584C  6ED3               	movwf	4051,c	;volatile
  3239                           
  3240                           ;master/main.c: 100:                 EEROM_GAME_OFF();
  3241  00584E  8C9B               	bsf	3995,6,c	;volatile
  3242                           
  3243                           ;master/main.c: 102:             }
  3244  005850  ECE9  F014         	call	_ioport	;wreg free
  3245                           
  3246                           ;master/main.c: 103:         }
  3247  005854  EC30  F016         	call	_SPI_M_ioport	;wreg free
  3248                           
  3249                           ;master/main.c: 104:     }
  3250  005858  EC9D  F018         	call	_EEROM_WR_ioport	;wreg free
  3251                           
  3252                           ;master/main.c: 107: }
  3253  00585C  0E06               	movlw	6
  3254  00585E  EC42  F01A         	call	_set_all_LED_ARRAY
  3255                           
  3256                           ;master/main.c: 108: 
  3257  005862  0EC8               	movlw	200
  3258  005864  0100               	movlb	0	; () banked
  3259  005866  6FF0               	movwf	_POWER& (0+255),b
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;master/main.c: 109: char if_game_end(void)
  3263  005868  ECA2  F014         	call	_LED_RET	;wreg free
  3264                           
  3265                           ;master/main.c: 111:     char deff, err_flag = 0;
  3266  00586C  ECFB  F013         	call	_set_CES	;wreg free
  3267                           
  3268                           ;master/main.c: 112:     for (char i = 0; i < 6; i++)
  3269  005870  EC00  F01C         	call	_convert_ROTtoLED	;wreg free
  3270                           
  3271                           ;master/main.c: 113:     {
  3272  005874  0E07               	movlw	low _LED_ARRAY
  3273  005876  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
  3274  005878  0E01               	movlw	high _LED_ARRAY
  3275  00587A  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
  3276  00587C  C0F0  F009         	movff	_POWER,OUT_LED_ARRAY@LED_POWER
  3277  005880  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
  3278                           
  3279                           ;master/main.c: 115:         for (char j = 1; j < 9; j++)
  3280  005884  EC21  F015         	call	_SPI_RET	;wreg free
  3281  005888                     
  3282                           ;master/main.c: 120:         return 1;;master/main.c: 121:     return 0;
  3283  005888  0100               	movlb	0	; () banked
  3284  00588A  4BEA               	infsnz	_rand_seed& (0+255),f,b
  3285  00588C  2BEB               	incf	(_rand_seed+1)& (0+255),f,b
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;master/main.c: 122: }
  3289  00588E  0EFE               	movlw	254
  3290  005890  5DEA               	subwf	_rand_seed& (0+255),w,b
  3291  005892  0EFF               	movlw	255
  3292  005894  59EB               	subwfb	(_rand_seed+1)& (0+255),w,b
  3293  005896  A0D8               	btfss	status,0,c
  3294  005898  D004               	goto	l449
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;master/main.c: 123: 
  3298  00589A  0E00               	movlw	0
  3299  00589C  6FEB               	movwf	(_rand_seed+1)& (0+255),b
  3300  00589E  0E00               	movlw	0
  3301  0058A0  6FEA               	movwf	_rand_seed& (0+255),b
  3302  0058A2                     l449:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;master/main.c: 125: {
  3306  0058A2  0E00               	movlw	0
  3307  0058A4  6FDE               	movwf	main@EEROM_FLAG& (0+255),b
  3308                           
  3309                           ;master/main.c: 126:     ANSELA = 0b00000001;
  3310  0058A6  0E00               	movlw	0
  3311  0058A8  6FE2               	movwf	main@i& (0+255),b
  3312  0058AA                     l10178:
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;master/main.c: 127:     TRISA = 0b00000001;;master/main.c: 128:     PORTA = 0b00000000;
  3316  0058AA  51E2               	movf	main@i& (0+255),w,b
  3317  0058AC  EC48  F01E         	call	_SPI_readM_2
  3318  0058B0  0100               	movlb	0	; () banked
  3319  0058B2  6FDD               	movwf	main@SPI_DATA& (0+255),b
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;master/main.c: 129:     ANSELB = 0;
  3323  0058B4  C0DD  F012         	movff	main@SPI_DATA,SPI_D2S@SPI_DATA
  3324  0058B8  51E2               	movf	main@i& (0+255),w,b
  3325  0058BA  ECD6  F032         	call	_SPI_D2S
  3326  0058BE  0100               	movlb	0	; () banked
  3327  0058C0  6FEF               	movwf	_GET_COMMAND& (0+255),b
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;master/main.c: 130:     PORTB = 0;
  3331  0058C2  51EF               	movf	_GET_COMMAND& (0+255),w,b
  3332  0058C4  B4D8               	btfsc	status,2,c
  3333  0058C6  D005               	goto	l10188
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;master/main.c: 131:     TRISB = 0;;master/main.c: 132: 
  3337  0058C8  EC7F  F019         	call	_re1	;wreg free
  3338                           
  3339                           ;master/main.c: 133:     ADCON2 = 0b00010110;
  3340  0058CC  0E01               	movlw	1
  3341  0058CE  0100               	movlb	0	; () banked
  3342  0058D0  6FDE               	movwf	main@EEROM_FLAG& (0+255),b
  3343  0058D2                     l10188:
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;master/main.c: 135: }
  3347  0058D2  0E64               	movlw	100
  3348  0058D4  19EF               	xorwf	_GET_COMMAND& (0+255),w,b
  3349  0058D6  A4D8               	btfss	status,2,c
  3350  0058D8  D00D               	goto	l10204
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;master/main.c: 136: ;master/main.c: 137: void Special_input(char SS)
  3354  0058DA  0E00               	movlw	0
  3355  0058DC  6FE1               	movwf	main@q& (0+255),b
  3356  0058DE                     l10196:
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;master/main.c: 138: {
  3360  0058DE  ECC8  F018         	call	_fa1	;wreg free
  3361  0058E2  0100               	movlb	0	; () banked
  3362  0058E4  2BE1               	incf	main@q& (0+255),f,b
  3363                           
  3364                           ; BSR set to: 0
  3365  0058E6  0E08               	movlw	8
  3366  0058E8  65E1               	cpfsgt	main@q& (0+255),b
  3367  0058EA  D7F9               	goto	l10196
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;master/main.c: 139:     switch (SS)
  3371  0058EC  51E2               	movf	main@i& (0+255),w,b
  3372  0058EE  EC4A  F034         	call	_Special_input
  3373                           
  3374                           ;master/main.c: 140:     {
  3375  0058F2  D058               	goto	l10232
  3376  0058F4                     l10204:
  3377                           
  3378                           ; BSR set to: 0
  3379  0058F4  0EFE               	movlw	254
  3380  0058F6  19EF               	xorwf	_GET_COMMAND& (0+255),w,b
  3381  0058F8  B4D8               	btfsc	status,2,c
  3382  0058FA  D054               	goto	l10232
  3383                           
  3384                           ; BSR set to: 0
  3385  0058FC  51EF               	movf	_GET_COMMAND& (0+255),w,b
  3386  0058FE  B4D8               	btfsc	status,2,c
  3387  005900  D051               	goto	l10232
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;master/main.c: 146:         {;master/main.c: 147:         case 0:
  3391  005902  51EF               	movf	_GET_COMMAND& (0+255),w,b
  3392  005904  0D05               	mullw	5
  3393  005906  0E02               	movlw	2
  3394  005908  26F3               	addwf	prodl,f,c
  3395  00590A  0E00               	movlw	0
  3396  00590C  22F4               	addwfc	prodh,f,c
  3397  00590E  0E91               	movlw	low _CE_LIST
  3398  005910  24F3               	addwf	prodl,w,c
  3399  005912  6EF6               	movwf	tblptrl,c
  3400  005914  0E7A               	movlw	high _CE_LIST
  3401  005916  20F4               	addwfc	prodh,w,c
  3402  005918  6EF7               	movwf	tblptrh,c
  3403  00591A                     	if	0	;There are less than 3 active tblptr bytes
  3404  00591A                     	endif
  3405  00591A  0009               	tblrd		*+
  3406  00591C  CFF5 F033          	movff	tablat,command_turn_CE@s
  3407  005920  000A               	tblrd		*-
  3408  005922  CFF5 F034          	movff	tablat,command_turn_CE@s+1
  3409  005926  ECEF  F01D         	call	_command_turn_CE	;wreg free
  3410                           
  3411                           ;master/main.c: 148:             POWER = 0;
  3412  00592A  0E00               	movlw	0
  3413  00592C  0100               	movlb	0	; () banked
  3414  00592E  6FE0               	movwf	(main@i_559+1)& (0+255),b
  3415  005930  0E00               	movlw	0
  3416  005932  6FDF               	movwf	main@i_559& (0+255),b
  3417  005934                     l10218:
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;master/main.c: 149:             sound_flag = 1;;master/main.c: 150: 
  3421  005934  51EF               	movf	_GET_COMMAND& (0+255),w,b
  3422  005936  0D05               	mullw	5
  3423  005938  0E02               	movlw	2
  3424  00593A  26F3               	addwf	prodl,f,c
  3425  00593C  0E00               	movlw	0
  3426  00593E  22F4               	addwfc	prodh,f,c
  3427  005940  0E91               	movlw	low _CE_LIST
  3428  005942  24F3               	addwf	prodl,w,c
  3429  005944  6EF6               	movwf	tblptrl,c
  3430  005946  0E7A               	movlw	high _CE_LIST
  3431  005948  20F4               	addwfc	prodh,w,c
  3432  00594A  6EF7               	movwf	tblptrh,c
  3433  00594C                     	if	0	;There are less than 3 active tblptr bytes
  3434  00594C                     	endif
  3435  00594C  0009               	tblrd		*+
  3436  00594E  CFF5 F01F          	movff	tablat,command_turn_ARRAY@s
  3437  005952  000A               	tblrd		*-
  3438  005954  CFF5 F020          	movff	tablat,command_turn_ARRAY@s+1
  3439  005958  EC5C  F02A         	call	_command_turn_ARRAY	;wreg free
  3440                           
  3441                           ;master/main.c: 151:             set_all_LED_ARRAY(6);
  3442  00595C  EC00  F01C         	call	_convert_ROTtoLED	;wreg free
  3443                           
  3444                           ;master/main.c: 152: 
  3445  005960  0E07               	movlw	low _LED_ARRAY
  3446  005962  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
  3447  005964  0E01               	movlw	high _LED_ARRAY
  3448  005966  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
  3449  005968  C0F0  F009         	movff	_POWER,OUT_LED_ARRAY@LED_POWER
  3450  00596C  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
  3451                           
  3452                           ;master/main.c: 153:             OUT_LED_ARRAY(LED_ARRAY, POWER);
  3453  005970  0E0D               	movlw	13
  3454  005972  0100               	movlb	0	; () banked
  3455  005974  6FDC               	movwf	(??_main+1)& (0+255),b
  3456  005976  0E2D               	movlw	45
  3457  005978  6FDB               	movwf	??_main& (0+255),b
  3458  00597A  0ED7               	movlw	215
  3459  00597C                     u8177:
  3460  00597C  2EE8               	decfsz	wreg,f,c
  3461  00597E  D7FE               	bra	u8177
  3462  005980  2FDB               	decfsz	??_main& (0+255),f,b
  3463  005982  D7FC               	bra	u8177
  3464  005984  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  3465  005986  D7FA               	bra	u8177
  3466  005988  D000               	nop2	
  3467                           
  3468                           ;master/main.c: 154:             while (1)
  3469  00598A  0100               	movlb	0	; () banked
  3470  00598C  4BDF               	infsnz	main@i_559& (0+255),f,b
  3471  00598E  2BE0               	incf	(main@i_559+1)& (0+255),f,b
  3472                           
  3473                           ; BSR set to: 0
  3474  005990  BFE0               	btfsc	(main@i_559+1)& (0+255),7,b
  3475  005992  D7D0               	goto	l10218
  3476  005994  51E0               	movf	(main@i_559+1)& (0+255),w,b
  3477  005996  E104               	bnz	u8120
  3478  005998  0E03               	movlw	3
  3479  00599A  5DDF               	subwf	main@i_559& (0+255),w,b
  3480  00599C  A0D8               	btfss	status,0,c
  3481  00599E  D7CA               	goto	l10218
  3482  0059A0                     u8120:
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;master/main.c: 155:             {
  3486  0059A0  0E00               	movlw	0
  3487  0059A2  6FF4               	movwf	_TURN_COUNT& (0+255),b
  3488  0059A4                     l10232:
  3489                           
  3490                           ;master/main.c: 157:                 {
  3491  0059A4  0100               	movlb	0	; () banked
  3492  0059A6  2BE2               	incf	main@i& (0+255),f,b
  3493                           
  3494                           ; BSR set to: 0
  3495  0059A8  0E05               	movlw	5
  3496  0059AA  65E2               	cpfsgt	main@i& (0+255),b
  3497  0059AC  D77E               	goto	l10178
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;master/main.c: 159:                     break;
  3501  0059AE  05DE               	decf	main@EEROM_FLAG& (0+255),w,b
  3502  0059B0  B4D8               	btfsc	status,2,c
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;master/main.c: 160:                 };master/main.c: 161:             }
  3506  0059B2  EC0F  F024         	call	_EEROM_W_DEFF	;wreg free
  3507                           
  3508                           ;master/main.c: 164:             sound_flag = 0;
  3509  0059B6  ECFB  F013         	call	_set_CES	;wreg free
  3510                           
  3511                           ;master/main.c: 165:             POWER = 100;
  3512  0059BA  EC00  F01C         	call	_convert_ROTtoLED	;wreg free
  3513                           
  3514                           ;master/main.c: 166:             break;
  3515  0059BE  0E07               	movlw	low _LED_ARRAY
  3516  0059C0  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
  3517  0059C2  0E01               	movlw	high _LED_ARRAY
  3518  0059C4  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
  3519  0059C6  C0F0  F009         	movff	_POWER,OUT_LED_ARRAY@LED_POWER
  3520  0059CA  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
  3521                           
  3522                           ;master/main.c: 167:         case 2:
  3523  0059CE  0E68               	movlw	104
  3524  0059D0  0100               	movlb	0	; () banked
  3525  0059D2  6FDB               	movwf	??_main& (0+255),b
  3526  0059D4  0EE4               	movlw	228
  3527  0059D6                     u8187:
  3528  0059D6  2EE8               	decfsz	wreg,f,c
  3529  0059D8  D7FE               	bra	u8187
  3530  0059DA  2FDB               	decfsz	??_main& (0+255),f,b
  3531  0059DC  D7FC               	bra	u8187
  3532  0059DE  F000               	nop	
  3533                           
  3534                           ;master/main.c: 169:             POWER = 100;
  3535  0059E0  0100               	movlb	0	; () banked
  3536  0059E2  05F5               	decf	_game_flag& (0+255),w,b
  3537  0059E4  A4D8               	btfss	status,2,c
  3538  0059E6  D750               	goto	l10166
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;master/main.c: 170:             break;;master/main.c: 171:         case 3:
  3542  0059E8  EC0F  F01A         	call	_if_game_end	;wreg free
  3543  0059EC  06E8               	decf	wreg,f,c
  3544  0059EE  A4D8               	btfss	status,2,c
  3545  0059F0  D74B               	goto	l10166
  3546                           
  3547                           ;master/main.c: 172:             sound_flag = 0;;master/main.c: 173:             POWER =
      +                           200;
  3548  0059F2  0E52               	movlw	82
  3549  0059F4  0100               	movlb	0	; () banked
  3550  0059F6  6FDC               	movwf	(??_main+1)& (0+255),b
  3551  0059F8  0E2B               	movlw	43
  3552  0059FA  6FDB               	movwf	??_main& (0+255),b
  3553  0059FC  0E00               	movlw	0
  3554  0059FE                     u8197:
  3555  0059FE  2EE8               	decfsz	wreg,f,c
  3556  005A00  D7FE               	bra	u8197
  3557  005A02  2FDB               	decfsz	??_main& (0+255),f,b
  3558  005A04  D7FC               	bra	u8197
  3559  005A06  2FDC               	decfsz	(??_main+1)& (0+255),f,b
  3560  005A08  D7FA               	bra	u8197
  3561  005A0A  F000               	nop	
  3562                           
  3563                           ;master/main.c: 174:             break;
  3564  005A0C  0E02               	movlw	2
  3565  005A0E  6E4A               	movwf	animation_3@CS,c
  3566  005A10  0E01               	movlw	1
  3567  005A12  ECAF  F01A         	call	_animation_3
  3568                           
  3569                           ;master/main.c: 175:         case 4:
  3570  005A16  EC1E  F014         	call	_EEROM_GAME_OFF	;wreg free
  3571                           
  3572                           ;master/main.c: 176:             sound_flag = 1;
  3573  005A1A  D736               	goto	l10166
  3574  005A1C                     __end_of_main:
  3575                           	opt callstack 0
  3576                           
  3577 ;; *************** function _ioport *****************
  3578 ;; Defined at:
  3579 ;;		line 199 in file "master/main.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;		None
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;		None
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      void 
  3586 ;; Registers used:
  3587 ;;		wreg, status,2
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3593 ;;      Params:         0       0       0       0       0       0       0
  3594 ;;      Locals:         0       0       0       0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0
  3596 ;;      Totals:         0       0       0       0       0       0       0
  3597 ;;Total ram usage:        0 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; This function calls:
  3600 ;;		Nothing
  3601 ;; This function is called by:
  3602 ;;		_main
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           	psect	text1
  3607  0029D2                     __ptext1:
  3608                           	opt callstack 0
  3609  0029D2                     _ioport:
  3610                           	opt callstack 30
  3611                           
  3612                           ;master/main.c: 201:                 deep_flag = 2;
  3613                           
  3614                           ;incstack = 0
  3615  0029D2  0E01               	movlw	1
  3616  0029D4  010F               	movlb	15	; () banked
  3617  0029D6  6F38               	movwf	56,b	;volatile
  3618                           
  3619                           ;master/main.c: 202:                 break;
  3620  0029D8  0E01               	movlw	1
  3621  0029DA  6E92               	movwf	3986,c	;volatile
  3622                           
  3623                           ;master/main.c: 203:             }
  3624  0029DC  0E00               	movlw	0
  3625  0029DE  6E80               	movwf	3968,c	;volatile
  3626                           
  3627                           ;master/main.c: 204:             if (shortest_depth >= 2)
  3628  0029E0  0E00               	movlw	0
  3629  0029E2  6F39               	movwf	57,b	;volatile
  3630                           
  3631                           ;master/main.c: 205:                 break;
  3632  0029E4  0E00               	movlw	0
  3633  0029E6  6E81               	movwf	3969,c	;volatile
  3634                           
  3635                           ;master/main.c: 206:             if (if_can_get == 0)
  3636  0029E8  0E00               	movlw	0
  3637  0029EA  6E93               	movwf	3987,c	;volatile
  3638                           
  3639                           ;master/main.c: 208:                 over_write_CE_from_A_to_B(IDA_CE, &state_CE);
  3640  0029EC  0E16               	movlw	22
  3641  0029EE  6EC0               	movwf	4032,c	;volatile
  3642                           
  3643                           ;master/main.c: 209:                 for (int j = 0; j <= shortest_depth; j++)
  3644  0029F0  0E00               	movlw	0
  3645  0029F2  6EC1               	movwf	4033,c	;volatile
  3646                           
  3647                           ; BSR set to: 15
  3648  0029F4  0012               	return		;funcret
  3649  0029F6                     __end_of_ioport:
  3650                           	opt callstack 0
  3651                           
  3652 ;; *************** function _if_game_end *****************
  3653 ;; Defined at:
  3654 ;;		line 184 in file "master/main.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;		None
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;  j               1    5[COMRAM] unsigned char 
  3659 ;;  i               1    6[COMRAM] unsigned char 
  3660 ;;  err_flag        1    4[COMRAM] unsigned char 
  3661 ;;  deff            1    3[COMRAM] unsigned char 
  3662 ;; Return value:  Size  Location     Type
  3663 ;;                  1    wreg      unsigned char 
  3664 ;; Registers used:
  3665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3666 ;; Tracked objects:
  3667 ;;		On entry : 0/0
  3668 ;;		On exit  : 0/0
  3669 ;;		Unchanged: 0/0
  3670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3671 ;;      Params:         0       0       0       0       0       0       0
  3672 ;;      Locals:         4       0       0       0       0       0       0
  3673 ;;      Temps:          3       0       0       0       0       0       0
  3674 ;;      Totals:         7       0       0       0       0       0       0
  3675 ;;Total ram usage:        7 bytes
  3676 ;; Hardware stack levels used:    1
  3677 ;; This function calls:
  3678 ;;		Nothing
  3679 ;; This function is called by:
  3680 ;;		_main
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           	psect	text2
  3685  00341E                     __ptext2:
  3686                           	opt callstack 0
  3687  00341E                     _if_game_end:
  3688                           	opt callstack 30
  3689                           
  3690                           ;master/main.c: 186:     case 2:
  3691                           
  3692                           ; BSR set to: 15
  3693                           ;incstack = 0
  3694  00341E  0E00               	movlw	0
  3695  003420  6E05               	movwf	if_game_end@err_flag,c
  3696                           
  3697                           ;master/main.c: 187:         if (if_solution_end() == 0)
  3698  003422  0E00               	movlw	0
  3699  003424  6E07               	movwf	if_game_end@i,c
  3700  003426                     l10088:
  3701                           
  3702                           ;master/main.c: 188:             break;;master/main.c: 189:         initialization_short
      +                          est_command();
  3703  003426  5007               	movf	if_game_end@i,w,c
  3704  003428  0D09               	mullw	9
  3705  00342A  0E3D               	movlw	low _LED_Light
  3706  00342C  24F3               	addwf	prodl,w,c
  3707  00342E  6ED9               	movwf	fsr2l,c
  3708  003430  0E01               	movlw	high _LED_Light
  3709  003432  20F4               	addwfc	prodh,w,c
  3710  003434  6EDA               	movwf	fsr2h,c
  3711  003436  50DF               	movf	indf2,w,c
  3712  003438  6E04               	movwf	if_game_end@deff,c
  3713                           
  3714                           ;master/main.c: 190:         char if_can_get, deep_flag;
  3715  00343A  0E01               	movlw	1
  3716  00343C  6E06               	movwf	if_game_end@j,c
  3717  00343E                     l10096:
  3718                           
  3719                           ;master/main.c: 191:         CE IDA_CE;
  3720  00343E  5007               	movf	if_game_end@i,w,c
  3721  003440  0D09               	mullw	9
  3722  003442  0E3D               	movlw	low _LED_Light
  3723  003444  6E01               	movwf	??_if_game_end& (0+255),c
  3724  003446  0E01               	movlw	high _LED_Light
  3725  003448  6E02               	movwf	(??_if_game_end+1)& (0+255),c
  3726  00344A  50F3               	movf	prodl,w,c
  3727  00344C  2601               	addwf	??_if_game_end,f,c
  3728  00344E  50F4               	movf	prodh,w,c
  3729  003450  2202               	addwfc	??_if_game_end+1,f,c
  3730  003452  5006               	movf	if_game_end@j,w,c
  3731  003454  2401               	addwf	??_if_game_end,w,c
  3732  003456  6ED9               	movwf	fsr2l,c
  3733  003458  0E00               	movlw	0
  3734  00345A  2002               	addwfc	??_if_game_end+1,w,c
  3735  00345C  6EDA               	movwf	fsr2h,c
  3736  00345E  5004               	movf	if_game_end@deff,w,c
  3737  003460  18DE               	xorwf	postinc2,w,c
  3738  003462  A4D8               	btfss	status,2,c
  3739                           
  3740                           ;master/main.c: 192:         mode_cube_end = 1;
  3741  003464  2A05               	incf	if_game_end@err_flag,f,c
  3742  003466  2A06               	incf	if_game_end@j,f,c
  3743  003468  0E08               	movlw	8
  3744  00346A  6406               	cpfsgt	if_game_end@j,c
  3745  00346C  D7E8               	goto	l10096
  3746                           
  3747                           ;master/main.c: 193:         make_justice_axis();
  3748  00346E  2A07               	incf	if_game_end@i,f,c
  3749  003470  0E05               	movlw	5
  3750  003472  6407               	cpfsgt	if_game_end@i,c
  3751  003474  D7D8               	goto	l10088
  3752                           
  3753                           ;master/main.c: 194:         over_write_CE_from_A_to_B(state_CE, &IDA_CE);
  3754  003476  5005               	movf	if_game_end@err_flag,w,c
  3755  003478  A4D8               	btfss	status,2,c
  3756  00347A  D002               	goto	l10112
  3757                           
  3758                           ;master/main.c: 195:         deep_flag = 0;
  3759  00347C  0E01               	movlw	1
  3760  00347E  0012               	return	
  3761  003480                     l10112:
  3762                           
  3763                           ;master/main.c: 196:         while (shortest_depth < 2)
  3764  003480  0E00               	movlw	0
  3765  003482  0012               	return		;funcret
  3766  003484                     __end_of_if_game_end:
  3767                           	opt callstack 0
  3768                           
  3769 ;; *************** function _animation_2 *****************
  3770 ;; Defined at:
  3771 ;;		line 22 in file "master/animation.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;		None
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  animation_co    1   75[COMRAM] unsigned char 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  1    wreg      unsigned char 
  3778 ;; Registers used:
  3779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3785 ;;      Params:         0       0       0       0       0       0       0
  3786 ;;      Locals:         1       0       0       0       0       0       0
  3787 ;;      Temps:          2       0       0       0       0       0       0
  3788 ;;      Totals:         3       0       0       0       0       0       0
  3789 ;;Total ram usage:        3 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    4
  3792 ;; This function calls:
  3793 ;;		_OUT_LED_ARRAY
  3794 ;;		_SPI_special
  3795 ;;		___awmod
  3796 ;;		_do1
  3797 ;;		_do2
  3798 ;;		_mi1
  3799 ;;		_ra1
  3800 ;;		_re1
  3801 ;;		_set_all_LED_ARRAY
  3802 ;;		_si1
  3803 ;;		_so1
  3804 ;; This function is called by:
  3805 ;;		_main
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           	psect	text3
  3810  003932                     __ptext3:
  3811                           	opt callstack 0
  3812  003932                     _animation_2:
  3813                           	opt callstack 26
  3814                           
  3815                           ;master/animation.c: 23:     char animation_count;;master/animation.c: 24:     for (anim
      +                          ation_count = 0; animation_count < 50; animation_count++) {
  3816                           
  3817                           ;incstack = 0
  3818  003932  0E00               	movlw	0
  3819  003934  6E4C               	movwf	animation_2@animation_count,c
  3820  003936                     l10122:
  3821                           
  3822                           ;master/animation.c: 25:         set_all_LED_ARRAY(animation_count % 5 + 1);
  3823  003936  C04C  F023         	movff	animation_2@animation_count,___awmod@dividend
  3824  00393A  6A24               	clrf	___awmod@dividend+1,c
  3825  00393C  0E00               	movlw	0
  3826  00393E  6E26               	movwf	___awmod@divisor+1,c
  3827  003940  0E05               	movlw	5
  3828  003942  6E25               	movwf	___awmod@divisor,c
  3829  003944  EC77  F01A         	call	___awmod	;wreg free
  3830  003948  2823               	incf	?___awmod,w,c
  3831  00394A  EC42  F01A         	call	_set_all_LED_ARRAY
  3832                           
  3833                           ;master/animation.c: 27:         (*SOUND_NOTE[animation_count % 7])();
  3834  00394E  C04C  F023         	movff	animation_2@animation_count,___awmod@dividend
  3835  003952  6A24               	clrf	___awmod@dividend+1,c
  3836  003954  0E00               	movlw	0
  3837  003956  6E26               	movwf	___awmod@divisor+1,c
  3838  003958  0E07               	movlw	7
  3839  00395A  6E25               	movwf	___awmod@divisor,c
  3840  00395C  EC77  F01A         	call	___awmod	;wreg free
  3841  003960  90D8               	bcf	status,0,c
  3842  003962  3623               	rlcf	?___awmod,f,c
  3843  003964  3624               	rlcf	?___awmod+1,f,c
  3844  003966  0E81               	movlw	low _SOUND_NOTE
  3845  003968  2423               	addwf	?___awmod,w,c
  3846  00396A  6ED9               	movwf	fsr2l,c
  3847  00396C  0E01               	movlw	high _SOUND_NOTE
  3848  00396E  2024               	addwfc	?___awmod+1,w,c
  3849  003970  6EDA               	movwf	fsr2h,c
  3850  003972  D801               	call	u8038
  3851  003974  D00A               	goto	u8039
  3852  003976                     u8038:
  3853  003976  0005               	push	
  3854  003978  6EFA               	movwf	pclath,c
  3855  00397A  50DE               	movf	postinc2,w,c
  3856  00397C  6EFD               	movwf	tosl,c
  3857  00397E  50DE               	movf	postinc2,w,c
  3858  003980  6EFE               	movwf	tosh,c
  3859  003982  50F8               	movf	tblptru,w,c
  3860  003984  6EFF               	movwf	tosu,c
  3861  003986  50FA               	movf	pclath,w,c
  3862  003988  0012               	return		;indir
  3863  00398A                     u8039:
  3864                           
  3865                           ;master/animation.c: 28:         OUT_LED_ARRAY(LED_ARRAY, 100);
  3866  00398A  0E07               	movlw	low _LED_ARRAY
  3867  00398C  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
  3868  00398E  0E01               	movlw	high _LED_ARRAY
  3869  003990  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
  3870  003992  0E64               	movlw	100
  3871  003994  6E09               	movwf	OUT_LED_ARRAY@LED_POWER,c
  3872  003996  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
  3873                           
  3874                           ;master/animation.c: 29:         _delay((unsigned long)((10)*(64000000/4000.0)));
  3875  00399A  0ED0               	movlw	208
  3876  00399C  6E4A               	movwf	??_animation_2& (0+255),c
  3877  00399E  0ECA               	movlw	202
  3878  0039A0                     u8207:
  3879  0039A0  2EE8               	decfsz	wreg,f,c
  3880  0039A2  D7FE               	bra	u8207
  3881  0039A4  2E4A               	decfsz	??_animation_2& (0+255),f,c
  3882  0039A6  D7FC               	bra	u8207
  3883                           
  3884                           ;master/animation.c: 31:         if (SPI_special(5) == 1)
  3885  0039A8  0E05               	movlw	5
  3886  0039AA  EC96  F017         	call	_SPI_special
  3887  0039AE  06E8               	decf	wreg,f,c
  3888  0039B0  B4D8               	btfsc	status,2,c
  3889  0039B2  0012               	return	
  3890                           
  3891                           ;master/animation.c: 33:     }
  3892  0039B4  2A4C               	incf	animation_2@animation_count,f,c
  3893  0039B6  0E31               	movlw	49
  3894  0039B8  644C               	cpfsgt	animation_2@animation_count,c
  3895  0039BA  D7BD               	goto	l10122
  3896                           
  3897                           ;master/animation.c: 34:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3898  0039BC  0E11               	movlw	17
  3899  0039BE  6E4B               	movwf	(??_animation_2+1)& (0+255),c
  3900  0039C0  0E3C               	movlw	60
  3901  0039C2  6E4A               	movwf	??_animation_2& (0+255),c
  3902  0039C4  0ECB               	movlw	203
  3903  0039C6                     u8217:
  3904  0039C6  2EE8               	decfsz	wreg,f,c
  3905  0039C8  D7FE               	bra	u8217
  3906  0039CA  2E4A               	decfsz	??_animation_2& (0+255),f,c
  3907  0039CC  D7FC               	bra	u8217
  3908  0039CE  2E4B               	decfsz	(??_animation_2+1)& (0+255),f,c
  3909  0039D0  D7FA               	bra	u8217
  3910  0039D2  F000               	nop	
  3911  0039D4  0012               	return		;funcret
  3912  0039D6                     __end_of_animation_2:
  3913                           	opt callstack 0
  3914                           
  3915 ;; *************** function _Special_input *****************
  3916 ;; Defined at:
  3917 ;;		line 212 in file "master/main.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  SS              1    wreg     unsigned char 
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;  SS              1    0[BANK1 ] unsigned char 
  3922 ;;  j               2    2[BANK1 ] int 
  3923 ;;  i               1    4[BANK1 ] unsigned char 
  3924 ;;  IDA_CE         46    6[BANK1 ] struct CE_2
  3925 ;;  deep_flag       1    5[BANK1 ] unsigned char 
  3926 ;;  if_can_get      1    1[BANK1 ] unsigned char 
  3927 ;; Return value:  Size  Location     Type
  3928 ;;                  1    wreg      void 
  3929 ;; Registers used:
  3930 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3936 ;;      Params:         0       0       0       0       0       0       0
  3937 ;;      Locals:         0       0      52       0       0       0       0
  3938 ;;      Temps:          0       3       0       0       0       0       0
  3939 ;;      Totals:         0       3      52       0       0       0       0
  3940 ;;Total ram usage:       55 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; Hardware stack levels required when called:   11
  3943 ;; This function calls:
  3944 ;;		_Create_Shoretest_command_Most_deep
  3945 ;;		_EEROM_GAME_ON
  3946 ;;		_EEROM_R_SAVE
  3947 ;;		_EEROM_W_SAVE
  3948 ;;		_OUT_LED_ARRAY
  3949 ;;		_SPI_RET_2
  3950 ;;		_SPI_special
  3951 ;;		_animation_1
  3952 ;;		_animation_3
  3953 ;;		_animation_4
  3954 ;;		_command_turn_ARRAY_2
  3955 ;;		_command_turn_CE
  3956 ;;		_convert_ROTtoLED
  3957 ;;		_if_solution_end
  3958 ;;		_initialization_shortest_command
  3959 ;;		_made_cube
  3960 ;;		_make_justice_axis
  3961 ;;		_over_write_CE_from_A_to_B
  3962 ;;		_set_all_LED_ARRAY
  3963 ;;		_shuffle_state_CE
  3964 ;; This function is called by:
  3965 ;;		_main
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text4
  3970  006894                     __ptext4:
  3971                           	opt callstack 0
  3972  006894                     _Special_input:
  3973                           	opt callstack 19
  3974                           
  3975                           ;incstack = 0
  3976                           ;Special_input@SS stored from wreg
  3977  006894  0101               	movlb	1	; () banked
  3978  006896  6FBE               	movwf	Special_input@SS& (0+255),b
  3979                           
  3980                           ;master/main.c: 212:                 };master/main.c: 213:                 if (if_soluti
      +                          on_end() == 0);master/main.c: 214:                 {
  3981  006898  D18C               	goto	l10068
  3982  00689A                     l9934:
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;master/main.c: 217:                 }
  3986  00689A  0101               	movlb	1	; () banked
  3987  00689C  2B05               	incf	_Special_input_0& (0+255),f,b
  3988                           
  3989                           ; BSR set to: 1
  3990                           ;master/main.c: 218:             }
  3991  00689E  0E04               	movlw	4
  3992  0068A0  6505               	cpfsgt	_Special_input_0& (0+255),b
  3993  0068A2  D039               	goto	l9960
  3994                           
  3995                           ; BSR set to: 1
  3996                           ;master/main.c: 219:         }
  3997  0068A4  0E00               	movlw	0
  3998  0068A6  6F05               	movwf	_Special_input_0& (0+255),b
  3999  0068A8  D036               	goto	l9960
  4000  0068AA                     l9940:
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;master/main.c: 223:             made_cube(1, 2);
  4004  0068AA  0E00               	movlw	0
  4005  0068AC  6FF0               	movwf	_POWER& (0+255),b
  4006                           
  4007                           ;master/main.c: 224:         }
  4008  0068AE  0E01               	movlw	1
  4009  0068B0  0101               	movlb	1	; () banked
  4010  0068B2  6F8F               	movwf	_sound_flag& (0+255),b
  4011                           
  4012                           ; BSR set to: 1
  4013                           ;master/main.c: 226:         {
  4014  0068B4  0E06               	movlw	6
  4015  0068B6  EC42  F01A         	call	_set_all_LED_ARRAY
  4016                           
  4017                           ;master/main.c: 228:         }
  4018  0068BA  0E07               	movlw	low _LED_ARRAY
  4019  0068BC  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
  4020  0068BE  0E01               	movlw	high _LED_ARRAY
  4021  0068C0  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
  4022  0068C2  C0F0  F009         	movff	_POWER,OUT_LED_ARRAY@LED_POWER
  4023  0068C6  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
  4024  0068CA                     l9946:
  4025                           
  4026                           ;master/main.c: 230:         {;master/main.c: 231:             set_all_LED_ARRAY(4);
  4027  0068CA  0E00               	movlw	0
  4028  0068CC  EC96  F017         	call	_SPI_special
  4029  0068D0  06E8               	decf	wreg,f,c
  4030  0068D2  A4D8               	btfss	status,2,c
  4031  0068D4  D7FA               	goto	l9946
  4032                           
  4033                           ;master/main.c: 232:             OUT_LED_ARRAY(LED_ARRAY, POWER);;master/main.c: 233:   
      +                                    _delay((unsigned long)((1000)*(64000000/4000.0)));
  4034  0068D6  0EC8               	movlw	200
  4035  0068D8  0100               	movlb	0	; () banked
  4036  0068DA  6FF0               	movwf	_POWER& (0+255),b
  4037                           
  4038                           ;master/main.c: 234:             convert_ROTtoLED();
  4039  0068DC  0012               	return	
  4040  0068DE                     l9950:
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;master/main.c: 239: 
  4044  0068DE  0E00               	movlw	0
  4045  0068E0  0101               	movlb	1	; () banked
  4046  0068E2  6F8F               	movwf	_sound_flag& (0+255),b
  4047                           
  4048                           ;master/main.c: 240: 
  4049  0068E4  0E64               	movlw	100
  4050  0068E6  0100               	movlb	0	; () banked
  4051  0068E8  6FF0               	movwf	_POWER& (0+255),b
  4052                           
  4053                           ;master/main.c: 241:         break;
  4054  0068EA  0012               	return	
  4055  0068EC                     l9952:
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;master/main.c: 243:         EEROM_W_SAVE();
  4059  0068EC  0E01               	movlw	1
  4060  0068EE  0101               	movlb	1	; () banked
  4061  0068F0  6F8F               	movwf	_sound_flag& (0+255),b
  4062                           
  4063                           ;master/main.c: 244:         break;
  4064  0068F2  0E64               	movlw	100
  4065  0068F4  0100               	movlb	0	; () banked
  4066  0068F6  6FF0               	movwf	_POWER& (0+255),b
  4067                           
  4068                           ;master/main.c: 245:     case 4:
  4069  0068F8  0012               	return	
  4070  0068FA                     l9954:
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;master/main.c: 247:         break;
  4074  0068FA  0E00               	movlw	0
  4075  0068FC  0101               	movlb	1	; () banked
  4076  0068FE  6F8F               	movwf	_sound_flag& (0+255),b
  4077                           
  4078                           ;master/main.c: 248:     case 5:
  4079  006900  0EC8               	movlw	200
  4080  006902  0100               	movlb	0	; () banked
  4081  006904  6FF0               	movwf	_POWER& (0+255),b
  4082                           
  4083                           ;master/main.c: 249:         while (1)
  4084  006906  0012               	return	
  4085  006908                     l9956:
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;master/main.c: 251:             rand_seed++;
  4089  006908  0E01               	movlw	1
  4090  00690A  0101               	movlb	1	; () banked
  4091  00690C  6F8F               	movwf	_sound_flag& (0+255),b
  4092                           
  4093                           ;master/main.c: 252:             if (rand_seed > 65533)
  4094  00690E  0EC8               	movlw	200
  4095  006910  0100               	movlb	0	; () banked
  4096  006912  6FF0               	movwf	_POWER& (0+255),b
  4097                           
  4098                           ;master/main.c: 253:                 rand_seed = 0;
  4099  006914  0012               	return	
  4100  006916                     l9960:
  4101                           
  4102                           ; BSR set to: 1
  4103  006916  5105               	movf	_Special_input_0& (0+255),w,b
  4104  006918  0100               	movlb	0	; () banked
  4105  00691A  6FD8               	movwf	??_Special_input& (0+255),b
  4106  00691C  6BD9               	clrf	(??_Special_input+1)& (0+255),b
  4107                           
  4108                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4109                           ; Switch size 1, requested type "simple"
  4110                           ; Number of cases is 1, Range of values is 0 to 0
  4111                           ; switch strategies available:
  4112                           ; Name         Instructions Cycles
  4113                           ; simple_byte            4     3 (average)
  4114                           ;	Chosen strategy is simple_byte
  4115  00691E  51D9               	movf	(??_Special_input+1)& (0+255),w,b
  4116  006920  0A00               	xorlw	0	; case 0
  4117  006922  A4D8               	btfss	status,2,c
  4118  006924  0012               	return	
  4119                           
  4120                           ; BSR set to: 0
  4121                           ; Switch size 1, requested type "simple"
  4122                           ; Number of cases is 5, Range of values is 0 to 4
  4123                           ; switch strategies available:
  4124                           ; Name         Instructions Cycles
  4125                           ; simple_byte           16     9 (average)
  4126                           ;	Chosen strategy is simple_byte
  4127  006926  51D8               	movf	??_Special_input& (0+255),w,b
  4128  006928  0A00               	xorlw	0	; case 0
  4129  00692A  B4D8               	btfsc	status,2,c
  4130  00692C  D7BE               	goto	l9940
  4131  00692E  0A01               	xorlw	1	; case 1
  4132  006930  B4D8               	btfsc	status,2,c
  4133  006932  D7D5               	goto	l9950
  4134  006934  0A03               	xorlw	3	; case 2
  4135  006936  B4D8               	btfsc	status,2,c
  4136  006938  D7D9               	goto	l9952
  4137  00693A  0A01               	xorlw	1	; case 3
  4138  00693C  B4D8               	btfsc	status,2,c
  4139  00693E  D7DD               	goto	l9954
  4140  006940  0A07               	xorlw	7	; case 4
  4141  006942  A4D8               	btfss	status,2,c
  4142  006944  0012               	return	
  4143  006946  D7E0               	goto	l9956
  4144  006948                     l9962:
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;master/main.c: 257: 
  4148  006948  0E01               	movlw	1
  4149  00694A  ECAA  F020         	call	_animation_1
  4150                           
  4151                           ;master/main.c: 258:             if (animation_1(5) == 1)
  4152  00694E  C0EA  F037         	movff	_rand_seed,shuffle_state_CE@seed_number
  4153  006952  C0EB  F038         	movff	_rand_seed+1,shuffle_state_CE@seed_number+1
  4154  006956  EC70  F01B         	call	_shuffle_state_CE	;wreg free
  4155                           
  4156                           ;master/main.c: 259:                 break;
  4157  00695A  EC29  F014         	call	_EEROM_GAME_ON	;wreg free
  4158                           
  4159                           ;master/main.c: 260: 
  4160  00695E  0012               	return	
  4161  006960                     l9968:
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;master/main.c: 262:             if (animation_4(rand_seed) == 1)
  4165  006960  EC3E  F02B         	call	_if_solution_end	;wreg free
  4166  006964  0900               	iorlw	0
  4167  006966  B4D8               	btfsc	status,2,c
  4168  006968  0012               	return	
  4169                           
  4170                           ;master/main.c: 264:         }
  4171  00696A  ECD7  F014         	call	_initialization_shortest_command	;wreg free
  4172                           
  4173                           ;master/main.c: 265:         SPI_RET_2();;master/main.c: 266:         convert_ROTtoLED()
      +                          ;;master/main.c: 267:         break;
  4174  00696E  0E01               	movlw	1
  4175  006970  0100               	movlb	0	; () banked
  4176  006972  6FF3               	movwf	_mode_cube_end& (0+255),b
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;master/main.c: 268:     }
  4180  006974  EC4E  F016         	call	_make_justice_axis	;wreg free
  4181                           
  4182                           ;master/main.c: 269: }
  4183  006978  EE21  F090         	lfsr	2,_state_CE
  4184  00697C  EE00  F001         	lfsr	0,over_write_CE_from_A_to_B@A
  4185  006980  0E2D               	movlw	45
  4186  006982                     u7821:
  4187  006982  CFDB FFEB          	movff	plusw2,plusw0
  4188  006986  06E8               	decf	wreg,f,c
  4189  006988  E2FC               	bc	u7821
  4190  00698A  0EC4               	movlw	low Special_input@IDA_CE
  4191  00698C  6E2F               	movwf	over_write_CE_from_A_to_B@B,c
  4192  00698E  0E01               	movlw	high Special_input@IDA_CE
  4193  006990  6E30               	movwf	over_write_CE_from_A_to_B@B+1,c
  4194  006992  ECBA  F025         	call	_over_write_CE_from_A_to_B	;wreg free
  4195  006996  0E00               	movlw	0
  4196  006998  0101               	movlb	1	; () banked
  4197  00699A  6FC3               	movwf	Special_input@deep_flag& (0+255),b
  4198  00699C  D065               	goto	l10008
  4199  00699E                     l9982:
  4200                           
  4201                           ; BSR set to: 1
  4202  00699E  EC36  F015         	call	_Create_Shoretest_command_Most_deep	;wreg free
  4203  0069A2  0101               	movlb	1	; () banked
  4204  0069A4  6FBF               	movwf	Special_input@if_can_get& (0+255),b
  4205                           
  4206                           ; BSR set to: 1
  4207  0069A6  0E02               	movlw	2
  4208  0069A8  EC96  F017         	call	_SPI_special
  4209  0069AC  06E8               	decf	wreg,f,c
  4210  0069AE  A4D8               	btfss	status,2,c
  4211  0069B0  D002               	goto	l9988
  4212  0069B2  0E02               	movlw	2
  4213  0069B4  D056               	goto	L1
  4214  0069B6                     l9988:
  4215  0069B6  0E01               	movlw	1
  4216  0069B8  0101               	movlb	1	; () banked
  4217  0069BA  6506               	cpfsgt	_shortest_depth& (0+255),b
  4218  0069BC  D001               	goto	l9992
  4219  0069BE  D058               	goto	u7890
  4220  0069C0                     l9992:
  4221                           
  4222                           ; BSR set to: 1
  4223  0069C0  51BF               	movf	Special_input@if_can_get& (0+255),w,b
  4224  0069C2  A4D8               	btfss	status,2,c
  4225  0069C4  D051               	goto	l10008
  4226                           
  4227                           ; BSR set to: 1
  4228  0069C6  EE21  F0C4         	lfsr	2,Special_input@IDA_CE
  4229  0069CA  EE00  F001         	lfsr	0,over_write_CE_from_A_to_B@A
  4230  0069CE  0E2D               	movlw	45
  4231  0069D0                     u7861:
  4232  0069D0  CFDB FFEB          	movff	plusw2,plusw0
  4233  0069D4  06E8               	decf	wreg,f,c
  4234  0069D6  E2FC               	bc	u7861
  4235  0069D8  0E90               	movlw	low _state_CE
  4236  0069DA  6E2F               	movwf	over_write_CE_from_A_to_B@B,c
  4237  0069DC  0E01               	movlw	high _state_CE
  4238  0069DE  6E30               	movwf	over_write_CE_from_A_to_B@B+1,c
  4239  0069E0  ECBA  F025         	call	_over_write_CE_from_A_to_B	;wreg free
  4240  0069E4  0E00               	movlw	0
  4241  0069E6  0101               	movlb	1	; () banked
  4242  0069E8  6FC1               	movwf	(Special_input@j+1)& (0+255),b
  4243  0069EA  0E00               	movlw	0
  4244  0069EC  6FC0               	movwf	Special_input@j& (0+255),b
  4245  0069EE  D021               	goto	l10002
  4246  0069F0                     l9998:
  4247                           
  4248                           ; BSR set to: 0
  4249  0069F0  0E03               	movlw	low _shortest_command
  4250  0069F2  0101               	movlb	1	; () banked
  4251  0069F4  25C0               	addwf	Special_input@j& (0+255),w,b
  4252  0069F6  6ED9               	movwf	fsr2l,c
  4253  0069F8  0E01               	movlw	high _shortest_command
  4254  0069FA  21C1               	addwfc	(Special_input@j+1)& (0+255),w,b
  4255  0069FC  6EDA               	movwf	fsr2h,c
  4256  0069FE  50DF               	movf	indf2,w,c
  4257  006A00  0100               	movlb	0	; () banked
  4258  006A02  6FD8               	movwf	??_Special_input& (0+255),b
  4259  006A04  51D8               	movf	??_Special_input& (0+255),w,b
  4260  006A06  0D05               	mullw	5
  4261  006A08  0E02               	movlw	2
  4262  006A0A  26F3               	addwf	prodl,f,c
  4263  006A0C  0E00               	movlw	0
  4264  006A0E  22F4               	addwfc	prodh,f,c
  4265  006A10  0E69               	movlw	low _CE_IDA_LIST
  4266  006A12  24F3               	addwf	prodl,w,c
  4267  006A14  6EF6               	movwf	tblptrl,c
  4268  006A16  0E79               	movlw	high _CE_IDA_LIST
  4269  006A18  20F4               	addwfc	prodh,w,c
  4270  006A1A  6EF7               	movwf	tblptrh,c
  4271  006A1C                     	if	0	;There are less than 3 active tblptr bytes
  4272  006A1C                     	endif
  4273  006A1C  0009               	tblrd		*+
  4274  006A1E  CFF5 F033          	movff	tablat,command_turn_CE@s
  4275  006A22  000A               	tblrd		*-
  4276  006A24  CFF5 F034          	movff	tablat,command_turn_CE@s+1
  4277  006A28  ECEF  F01D         	call	_command_turn_CE	;wreg free
  4278  006A2C  0101               	movlb	1	; () banked
  4279  006A2E  4BC0               	infsnz	Special_input@j& (0+255),f,b
  4280  006A30  2BC1               	incf	(Special_input@j+1)& (0+255),f,b
  4281  006A32                     l10002:
  4282                           
  4283                           ; BSR set to: 1
  4284  006A32  5106               	movf	_shortest_depth& (0+255),w,b
  4285  006A34  0100               	movlb	0	; () banked
  4286  006A36  6FD8               	movwf	??_Special_input& (0+255),b
  4287  006A38  6BD9               	clrf	(??_Special_input+1)& (0+255),b
  4288  006A3A  0101               	movlb	1	; () banked
  4289  006A3C  51C0               	movf	Special_input@j& (0+255),w,b
  4290  006A3E  0100               	movlb	0	; () banked
  4291  006A40  5DD8               	subwf	??_Special_input& (0+255),w,b
  4292  006A42  51D9               	movf	(??_Special_input+1)& (0+255),w,b
  4293  006A44  0A80               	xorlw	128
  4294  006A46  6FDA               	movwf	(??_Special_input+2)& (0+255),b
  4295  006A48  0101               	movlb	1	; () banked
  4296  006A4A  51C1               	movf	(Special_input@j+1)& (0+255),w,b
  4297  006A4C  0A80               	xorlw	128
  4298  006A4E  0100               	movlb	0	; () banked
  4299  006A50  59DA               	subwfb	(??_Special_input+2)& (0+255),w,b
  4300  006A52  B0D8               	btfsc	status,0,c
  4301  006A54  D7CD               	goto	l9998
  4302                           
  4303                           ; BSR set to: 0
  4304  006A56  EC3E  F02B         	call	_if_solution_end	;wreg free
  4305  006A5A  0900               	iorlw	0
  4306  006A5C  A4D8               	btfss	status,2,c
  4307  006A5E  D004               	goto	l10008
  4308  006A60  0E01               	movlw	1
  4309  006A62                     L1:
  4310  006A62  0101               	movlb	1	; () banked
  4311  006A64  6FC3               	movwf	Special_input@deep_flag& (0+255),b
  4312  006A66  D004               	goto	u7890
  4313  006A68                     l10008:
  4314  006A68  0E01               	movlw	1
  4315  006A6A  0101               	movlb	1	; () banked
  4316  006A6C  6506               	cpfsgt	_shortest_depth& (0+255),b
  4317  006A6E  D797               	goto	l9982
  4318  006A70                     u7890:
  4319                           
  4320                           ; BSR set to: 1
  4321  006A70  EE21  F0C4         	lfsr	2,Special_input@IDA_CE
  4322  006A74  EE00  F001         	lfsr	0,over_write_CE_from_A_to_B@A
  4323  006A78  0E2D               	movlw	45
  4324  006A7A                     u7901:
  4325  006A7A  CFDB FFEB          	movff	plusw2,plusw0
  4326  006A7E  06E8               	decf	wreg,f,c
  4327  006A80  E2FC               	bc	u7901
  4328  006A82  0E90               	movlw	low _state_CE
  4329  006A84  6E2F               	movwf	over_write_CE_from_A_to_B@B,c
  4330  006A86  0E01               	movlw	high _state_CE
  4331  006A88  6E30               	movwf	over_write_CE_from_A_to_B@B+1,c
  4332  006A8A  ECBA  F025         	call	_over_write_CE_from_A_to_B	;wreg free
  4333  006A8E  0101               	movlb	1	; () banked
  4334  006A90  51C3               	movf	Special_input@deep_flag& (0+255),w,b
  4335  006A92  A4D8               	btfss	status,2,c
  4336  006A94  D007               	goto	l10016
  4337                           
  4338                           ; BSR set to: 1
  4339  006A96  0E02               	movlw	2
  4340  006A98  0100               	movlb	0	; () banked
  4341  006A9A  6FA0               	movwf	made_cube@skip_CS& (0+255),b
  4342  006A9C  0E01               	movlw	1
  4343  006A9E  EC7C  F029         	call	_made_cube
  4344  006AA2  0012               	return	
  4345  006AA4                     l10016:
  4346                           
  4347                           ; BSR set to: 1
  4348  006AA4  0E02               	movlw	2
  4349  006AA6  19C3               	xorwf	Special_input@deep_flag& (0+255),w,b
  4350  006AA8  A4D8               	btfss	status,2,c
  4351  006AAA  D007               	goto	l10020
  4352                           
  4353                           ; BSR set to: 1
  4354  006AAC  0E02               	movlw	2
  4355  006AAE  0100               	movlb	0	; () banked
  4356  006AB0  6FA0               	movwf	made_cube@skip_CS& (0+255),b
  4357  006AB2  0E00               	movlw	0
  4358  006AB4  EC7C  F029         	call	_made_cube
  4359  006AB8  0012               	return	
  4360  006ABA                     l10020:
  4361                           
  4362                           ; BSR set to: 1
  4363  006ABA  05C3               	decf	Special_input@deep_flag& (0+255),w,b
  4364  006ABC  A4D8               	btfss	status,2,c
  4365  006ABE  0012               	return	
  4366                           
  4367                           ; BSR set to: 1
  4368  006AC0  0E04               	movlw	4
  4369  006AC2  EC42  F01A         	call	_set_all_LED_ARRAY
  4370  006AC6  0E07               	movlw	low _LED_ARRAY
  4371  006AC8  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
  4372  006ACA  0E01               	movlw	high _LED_ARRAY
  4373  006ACC  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
  4374  006ACE  C0F0  F009         	movff	_POWER,OUT_LED_ARRAY@LED_POWER
  4375  006AD2  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
  4376  006AD6  0E52               	movlw	82
  4377  006AD8  0100               	movlb	0	; () banked
  4378  006ADA  6FD9               	movwf	(??_Special_input+1)& (0+255),b
  4379  006ADC  0E2B               	movlw	43
  4380  006ADE  6FD8               	movwf	??_Special_input& (0+255),b
  4381  006AE0  0E00               	movlw	0
  4382  006AE2                     u8227:
  4383  006AE2  2EE8               	decfsz	wreg,f,c
  4384  006AE4  D7FE               	bra	u8227
  4385  006AE6  2FD8               	decfsz	??_Special_input& (0+255),f,b
  4386  006AE8  D7FC               	bra	u8227
  4387  006AEA  2FD9               	decfsz	(??_Special_input+1)& (0+255),f,b
  4388  006AEC  D7FA               	bra	u8227
  4389  006AEE  F000               	nop	
  4390  006AF0  EC00  F01C         	call	_convert_ROTtoLED	;wreg free
  4391  006AF4  0E07               	movlw	low _LED_ARRAY
  4392  006AF6  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
  4393  006AF8  0E01               	movlw	high _LED_ARRAY
  4394  006AFA  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
  4395  006AFC  C0F0  F009         	movff	_POWER,OUT_LED_ARRAY@LED_POWER
  4396  006B00  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
  4397  006B04  0E00               	movlw	0
  4398  006B06  0101               	movlb	1	; () banked
  4399  006B08  6FC2               	movwf	Special_input@i& (0+255),b
  4400  006B0A  D01F               	goto	l10038
  4401  006B0C                     l10034:
  4402                           
  4403                           ; BSR set to: 1
  4404  006B0C  0E03               	movlw	low _shortest_command
  4405  006B0E  25C2               	addwf	Special_input@i& (0+255),w,b
  4406  006B10  6ED9               	movwf	fsr2l,c
  4407  006B12  6ADA               	clrf	fsr2h,c
  4408  006B14  0E01               	movlw	high _shortest_command
  4409  006B16  22DA               	addwfc	fsr2h,f,c
  4410  006B18  50DF               	movf	indf2,w,c
  4411  006B1A  0100               	movlb	0	; () banked
  4412  006B1C  6FD8               	movwf	??_Special_input& (0+255),b
  4413  006B1E  51D8               	movf	??_Special_input& (0+255),w,b
  4414  006B20  0D05               	mullw	5
  4415  006B22  0E02               	movlw	2
  4416  006B24  26F3               	addwf	prodl,f,c
  4417  006B26  0E00               	movlw	0
  4418  006B28  22F4               	addwfc	prodh,f,c
  4419  006B2A  0E69               	movlw	low _CE_IDA_LIST
  4420  006B2C  24F3               	addwf	prodl,w,c
  4421  006B2E  6EF6               	movwf	tblptrl,c
  4422  006B30  0E79               	movlw	high _CE_IDA_LIST
  4423  006B32  20F4               	addwfc	prodh,w,c
  4424  006B34  6EF7               	movwf	tblptrh,c
  4425  006B36                     	if	0	;There are less than 3 active tblptr bytes
  4426  006B36                     	endif
  4427  006B36  0009               	tblrd		*+
  4428  006B38  CFF5 F057          	movff	tablat,command_turn_ARRAY_2@s
  4429  006B3C  000A               	tblrd		*-
  4430  006B3E  CFF5 F058          	movff	tablat,command_turn_ARRAY_2@s+1
  4431  006B42  EC0B  F02F         	call	_command_turn_ARRAY_2	;wreg free
  4432  006B46  0101               	movlb	1	; () banked
  4433  006B48  2BC2               	incf	Special_input@i& (0+255),f,b
  4434  006B4A                     l10038:
  4435                           
  4436                           ; BSR set to: 1
  4437  006B4A  51C2               	movf	Special_input@i& (0+255),w,b
  4438  006B4C  5D06               	subwf	_shortest_depth& (0+255),w,b
  4439  006B4E  A0D8               	btfss	status,0,c
  4440  006B50  0012               	return	
  4441  006B52  D7DC               	goto	l10034
  4442  006B54                     l10040:
  4443                           
  4444                           ; BSR set to: 0
  4445  006B54  EC0E  F02D         	call	_EEROM_W_SAVE	;wreg free
  4446  006B58  0012               	return	
  4447  006B5A                     l10042:
  4448                           
  4449                           ; BSR set to: 0
  4450  006B5A  EC5C  F026         	call	_EEROM_R_SAVE	;wreg free
  4451  006B5E  0012               	return	
  4452  006B60                     l10044:
  4453  006B60  0100               	movlb	0	; () banked
  4454  006B62  4BEA               	infsnz	_rand_seed& (0+255),f,b
  4455  006B64  2BEB               	incf	(_rand_seed+1)& (0+255),f,b
  4456                           
  4457                           ; BSR set to: 0
  4458  006B66  0EFE               	movlw	254
  4459  006B68  5DEA               	subwf	_rand_seed& (0+255),w,b
  4460  006B6A  0EFF               	movlw	255
  4461  006B6C  59EB               	subwfb	(_rand_seed+1)& (0+255),w,b
  4462  006B6E  A0D8               	btfss	status,0,c
  4463  006B70  D004               	goto	l10050
  4464                           
  4465                           ; BSR set to: 0
  4466  006B72  0E00               	movlw	0
  4467  006B74  6FEB               	movwf	(_rand_seed+1)& (0+255),b
  4468  006B76  0E00               	movlw	0
  4469  006B78  6FEA               	movwf	_rand_seed& (0+255),b
  4470  006B7A                     l10050:
  4471                           
  4472                           ; BSR set to: 0
  4473  006B7A  0E05               	movlw	5
  4474  006B7C  6E4A               	movwf	animation_3@CS,c
  4475  006B7E  0E03               	movlw	3
  4476  006B80  ECAF  F01A         	call	_animation_3
  4477  006B84  06E8               	decf	wreg,f,c
  4478  006B86  B4D8               	btfsc	status,2,c
  4479  006B88  D00F               	goto	u7980
  4480  006B8A  0E05               	movlw	5
  4481  006B8C  ECAA  F020         	call	_animation_1
  4482  006B90  06E8               	decf	wreg,f,c
  4483  006B92  B4D8               	btfsc	status,2,c
  4484  006B94  D009               	goto	u7980
  4485  006B96  C0EA  F0A6         	movff	_rand_seed,animation_4@rand_seed
  4486  006B9A  C0EB  F0A7         	movff	_rand_seed+1,animation_4@rand_seed+1
  4487  006B9E  ECA3  F01E         	call	_animation_4	;wreg free
  4488  006BA2  06E8               	decf	wreg,f,c
  4489  006BA4  A4D8               	btfss	status,2,c
  4490  006BA6  D7DC               	goto	l10044
  4491  006BA8                     u7980:
  4492  006BA8  EC6D  F014         	call	_SPI_RET_2	;wreg free
  4493  006BAC  EC00  F01C         	call	_convert_ROTtoLED	;wreg free
  4494  006BB0  0012               	return	
  4495  006BB2                     l10068:
  4496  006BB2  0101               	movlb	1	; () banked
  4497  006BB4  51BE               	movf	Special_input@SS& (0+255),w,b
  4498  006BB6  0100               	movlb	0	; () banked
  4499  006BB8  6FD8               	movwf	??_Special_input& (0+255),b
  4500  006BBA  6BD9               	clrf	(??_Special_input+1)& (0+255),b
  4501                           
  4502                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4503                           ; Switch size 1, requested type "simple"
  4504                           ; Number of cases is 1, Range of values is 0 to 0
  4505                           ; switch strategies available:
  4506                           ; Name         Instructions Cycles
  4507                           ; simple_byte            4     3 (average)
  4508                           ;	Chosen strategy is simple_byte
  4509  006BBC  51D9               	movf	(??_Special_input+1)& (0+255),w,b
  4510  006BBE  0A00               	xorlw	0	; case 0
  4511  006BC0  A4D8               	btfss	status,2,c
  4512  006BC2  0012               	return	
  4513                           
  4514                           ; BSR set to: 0
  4515                           ; Switch size 1, requested type "simple"
  4516                           ; Number of cases is 6, Range of values is 0 to 5
  4517                           ; switch strategies available:
  4518                           ; Name         Instructions Cycles
  4519                           ; simple_byte           19    10 (average)
  4520                           ;	Chosen strategy is simple_byte
  4521  006BC4  51D8               	movf	??_Special_input& (0+255),w,b
  4522  006BC6  0A00               	xorlw	0	; case 0
  4523  006BC8  B4D8               	btfsc	status,2,c
  4524  006BCA  D667               	goto	l9934
  4525  006BCC  0A01               	xorlw	1	; case 1
  4526  006BCE  B4D8               	btfsc	status,2,c
  4527  006BD0  D6BB               	goto	l9962
  4528  006BD2  0A03               	xorlw	3	; case 2
  4529  006BD4  B4D8               	btfsc	status,2,c
  4530  006BD6  D6C4               	goto	l9968
  4531  006BD8  0A01               	xorlw	1	; case 3
  4532  006BDA  B4D8               	btfsc	status,2,c
  4533  006BDC  D7BB               	goto	l10040
  4534  006BDE  0A07               	xorlw	7	; case 4
  4535  006BE0  B4D8               	btfsc	status,2,c
  4536  006BE2  D7BB               	goto	l10042
  4537  006BE4  0A01               	xorlw	1	; case 5
  4538  006BE6  A4D8               	btfss	status,2,c
  4539  006BE8  0012               	return	
  4540  006BEA  D7BA               	goto	l10044
  4541  006BEC                     __end_of_Special_input:
  4542                           	opt callstack 0
  4543                           
  4544 ;; *************** function _initialization_shortest_command *****************
  4545 ;; Defined at:
  4546 ;;		line 6 in file "master/IDA_CES.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;		None
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;  i               1    0[COMRAM] unsigned char 
  4551 ;; Return value:  Size  Location     Type
  4552 ;;                  1    wreg      void 
  4553 ;; Registers used:
  4554 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4560 ;;      Params:         0       0       0       0       0       0       0
  4561 ;;      Locals:         1       0       0       0       0       0       0
  4562 ;;      Temps:          0       0       0       0       0       0       0
  4563 ;;      Totals:         1       0       0       0       0       0       0
  4564 ;;Total ram usage:        1 bytes
  4565 ;; Hardware stack levels used:    1
  4566 ;; This function calls:
  4567 ;;		Nothing
  4568 ;; This function is called by:
  4569 ;;		_Special_input
  4570 ;; This function uses a non-reentrant model
  4571 ;;
  4572                           
  4573                           	psect	text5
  4574  0029AE                     __ptext5:
  4575                           	opt callstack 0
  4576  0029AE                     _initialization_shortest_command:
  4577                           	opt callstack 29
  4578                           
  4579                           ;master/IDA_CES.c: 8:  char i;;master/IDA_CES.c: 9:  shortest_depth = 0;
  4580                           
  4581                           ;incstack = 0
  4582  0029AE  0E00               	movlw	0
  4583  0029B0  0101               	movlb	1	; () banked
  4584  0029B2  6F06               	movwf	_shortest_depth& (0+255),b
  4585                           
  4586                           ;master/IDA_CES.c: 10:  for (i = 0; i < 2; i++)
  4587  0029B4  0E00               	movlw	0
  4588  0029B6  6E01               	movwf	initialization_shortest_command@i,c
  4589  0029B8                     l9676:
  4590                           
  4591                           ;master/IDA_CES.c: 11:   shortest_command[i] = '\0';
  4592  0029B8  0E03               	movlw	low _shortest_command
  4593  0029BA  2401               	addwf	initialization_shortest_command@i,w,c
  4594  0029BC  6ED9               	movwf	fsr2l,c
  4595  0029BE  6ADA               	clrf	fsr2h,c
  4596  0029C0  0E01               	movlw	high _shortest_command
  4597  0029C2  22DA               	addwfc	fsr2h,f,c
  4598  0029C4  0E00               	movlw	0
  4599  0029C6  6EDF               	movwf	indf2,c
  4600  0029C8  2A01               	incf	initialization_shortest_command@i,f,c
  4601  0029CA  0E01               	movlw	1
  4602  0029CC  6401               	cpfsgt	initialization_shortest_command@i,c
  4603  0029CE  D7F4               	goto	l9676
  4604  0029D0  0012               	return	
  4605  0029D2                     __end_of_initialization_shortest_command:
  4606                           	opt callstack 0
  4607                           
  4608 ;; *************** function _command_turn_ARRAY_2 *****************
  4609 ;; Defined at:
  4610 ;;		line 231 in file "master/animation.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;  s               2   86[COMRAM] PTR const unsigned char 
  4613 ;;		 -> STR_198(3), STR_197(3), STR_196(3), STR_195(3), 
  4614 ;;		 -> STR_194(3), STR_193(3), STR_192(3), STR_191(3), 
  4615 ;;		 -> STR_190(3), STR_189(3), STR_188(3), STR_187(3), 
  4616 ;;		 -> STR_186(2), STR_185(2), STR_184(2), STR_183(2), 
  4617 ;;		 -> STR_182(2), STR_181(2), STR_180(5), STR_38(3), 
  4618 ;;		 -> STR_37(3), STR_36(3), STR_35(3), STR_34(3), 
  4619 ;;		 -> STR_33(3), STR_32(2), STR_31(2), STR_30(2), 
  4620 ;;		 -> STR_29(3), STR_28(3), STR_27(3), STR_26(3), 
  4621 ;;		 -> STR_25(3), STR_24(3), STR_23(2), STR_22(2), 
  4622 ;;		 -> STR_21(2), STR_20(3), STR_19(3), STR_18(3), 
  4623 ;;		 -> STR_17(3), STR_16(3), STR_15(3), STR_14(3), 
  4624 ;;		 -> STR_13(3), STR_12(3), STR_11(3), STR_10(3), 
  4625 ;;		 -> STR_9(3), STR_8(2), STR_7(2), STR_6(2), 
  4626 ;;		 -> STR_5(2), STR_4(2), STR_3(2), STR_2(6), 
  4627 ;;		 -> STR_1(5), 
  4628 ;; Auto vars:     Size  Location     Type
  4629 ;;		None
  4630 ;; Return value:  Size  Location     Type
  4631 ;;                  1    wreg      void 
  4632 ;; Registers used:
  4633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4634 ;; Tracked objects:
  4635 ;;		On entry : 0/0
  4636 ;;		On exit  : 0/0
  4637 ;;		Unchanged: 0/0
  4638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4639 ;;      Params:         2       0       0       0       0       0       0
  4640 ;;      Locals:         0       0       0       0       0       0       0
  4641 ;;      Temps:          2       0       0       0       0       0       0
  4642 ;;      Totals:         4       0       0       0       0       0       0
  4643 ;;Total ram usage:        4 bytes
  4644 ;; Hardware stack levels used:    1
  4645 ;; Hardware stack levels required when called:    5
  4646 ;; This function calls:
  4647 ;;		_command_turn_ARRAY_2_2
  4648 ;;		_command_turn_ARRAY_2_3
  4649 ;;		_command_turn_CE
  4650 ;;		_str_cmp_const
  4651 ;; This function is called by:
  4652 ;;		_Special_input
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           	psect	text6
  4657  005E16                     __ptext6:
  4658                           	opt callstack 0
  4659  005E16                     _command_turn_ARRAY_2:
  4660                           	opt callstack 24
  4661                           
  4662                           ;master/animation.c: 232:     command_turn_CE(s);
  4663                           
  4664                           ;incstack = 0
  4665  005E16  C057  F033         	movff	command_turn_ARRAY_2@s,command_turn_CE@s
  4666  005E1A  C058  F034         	movff	command_turn_ARRAY_2@s+1,command_turn_CE@s+1
  4667  005E1E  ECEF  F01D         	call	_command_turn_CE	;wreg free
  4668                           
  4669                           ;master/animation.c: 234:     switch (*s) {
  4670  005E22  D0FE               	goto	l9740
  4671  005E24                     l9702:
  4672                           
  4673                           ;master/animation.c: 236:             if (str_cmp_const(s, "Z") == 0) {
  4674  005E24  C057  F007         	movff	command_turn_ARRAY_2@s,str_cmp_const@p1
  4675  005E28  C058  F008         	movff	command_turn_ARRAY_2@s+1,str_cmp_const@p1+1
  4676  005E2C  0EFC               	movlw	low STR_32
  4677  005E2E  6E09               	movwf	str_cmp_const@p2,c
  4678  005E30  0E7F               	movlw	high STR_32
  4679  005E32  6E0A               	movwf	str_cmp_const@p2+1,c
  4680  005E34  EC96  F01D         	call	_str_cmp_const	;wreg free
  4681  005E38  0900               	iorlw	0
  4682  005E3A  A4D8               	btfss	status,2,c
  4683  005E3C  D00F               	goto	l9706
  4684                           
  4685                           ;master/animation.c: 237:                 command_turn_ARRAY_2_3("F", "S", "B'");
  4686  005E3E  0EEC               	movlw	low STR_7
  4687  005E40  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
  4688  005E42  0E7F               	movlw	high STR_7
  4689  005E44  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
  4690  005E46  0EF4               	movlw	low STR_22
  4691  005E48  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
  4692  005E4A  0E7F               	movlw	high STR_22
  4693  005E4C  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
  4694  005E4E  0E9E               	movlw	low STR_14
  4695  005E50  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
  4696  005E52  0E7F               	movlw	high STR_14
  4697  005E54  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
  4698  005E56  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
  4699                           
  4700                           ;master/animation.c: 238:             } else if (str_cmp_const(s, "Z'") == 0) {
  4701  005E5A  0012               	return	
  4702  005E5C                     l9706:
  4703  005E5C  C057  F007         	movff	command_turn_ARRAY_2@s,str_cmp_const@p1
  4704  005E60  C058  F008         	movff	command_turn_ARRAY_2@s+1,str_cmp_const@p1+1
  4705  005E64  0EBF               	movlw	low STR_35
  4706  005E66  6E09               	movwf	str_cmp_const@p2,c
  4707  005E68  0E7F               	movlw	high STR_35
  4708  005E6A  6E0A               	movwf	str_cmp_const@p2+1,c
  4709  005E6C  EC96  F01D         	call	_str_cmp_const	;wreg free
  4710  005E70  0900               	iorlw	0
  4711  005E72  A4D8               	btfss	status,2,c
  4712  005E74  D00F               	goto	l9710
  4713                           
  4714                           ;master/animation.c: 239:                 command_turn_ARRAY_2_3("F'", "S'", "B");
  4715  005E76  0EA7               	movlw	low STR_13
  4716  005E78  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
  4717  005E7A  0E7F               	movlw	high STR_13
  4718  005E7C  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
  4719  005E7E  0EB3               	movlw	low STR_28
  4720  005E80  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
  4721  005E82  0E7F               	movlw	high STR_28
  4722  005E84  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
  4723  005E86  0EE6               	movlw	low STR_8
  4724  005E88  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
  4725  005E8A  0E7F               	movlw	high STR_8
  4726  005E8C  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
  4727  005E8E  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
  4728                           
  4729                           ;master/animation.c: 240:             } else {
  4730  005E92  0012               	return	
  4731  005E94                     l9710:
  4732                           
  4733                           ;master/animation.c: 241:                 command_turn_ARRAY_2_3("F", "S", "B'");
  4734  005E94  0EEC               	movlw	low STR_7
  4735  005E96  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
  4736  005E98  0E7F               	movlw	high STR_7
  4737  005E9A  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
  4738  005E9C  0EF4               	movlw	low STR_22
  4739  005E9E  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
  4740  005EA0  0E7F               	movlw	high STR_22
  4741  005EA2  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
  4742  005EA4  0E9E               	movlw	low STR_14
  4743  005EA6  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
  4744  005EA8  0E7F               	movlw	high STR_14
  4745  005EAA  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
  4746  005EAC  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
  4747                           
  4748                           ;master/animation.c: 242:                 command_turn_ARRAY_2_3("F", "S", "B'");
  4749  005EB0  0EEC               	movlw	low STR_7
  4750  005EB2  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
  4751  005EB4  0E7F               	movlw	high STR_7
  4752  005EB6  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
  4753  005EB8  0EF4               	movlw	low STR_22
  4754  005EBA  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
  4755  005EBC  0E7F               	movlw	high STR_22
  4756  005EBE  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
  4757  005EC0  0E9E               	movlw	low STR_14
  4758  005EC2  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
  4759  005EC4  0E7F               	movlw	high STR_14
  4760  005EC6  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
  4761  005EC8  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
  4762  005ECC  0012               	return	
  4763  005ECE                     l9714:
  4764                           
  4765                           ;master/animation.c: 246:             if (str_cmp_const(s, "Y") == 0) {
  4766  005ECE  C057  F007         	movff	command_turn_ARRAY_2@s,str_cmp_const@p1
  4767  005ED2  C058  F008         	movff	command_turn_ARRAY_2@s+1,str_cmp_const@p1+1
  4768  005ED6  0EFA               	movlw	low STR_31
  4769  005ED8  6E09               	movwf	str_cmp_const@p2,c
  4770  005EDA  0E7F               	movlw	high STR_31
  4771  005EDC  6E0A               	movwf	str_cmp_const@p2+1,c
  4772  005EDE  EC96  F01D         	call	_str_cmp_const	;wreg free
  4773  005EE2  0900               	iorlw	0
  4774  005EE4  A4D8               	btfss	status,2,c
  4775  005EE6  D00F               	goto	l9718
  4776                           
  4777                           ;master/animation.c: 247:                 command_turn_ARRAY_2_3("U", "E'", "D'");
  4778  005EE8  0EF6               	movlw	low STR_3
  4779  005EEA  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
  4780  005EEC  0E7F               	movlw	high STR_3
  4781  005EEE  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
  4782  005EF0  0EA4               	movlw	low STR_27
  4783  005EF2  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
  4784  005EF4  0E7F               	movlw	high STR_27
  4785  005EF6  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
  4786  005EF8  0EA1               	movlw	low STR_10
  4787  005EFA  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
  4788  005EFC  0E7F               	movlw	high STR_10
  4789  005EFE  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
  4790  005F00  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
  4791                           
  4792                           ;master/animation.c: 248:             } else if (str_cmp_const(s, "Y'") == 0) {
  4793  005F04  0012               	return	
  4794  005F06                     l9718:
  4795  005F06  C057  F007         	movff	command_turn_ARRAY_2@s,str_cmp_const@p1
  4796  005F0A  C058  F008         	movff	command_turn_ARRAY_2@s+1,str_cmp_const@p1+1
  4797  005F0E  0EBC               	movlw	low STR_34
  4798  005F10  6E09               	movwf	str_cmp_const@p2,c
  4799  005F12  0E7F               	movlw	high STR_34
  4800  005F14  6E0A               	movwf	str_cmp_const@p2+1,c
  4801  005F16  EC96  F01D         	call	_str_cmp_const	;wreg free
  4802  005F1A  0900               	iorlw	0
  4803  005F1C  A4D8               	btfss	status,2,c
  4804  005F1E  D00F               	goto	l9722
  4805                           
  4806                           ;master/animation.c: 249:                 command_turn_ARRAY_2_3("U'", "E", "D");
  4807  005F20  0EB6               	movlw	low STR_9
  4808  005F22  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
  4809  005F24  0E7F               	movlw	high STR_9
  4810  005F26  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
  4811  005F28  0EEA               	movlw	low STR_21
  4812  005F2A  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
  4813  005F2C  0E7F               	movlw	high STR_21
  4814  005F2E  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
  4815  005F30  0EE8               	movlw	low STR_4
  4816  005F32  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
  4817  005F34  0E7F               	movlw	high STR_4
  4818  005F36  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
  4819  005F38  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
  4820                           
  4821                           ;master/animation.c: 250:             } else {
  4822  005F3C  0012               	return	
  4823  005F3E                     l9722:
  4824                           
  4825                           ;master/animation.c: 251:                 command_turn_ARRAY_2_3("U", "E'", "D'");
  4826  005F3E  0EF6               	movlw	low STR_3
  4827  005F40  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
  4828  005F42  0E7F               	movlw	high STR_3
  4829  005F44  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
  4830  005F46  0EA4               	movlw	low STR_27
  4831  005F48  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
  4832  005F4A  0E7F               	movlw	high STR_27
  4833  005F4C  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
  4834  005F4E  0EA1               	movlw	low STR_10
  4835  005F50  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
  4836  005F52  0E7F               	movlw	high STR_10
  4837  005F54  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
  4838  005F56  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
  4839                           
  4840                           ;master/animation.c: 252:                 command_turn_ARRAY_2_3("U", "E'", "D'");
  4841  005F5A  0EF6               	movlw	low STR_3
  4842  005F5C  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
  4843  005F5E  0E7F               	movlw	high STR_3
  4844  005F60  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
  4845  005F62  0EA4               	movlw	low STR_27
  4846  005F64  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
  4847  005F66  0E7F               	movlw	high STR_27
  4848  005F68  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
  4849  005F6A  0EA1               	movlw	low STR_10
  4850  005F6C  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
  4851  005F6E  0E7F               	movlw	high STR_10
  4852  005F70  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
  4853  005F72  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
  4854  005F76  0012               	return	
  4855  005F78                     l9726:
  4856                           
  4857                           ;master/animation.c: 256:             if (str_cmp_const(s, "X") == 0) {
  4858  005F78  C057  F007         	movff	command_turn_ARRAY_2@s,str_cmp_const@p1
  4859  005F7C  C058  F008         	movff	command_turn_ARRAY_2@s+1,str_cmp_const@p1+1
  4860  005F80  0EF8               	movlw	low STR_30
  4861  005F82  6E09               	movwf	str_cmp_const@p2,c
  4862  005F84  0E7F               	movlw	high STR_30
  4863  005F86  6E0A               	movwf	str_cmp_const@p2+1,c
  4864  005F88  EC96  F01D         	call	_str_cmp_const	;wreg free
  4865  005F8C  0900               	iorlw	0
  4866  005F8E  A4D8               	btfss	status,2,c
  4867  005F90  D00E               	goto	l9730
  4868                           
  4869                           ;master/animation.c: 257:                 command_turn_ARRAY_2_3("R", "M'", "L'");
  4870  005F92  0EF2               	movlw	low STR_6
  4871  005F94  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
  4872  005F96  0E7F               	movlw	high STR_6
  4873  005F98  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
  4874  005F9A  0EAD               	movlw	low STR_29
  4875  005F9C  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
  4876  005F9E  0E7F               	movlw	high STR_29
  4877  005FA0  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
  4878  005FA2  0EAA               	movlw	low STR_11
  4879  005FA4  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
  4880  005FA6  0E7F               	movlw	high STR_11
  4881  005FA8  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
  4882  005FAA  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
  4883  005FAE                     l9730:
  4884                           
  4885                           ;master/animation.c: 259:             if (str_cmp_const(s, "X'") == 0) {
  4886  005FAE  C057  F007         	movff	command_turn_ARRAY_2@s,str_cmp_const@p1
  4887  005FB2  C058  F008         	movff	command_turn_ARRAY_2@s+1,str_cmp_const@p1+1
  4888  005FB6  0EB9               	movlw	low STR_33
  4889  005FB8  6E09               	movwf	str_cmp_const@p2,c
  4890  005FBA  0E7F               	movlw	high STR_33
  4891  005FBC  6E0A               	movwf	str_cmp_const@p2+1,c
  4892  005FBE  EC96  F01D         	call	_str_cmp_const	;wreg free
  4893  005FC2  0900               	iorlw	0
  4894  005FC4  A4D8               	btfss	status,2,c
  4895  005FC6  D00F               	goto	l9734
  4896                           
  4897                           ;master/animation.c: 260:                 command_turn_ARRAY_2_3("R'", "M", "L");
  4898  005FC8  0EB0               	movlw	low STR_12
  4899  005FCA  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
  4900  005FCC  0E7F               	movlw	high STR_12
  4901  005FCE  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
  4902  005FD0  0EF0               	movlw	low STR_23
  4903  005FD2  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
  4904  005FD4  0E7F               	movlw	high STR_23
  4905  005FD6  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
  4906  005FD8  0EEE               	movlw	low STR_5
  4907  005FDA  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
  4908  005FDC  0E7F               	movlw	high STR_5
  4909  005FDE  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
  4910  005FE0  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
  4911                           
  4912                           ;master/animation.c: 261:             } else {
  4913  005FE4  0012               	return	
  4914  005FE6                     l9734:
  4915                           
  4916                           ;master/animation.c: 262:                 command_turn_ARRAY_2_3("R", "M'", "L'");
  4917  005FE6  0EF2               	movlw	low STR_6
  4918  005FE8  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
  4919  005FEA  0E7F               	movlw	high STR_6
  4920  005FEC  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
  4921  005FEE  0EAD               	movlw	low STR_29
  4922  005FF0  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
  4923  005FF2  0E7F               	movlw	high STR_29
  4924  005FF4  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
  4925  005FF6  0EAA               	movlw	low STR_11
  4926  005FF8  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
  4927  005FFA  0E7F               	movlw	high STR_11
  4928  005FFC  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
  4929  005FFE  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
  4930                           
  4931                           ;master/animation.c: 263:                 command_turn_ARRAY_2_3("R", "M'", "L'");
  4932  006002  0EF2               	movlw	low STR_6
  4933  006004  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
  4934  006006  0E7F               	movlw	high STR_6
  4935  006008  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
  4936  00600A  0EAD               	movlw	low STR_29
  4937  00600C  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
  4938  00600E  0E7F               	movlw	high STR_29
  4939  006010  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
  4940  006012  0EAA               	movlw	low STR_11
  4941  006014  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
  4942  006016  0E7F               	movlw	high STR_11
  4943  006018  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
  4944  00601A  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
  4945  00601E  0012               	return	
  4946  006020                     l9740:
  4947  006020  C057  FFF6         	movff	command_turn_ARRAY_2@s,tblptrl
  4948  006024  C058  FFF7         	movff	command_turn_ARRAY_2@s+1,tblptrh
  4949  006028                     	if	0	;tblptru may be non-zero
  4950  006028                     	endif
  4951  006028                     	if	0	;tblptru may be non-zero
  4952  006028                     	endif
  4953  006028  0008               	tblrd		*
  4954  00602A  50F5               	movf	tablat,w,c
  4955  00602C  6E59               	movwf	??_command_turn_ARRAY_2& (0+255),c
  4956  00602E  6A5A               	clrf	(??_command_turn_ARRAY_2+1)& (0+255),c
  4957                           
  4958                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4959                           ; Switch size 1, requested type "simple"
  4960                           ; Number of cases is 1, Range of values is 0 to 0
  4961                           ; switch strategies available:
  4962                           ; Name         Instructions Cycles
  4963                           ; simple_byte            4     3 (average)
  4964                           ;	Chosen strategy is simple_byte
  4965  006030  505A               	movf	??_command_turn_ARRAY_2+1,w,c
  4966  006032  0A00               	xorlw	0	; case 0
  4967  006034  A4D8               	btfss	status,2,c
  4968  006036  D00A               	goto	l9742
  4969                           
  4970                           ; Switch size 1, requested type "simple"
  4971                           ; Number of cases is 3, Range of values is 88 to 90
  4972                           ; switch strategies available:
  4973                           ; Name         Instructions Cycles
  4974                           ; simple_byte           10     6 (average)
  4975                           ;	Chosen strategy is simple_byte
  4976  006038  5059               	movf	??_command_turn_ARRAY_2,w,c
  4977  00603A  0A58               	xorlw	88	; case 88
  4978  00603C  B4D8               	btfsc	status,2,c
  4979  00603E  D79C               	goto	l9726
  4980  006040  0A01               	xorlw	1	; case 89
  4981  006042  B4D8               	btfsc	status,2,c
  4982  006044  D744               	goto	l9714
  4983  006046  0A03               	xorlw	3	; case 90
  4984  006048  B4D8               	btfsc	status,2,c
  4985  00604A  D6EC               	goto	l9702
  4986  00604C                     l9742:
  4987                           
  4988                           ;master/animation.c: 269:     command_turn_ARRAY_2_2(s);
  4989  00604C  C057  F04A         	movff	command_turn_ARRAY_2@s,command_turn_ARRAY_2_2@s
  4990  006050  C058  F04B         	movff	command_turn_ARRAY_2@s+1,command_turn_ARRAY_2_2@s+1
  4991  006054  EC00  F027         	call	_command_turn_ARRAY_2_2	;wreg free
  4992  006058  0012               	return		;funcret
  4993  00605A                     __end_of_command_turn_ARRAY_2:
  4994                           	opt callstack 0
  4995                           
  4996 ;; *************** function _animation_4 *****************
  4997 ;; Defined at:
  4998 ;;		line 73 in file "master/animation.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;  rand_seed       2   70[BANK0 ] unsigned int 
  5001 ;; Auto vars:     Size  Location     Type
  5002 ;;  anime_4_befo   46   74[BANK0 ] struct CE_2
  5003 ;; Return value:  Size  Location     Type
  5004 ;;                  1    wreg      unsigned char 
  5005 ;; Registers used:
  5006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5007 ;; Tracked objects:
  5008 ;;		On entry : 0/0
  5009 ;;		On exit  : 0/0
  5010 ;;		Unchanged: 0/0
  5011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5012 ;;      Params:         0       2       0       0       0       0       0
  5013 ;;      Locals:         0      46       0       0       0       0       0
  5014 ;;      Temps:          0       2       0       0       0       0       0
  5015 ;;      Totals:         0      50       0       0       0       0       0
  5016 ;;Total ram usage:       50 bytes
  5017 ;; Hardware stack levels used:    1
  5018 ;; Hardware stack levels required when called:   10
  5019 ;; This function calls:
  5020 ;;		_OUT_LED_ARRAY
  5021 ;;		_SPI_RET_2
  5022 ;;		_convert_ROTtoLED
  5023 ;;		_made_cube
  5024 ;;		_over_write_CE_from_A_to_B
  5025 ;;		_shuffle_state_CE
  5026 ;; This function is called by:
  5027 ;;		_Special_input
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031                           	psect	text7
  5032  003D46                     __ptext7:
  5033                           	opt callstack 0
  5034  003D46                     _animation_4:
  5035                           	opt callstack 19
  5036                           
  5037                           ;master/animation.c: 74:     CE anime_4_before_CE;;master/animation.c: 75:     over_writ
      +                          e_CE_from_A_to_B(state_CE, &anime_4_before_CE);
  5038                           
  5039                           ;incstack = 0
  5040  003D46  EE21  F090         	lfsr	2,_state_CE
  5041  003D4A  EE00  F001         	lfsr	0,over_write_CE_from_A_to_B@A
  5042  003D4E  0E2D               	movlw	45
  5043  003D50                     u7671:
  5044  003D50  CFDB FFEB          	movff	plusw2,plusw0
  5045  003D54  06E8               	decf	wreg,f,c
  5046  003D56  E2FC               	bc	u7671
  5047  003D58  0EAA               	movlw	low animation_4@anime_4_before_CE
  5048  003D5A  6E2F               	movwf	over_write_CE_from_A_to_B@B,c
  5049  003D5C  0E00               	movlw	high animation_4@anime_4_before_CE
  5050  003D5E  6E30               	movwf	over_write_CE_from_A_to_B@B+1,c
  5051  003D60  ECBA  F025         	call	_over_write_CE_from_A_to_B	;wreg free
  5052                           
  5053                           ;master/animation.c: 79:     SPI_RET_2();
  5054  003D64  EC6D  F014         	call	_SPI_RET_2	;wreg free
  5055                           
  5056                           ;master/animation.c: 81:     shuffle_state_CE(rand_seed);
  5057  003D68  C0A6  F037         	movff	animation_4@rand_seed,shuffle_state_CE@seed_number
  5058  003D6C  C0A7  F038         	movff	animation_4@rand_seed+1,shuffle_state_CE@seed_number+1
  5059  003D70  EC70  F01B         	call	_shuffle_state_CE	;wreg free
  5060                           
  5061                           ;master/animation.c: 82:     convert_ROTtoLED();
  5062  003D74  EC00  F01C         	call	_convert_ROTtoLED	;wreg free
  5063                           
  5064                           ;master/animation.c: 83:     OUT_LED_ARRAY(LED_ARRAY, POWER);
  5065  003D78  0E07               	movlw	low _LED_ARRAY
  5066  003D7A  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
  5067  003D7C  0E01               	movlw	high _LED_ARRAY
  5068  003D7E  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
  5069  003D80  C0F0  F009         	movff	_POWER,OUT_LED_ARRAY@LED_POWER
  5070  003D84  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
  5071                           
  5072                           ;master/animation.c: 84:     _delay((unsigned long)((150)*(64000000/4000.0)));
  5073  003D88  0E0D               	movlw	13
  5074  003D8A  0100               	movlb	0	; () banked
  5075  003D8C  6FA9               	movwf	(??_animation_4+1)& (0+255),b
  5076  003D8E  0E2D               	movlw	45
  5077  003D90  6FA8               	movwf	??_animation_4& (0+255),b
  5078  003D92  0ED7               	movlw	215
  5079  003D94                     u8237:
  5080  003D94  2EE8               	decfsz	wreg,f,c
  5081  003D96  D7FE               	bra	u8237
  5082  003D98  2FA8               	decfsz	??_animation_4& (0+255),f,b
  5083  003D9A  D7FC               	bra	u8237
  5084  003D9C  2FA9               	decfsz	(??_animation_4+1)& (0+255),f,b
  5085  003D9E  D7FA               	bra	u8237
  5086  003DA0  D000               	nop2	
  5087                           
  5088                           ;master/animation.c: 86:     made_cube(1, 5);
  5089  003DA2  0E05               	movlw	5
  5090  003DA4  0100               	movlb	0	; () banked
  5091  003DA6  6FA0               	movwf	made_cube@skip_CS& (0+255),b
  5092  003DA8  0E01               	movlw	1
  5093  003DAA  EC7C  F029         	call	_made_cube
  5094                           
  5095                           ;master/animation.c: 87:     convert_ROTtoLED();
  5096  003DAE  EC00  F01C         	call	_convert_ROTtoLED	;wreg free
  5097                           
  5098                           ;master/animation.c: 88:     OUT_LED_ARRAY(LED_ARRAY, POWER);
  5099  003DB2  0E07               	movlw	low _LED_ARRAY
  5100  003DB4  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
  5101  003DB6  0E01               	movlw	high _LED_ARRAY
  5102  003DB8  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
  5103  003DBA  C0F0  F009         	movff	_POWER,OUT_LED_ARRAY@LED_POWER
  5104  003DBE  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
  5105                           
  5106                           ;master/animation.c: 89:     _delay((unsigned long)((500)*(64000000/4000.0)));
  5107  003DC2  0E29               	movlw	41
  5108  003DC4  0100               	movlb	0	; () banked
  5109  003DC6  6FA9               	movwf	(??_animation_4+1)& (0+255),b
  5110  003DC8  0E96               	movlw	150
  5111  003DCA  6FA8               	movwf	??_animation_4& (0+255),b
  5112  003DCC  0E7F               	movlw	127
  5113  003DCE                     u8247:
  5114  003DCE  2EE8               	decfsz	wreg,f,c
  5115  003DD0  D7FE               	bra	u8247
  5116  003DD2  2FA8               	decfsz	??_animation_4& (0+255),f,b
  5117  003DD4  D7FC               	bra	u8247
  5118  003DD6  2FA9               	decfsz	(??_animation_4+1)& (0+255),f,b
  5119  003DD8  D7FA               	bra	u8247
  5120                           
  5121                           ;master/animation.c: 91:     over_write_CE_from_A_to_B(anime_4_before_CE, &state_CE);
  5122  003DDA  EE20  F0AA         	lfsr	2,animation_4@anime_4_before_CE
  5123  003DDE  EE00  F001         	lfsr	0,over_write_CE_from_A_to_B@A
  5124  003DE2  0E2D               	movlw	45
  5125  003DE4                     u7681:
  5126  003DE4  CFDB FFEB          	movff	plusw2,plusw0
  5127  003DE8  06E8               	decf	wreg,f,c
  5128  003DEA  E2FC               	bc	u7681
  5129  003DEC  0E90               	movlw	low _state_CE
  5130  003DEE  6E2F               	movwf	over_write_CE_from_A_to_B@B,c
  5131  003DF0  0E01               	movlw	high _state_CE
  5132  003DF2  6E30               	movwf	over_write_CE_from_A_to_B@B+1,c
  5133  003DF4  ECBA  F025         	call	_over_write_CE_from_A_to_B	;wreg free
  5134                           
  5135                           ;master/animation.c: 92:     if (mode_cube_end == 0)
  5136  003DF8  0100               	movlb	0	; () banked
  5137  003DFA  51F3               	movf	_mode_cube_end& (0+255),w,b
  5138  003DFC  A4D8               	btfss	status,2,c
  5139  003DFE  D002               	goto	l9778
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;master/animation.c: 93:         return 1;
  5143  003E00  0E01               	movlw	1
  5144  003E02  0012               	return	
  5145  003E04                     l9778:
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;master/animation.c: 94:     return 0;
  5149  003E04  0E00               	movlw	0
  5150                           
  5151                           ; BSR set to: 0
  5152  003E06  0012               	return		;funcret
  5153  003E08                     __end_of_animation_4:
  5154                           	opt callstack 0
  5155                           
  5156 ;; *************** function _shuffle_state_CE *****************
  5157 ;; Defined at:
  5158 ;;		line 105 in file "master/animation.c"
  5159 ;; Parameters:    Size  Location     Type
  5160 ;;  seed_number     2   54[COMRAM] const unsigned int 
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;  rand_CE        20   57[COMRAM] unsigned char [20]
  5163 ;;  i               1   77[COMRAM] unsigned char 
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  1    wreg      void 
  5166 ;; Registers used:
  5167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5173 ;;      Params:         2       0       0       0       0       0       0
  5174 ;;      Locals:        21       0       0       0       0       0       0
  5175 ;;      Temps:          1       0       0       0       0       0       0
  5176 ;;      Totals:        24       0       0       0       0       0       0
  5177 ;;Total ram usage:       24 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; Hardware stack levels required when called:    3
  5180 ;; This function calls:
  5181 ;;		___awmod
  5182 ;;		_command_turn_CE
  5183 ;;		_rand
  5184 ;;		_srand
  5185 ;; This function is called by:
  5186 ;;		_Special_input
  5187 ;;		_animation_4
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           	psect	text8
  5192  0036E0                     __ptext8:
  5193                           	opt callstack 0
  5194  0036E0                     _shuffle_state_CE:
  5195                           	opt callstack 26
  5196                           
  5197                           ;master/animation.c: 106:     char rand_CE[20];;master/animation.c: 107:     char i;;mas
      +                          ter/animation.c: 108:     srand(seed_number);
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;incstack = 0
  5201  0036E0  C037  F001         	movff	shuffle_state_CE@seed_number,srand@s
  5202  0036E4  C038  F002         	movff	shuffle_state_CE@seed_number+1,srand@s+1
  5203  0036E8  EC7B  F015         	call	_srand	;wreg free
  5204                           
  5205                           ;master/animation.c: 110:     for (i = 0; i < 20; i++) {
  5206  0036EC  0E00               	movlw	0
  5207  0036EE  6E4E               	movwf	shuffle_state_CE@i,c
  5208  0036F0                     l9048:
  5209                           
  5210                           ;master/animation.c: 111:         rand_CE[i] = 1 + rand() % (18 + 3 * 3);
  5211  0036F0  ECCF  F01F         	call	_rand	;wreg free
  5212  0036F4  C019  F023         	movff	?_rand,___awmod@dividend
  5213  0036F8  C01A  F024         	movff	?_rand+1,___awmod@dividend+1
  5214  0036FC  0E00               	movlw	0
  5215  0036FE  6E26               	movwf	___awmod@divisor+1,c
  5216  003700  0E1B               	movlw	27
  5217  003702  6E25               	movwf	___awmod@divisor,c
  5218  003704  EC77  F01A         	call	___awmod	;wreg free
  5219  003708  0E01               	movlw	1
  5220  00370A  2623               	addwf	?___awmod,f,c
  5221  00370C  0E3A               	movlw	low shuffle_state_CE@rand_CE
  5222  00370E  244E               	addwf	shuffle_state_CE@i,w,c
  5223  003710  6ED9               	movwf	fsr2l,c
  5224  003712  6ADA               	clrf	fsr2h,c
  5225  003714  0E00               	movlw	high shuffle_state_CE@rand_CE
  5226  003716  22DA               	addwfc	fsr2h,f,c
  5227  003718  C023  FFDF         	movff	?___awmod,indf2
  5228                           
  5229                           ;master/animation.c: 112:     }
  5230  00371C  2A4E               	incf	shuffle_state_CE@i,f,c
  5231  00371E  0E13               	movlw	19
  5232  003720  644E               	cpfsgt	shuffle_state_CE@i,c
  5233  003722  D7E6               	goto	l9048
  5234                           
  5235                           ;master/animation.c: 113:     for (i = 0; i < 20; i++) {
  5236  003724  0E00               	movlw	0
  5237  003726  6E4E               	movwf	shuffle_state_CE@i,c
  5238  003728                     l9060:
  5239                           
  5240                           ;master/animation.c: 114:         command_turn_CE(CE_LIST[rand_CE[i]].name);
  5241  003728  0E3A               	movlw	low shuffle_state_CE@rand_CE
  5242  00372A  244E               	addwf	shuffle_state_CE@i,w,c
  5243  00372C  6ED9               	movwf	fsr2l,c
  5244  00372E  6ADA               	clrf	fsr2h,c
  5245  003730  0E00               	movlw	high shuffle_state_CE@rand_CE
  5246  003732  22DA               	addwfc	fsr2h,f,c
  5247  003734  50DF               	movf	indf2,w,c
  5248  003736  6E39               	movwf	??_shuffle_state_CE& (0+255),c
  5249  003738  5039               	movf	??_shuffle_state_CE,w,c
  5250  00373A  0D05               	mullw	5
  5251  00373C  0E02               	movlw	2
  5252  00373E  26F3               	addwf	prodl,f,c
  5253  003740  0E00               	movlw	0
  5254  003742  22F4               	addwfc	prodh,f,c
  5255  003744  0E91               	movlw	low _CE_LIST
  5256  003746  24F3               	addwf	prodl,w,c
  5257  003748  6EF6               	movwf	tblptrl,c
  5258  00374A  0E7A               	movlw	high _CE_LIST
  5259  00374C  20F4               	addwfc	prodh,w,c
  5260  00374E  6EF7               	movwf	tblptrh,c
  5261  003750                     	if	0	;There are less than 3 active tblptr bytes
  5262  003750                     	endif
  5263  003750  0009               	tblrd		*+
  5264  003752  CFF5 F033          	movff	tablat,command_turn_CE@s
  5265  003756  000A               	tblrd		*-
  5266  003758  CFF5 F034          	movff	tablat,command_turn_CE@s+1
  5267  00375C  ECEF  F01D         	call	_command_turn_CE	;wreg free
  5268                           
  5269                           ;master/animation.c: 115:     }
  5270  003760  2A4E               	incf	shuffle_state_CE@i,f,c
  5271  003762  0E13               	movlw	19
  5272  003764  644E               	cpfsgt	shuffle_state_CE@i,c
  5273  003766  D7E0               	goto	l9060
  5274  003768  0012               	return	
  5275  00376A                     __end_of_shuffle_state_CE:
  5276                           	opt callstack 0
  5277                           
  5278 ;; *************** function _srand *****************
  5279 ;; Defined at:
  5280 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\rand.c"
  5281 ;; Parameters:    Size  Location     Type
  5282 ;;  s               2    0[COMRAM] unsigned int 
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;		None
  5285 ;; Return value:  Size  Location     Type
  5286 ;;                  1    wreg      void 
  5287 ;; Registers used:
  5288 ;;		wreg, status,2, status,0
  5289 ;; Tracked objects:
  5290 ;;		On entry : 0/0
  5291 ;;		On exit  : 0/0
  5292 ;;		Unchanged: 0/0
  5293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5294 ;;      Params:         2       0       0       0       0       0       0
  5295 ;;      Locals:         0       0       0       0       0       0       0
  5296 ;;      Temps:          4       0       0       0       0       0       0
  5297 ;;      Totals:         6       0       0       0       0       0       0
  5298 ;;Total ram usage:        6 bytes
  5299 ;; Hardware stack levels used:    1
  5300 ;; This function calls:
  5301 ;;		Nothing
  5302 ;; This function is called by:
  5303 ;;		_shuffle_state_CE
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           	psect	text9
  5308  002AF6                     __ptext9:
  5309                           	opt callstack 0
  5310  002AF6                     _srand:
  5311                           	opt callstack 28
  5312                           
  5313                           ;incstack = 0
  5314  002AF6  0EFF               	movlw	255
  5315  002AF8  6E03               	movwf	??_srand& (0+255),c
  5316  002AFA  0EFF               	movlw	255
  5317  002AFC  6E04               	movwf	(??_srand+1)& (0+255),c
  5318  002AFE  C001  F005         	movff	srand@s,??_srand+2
  5319  002B02  C002  F006         	movff	srand@s+1,??_srand+3
  5320  002B06  5003               	movf	??_srand,w,c
  5321  002B08  2605               	addwf	??_srand+2,f,c
  5322  002B0A  5004               	movf	??_srand+1,w,c
  5323  002B0C  2206               	addwfc	??_srand+3,f,c
  5324  002B0E  C005  F0F6         	movff	??_srand+2,_seed
  5325  002B12  C006  F0F7         	movff	??_srand+3,_seed+1
  5326  002B16  0100               	movlb	0	; () banked
  5327  002B18  6BF8               	clrf	(_seed+2)& (0+255),b
  5328  002B1A  6BF9               	clrf	(_seed+3)& (0+255),b
  5329  002B1C  6BFA               	clrf	(_seed+4)& (0+255),b
  5330  002B1E  6BFB               	clrf	(_seed+5)& (0+255),b
  5331  002B20  6BFC               	clrf	(_seed+6)& (0+255),b
  5332  002B22  6BFD               	clrf	(_seed+7)& (0+255),b
  5333                           
  5334                           ; BSR set to: 0
  5335  002B24  0012               	return		;funcret
  5336  002B26                     __end_of_srand:
  5337                           	opt callstack 0
  5338                           
  5339 ;; *************** function _rand *****************
  5340 ;; Defined at:
  5341 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\rand.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;		None
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;		None
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  2   24[COMRAM] int 
  5348 ;; Registers used:
  5349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5355 ;;      Params:         2       0       0       0       0       0       0
  5356 ;;      Locals:         0       0       0       0       0       0       0
  5357 ;;      Temps:          8       0       0       0       0       0       0
  5358 ;;      Totals:        10       0       0       0       0       0       0
  5359 ;;Total ram usage:       10 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; Hardware stack levels required when called:    1
  5362 ;; This function calls:
  5363 ;;		___omul
  5364 ;; This function is called by:
  5365 ;;		_shuffle_state_CE
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           	psect	text10
  5370  003F9E                     __ptext10:
  5371                           	opt callstack 0
  5372  003F9E                     _rand:
  5373                           	opt callstack 27
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;incstack = 0
  5377  003F9E  C0F6  F001         	movff	_seed,___omul@multiplier
  5378  003FA2  C0F7  F002         	movff	_seed+1,___omul@multiplier+1
  5379  003FA6  C0F8  F003         	movff	_seed+2,___omul@multiplier+2
  5380  003FAA  C0F9  F004         	movff	_seed+3,___omul@multiplier+3
  5381  003FAE  C0FA  F005         	movff	_seed+4,___omul@multiplier+4
  5382  003FB2  C0FB  F006         	movff	_seed+5,___omul@multiplier+5
  5383  003FB6  C0FC  F007         	movff	_seed+6,___omul@multiplier+6
  5384  003FBA  C0FD  F008         	movff	_seed+7,___omul@multiplier+7
  5385  003FBE  0E2D               	movlw	45
  5386  003FC0  6E09               	movwf	___omul@multiplicand,c
  5387  003FC2  0E7F               	movlw	127
  5388  003FC4  6E0A               	movwf	___omul@multiplicand+1,c
  5389  003FC6  0E95               	movlw	149
  5390  003FC8  6E0B               	movwf	___omul@multiplicand+2,c
  5391  003FCA  0E4C               	movlw	76
  5392  003FCC  6E0C               	movwf	___omul@multiplicand+3,c
  5393  003FCE  0E2D               	movlw	45
  5394  003FD0  6E0D               	movwf	___omul@multiplicand+4,c
  5395  003FD2  0EF4               	movlw	244
  5396  003FD4  6E0E               	movwf	___omul@multiplicand+5,c
  5397  003FD6  0E51               	movlw	81
  5398  003FD8  6E0F               	movwf	___omul@multiplicand+6,c
  5399  003FDA  0E58               	movlw	88
  5400  003FDC  6E10               	movwf	___omul@multiplicand+7,c
  5401  003FDE  EC2B  F01B         	call	___omul	;wreg free
  5402  003FE2  C001  F01B         	movff	?___omul,??_rand
  5403  003FE6  C002  F01C         	movff	?___omul+1,??_rand+1
  5404  003FEA  C003  F01D         	movff	?___omul+2,??_rand+2
  5405  003FEE  C004  F01E         	movff	?___omul+3,??_rand+3
  5406  003FF2  C005  F01F         	movff	?___omul+4,??_rand+4
  5407  003FF6  C006  F020         	movff	?___omul+5,??_rand+5
  5408  003FFA  C007  F021         	movff	?___omul+6,??_rand+6
  5409  003FFE  C008  F022         	movff	?___omul+7,??_rand+7
  5410  004002  0E01               	movlw	1
  5411  004004  241B               	addwf	??_rand,w,c
  5412  004006  0100               	movlb	0	; () banked
  5413  004008  6FF6               	movwf	_seed& (0+255),b
  5414  00400A  0E00               	movlw	0
  5415  00400C  201C               	addwfc	??_rand+1,w,c
  5416  00400E  6FF7               	movwf	(_seed+1)& (0+255),b
  5417  004010  0E00               	movlw	0
  5418  004012  201D               	addwfc	??_rand+2,w,c
  5419  004014  6FF8               	movwf	(_seed+2)& (0+255),b
  5420  004016  0E00               	movlw	0
  5421  004018  201E               	addwfc	??_rand+3,w,c
  5422  00401A  6FF9               	movwf	(_seed+3)& (0+255),b
  5423  00401C  0E00               	movlw	0
  5424  00401E  201F               	addwfc	??_rand+4,w,c
  5425  004020  6FFA               	movwf	(_seed+4)& (0+255),b
  5426  004022  0E00               	movlw	0
  5427  004024  2020               	addwfc	??_rand+5,w,c
  5428  004026  6FFB               	movwf	(_seed+5)& (0+255),b
  5429  004028  0E00               	movlw	0
  5430  00402A  2021               	addwfc	??_rand+6,w,c
  5431  00402C  6FFC               	movwf	(_seed+6)& (0+255),b
  5432  00402E  0E00               	movlw	0
  5433  004030  2022               	addwfc	??_rand+7,w,c
  5434  004032  6FFD               	movwf	(_seed+7)& (0+255),b
  5435                           
  5436                           ; BSR set to: 0
  5437  004034  C0F6  F01B         	movff	_seed,??_rand
  5438  004038  C0F7  F01C         	movff	_seed+1,??_rand+1
  5439  00403C  C0F8  F01D         	movff	_seed+2,??_rand+2
  5440  004040  C0F9  F01E         	movff	_seed+3,??_rand+3
  5441  004044  C0FA  F01F         	movff	_seed+4,??_rand+4
  5442  004048  C0FB  F020         	movff	_seed+5,??_rand+5
  5443  00404C  C0FC  F021         	movff	_seed+6,??_rand+6
  5444  004050  C0FD  F022         	movff	_seed+7,??_rand+7
  5445  004054  0E08               	movlw	8
  5446  004056  D009               	goto	u6730
  5447  004058                     u6735:
  5448  004058  90D8               	bcf	status,0,c
  5449  00405A  3222               	rrcf	??_rand+7,f,c
  5450  00405C  3221               	rrcf	??_rand+6,f,c
  5451  00405E  3220               	rrcf	??_rand+5,f,c
  5452  004060  321F               	rrcf	??_rand+4,f,c
  5453  004062  321E               	rrcf	??_rand+3,f,c
  5454  004064  321D               	rrcf	??_rand+2,f,c
  5455  004066  321C               	rrcf	??_rand+1,f,c
  5456  004068  321B               	rrcf	??_rand,f,c
  5457  00406A                     u6730:
  5458  00406A  2EE8               	decfsz	wreg,f,c
  5459  00406C  D7F5               	goto	u6735
  5460  00406E  C01B  F019         	movff	??_rand,?_rand
  5461  004072  C01D  F01A         	movff	??_rand+2,?_rand+1
  5462                           
  5463                           ; BSR set to: 0
  5464  004076  0012               	return		;funcret
  5465  004078                     __end_of_rand:
  5466                           	opt callstack 0
  5467                           
  5468 ;; *************** function ___omul *****************
  5469 ;; Defined at:
  5470 ;;		line 91 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul64.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;  multiplier      8    0[COMRAM] unsigned long long 
  5473 ;;  multiplicand    8    8[COMRAM] unsigned long long 
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;  product         8   16[COMRAM] unsigned long long 
  5476 ;; Return value:  Size  Location     Type
  5477 ;;                  8    0[COMRAM] unsigned long long 
  5478 ;; Registers used:
  5479 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5485 ;;      Params:        16       0       0       0       0       0       0
  5486 ;;      Locals:         8       0       0       0       0       0       0
  5487 ;;      Temps:          0       0       0       0       0       0       0
  5488 ;;      Totals:        24       0       0       0       0       0       0
  5489 ;;Total ram usage:       24 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; This function calls:
  5492 ;;		Nothing
  5493 ;; This function is called by:
  5494 ;;		_rand
  5495 ;; This function uses a non-reentrant model
  5496 ;;
  5497                           
  5498                           	psect	text11
  5499  003656                     __ptext11:
  5500                           	opt callstack 0
  5501  003656                     ___omul:
  5502                           	opt callstack 27
  5503                           
  5504                           ; BSR set to: 0
  5505                           ;incstack = 0
  5506  003656  EE20  F011         	lfsr	2,___omul@product
  5507  00365A  0E07               	movlw	7
  5508  00365C                     u5611:
  5509  00365C  6ADE               	clrf	postinc2,c
  5510  00365E  06E8               	decf	wreg,f,c
  5511  003660  E2FD               	bc	u5611
  5512  003662                     l8148:
  5513  003662  A001               	btfss	___omul@multiplier,0,c
  5514  003664  D010               	goto	l8152
  5515  003666  5009               	movf	___omul@multiplicand,w,c
  5516  003668  2611               	addwf	___omul@product,f,c
  5517  00366A  500A               	movf	___omul@multiplicand+1,w,c
  5518  00366C  2212               	addwfc	___omul@product+1,f,c
  5519  00366E  500B               	movf	___omul@multiplicand+2,w,c
  5520  003670  2213               	addwfc	___omul@product+2,f,c
  5521  003672  500C               	movf	___omul@multiplicand+3,w,c
  5522  003674  2214               	addwfc	___omul@product+3,f,c
  5523  003676  500D               	movf	___omul@multiplicand+4,w,c
  5524  003678  2215               	addwfc	___omul@product+4,f,c
  5525  00367A  500E               	movf	___omul@multiplicand+5,w,c
  5526  00367C  2216               	addwfc	___omul@product+5,f,c
  5527  00367E  500F               	movf	___omul@multiplicand+6,w,c
  5528  003680  2217               	addwfc	___omul@product+6,f,c
  5529  003682  5010               	movf	___omul@multiplicand+7,w,c
  5530  003684  2218               	addwfc	___omul@product+7,f,c
  5531  003686                     l8152:
  5532  003686  90D8               	bcf	status,0,c
  5533  003688  3609               	rlcf	___omul@multiplicand,f,c
  5534  00368A  360A               	rlcf	___omul@multiplicand+1,f,c
  5535  00368C  360B               	rlcf	___omul@multiplicand+2,f,c
  5536  00368E  360C               	rlcf	___omul@multiplicand+3,f,c
  5537  003690  360D               	rlcf	___omul@multiplicand+4,f,c
  5538  003692  360E               	rlcf	___omul@multiplicand+5,f,c
  5539  003694  360F               	rlcf	___omul@multiplicand+6,f,c
  5540  003696  3610               	rlcf	___omul@multiplicand+7,f,c
  5541  003698  90D8               	bcf	status,0,c
  5542  00369A  3208               	rrcf	___omul@multiplier+7,f,c
  5543  00369C  3207               	rrcf	___omul@multiplier+6,f,c
  5544  00369E  3206               	rrcf	___omul@multiplier+5,f,c
  5545  0036A0  3205               	rrcf	___omul@multiplier+4,f,c
  5546  0036A2  3204               	rrcf	___omul@multiplier+3,f,c
  5547  0036A4  3203               	rrcf	___omul@multiplier+2,f,c
  5548  0036A6  3202               	rrcf	___omul@multiplier+1,f,c
  5549  0036A8  3201               	rrcf	___omul@multiplier,f,c
  5550  0036AA  5001               	movf	___omul@multiplier,w,c
  5551  0036AC  1002               	iorwf	___omul@multiplier+1,w,c
  5552  0036AE  1003               	iorwf	___omul@multiplier+2,w,c
  5553  0036B0  1004               	iorwf	___omul@multiplier+3,w,c
  5554  0036B2  1005               	iorwf	___omul@multiplier+4,w,c
  5555  0036B4  1006               	iorwf	___omul@multiplier+5,w,c
  5556  0036B6  1007               	iorwf	___omul@multiplier+6,w,c
  5557  0036B8  1008               	iorwf	___omul@multiplier+7,w,c
  5558  0036BA  A4D8               	btfss	status,2,c
  5559  0036BC  D7D2               	goto	l8148
  5560  0036BE  C011  F001         	movff	___omul@product,?___omul
  5561  0036C2  C012  F002         	movff	___omul@product+1,?___omul+1
  5562  0036C6  C013  F003         	movff	___omul@product+2,?___omul+2
  5563  0036CA  C014  F004         	movff	___omul@product+3,?___omul+3
  5564  0036CE  C015  F005         	movff	___omul@product+4,?___omul+4
  5565  0036D2  C016  F006         	movff	___omul@product+5,?___omul+5
  5566  0036D6  C017  F007         	movff	___omul@product+6,?___omul+6
  5567  0036DA  C018  F008         	movff	___omul@product+7,?___omul+7
  5568  0036DE  0012               	return		;funcret
  5569  0036E0                     __end_of___omul:
  5570                           	opt callstack 0
  5571                           
  5572 ;; *************** function _over_write_CE_from_A_to_B *****************
  5573 ;; Defined at:
  5574 ;;		line 344 in file "master/operation_CES.c"
  5575 ;; Parameters:    Size  Location     Type
  5576 ;;  A              46    0[COMRAM] const struct CE_2
  5577 ;;  B               2   46[COMRAM] PTR struct CE_2
  5578 ;;		 -> animation_4@anime_4_before_CE(46), Special_input@IDA_CE(46), state_CE(46), 
  5579 ;; Auto vars:     Size  Location     Type
  5580 ;;  i               2   52[COMRAM] int 
  5581 ;; Return value:  Size  Location     Type
  5582 ;;                  1    wreg      void 
  5583 ;; Registers used:
  5584 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5585 ;; Tracked objects:
  5586 ;;		On entry : 0/0
  5587 ;;		On exit  : 0/0
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5590 ;;      Params:        48       0       0       0       0       0       0
  5591 ;;      Locals:         2       0       0       0       0       0       0
  5592 ;;      Temps:          4       0       0       0       0       0       0
  5593 ;;      Totals:        54       0       0       0       0       0       0
  5594 ;;Total ram usage:       54 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; This function calls:
  5597 ;;		Nothing
  5598 ;; This function is called by:
  5599 ;;		_Special_input
  5600 ;;		_animation_4
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text12
  5605  004B74                     __ptext12:
  5606                           	opt callstack 0
  5607  004B74                     _over_write_CE_from_A_to_B:
  5608                           	opt callstack 29
  5609                           
  5610                           ;master/operation_CES.c: 344: void over_write_CE_from_A_to_B(const CE A,CE* B);master/op
      +                          eration_CES.c: 345: {;master/operation_CES.c: 346:  int i;;master/operation_CES.c: 347: 
      +                           for (i = 0; i < 8; i++)
  5611                           
  5612                           ;incstack = 0
  5613  004B74  0E00               	movlw	0
  5614  004B76  6E36               	movwf	over_write_CE_from_A_to_B@i+1,c
  5615  004B78  0E00               	movlw	0
  5616  004B7A  6E35               	movwf	over_write_CE_from_A_to_B@i,c
  5617  004B7C                     l9072:
  5618                           
  5619                           ;master/operation_CES.c: 348:  {;master/operation_CES.c: 349:   B->co[i] = A.co[i];
  5620  004B7C  0E08               	movlw	8
  5621  004B7E  2435               	addwf	over_write_CE_from_A_to_B@i,w,c
  5622  004B80  6E31               	movwf	??_over_write_CE_from_A_to_B& (0+255),c
  5623  004B82  0E00               	movlw	0
  5624  004B84  2036               	addwfc	over_write_CE_from_A_to_B@i+1,w,c
  5625  004B86  6E32               	movwf	(??_over_write_CE_from_A_to_B+1)& (0+255),c
  5626  004B88  0E01               	movlw	low over_write_CE_from_A_to_B@A
  5627  004B8A  2431               	addwf	??_over_write_CE_from_A_to_B,w,c
  5628  004B8C  6ED9               	movwf	fsr2l,c
  5629  004B8E  0E00               	movlw	high over_write_CE_from_A_to_B@A
  5630  004B90  2032               	addwfc	??_over_write_CE_from_A_to_B+1,w,c
  5631  004B92  6EDA               	movwf	fsr2h,c
  5632  004B94  5035               	movf	over_write_CE_from_A_to_B@i,w,c
  5633  004B96  242F               	addwf	over_write_CE_from_A_to_B@B,w,c
  5634  004B98  6E33               	movwf	(??_over_write_CE_from_A_to_B+2)& (0+255),c
  5635  004B9A  5036               	movf	over_write_CE_from_A_to_B@i+1,w,c
  5636  004B9C  2030               	addwfc	over_write_CE_from_A_to_B@B+1,w,c
  5637  004B9E  6E34               	movwf	(??_over_write_CE_from_A_to_B+3)& (0+255),c
  5638  004BA0  0E08               	movlw	8
  5639  004BA2  2433               	addwf	??_over_write_CE_from_A_to_B+2,w,c
  5640  004BA4  6EE1               	movwf	fsr1l,c
  5641  004BA6  0E00               	movlw	0
  5642  004BA8  2034               	addwfc	??_over_write_CE_from_A_to_B+3,w,c
  5643  004BAA  6EE2               	movwf	fsr1h,c
  5644  004BAC  CFDF FFE7          	movff	indf2,indf1
  5645                           
  5646                           ;master/operation_CES.c: 350:   B->cp[i] = A.cp[i];
  5647  004BB0  0E01               	movlw	low over_write_CE_from_A_to_B@A
  5648  004BB2  2435               	addwf	over_write_CE_from_A_to_B@i,w,c
  5649  004BB4  6ED9               	movwf	fsr2l,c
  5650  004BB6  0E00               	movlw	high over_write_CE_from_A_to_B@A
  5651  004BB8  2036               	addwfc	over_write_CE_from_A_to_B@i+1,w,c
  5652  004BBA  6EDA               	movwf	fsr2h,c
  5653  004BBC  5035               	movf	over_write_CE_from_A_to_B@i,w,c
  5654  004BBE  242F               	addwf	over_write_CE_from_A_to_B@B,w,c
  5655  004BC0  6EE1               	movwf	fsr1l,c
  5656  004BC2  5036               	movf	over_write_CE_from_A_to_B@i+1,w,c
  5657  004BC4  2030               	addwfc	over_write_CE_from_A_to_B@B+1,w,c
  5658  004BC6  6EE2               	movwf	fsr1h,c
  5659  004BC8  CFDF FFE7          	movff	indf2,indf1
  5660                           
  5661                           ;master/operation_CES.c: 351:  }
  5662  004BCC  4A35               	infsnz	over_write_CE_from_A_to_B@i,f,c
  5663  004BCE  2A36               	incf	over_write_CE_from_A_to_B@i+1,f,c
  5664  004BD0  BE36               	btfsc	over_write_CE_from_A_to_B@i+1,7,c
  5665  004BD2  D7D4               	goto	l9072
  5666  004BD4  5036               	movf	over_write_CE_from_A_to_B@i+1,w,c
  5667  004BD6  E104               	bnz	u6910
  5668  004BD8  0E08               	movlw	8
  5669  004BDA  5C35               	subwf	over_write_CE_from_A_to_B@i,w,c
  5670  004BDC  A0D8               	btfss	status,0,c
  5671  004BDE  D7CE               	goto	l9072
  5672  004BE0                     u6910:
  5673                           
  5674                           ;master/operation_CES.c: 352:  for (i = 0; i < 12; i++)
  5675  004BE0  0E00               	movlw	0
  5676  004BE2  6E36               	movwf	over_write_CE_from_A_to_B@i+1,c
  5677  004BE4  0E00               	movlw	0
  5678  004BE6  6E35               	movwf	over_write_CE_from_A_to_B@i,c
  5679  004BE8                     l9084:
  5680                           
  5681                           ;master/operation_CES.c: 353:  {;master/operation_CES.c: 354:   B->eo[i] = A.eo[i];
  5682  004BE8  0E1C               	movlw	28
  5683  004BEA  2435               	addwf	over_write_CE_from_A_to_B@i,w,c
  5684  004BEC  6E31               	movwf	??_over_write_CE_from_A_to_B& (0+255),c
  5685  004BEE  0E00               	movlw	0
  5686  004BF0  2036               	addwfc	over_write_CE_from_A_to_B@i+1,w,c
  5687  004BF2  6E32               	movwf	(??_over_write_CE_from_A_to_B+1)& (0+255),c
  5688  004BF4  0E01               	movlw	low over_write_CE_from_A_to_B@A
  5689  004BF6  2431               	addwf	??_over_write_CE_from_A_to_B,w,c
  5690  004BF8  6ED9               	movwf	fsr2l,c
  5691  004BFA  0E00               	movlw	high over_write_CE_from_A_to_B@A
  5692  004BFC  2032               	addwfc	??_over_write_CE_from_A_to_B+1,w,c
  5693  004BFE  6EDA               	movwf	fsr2h,c
  5694  004C00  5035               	movf	over_write_CE_from_A_to_B@i,w,c
  5695  004C02  242F               	addwf	over_write_CE_from_A_to_B@B,w,c
  5696  004C04  6E33               	movwf	(??_over_write_CE_from_A_to_B+2)& (0+255),c
  5697  004C06  5036               	movf	over_write_CE_from_A_to_B@i+1,w,c
  5698  004C08  2030               	addwfc	over_write_CE_from_A_to_B@B+1,w,c
  5699  004C0A  6E34               	movwf	(??_over_write_CE_from_A_to_B+3)& (0+255),c
  5700  004C0C  0E1C               	movlw	28
  5701  004C0E  2433               	addwf	??_over_write_CE_from_A_to_B+2,w,c
  5702  004C10  6EE1               	movwf	fsr1l,c
  5703  004C12  0E00               	movlw	0
  5704  004C14  2034               	addwfc	??_over_write_CE_from_A_to_B+3,w,c
  5705  004C16  6EE2               	movwf	fsr1h,c
  5706  004C18  CFDF FFE7          	movff	indf2,indf1
  5707                           
  5708                           ;master/operation_CES.c: 355:   B->ep[i] = A.ep[i];
  5709  004C1C  0E10               	movlw	16
  5710  004C1E  2435               	addwf	over_write_CE_from_A_to_B@i,w,c
  5711  004C20  6E31               	movwf	??_over_write_CE_from_A_to_B& (0+255),c
  5712  004C22  0E00               	movlw	0
  5713  004C24  2036               	addwfc	over_write_CE_from_A_to_B@i+1,w,c
  5714  004C26  6E32               	movwf	(??_over_write_CE_from_A_to_B+1)& (0+255),c
  5715  004C28  0E01               	movlw	low over_write_CE_from_A_to_B@A
  5716  004C2A  2431               	addwf	??_over_write_CE_from_A_to_B,w,c
  5717  004C2C  6ED9               	movwf	fsr2l,c
  5718  004C2E  0E00               	movlw	high over_write_CE_from_A_to_B@A
  5719  004C30  2032               	addwfc	??_over_write_CE_from_A_to_B+1,w,c
  5720  004C32  6EDA               	movwf	fsr2h,c
  5721  004C34  5035               	movf	over_write_CE_from_A_to_B@i,w,c
  5722  004C36  242F               	addwf	over_write_CE_from_A_to_B@B,w,c
  5723  004C38  6E33               	movwf	(??_over_write_CE_from_A_to_B+2)& (0+255),c
  5724  004C3A  5036               	movf	over_write_CE_from_A_to_B@i+1,w,c
  5725  004C3C  2030               	addwfc	over_write_CE_from_A_to_B@B+1,w,c
  5726  004C3E  6E34               	movwf	(??_over_write_CE_from_A_to_B+3)& (0+255),c
  5727  004C40  0E10               	movlw	16
  5728  004C42  2433               	addwf	??_over_write_CE_from_A_to_B+2,w,c
  5729  004C44  6EE1               	movwf	fsr1l,c
  5730  004C46  0E00               	movlw	0
  5731  004C48  2034               	addwfc	??_over_write_CE_from_A_to_B+3,w,c
  5732  004C4A  6EE2               	movwf	fsr1h,c
  5733  004C4C  CFDF FFE7          	movff	indf2,indf1
  5734                           
  5735                           ;master/operation_CES.c: 356:  }
  5736  004C50  4A35               	infsnz	over_write_CE_from_A_to_B@i,f,c
  5737  004C52  2A36               	incf	over_write_CE_from_A_to_B@i+1,f,c
  5738  004C54  BE36               	btfsc	over_write_CE_from_A_to_B@i+1,7,c
  5739  004C56  D7C8               	goto	l9084
  5740  004C58  5036               	movf	over_write_CE_from_A_to_B@i+1,w,c
  5741  004C5A  E104               	bnz	u6920
  5742  004C5C  0E0C               	movlw	12
  5743  004C5E  5C35               	subwf	over_write_CE_from_A_to_B@i,w,c
  5744  004C60  A0D8               	btfss	status,0,c
  5745  004C62  D7C2               	goto	l9084
  5746  004C64                     u6920:
  5747                           
  5748                           ;master/operation_CES.c: 357:  for (i = 0; i < 6; i++)
  5749  004C64  0E00               	movlw	0
  5750  004C66  6E36               	movwf	over_write_CE_from_A_to_B@i+1,c
  5751  004C68  0E00               	movlw	0
  5752  004C6A  6E35               	movwf	over_write_CE_from_A_to_B@i,c
  5753  004C6C                     l9096:
  5754                           
  5755                           ;master/operation_CES.c: 358:  {;master/operation_CES.c: 359:   B->sp[i] = A.sp[i];
  5756  004C6C  0E28               	movlw	40
  5757  004C6E  2435               	addwf	over_write_CE_from_A_to_B@i,w,c
  5758  004C70  6E31               	movwf	??_over_write_CE_from_A_to_B& (0+255),c
  5759  004C72  0E00               	movlw	0
  5760  004C74  2036               	addwfc	over_write_CE_from_A_to_B@i+1,w,c
  5761  004C76  6E32               	movwf	(??_over_write_CE_from_A_to_B+1)& (0+255),c
  5762  004C78  0E01               	movlw	low over_write_CE_from_A_to_B@A
  5763  004C7A  2431               	addwf	??_over_write_CE_from_A_to_B,w,c
  5764  004C7C  6ED9               	movwf	fsr2l,c
  5765  004C7E  0E00               	movlw	high over_write_CE_from_A_to_B@A
  5766  004C80  2032               	addwfc	??_over_write_CE_from_A_to_B+1,w,c
  5767  004C82  6EDA               	movwf	fsr2h,c
  5768  004C84  5035               	movf	over_write_CE_from_A_to_B@i,w,c
  5769  004C86  242F               	addwf	over_write_CE_from_A_to_B@B,w,c
  5770  004C88  6E33               	movwf	(??_over_write_CE_from_A_to_B+2)& (0+255),c
  5771  004C8A  5036               	movf	over_write_CE_from_A_to_B@i+1,w,c
  5772  004C8C  2030               	addwfc	over_write_CE_from_A_to_B@B+1,w,c
  5773  004C8E  6E34               	movwf	(??_over_write_CE_from_A_to_B+3)& (0+255),c
  5774  004C90  0E28               	movlw	40
  5775  004C92  2433               	addwf	??_over_write_CE_from_A_to_B+2,w,c
  5776  004C94  6EE1               	movwf	fsr1l,c
  5777  004C96  0E00               	movlw	0
  5778  004C98  2034               	addwfc	??_over_write_CE_from_A_to_B+3,w,c
  5779  004C9A  6EE2               	movwf	fsr1h,c
  5780  004C9C  CFDF FFE7          	movff	indf2,indf1
  5781                           
  5782                           ;master/operation_CES.c: 360:  }
  5783  004CA0  4A35               	infsnz	over_write_CE_from_A_to_B@i,f,c
  5784  004CA2  2A36               	incf	over_write_CE_from_A_to_B@i+1,f,c
  5785  004CA4  BE36               	btfsc	over_write_CE_from_A_to_B@i+1,7,c
  5786  004CA6  D7E2               	goto	l9096
  5787  004CA8  5036               	movf	over_write_CE_from_A_to_B@i+1,w,c
  5788  004CAA  E105               	bnz	u6930
  5789  004CAC  0E06               	movlw	6
  5790  004CAE  5C35               	subwf	over_write_CE_from_A_to_B@i,w,c
  5791  004CB0  B0D8               	btfsc	status,0,c
  5792  004CB2  0012               	return	
  5793  004CB4  D7DB               	goto	l9096
  5794  004CB6                     u6930:
  5795  004CB6  0012               	return		;funcret
  5796  004CB8                     __end_of_over_write_CE_from_A_to_B:
  5797                           	opt callstack 0
  5798                           
  5799 ;; *************** function _made_cube *****************
  5800 ;; Defined at:
  5801 ;;		line 8 in file "master/solution_CES.c"
  5802 ;; Parameters:    Size  Location     Type
  5803 ;;  Light_ON_OFF    1    wreg     unsigned char 
  5804 ;;  skip_CS         1   64[BANK0 ] const unsigned char 
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;  Light_ON_OFF    1   67[BANK0 ] unsigned char 
  5807 ;;  test_flag       1   69[BANK0 ] unsigned char 
  5808 ;;  i               1   68[BANK0 ] unsigned char 
  5809 ;; Return value:  Size  Location     Type
  5810 ;;                  1    wreg      void 
  5811 ;; Registers used:
  5812 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5813 ;; Tracked objects:
  5814 ;;		On entry : 0/0
  5815 ;;		On exit  : 0/0
  5816 ;;		Unchanged: 0/0
  5817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5818 ;;      Params:         0       1       0       0       0       0       0
  5819 ;;      Locals:         0       3       0       0       0       0       0
  5820 ;;      Temps:          0       2       0       0       0       0       0
  5821 ;;      Totals:         0       6       0       0       0       0       0
  5822 ;;Total ram usage:        6 bytes
  5823 ;; Hardware stack levels used:    1
  5824 ;; Hardware stack levels required when called:    9
  5825 ;; This function calls:
  5826 ;;		_all_yellow
  5827 ;;		_command_turn_ARRAY_3
  5828 ;;		_command_turn_ARRAY_3_end
  5829 ;;		_if_perfect_white
  5830 ;;		_if_perfect_yellow
  5831 ;;		_if_second_flower_perfect
  5832 ;;		_if_solution_end
  5833 ;;		_if_start_step8
  5834 ;;		_make_justice_axis
  5835 ;;		_make_perfect_white
  5836 ;;		_make_second_flower_perfect
  5837 ;;		_make_step_7
  5838 ;;		_make_step_8
  5839 ;;		_make_up_white
  5840 ;;		_make_up_yellow
  5841 ;;		_make_while_flower
  5842 ;;		_make_white_yellow_flower
  5843 ;;		_operation_first
  5844 ;;		_yellow_cross
  5845 ;; This function is called by:
  5846 ;;		_Special_input
  5847 ;;		_animation_4
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           	psect	text13
  5852  0052F8                     __ptext13:
  5853                           	opt callstack 0
  5854  0052F8                     _made_cube:
  5855                           	opt callstack 20
  5856                           
  5857                           ;incstack = 0
  5858                           ;made_cube@Light_ON_OFF stored from wreg
  5859  0052F8  0100               	movlb	0	; () banked
  5860  0052FA  6FA3               	movwf	made_cube@Light_ON_OFF& (0+255),b
  5861                           
  5862                           ;master/solution_CES.c: 8: void made_cube(char Light_ON_OFF, const char skip_CS);master/
      +                          solution_CES.c: 9: {;master/solution_CES.c: 10:  char i;;master/solution_CES.c: 11:  con
      +                          st char start8[14][3] = {;master/solution_CES.c: 15:  char test_flag = 0;
  5863  0052FC  0E00               	movlw	0
  5864  0052FE  0100               	movlb	0	; () banked
  5865  005300  6FA5               	movwf	made_cube@test_flag& (0+255),b
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;master/solution_CES.c: 17:  mode_cube_end = Light_ON_OFF;
  5869  005302  C0A3  F0F3         	movff	made_cube@Light_ON_OFF,_mode_cube_end
  5870                           
  5871                           ; BSR set to: 0
  5872                           ;master/solution_CES.c: 18:  ARRAY_skip_CS = skip_CS;
  5873  005306  C0A0  F0EE         	movff	made_cube@skip_CS,_ARRAY_skip_CS
  5874  00530A                     l9108:
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;master/solution_CES.c: 21:  {;master/solution_CES.c: 22:   operation_first();
  5878  00530A  EC02  F014         	call	_operation_first	;wreg free
  5879                           
  5880                           ;master/solution_CES.c: 23:   command_turn_ARRAY_3_end();
  5881  00530E  EC2D  F030         	call	_command_turn_ARRAY_3_end	;wreg free
  5882                           
  5883                           ;master/solution_CES.c: 24:   make_justice_axis();
  5884  005312  EC4E  F016         	call	_make_justice_axis	;wreg free
  5885                           
  5886                           ;master/solution_CES.c: 25:  } while (opereation_over_flag == 1);
  5887  005316  0100               	movlb	0	; () banked
  5888  005318  05ED               	decf	_opereation_over_flag& (0+255),w,b
  5889  00531A  B4D8               	btfsc	status,2,c
  5890  00531C  D7F6               	goto	l9108
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;master/solution_CES.c: 26:  operation_first();
  5894  00531E  EC02  F014         	call	_operation_first	;wreg free
  5895                           
  5896                           ;master/solution_CES.c: 27:  limit_count = 0;
  5897  005322  0E00               	movlw	0
  5898  005324  0100               	movlb	0	; () banked
  5899  005326  6FEC               	movwf	_limit_count& (0+255),b
  5900                           
  5901                           ;master/solution_CES.c: 29:  while (test_flag != 4)
  5902  005328  D0B3               	goto	l9194
  5903  00532A                     l9120:
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;master/solution_CES.c: 35:    make_up_white();
  5907  00532A  EC93  F015         	call	_make_up_white	;wreg free
  5908                           
  5909                           ;master/solution_CES.c: 36:    if (if_perfect_white() == 1)
  5910  00532E  EC95  F021         	call	_if_perfect_white	;wreg free
  5911  005332  06E8               	decf	wreg,f,c
  5912  005334  A4D8               	btfss	status,2,c
  5913  005336  D00A               	goto	l9124
  5914                           
  5915                           ;master/solution_CES.c: 37:    {;master/solution_CES.c: 38:     make_up_yellow();
  5916  005338  EC14  F016         	call	_make_up_yellow	;wreg free
  5917                           
  5918                           ;master/solution_CES.c: 39:     make_white_yellow_flower();
  5919  00533C  EC88  F022         	call	_make_white_yellow_flower	;wreg free
  5920                           
  5921                           ;master/solution_CES.c: 40:     make_while_flower();
  5922  005340  ECB5  F01B         	call	_make_while_flower	;wreg free
  5923                           
  5924                           ;master/solution_CES.c: 41:     make_up_white();
  5925  005344  EC93  F015         	call	_make_up_white	;wreg free
  5926                           
  5927                           ;master/solution_CES.c: 42:     make_perfect_white();
  5928  005348  ECA6  F028         	call	_make_perfect_white	;wreg free
  5929  00534C                     l9124:
  5930                           
  5931                           ;master/solution_CES.c: 44:    test_flag = 1;
  5932  00534C  0E01               	movlw	1
  5933  00534E  D05D               	goto	L4
  5934  005350                     l9126:
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;master/solution_CES.c: 48:    if (if_second_flower_perfect() != 0)
  5938  005350  EC68  F01F         	call	_if_second_flower_perfect	;wreg free
  5939  005354  0900               	iorlw	0
  5940  005356  B4D8               	btfsc	status,2,c
  5941  005358  D006               	goto	l9130
  5942                           
  5943                           ;master/solution_CES.c: 49:    {;master/solution_CES.c: 50:     make_up_yellow();
  5944  00535A  EC14  F016         	call	_make_up_yellow	;wreg free
  5945                           
  5946                           ;master/solution_CES.c: 51:     make_second_flower_perfect();
  5947  00535E  EC7F  F031         	call	_make_second_flower_perfect	;wreg free
  5948                           
  5949                           ;master/solution_CES.c: 52:     make_up_white();
  5950  005362  EC93  F015         	call	_make_up_white	;wreg free
  5951  005366                     l9130:
  5952                           
  5953                           ;master/solution_CES.c: 54:    test_flag = 2;
  5954  005366  0E02               	movlw	2
  5955  005368  D050               	goto	L4
  5956  00536A                     l9132:
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;master/solution_CES.c: 58:    if (if_perfect_yellow() != 0)
  5960  00536A  ECEB  F01C         	call	_if_perfect_yellow	;wreg free
  5961  00536E  0900               	iorlw	0
  5962  005370  B4D8               	btfsc	status,2,c
  5963  005372  D004               	goto	l9136
  5964                           
  5965                           ;master/solution_CES.c: 59:    {;master/solution_CES.c: 60:     yellow_cross();
  5966  005374  EC04  F01F         	call	_yellow_cross	;wreg free
  5967                           
  5968                           ;master/solution_CES.c: 61:     all_yellow();
  5969  005378  EC4C  F01C         	call	_all_yellow	;wreg free
  5970  00537C                     l9136:
  5971                           
  5972                           ;master/solution_CES.c: 63:    test_flag = 3;
  5973  00537C  0E03               	movlw	3
  5974  00537E  D045               	goto	L4
  5975  005380                     l9138:
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;master/solution_CES.c: 66:    if (if_solution_end() != 0)
  5979  005380  EC3E  F02B         	call	_if_solution_end	;wreg free
  5980  005384  0900               	iorlw	0
  5981  005386  B4D8               	btfsc	status,2,c
  5982  005388  D01B               	goto	l9156
  5983                           
  5984                           ;master/solution_CES.c: 67:    {;master/solution_CES.c: 68:     make_step_7();
  5985  00538A  EC0D  F022         	call	_make_step_7	;wreg free
  5986                           
  5987                           ;master/solution_CES.c: 69:     if (if_start_step8() == 1)
  5988  00538E  EC28  F018         	call	_if_start_step8	;wreg free
  5989  005392  06E8               	decf	wreg,f,c
  5990  005394  A4D8               	btfss	status,2,c
  5991  005396  D012               	goto	u7000
  5992                           
  5993                           ;master/solution_CES.c: 70:     {;master/solution_CES.c: 71:      for (i = 0; i < 14; i+
      +                          +)
  5994  005398  0E00               	movlw	0
  5995  00539A  0100               	movlb	0	; () banked
  5996  00539C  6FA4               	movwf	made_cube@i& (0+255),b
  5997  00539E                     l9148:
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;master/solution_CES.c: 72:      {;master/solution_CES.c: 73:       command_turn_ARRAY_3
      +                          (start8[i]);
  6001  00539E  51A4               	movf	made_cube@i& (0+255),w,b
  6002  0053A0  0D03               	mullw	3
  6003  0053A2  0E41               	movlw	low made_cube@start8
  6004  0053A4  24F3               	addwf	prodl,w,c
  6005  0053A6  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6006  0053A8  0E7E               	movlw	high made_cube@start8
  6007  0053AA  20F4               	addwfc	prodh,w,c
  6008  0053AC  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6009  0053AE  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6010                           
  6011                           ;master/solution_CES.c: 74:      }
  6012  0053B2  0100               	movlb	0	; () banked
  6013  0053B4  2BA4               	incf	made_cube@i& (0+255),f,b
  6014                           
  6015                           ; BSR set to: 0
  6016  0053B6  0E0D               	movlw	13
  6017  0053B8  65A4               	cpfsgt	made_cube@i& (0+255),b
  6018  0053BA  D7F1               	goto	l9148
  6019  0053BC                     u7000:
  6020                           
  6021                           ;master/solution_CES.c: 77:     make_step_8();
  6022  0053BC  EC28  F025         	call	_make_step_8	;wreg free
  6023  0053C0                     l9156:
  6024                           
  6025                           ;master/solution_CES.c: 80:    if (if_solution_end() != 0)
  6026  0053C0  EC3E  F02B         	call	_if_solution_end	;wreg free
  6027  0053C4  0900               	iorlw	0
  6028  0053C6  B4D8               	btfsc	status,2,c
  6029  0053C8  D01D               	goto	l9170
  6030                           
  6031                           ;master/solution_CES.c: 81:    {;master/solution_CES.c: 82:     test_flag = 0;
  6032  0053CA  0E00               	movlw	0
  6033  0053CC  0100               	movlb	0	; () banked
  6034  0053CE  6FA5               	movwf	made_cube@test_flag& (0+255),b
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;master/solution_CES.c: 83:     limit_count++;
  6038  0053D0  2BEC               	incf	_limit_count& (0+255),f,b
  6039                           
  6040                           ; BSR set to: 0
  6041                           ;master/solution_CES.c: 84:     command_turn_ARRAY_3("R");
  6042  0053D2  0EF2               	movlw	low STR_6
  6043  0053D4  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6044  0053D6  0E7F               	movlw	high STR_6
  6045  0053D8  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6046  0053DA  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6047                           
  6048                           ;master/solution_CES.c: 85:     command_turn_ARRAY_3("L");
  6049  0053DE  0EEE               	movlw	low STR_5
  6050  0053E0  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6051  0053E2  0E7F               	movlw	high STR_5
  6052  0053E4  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6053  0053E6  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6054                           
  6055                           ;master/solution_CES.c: 86:     command_turn_ARRAY_3("U");
  6056  0053EA  0EF6               	movlw	low STR_3
  6057  0053EC  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6058  0053EE  0E7F               	movlw	high STR_3
  6059  0053F0  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6060  0053F2  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6061                           
  6062                           ;master/solution_CES.c: 87:     command_turn_ARRAY_3("B");
  6063  0053F6  0EE6               	movlw	low STR_8
  6064  0053F8  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6065  0053FA  0E7F               	movlw	high STR_8
  6066  0053FC  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6067  0053FE  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6068                           
  6069                           ;master/solution_CES.c: 88:    }
  6070  005402  D01A               	goto	l9178
  6071  005404                     l9170:
  6072                           
  6073                           ;master/solution_CES.c: 90:    {;master/solution_CES.c: 91:     make_justice_axis();
  6074  005404  EC4E  F016         	call	_make_justice_axis	;wreg free
  6075                           
  6076                           ;master/solution_CES.c: 92:     test_flag = 4;
  6077  005408  0E04               	movlw	4
  6078  00540A                     L4:
  6079  00540A  0100               	movlb	0	; () banked
  6080  00540C  6FA5               	movwf	made_cube@test_flag& (0+255),b
  6081  00540E  D014               	goto	l9178
  6082  005410                     l9176:
  6083                           
  6084                           ; BSR set to: 0
  6085  005410  51A5               	movf	made_cube@test_flag& (0+255),w,b
  6086  005412  6FA1               	movwf	??_made_cube& (0+255),b
  6087  005414  6BA2               	clrf	(??_made_cube+1)& (0+255),b
  6088                           
  6089                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6090                           ; Switch size 1, requested type "simple"
  6091                           ; Number of cases is 1, Range of values is 0 to 0
  6092                           ; switch strategies available:
  6093                           ; Name         Instructions Cycles
  6094                           ; simple_byte            4     3 (average)
  6095                           ;	Chosen strategy is simple_byte
  6096  005416  51A2               	movf	(??_made_cube+1)& (0+255),w,b
  6097  005418  0A00               	xorlw	0	; case 0
  6098  00541A  A4D8               	btfss	status,2,c
  6099  00541C  D00D               	goto	l9178
  6100                           
  6101                           ; BSR set to: 0
  6102                           ; Switch size 1, requested type "simple"
  6103                           ; Number of cases is 4, Range of values is 0 to 3
  6104                           ; switch strategies available:
  6105                           ; Name         Instructions Cycles
  6106                           ; simple_byte           13     7 (average)
  6107                           ;	Chosen strategy is simple_byte
  6108  00541E  51A1               	movf	??_made_cube& (0+255),w,b
  6109  005420  0A00               	xorlw	0	; case 0
  6110  005422  B4D8               	btfsc	status,2,c
  6111  005424  D782               	goto	l9120
  6112  005426  0A01               	xorlw	1	; case 1
  6113  005428  B4D8               	btfsc	status,2,c
  6114  00542A  D792               	goto	l9126
  6115  00542C  0A03               	xorlw	3	; case 2
  6116  00542E  B4D8               	btfsc	status,2,c
  6117  005430  D79C               	goto	l9132
  6118  005432  0A01               	xorlw	1	; case 3
  6119  005434  B4D8               	btfsc	status,2,c
  6120  005436  D7A4               	goto	l9138
  6121  005438                     l9178:
  6122                           
  6123                           ;master/solution_CES.c: 99:   if (opereation_over_flag == 1 || limit_count > 5)
  6124  005438  0100               	movlb	0	; () banked
  6125  00543A  05ED               	decf	_opereation_over_flag& (0+255),w,b
  6126  00543C  B4D8               	btfsc	status,2,c
  6127  00543E  D003               	goto	u7030
  6128                           
  6129                           ; BSR set to: 0
  6130  005440  0E05               	movlw	5
  6131  005442  65EC               	cpfsgt	_limit_count& (0+255),b
  6132  005444  D025               	goto	l9194
  6133  005446                     u7030:
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;master/solution_CES.c: 100:   {;master/solution_CES.c: 101:    operation_first();
  6137  005446  EC02  F014         	call	_operation_first	;wreg free
  6138                           
  6139                           ;master/solution_CES.c: 102:    limit_count++;
  6140  00544A  0100               	movlb	0	; () banked
  6141  00544C  2BEC               	incf	_limit_count& (0+255),f,b
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;master/solution_CES.c: 104:    if (limit_count > 5)
  6145  00544E  0E05               	movlw	5
  6146  005450  65EC               	cpfsgt	_limit_count& (0+255),b
  6147  005452  D001               	goto	l9190
  6148  005454  0012               	return	
  6149  005456                     l9190:
  6150                           
  6151                           ; BSR set to: 0
  6152                           ;master/solution_CES.c: 108:    command_turn_ARRAY_3("R");
  6153  005456  0EF2               	movlw	low STR_6
  6154  005458  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6155  00545A  0E7F               	movlw	high STR_6
  6156  00545C  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6157  00545E  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6158                           
  6159                           ;master/solution_CES.c: 109:    command_turn_ARRAY_3("L");
  6160  005462  0EEE               	movlw	low STR_5
  6161  005464  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6162  005466  0E7F               	movlw	high STR_5
  6163  005468  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6164  00546A  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6165                           
  6166                           ;master/solution_CES.c: 110:    command_turn_ARRAY_3("U");
  6167  00546E  0EF6               	movlw	low STR_3
  6168  005470  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6169  005472  0E7F               	movlw	high STR_3
  6170  005474  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6171  005476  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6172                           
  6173                           ;master/solution_CES.c: 111:    command_turn_ARRAY_3("B");
  6174  00547A  0EE6               	movlw	low STR_8
  6175  00547C  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6176  00547E  0E7F               	movlw	high STR_8
  6177  005480  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6178  005482  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6179                           
  6180                           ;master/solution_CES.c: 112:    make_justice_axis();
  6181  005486  EC4E  F016         	call	_make_justice_axis	;wreg free
  6182                           
  6183                           ;master/solution_CES.c: 113:    test_flag = 0;
  6184  00548A  0E00               	movlw	0
  6185  00548C  0100               	movlb	0	; () banked
  6186  00548E  6FA5               	movwf	made_cube@test_flag& (0+255),b
  6187  005490                     l9194:
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;master/solution_CES.c: 29:  while (test_flag != 4)
  6191  005490  0E04               	movlw	4
  6192  005492  19A5               	xorwf	made_cube@test_flag& (0+255),w,b
  6193  005494  A4D8               	btfss	status,2,c
  6194  005496  D7BC               	goto	l9176
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;master/solution_CES.c: 116:  command_turn_ARRAY_3_end();
  6198  005498  EC2D  F030         	call	_command_turn_ARRAY_3_end	;wreg free
  6199                           
  6200                           ;master/solution_CES.c: 117:  _delay((unsigned long)((100)*(64000000/4000.0)));
  6201  00549C  0E09               	movlw	9
  6202  00549E  0100               	movlb	0	; () banked
  6203  0054A0  6FA2               	movwf	(??_made_cube+1)& (0+255),b
  6204  0054A2  0E1E               	movlw	30
  6205  0054A4  6FA1               	movwf	??_made_cube& (0+255),b
  6206  0054A6  0EE4               	movlw	228
  6207  0054A8                     u8257:
  6208  0054A8  2EE8               	decfsz	wreg,f,c
  6209  0054AA  D7FE               	bra	u8257
  6210  0054AC  2FA1               	decfsz	??_made_cube& (0+255),f,b
  6211  0054AE  D7FC               	bra	u8257
  6212  0054B0  2FA2               	decfsz	(??_made_cube+1)& (0+255),f,b
  6213  0054B2  D7FA               	bra	u8257
  6214  0054B4  F000               	nop	
  6215  0054B6  0012               	return		;funcret
  6216  0054B8                     __end_of_made_cube:
  6217                           	opt callstack 0
  6218                           
  6219 ;; *************** function _yellow_cross *****************
  6220 ;; Defined at:
  6221 ;;		line 517 in file "master/solution_CES.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;		None
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;  i               1   60[BANK0 ] unsigned char 
  6226 ;;  j               1   59[BANK0 ] unsigned char 
  6227 ;; Return value:  Size  Location     Type
  6228 ;;                  1    wreg      void 
  6229 ;; Registers used:
  6230 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6231 ;; Tracked objects:
  6232 ;;		On entry : 0/0
  6233 ;;		On exit  : 0/0
  6234 ;;		Unchanged: 0/0
  6235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6236 ;;      Params:         0       0       0       0       0       0       0
  6237 ;;      Locals:         0       2       0       0       0       0       0
  6238 ;;      Temps:          0       5       0       0       0       0       0
  6239 ;;      Totals:         0       7       0       0       0       0       0
  6240 ;;Total ram usage:        7 bytes
  6241 ;; Hardware stack levels used:    1
  6242 ;; Hardware stack levels required when called:    7
  6243 ;; This function calls:
  6244 ;;		_command_turn_ARRAY_3
  6245 ;;		_if_yellow_eo
  6246 ;;		_operation_limit
  6247 ;;		_operation_setup
  6248 ;; This function is called by:
  6249 ;;		_made_cube
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           	psect	text14
  6254  003E08                     __ptext14:
  6255                           	opt callstack 0
  6256  003E08                     _yellow_cross:
  6257                           	opt callstack 21
  6258                           
  6259                           ;master/solution_CES.c: 519:  const char cross_eo[4] = {0, 0, 0, 0};;master/solution_CES
      +                          .c: 520:  const char check_eo[2][4] = {;master/solution_CES.c: 523:  const char step5[6]
      +                          [3] = {"B", "R", "D", "R'", "D'", "B'"};;master/solution_CES.c: 524:  char i, j;;master/
      +                          solution_CES.c: 526:  if (operation_setup() == 1)
  6260                           
  6261                           ;incstack = 0
  6262  003E08  EC61  F014         	call	_operation_setup	;wreg free
  6263  003E0C  06E8               	decf	wreg,f,c
  6264  003E0E  B4D8               	btfsc	status,2,c
  6265  003E10  0012               	return	
  6266  003E12  D054               	goto	u6420
  6267  003E14                     l8600:
  6268                           
  6269                           ;master/solution_CES.c: 530:  {;master/solution_CES.c: 531:   if (operation_limit(50) ==
      +                           1)
  6270  003E14  0E00               	movlw	0
  6271  003E16  6E02               	movwf	operation_limit@count+1,c
  6272  003E18  0E32               	movlw	50
  6273  003E1A  6E01               	movwf	operation_limit@count,c
  6274  003E1C  EC0E  F015         	call	_operation_limit	;wreg free
  6275  003E20  06E8               	decf	wreg,f,c
  6276  003E22  B4D8               	btfsc	status,2,c
  6277  003E24  0012               	return	
  6278                           
  6279                           ;master/solution_CES.c: 533:   for (i = 0; i < 2; i++)
  6280  003E26  0E00               	movlw	0
  6281  003E28  0100               	movlb	0	; () banked
  6282  003E2A  6F9C               	movwf	yellow_cross@i& (0+255),b
  6283  003E2C                     l8610:
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;master/solution_CES.c: 534:   {;master/solution_CES.c: 535:    for (j = 0; j < (i + 1) 
      +                          * 2; j++)
  6287  003E2C  0E00               	movlw	0
  6288  003E2E  6F9B               	movwf	yellow_cross@j& (0+255),b
  6289  003E30  D019               	goto	l8620
  6290  003E32                     l8612:
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;master/solution_CES.c: 536:    {;master/solution_CES.c: 537:     if (if_yellow_eo(check
      +                          _eo[i]) == 0)
  6294  003E32  519C               	movf	yellow_cross@i& (0+255),w,b
  6295  003E34  0D04               	mullw	4
  6296  003E36  0E87               	movlw	low yellow_cross@check_eo
  6297  003E38  24F3               	addwf	prodl,w,c
  6298  003E3A  6E01               	movwf	if_yellow_eo@eo,c
  6299  003E3C  0E7F               	movlw	high yellow_cross@check_eo
  6300  003E3E  20F4               	addwfc	prodh,w,c
  6301  003E40  6E02               	movwf	if_yellow_eo@eo+1,c
  6302  003E42  EC75  F017         	call	_if_yellow_eo	;wreg free
  6303  003E46  0900               	iorlw	0
  6304  003E48  A4D8               	btfss	status,2,c
  6305  003E4A  D004               	goto	l8616
  6306                           
  6307                           ;master/solution_CES.c: 538:     {;master/solution_CES.c: 539:      i = 3;
  6308  003E4C  0E03               	movlw	3
  6309  003E4E  0100               	movlb	0	; () banked
  6310  003E50  6F9C               	movwf	yellow_cross@i& (0+255),b
  6311                           
  6312                           ;master/solution_CES.c: 540:      break;
  6313  003E52  D01F               	goto	u6400
  6314  003E54                     l8616:
  6315                           
  6316                           ;master/solution_CES.c: 542:     command_turn_ARRAY_3("D");
  6317  003E54  0EE8               	movlw	low STR_4
  6318  003E56  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6319  003E58  0E7F               	movlw	high STR_4
  6320  003E5A  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6321  003E5C  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6322                           
  6323                           ;master/solution_CES.c: 543:    }
  6324  003E60  0100               	movlb	0	; () banked
  6325  003E62  2B9B               	incf	yellow_cross@j& (0+255),f,b
  6326  003E64                     l8620:
  6327                           
  6328                           ; BSR set to: 0
  6329  003E64  519C               	movf	yellow_cross@i& (0+255),w,b
  6330  003E66  6F96               	movwf	??_yellow_cross& (0+255),b
  6331  003E68  6B97               	clrf	(??_yellow_cross+1)& (0+255),b
  6332  003E6A  90D8               	bcf	status,0,c
  6333  003E6C  3796               	rlcf	??_yellow_cross& (0+255),f,b
  6334  003E6E  3797               	rlcf	(??_yellow_cross+1)& (0+255),f,b
  6335  003E70  0E02               	movlw	2
  6336  003E72  2796               	addwf	??_yellow_cross& (0+255),f,b
  6337  003E74  0E00               	movlw	0
  6338  003E76  2397               	addwfc	(??_yellow_cross+1)& (0+255),f,b
  6339  003E78  519B               	movf	yellow_cross@j& (0+255),w,b
  6340  003E7A  6F98               	movwf	(??_yellow_cross+2)& (0+255),b
  6341  003E7C  6B99               	clrf	(??_yellow_cross+3)& (0+255),b
  6342  003E7E  5196               	movf	??_yellow_cross& (0+255),w,b
  6343  003E80  5D98               	subwf	(??_yellow_cross+2)& (0+255),w,b
  6344  003E82  5199               	movf	(??_yellow_cross+3)& (0+255),w,b
  6345  003E84  0A80               	xorlw	128
  6346  003E86  6F9A               	movwf	(??_yellow_cross+4)& (0+255),b
  6347  003E88  5197               	movf	(??_yellow_cross+1)& (0+255),w,b
  6348  003E8A  0A80               	xorlw	128
  6349  003E8C  599A               	subwfb	(??_yellow_cross+4)& (0+255),w,b
  6350  003E8E  A0D8               	btfss	status,0,c
  6351  003E90  D7D0               	goto	l8612
  6352  003E92                     u6400:
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;master/solution_CES.c: 544:   }
  6356  003E92  2B9C               	incf	yellow_cross@i& (0+255),f,b
  6357                           
  6358                           ; BSR set to: 0
  6359  003E94  0E01               	movlw	1
  6360  003E96  659C               	cpfsgt	yellow_cross@i& (0+255),b
  6361  003E98  D7C9               	goto	l8610
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;master/solution_CES.c: 545:   for (i = 0; i < 6; i++)
  6365  003E9A  0E00               	movlw	0
  6366  003E9C  6F9C               	movwf	yellow_cross@i& (0+255),b
  6367  003E9E                     l8632:
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;master/solution_CES.c: 546:   {;master/solution_CES.c: 547:    command_turn_ARRAY_3(ste
      +                          p5[i]);
  6371  003E9E  519C               	movf	yellow_cross@i& (0+255),w,b
  6372  003EA0  0D03               	mullw	3
  6373  003EA2  0EE5               	movlw	low yellow_cross@step5
  6374  003EA4  24F3               	addwf	prodl,w,c
  6375  003EA6  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6376  003EA8  0E7E               	movlw	high yellow_cross@step5
  6377  003EAA  20F4               	addwfc	prodh,w,c
  6378  003EAC  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6379  003EAE  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6380                           
  6381                           ;master/solution_CES.c: 548:   }
  6382  003EB2  0100               	movlb	0	; () banked
  6383  003EB4  2B9C               	incf	yellow_cross@i& (0+255),f,b
  6384                           
  6385                           ; BSR set to: 0
  6386  003EB6  0E05               	movlw	5
  6387  003EB8  659C               	cpfsgt	yellow_cross@i& (0+255),b
  6388  003EBA  D7F1               	goto	l8632
  6389  003EBC                     u6420:
  6390                           
  6391                           ;master/solution_CES.c: 529:  while (if_yellow_eo(cross_eo) == 1)
  6392  003EBC  0E8F               	movlw	low yellow_cross@cross_eo
  6393  003EBE  6E01               	movwf	if_yellow_eo@eo,c
  6394  003EC0  0E7F               	movlw	high yellow_cross@cross_eo
  6395  003EC2  6E02               	movwf	if_yellow_eo@eo+1,c
  6396  003EC4  EC75  F017         	call	_if_yellow_eo	;wreg free
  6397  003EC8  06E8               	decf	wreg,f,c
  6398  003ECA  A4D8               	btfss	status,2,c
  6399  003ECC  0012               	return	
  6400  003ECE  D7A2               	goto	l8600
  6401  003ED0                     __end_of_yellow_cross:
  6402                           	opt callstack 0
  6403                           
  6404 ;; *************** function _if_yellow_eo *****************
  6405 ;; Defined at:
  6406 ;;		line 552 in file "master/solution_CES.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;  eo              2    0[COMRAM] PTR const unsigned char 
  6409 ;;		 -> yellow_cross@cross_eo(4), yellow_cross@check_eo(8), 
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;  i               1    5[COMRAM] unsigned char 
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  1    wreg      unsigned char 
  6414 ;; Registers used:
  6415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 0/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6421 ;;      Params:         2       0       0       0       0       0       0
  6422 ;;      Locals:         1       0       0       0       0       0       0
  6423 ;;      Temps:          3       0       0       0       0       0       0
  6424 ;;      Totals:         6       0       0       0       0       0       0
  6425 ;;Total ram usage:        6 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; This function calls:
  6428 ;;		Nothing
  6429 ;; This function is called by:
  6430 ;;		_yellow_cross
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           	psect	text15
  6435  002EEA                     __ptext15:
  6436                           	opt callstack 0
  6437  002EEA                     _if_yellow_eo:
  6438                           	opt callstack 27
  6439                           
  6440                           ;master/solution_CES.c: 552: char if_yellow_eo(const char eo[]);master/solution_CES.c: 5
      +                          53: {;master/solution_CES.c: 554:  char i;;master/solution_CES.c: 555:  for (i = 0; i < 
      +                          4; i++)
  6441                           
  6442                           ;incstack = 0
  6443  002EEA  0E00               	movlw	0
  6444  002EEC  6E06               	movwf	if_yellow_eo@i,c
  6445  002EEE                     l8038:
  6446                           
  6447                           ;master/solution_CES.c: 556:  {;master/solution_CES.c: 557:   if (state_CE.eo[8 + i] != 
      +                          eo[i])
  6448  002EEE  0EB4               	movlw	low (_state_CE+36)
  6449  002EF0  2406               	addwf	if_yellow_eo@i,w,c
  6450  002EF2  6ED9               	movwf	fsr2l,c
  6451  002EF4  6ADA               	clrf	fsr2h,c
  6452  002EF6  0E01               	movlw	high (_state_CE+36)
  6453  002EF8  22DA               	addwfc	fsr2h,f,c
  6454  002EFA  50DF               	movf	indf2,w,c
  6455  002EFC  6E03               	movwf	??_if_yellow_eo& (0+255),c
  6456  002EFE  5006               	movf	if_yellow_eo@i,w,c
  6457  002F00  2401               	addwf	if_yellow_eo@eo,w,c
  6458  002F02  6E04               	movwf	(??_if_yellow_eo+1)& (0+255),c
  6459  002F04  0E00               	movlw	0
  6460  002F06  2002               	addwfc	if_yellow_eo@eo+1,w,c
  6461  002F08  6E05               	movwf	(??_if_yellow_eo+2)& (0+255),c
  6462  002F0A  C004  FFF6         	movff	??_if_yellow_eo+1,tblptrl
  6463  002F0E  C005  FFF7         	movff	??_if_yellow_eo+2,tblptrh
  6464  002F12                     	if	0	;tblptru may be non-zero
  6465  002F12                     	endif
  6466  002F12                     	if	0	;tblptru may be non-zero
  6467  002F12                     	endif
  6468  002F12  0008               	tblrd		*
  6469  002F14  50F5               	movf	tablat,w,c
  6470  002F16  1803               	xorwf	??_if_yellow_eo,w,c
  6471  002F18  B4D8               	btfsc	status,2,c
  6472  002F1A  D002               	goto	l8044
  6473                           
  6474                           ;master/solution_CES.c: 558:   {;master/solution_CES.c: 559:    return 1;
  6475  002F1C  0E01               	movlw	1
  6476  002F1E  0012               	return	
  6477  002F20                     l8044:
  6478                           
  6479                           ;master/solution_CES.c: 561:  }
  6480  002F20  2A06               	incf	if_yellow_eo@i,f,c
  6481  002F22  0E03               	movlw	3
  6482  002F24  6406               	cpfsgt	if_yellow_eo@i,c
  6483  002F26  D7E3               	goto	l8038
  6484                           
  6485                           ;master/solution_CES.c: 562:  return 0;
  6486  002F28  0E00               	movlw	0
  6487  002F2A  0012               	return		;funcret
  6488  002F2C                     __end_of_if_yellow_eo:
  6489                           	opt callstack 0
  6490                           
  6491 ;; *************** function _operation_first *****************
  6492 ;; Defined at:
  6493 ;;		line 886 in file "master/solution_CES.c"
  6494 ;; Parameters:    Size  Location     Type
  6495 ;;		None
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;		None
  6498 ;; Return value:  Size  Location     Type
  6499 ;;                  1    wreg      void 
  6500 ;; Registers used:
  6501 ;;		wreg, status,2
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6507 ;;      Params:         0       0       0       0       0       0       0
  6508 ;;      Locals:         0       0       0       0       0       0       0
  6509 ;;      Temps:          0       0       0       0       0       0       0
  6510 ;;      Totals:         0       0       0       0       0       0       0
  6511 ;;Total ram usage:        0 bytes
  6512 ;; Hardware stack levels used:    1
  6513 ;; This function calls:
  6514 ;;		Nothing
  6515 ;; This function is called by:
  6516 ;;		_made_cube
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text16
  6521  002804                     __ptext16:
  6522                           	opt callstack 0
  6523  002804                     _operation_first:
  6524                           	opt callstack 28
  6525                           
  6526                           ;master/solution_CES.c: 888:  opereation_count = 0;
  6527                           
  6528                           ;incstack = 0
  6529  002804  0E00               	movlw	0
  6530  002806  0100               	movlb	0	; () banked
  6531  002808  6FE7               	movwf	(_opereation_count+1)& (0+255),b
  6532  00280A  0E00               	movlw	0
  6533  00280C  6FE6               	movwf	_opereation_count& (0+255),b
  6534                           
  6535                           ;master/solution_CES.c: 889:  opereation_over_flag = 0;
  6536  00280E  0E00               	movlw	0
  6537  002810  6FED               	movwf	_opereation_over_flag& (0+255),b
  6538                           
  6539                           ; BSR set to: 0
  6540  002812  0012               	return		;funcret
  6541  002814                     __end_of_operation_first:
  6542                           	opt callstack 0
  6543                           
  6544 ;; *************** function _make_white_yellow_flower *****************
  6545 ;; Defined at:
  6546 ;;		line 229 in file "master/solution_CES.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;		None
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;  t               1   56[BANK0 ] unsigned char 
  6551 ;;  mark_count      1   55[BANK0 ] unsigned char 
  6552 ;;  i               1    0        unsigned char 
  6553 ;; Return value:  Size  Location     Type
  6554 ;;                  1    wreg      void 
  6555 ;; Registers used:
  6556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6557 ;; Tracked objects:
  6558 ;;		On entry : 0/0
  6559 ;;		On exit  : 0/0
  6560 ;;		Unchanged: 0/0
  6561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6562 ;;      Params:         0       0       0       0       0       0       0
  6563 ;;      Locals:         0       3       0       0       0       0       0
  6564 ;;      Temps:          0       0       0       0       0       0       0
  6565 ;;      Totals:         0       3       0       0       0       0       0
  6566 ;;Total ram usage:        3 bytes
  6567 ;; Hardware stack levels used:    1
  6568 ;; Hardware stack levels required when called:    7
  6569 ;; This function calls:
  6570 ;;		_command_turn_ARRAY_3
  6571 ;;		_if_EP
  6572 ;; This function is called by:
  6573 ;;		_made_cube
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           	psect	text17
  6578  004510                     __ptext17:
  6579                           	opt callstack 0
  6580  004510                     _make_white_yellow_flower:
  6581                           	opt callstack 21
  6582                           
  6583                           ;master/solution_CES.c: 232:  char mark_count = 0;
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;incstack = 0
  6587  004510  0E00               	movlw	0
  6588  004512  0100               	movlb	0	; () banked
  6589  004514  6F97               	movwf	make_white_yellow_flower@mark_count& (0+255),b
  6590                           
  6591                           ;master/solution_CES.c: 233:  const char command[3][6][3] = {;master/solution_CES.c: 236
      +                          :  char t;;master/solution_CES.c: 237:  while (mark_count < 4)
  6592  004516  D073               	goto	l8250
  6593  004518                     l8206:
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;master/solution_CES.c: 238:  {;master/solution_CES.c: 239:   if (if_EP(6, 4, 7) == 1)
  6597  004518  0E04               	movlw	4
  6598  00451A  6E01               	movwf	if_EP@s_ep,c
  6599  00451C  0E07               	movlw	7
  6600  00451E  6E02               	movwf	if_EP@e_ep,c
  6601  004520  0E06               	movlw	6
  6602  004522  EC4C  F015         	call	_if_EP
  6603  004526  06E8               	decf	wreg,f,c
  6604  004528  A4D8               	btfss	status,2,c
  6605  00452A  D01F               	goto	l8228
  6606                           
  6607                           ;master/solution_CES.c: 240:   {;master/solution_CES.c: 241:    if (state_CE.eo[6] != 0)
  6608  00452C  0101               	movlb	1	; () banked
  6609  00452E  51B2               	movf	(_state_CE+34)& (0+255),w,b
  6610  004530  B4D8               	btfsc	status,2,c
  6611  004532  D012               	goto	u5750
  6612                           
  6613                           ; BSR set to: 1
  6614                           ;master/solution_CES.c: 242:    {;master/solution_CES.c: 244:     for (t = 0; t < 6; t++
      +                          )
  6615  004534  0E00               	movlw	0
  6616  004536  0100               	movlb	0	; () banked
  6617  004538  6F98               	movwf	make_white_yellow_flower@t& (0+255),b
  6618  00453A                     l8216:
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;master/solution_CES.c: 245:      command_turn_ARRAY_3(command[0][t]);
  6622  00453A  5198               	movf	make_white_yellow_flower@t& (0+255),w,b
  6623  00453C  0D03               	mullw	3
  6624  00453E  0E8B               	movlw	low make_white_yellow_flower@command
  6625  004540  24F3               	addwf	prodl,w,c
  6626  004542  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6627  004544  0E7B               	movlw	high make_white_yellow_flower@command
  6628  004546  20F4               	addwfc	prodh,w,c
  6629  004548  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6630  00454A  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6631  00454E  0100               	movlb	0	; () banked
  6632  004550  2B98               	incf	make_white_yellow_flower@t& (0+255),f,b
  6633                           
  6634                           ; BSR set to: 0
  6635  004552  0E05               	movlw	5
  6636  004554  6598               	cpfsgt	make_white_yellow_flower@t& (0+255),b
  6637  004556  D7F1               	goto	l8216
  6638  004558                     u5750:
  6639                           
  6640                           ;master/solution_CES.c: 247:    mark_count++;
  6641  004558  0100               	movlb	0	; () banked
  6642  00455A  2B97               	incf	make_white_yellow_flower@mark_count& (0+255),f,b
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;master/solution_CES.c: 248:    command_turn_ARRAY_3("Y");
  6646  00455C  0EFA               	movlw	low STR_31
  6647  00455E  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6648  004560  0E7F               	movlw	high STR_31
  6649  004562  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6650  004564  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6651                           
  6652                           ;master/solution_CES.c: 249:    continue;
  6653  004568  D04A               	goto	l8250
  6654  00456A                     l8228:
  6655  00456A  0E04               	movlw	4
  6656  00456C  6E01               	movwf	if_EP@s_ep,c
  6657  00456E  0E07               	movlw	7
  6658  004570  6E02               	movwf	if_EP@e_ep,c
  6659  004572  0E03               	movlw	3
  6660  004574  EC4C  F015         	call	_if_EP
  6661  004578  06E8               	decf	wreg,f,c
  6662  00457A  A4D8               	btfss	status,2,c
  6663  00457C  D017               	goto	l8244
  6664                           
  6665                           ;master/solution_CES.c: 252:   {;master/solution_CES.c: 254:    for (t = 0; t < 4; t++)
  6666  00457E  0E00               	movlw	0
  6667  004580  0100               	movlb	0	; () banked
  6668  004582  6F98               	movwf	make_white_yellow_flower@t& (0+255),b
  6669  004584                     l8236:
  6670                           
  6671                           ; BSR set to: 0
  6672                           ;master/solution_CES.c: 255:     command_turn_ARRAY_3(command[1][t]);
  6673  004584  5198               	movf	make_white_yellow_flower@t& (0+255),w,b
  6674  004586  0D03               	mullw	3
  6675  004588  0E12               	movlw	18
  6676  00458A  26F3               	addwf	prodl,f,c
  6677  00458C  0E00               	movlw	0
  6678  00458E  22F4               	addwfc	prodh,f,c
  6679  004590  0E8B               	movlw	low make_white_yellow_flower@command
  6680  004592  24F3               	addwf	prodl,w,c
  6681  004594  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6682  004596  0E7B               	movlw	high make_white_yellow_flower@command
  6683  004598  20F4               	addwfc	prodh,w,c
  6684  00459A  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6685  00459C  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6686  0045A0  0100               	movlb	0	; () banked
  6687  0045A2  2B98               	incf	make_white_yellow_flower@t& (0+255),f,b
  6688                           
  6689                           ; BSR set to: 0
  6690  0045A4  0E03               	movlw	3
  6691  0045A6  6598               	cpfsgt	make_white_yellow_flower@t& (0+255),b
  6692  0045A8  D7ED               	goto	l8236
  6693  0045AA  D029               	goto	l8250
  6694  0045AC                     l8244:
  6695  0045AC  0E04               	movlw	4
  6696  0045AE  6E01               	movwf	if_EP@s_ep,c
  6697  0045B0  0E07               	movlw	7
  6698  0045B2  6E02               	movwf	if_EP@e_ep,c
  6699  0045B4  0E0A               	movlw	10
  6700  0045B6  EC4C  F015         	call	_if_EP
  6701  0045BA  06E8               	decf	wreg,f,c
  6702  0045BC  A4D8               	btfss	status,2,c
  6703  0045BE  D013               	goto	l8248
  6704                           
  6705                           ;master/solution_CES.c: 259:   {;master/solution_CES.c: 261:    command_turn_ARRAY_3("M"
      +                          );
  6706  0045C0  0EF0               	movlw	low STR_23
  6707  0045C2  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6708  0045C4  0E7F               	movlw	high STR_23
  6709  0045C6  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6710  0045C8  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6711                           
  6712                           ;master/solution_CES.c: 262:    command_turn_ARRAY_3("D2");
  6713  0045CC  0EC5               	movlw	low STR_16
  6714  0045CE  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6715  0045D0  0E7F               	movlw	high STR_16
  6716  0045D2  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6717  0045D4  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6718                           
  6719                           ;master/solution_CES.c: 263:    command_turn_ARRAY_3("M'");
  6720  0045D8  0EAD               	movlw	low STR_29
  6721  0045DA  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6722  0045DC  0E7F               	movlw	high STR_29
  6723  0045DE  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6724  0045E0  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6725                           
  6726                           ;master/solution_CES.c: 264:    continue;
  6727  0045E4  D00C               	goto	l8250
  6728  0045E6                     l8248:
  6729                           
  6730                           ;master/solution_CES.c: 266:   command_turn_ARRAY_3("E'");
  6731  0045E6  0EA4               	movlw	low STR_27
  6732  0045E8  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6733  0045EA  0E7F               	movlw	high STR_27
  6734  0045EC  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6735  0045EE  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6736                           
  6737                           ;master/solution_CES.c: 267:   command_turn_ARRAY_3("D'");
  6738  0045F2  0EA1               	movlw	low STR_10
  6739  0045F4  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6740  0045F6  0E7F               	movlw	high STR_10
  6741  0045F8  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6742  0045FA  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6743  0045FE                     l8250:
  6744                           
  6745                           ;master/solution_CES.c: 237:  while (mark_count < 4)
  6746  0045FE  0E03               	movlw	3
  6747  004600  0100               	movlb	0	; () banked
  6748  004602  6597               	cpfsgt	make_white_yellow_flower@mark_count& (0+255),b
  6749  004604  D789               	goto	l8206
  6750  004606  0012               	return	
  6751  004608                     __end_of_make_white_yellow_flower:
  6752                           	opt callstack 0
  6753                           
  6754 ;; *************** function _make_while_flower *****************
  6755 ;; Defined at:
  6756 ;;		line 205 in file "master/solution_CES.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;		None
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;  i               1   54[BANK0 ] unsigned char 
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  1    wreg      void 
  6763 ;; Registers used:
  6764 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6770 ;;      Params:         0       0       0       0       0       0       0
  6771 ;;      Locals:         0       1       0       0       0       0       0
  6772 ;;      Temps:          0       0       0       0       0       0       0
  6773 ;;      Totals:         0       1       0       0       0       0       0
  6774 ;;Total ram usage:        1 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    7
  6777 ;; This function calls:
  6778 ;;		_command_turn_ARRAY_3
  6779 ;;		_operation_limit
  6780 ;;		_operation_setup
  6781 ;; This function is called by:
  6782 ;;		_made_cube
  6783 ;; This function uses a non-reentrant model
  6784 ;;
  6785                           
  6786                           	psect	text18
  6787  00376A                     __ptext18:
  6788                           	opt callstack 0
  6789  00376A                     _make_while_flower:
  6790                           	opt callstack 21
  6791                           
  6792                           ;master/solution_CES.c: 207:  char i;;master/solution_CES.c: 208:  if (operation_setup()
      +                           == 1)
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;incstack = 0
  6796  00376A  EC61  F014         	call	_operation_setup	;wreg free
  6797  00376E  06E8               	decf	wreg,f,c
  6798  003770  B4D8               	btfsc	status,2,c
  6799  003772  0012               	return	
  6800                           
  6801                           ;master/solution_CES.c: 211:  for (i = 0; i < 4;)
  6802  003774  0E00               	movlw	0
  6803  003776  0100               	movlb	0	; () banked
  6804  003778  6F96               	movwf	make_while_flower@i& (0+255),b
  6805  00377A                     l8262:
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;master/solution_CES.c: 212:  {;master/solution_CES.c: 213:   if (operation_limit(20) ==
      +                           1)
  6809  00377A  0E00               	movlw	0
  6810  00377C  6E02               	movwf	operation_limit@count+1,c
  6811  00377E  0E14               	movlw	20
  6812  003780  6E01               	movwf	operation_limit@count,c
  6813  003782  EC0E  F015         	call	_operation_limit	;wreg free
  6814  003786  06E8               	decf	wreg,f,c
  6815  003788  B4D8               	btfsc	status,2,c
  6816  00378A  0012               	return	
  6817                           
  6818                           ;master/solution_CES.c: 216:   if ((state_CE.ep[4] == 4 && state_CE.sp[3] == 3) || (stat
      +                          e_CE.ep[4] == 5 && state_CE.sp[3] == 2) || (state_CE.ep[4] == 6 && state_CE.sp[3] == 1) 
      +                          || (state_CE.ep[4] == 7 && state_CE.sp[3] == 4))
  6819  00378C  0E04               	movlw	4
  6820  00378E  0101               	movlb	1	; () banked
  6821  003790  19A4               	xorwf	(_state_CE+20)& (0+255),w,b
  6822  003792  A4D8               	btfss	status,2,c
  6823  003794  D004               	goto	u5830
  6824                           
  6825                           ; BSR set to: 1
  6826  003796  0E03               	movlw	3
  6827  003798  19BB               	xorwf	(_state_CE+43)& (0+255),w,b
  6828  00379A  B4D8               	btfsc	status,2,c
  6829  00379C  D017               	goto	u5890
  6830  00379E                     u5830:
  6831                           
  6832                           ; BSR set to: 1
  6833  00379E  0E05               	movlw	5
  6834  0037A0  19A4               	xorwf	(_state_CE+20)& (0+255),w,b
  6835  0037A2  A4D8               	btfss	status,2,c
  6836  0037A4  D004               	goto	u5850
  6837                           
  6838                           ; BSR set to: 1
  6839  0037A6  0E02               	movlw	2
  6840  0037A8  19BB               	xorwf	(_state_CE+43)& (0+255),w,b
  6841  0037AA  B4D8               	btfsc	status,2,c
  6842  0037AC  D00F               	goto	u5890
  6843  0037AE                     u5850:
  6844                           
  6845                           ; BSR set to: 1
  6846  0037AE  0E06               	movlw	6
  6847  0037B0  19A4               	xorwf	(_state_CE+20)& (0+255),w,b
  6848  0037B2  A4D8               	btfss	status,2,c
  6849  0037B4  D003               	goto	u5870
  6850                           
  6851                           ; BSR set to: 1
  6852  0037B6  05BB               	decf	(_state_CE+43)& (0+255),w,b
  6853  0037B8  B4D8               	btfsc	status,2,c
  6854  0037BA  D008               	goto	u5890
  6855  0037BC                     u5870:
  6856                           
  6857                           ; BSR set to: 1
  6858  0037BC  0E07               	movlw	7
  6859  0037BE  19A4               	xorwf	(_state_CE+20)& (0+255),w,b
  6860  0037C0  A4D8               	btfss	status,2,c
  6861  0037C2  D013               	goto	l8288
  6862                           
  6863                           ; BSR set to: 1
  6864  0037C4  0E04               	movlw	4
  6865  0037C6  19BB               	xorwf	(_state_CE+43)& (0+255),w,b
  6866  0037C8  A4D8               	btfss	status,2,c
  6867  0037CA  D00F               	goto	l8288
  6868  0037CC                     u5890:
  6869                           
  6870                           ; BSR set to: 1
  6871                           ;master/solution_CES.c: 217:   {;master/solution_CES.c: 218:    i++;
  6872  0037CC  0100               	movlb	0	; () banked
  6873  0037CE  2B96               	incf	make_while_flower@i& (0+255),f,b
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;master/solution_CES.c: 219:    command_turn_ARRAY_3("B2");
  6877  0037D0  0EC2               	movlw	low STR_20
  6878  0037D2  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6879  0037D4  0E7F               	movlw	high STR_20
  6880  0037D6  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6881  0037D8  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6882                           
  6883                           ;master/solution_CES.c: 220:    command_turn_ARRAY_3("Y");
  6884  0037DC  0EFA               	movlw	low STR_31
  6885  0037DE  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6886  0037E0  0E7F               	movlw	high STR_31
  6887  0037E2  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6888  0037E4  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6889                           
  6890                           ;master/solution_CES.c: 221:   }
  6891  0037E8  D006               	goto	l8290
  6892  0037EA                     l8288:
  6893                           
  6894                           ; BSR set to: 1
  6895                           ;master/solution_CES.c: 223:   {;master/solution_CES.c: 224:    command_turn_ARRAY_3("U"
      +                          );
  6896  0037EA  0EF6               	movlw	low STR_3
  6897  0037EC  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6898  0037EE  0E7F               	movlw	high STR_3
  6899  0037F0  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6900  0037F2  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6901  0037F6                     l8290:
  6902                           
  6903                           ;master/solution_CES.c: 226:  }
  6904  0037F6  0E03               	movlw	3
  6905  0037F8  0100               	movlb	0	; () banked
  6906  0037FA  6596               	cpfsgt	make_while_flower@i& (0+255),b
  6907  0037FC  D7BE               	goto	l8262
  6908  0037FE  0012               	return	
  6909  003800                     __end_of_make_while_flower:
  6910                           	opt callstack 0
  6911                           
  6912 ;; *************** function _make_up_yellow *****************
  6913 ;; Defined at:
  6914 ;;		line 619 in file "master/solution_CES.c"
  6915 ;; Parameters:    Size  Location     Type
  6916 ;;		None
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;		None
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  1    wreg      void 
  6921 ;; Registers used:
  6922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6928 ;;      Params:         0       0       0       0       0       0       0
  6929 ;;      Locals:         0       0       0       0       0       0       0
  6930 ;;      Temps:          0       0       0       0       0       0       0
  6931 ;;      Totals:         0       0       0       0       0       0       0
  6932 ;;Total ram usage:        0 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:    7
  6935 ;; This function calls:
  6936 ;;		_command_turn_ARRAY_3
  6937 ;; This function is called by:
  6938 ;;		_made_cube
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           	psect	text19
  6943  002C28                     __ptext19:
  6944                           	opt callstack 0
  6945  002C28                     _make_up_yellow:
  6946                           	opt callstack 21
  6947                           
  6948                           ;master/solution_CES.c: 621:  if (state_CE.sp[2] == 5 || state_CE.sp[4] == 5)
  6949                           
  6950                           ;incstack = 0
  6951  002C28  0E05               	movlw	5
  6952  002C2A  0101               	movlb	1	; () banked
  6953  002C2C  19BA               	xorwf	(_state_CE+42)& (0+255),w,b
  6954  002C2E  B4D8               	btfsc	status,2,c
  6955  002C30  D004               	goto	u5710
  6956                           
  6957                           ; BSR set to: 1
  6958  002C32  0E05               	movlw	5
  6959  002C34  19BC               	xorwf	(_state_CE+44)& (0+255),w,b
  6960  002C36  A4D8               	btfss	status,2,c
  6961  002C38  D00D               	goto	l8202
  6962  002C3A                     u5710:
  6963                           
  6964                           ; BSR set to: 1
  6965                           ;master/solution_CES.c: 622:   command_turn_ARRAY_3("Y");
  6966  002C3A  0EFA               	movlw	low STR_31
  6967  002C3C  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6968  002C3E  0E7F               	movlw	high STR_31
  6969  002C40  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6970  002C42  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6971  002C46  D006               	goto	l8202
  6972  002C48                     l8200:
  6973                           
  6974                           ; BSR set to: 1
  6975                           ;master/solution_CES.c: 625:  {;master/solution_CES.c: 627:   command_turn_ARRAY_3("X");
  6976  002C48  0EF8               	movlw	low STR_30
  6977  002C4A  6E5E               	movwf	command_turn_ARRAY_3@s,c
  6978  002C4C  0E7F               	movlw	high STR_30
  6979  002C4E  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  6980  002C50  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  6981  002C54                     l8202:
  6982                           
  6983                           ;master/solution_CES.c: 624:  while (state_CE.sp[0] != 5)
  6984  002C54  0E05               	movlw	5
  6985  002C56  0101               	movlb	1	; () banked
  6986  002C58  19B8               	xorwf	(_state_CE+40)& (0+255),w,b
  6987  002C5A  B4D8               	btfsc	status,2,c
  6988  002C5C  0012               	return	
  6989  002C5E  D7F4               	goto	l8200
  6990  002C60                     __end_of_make_up_yellow:
  6991                           	opt callstack 0
  6992                           
  6993 ;; *************** function _make_step_8 *****************
  6994 ;; Defined at:
  6995 ;;		line 718 in file "master/solution_CES.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;		None
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;  i               1   56[BANK0 ] unsigned char 
  7000 ;; Return value:  Size  Location     Type
  7001 ;;                  1    wreg      void 
  7002 ;; Registers used:
  7003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  7004 ;; Tracked objects:
  7005 ;;		On entry : 0/0
  7006 ;;		On exit  : 0/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7009 ;;      Params:         0       0       0       0       0       0       0
  7010 ;;      Locals:         0       1       0       0       0       0       0
  7011 ;;      Temps:          0       2       0       0       0       0       0
  7012 ;;      Totals:         0       3       0       0       0       0       0
  7013 ;;Total ram usage:        3 bytes
  7014 ;; Hardware stack levels used:    1
  7015 ;; Hardware stack levels required when called:    7
  7016 ;; This function calls:
  7017 ;;		_command_turn_ARRAY_3
  7018 ;;		_if_solution_end
  7019 ;;		_operation_limit
  7020 ;;		_operation_setup
  7021 ;; This function is called by:
  7022 ;;		_made_cube
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           	psect	text20
  7027  004A50                     __ptext20:
  7028                           	opt callstack 0
  7029  004A50                     _make_step_8:
  7030                           	opt callstack 21
  7031                           
  7032                           ;master/solution_CES.c: 720:  const char step8[7][3] = {"M2", "D'", "M", "D2", "M'", "D'
      +                          ", "M2"};;master/solution_CES.c: 721:  char i = 0;
  7033                           
  7034                           ; BSR set to: 1
  7035                           ;incstack = 0
  7036  004A50  0E00               	movlw	0
  7037  004A52  0100               	movlb	0	; () banked
  7038  004A54  6F98               	movwf	make_step_8@i& (0+255),b
  7039                           
  7040                           ; BSR set to: 0
  7041                           ;master/solution_CES.c: 722:  if (if_solution_end() == 0)
  7042  004A56  EC3E  F02B         	call	_if_solution_end	;wreg free
  7043  004A5A  0900               	iorlw	0
  7044  004A5C  B4D8               	btfsc	status,2,c
  7045  004A5E  0012               	return	
  7046                           
  7047                           ;master/solution_CES.c: 725:  if (operation_setup() == 1)
  7048  004A60  EC61  F014         	call	_operation_setup	;wreg free
  7049  004A64  06E8               	decf	wreg,f,c
  7050  004A66  B4D8               	btfsc	status,2,c
  7051  004A68  0012               	return	
  7052  004A6A                     l8778:
  7053                           
  7054                           ;master/solution_CES.c: 729:  {;master/solution_CES.c: 730:   if (operation_limit(50) ==
      +                           1)
  7055  004A6A  0E00               	movlw	0
  7056  004A6C  6E02               	movwf	operation_limit@count+1,c
  7057  004A6E  0E32               	movlw	50
  7058  004A70  6E01               	movwf	operation_limit@count,c
  7059  004A72  EC0E  F015         	call	_operation_limit	;wreg free
  7060  004A76  06E8               	decf	wreg,f,c
  7061  004A78  B4D8               	btfsc	status,2,c
  7062  004A7A  0012               	return	
  7063                           
  7064                           ;master/solution_CES.c: 732:   if (state_CE.ep[10] - state_CE.ep[6] == 4 && state_CE.cp[
      +                          7] - state_CE.cp[3] == 4)
  7065  004A7C  0101               	movlb	1	; () banked
  7066  004A7E  51A6               	movf	(_state_CE+22)& (0+255),w,b
  7067  004A80  C1AA  F096         	movff	_state_CE+26,??_make_step_8
  7068  004A84  0100               	movlb	0	; () banked
  7069  004A86  6B97               	clrf	(??_make_step_8+1)& (0+255),b
  7070  004A88  5F96               	subwf	??_make_step_8& (0+255),f,b
  7071  004A8A  0E00               	movlw	0
  7072  004A8C  5B97               	subwfb	(??_make_step_8+1)& (0+255),f,b
  7073  004A8E  0E04               	movlw	4
  7074  004A90  1996               	xorwf	??_make_step_8& (0+255),w,b
  7075  004A92  1197               	iorwf	(??_make_step_8+1)& (0+255),w,b
  7076  004A94  A4D8               	btfss	status,2,c
  7077  004A96  D053               	goto	l8820
  7078                           
  7079                           ; BSR set to: 0
  7080  004A98  0101               	movlb	1	; () banked
  7081  004A9A  5193               	movf	(_state_CE+3)& (0+255),w,b
  7082  004A9C  C197  F096         	movff	_state_CE+7,??_make_step_8
  7083  004AA0  0100               	movlb	0	; () banked
  7084  004AA2  6B97               	clrf	(??_make_step_8+1)& (0+255),b
  7085  004AA4  5F96               	subwf	??_make_step_8& (0+255),f,b
  7086  004AA6  0E00               	movlw	0
  7087  004AA8  5B97               	subwfb	(??_make_step_8+1)& (0+255),f,b
  7088  004AAA  0E04               	movlw	4
  7089  004AAC  1996               	xorwf	??_make_step_8& (0+255),w,b
  7090  004AAE  1197               	iorwf	(??_make_step_8+1)& (0+255),w,b
  7091  004AB0  A4D8               	btfss	status,2,c
  7092  004AB2  D045               	goto	l8820
  7093                           
  7094                           ; BSR set to: 0
  7095                           ;master/solution_CES.c: 733:   {;master/solution_CES.c: 734:    if (if_solution_end() ==
      +                           0)
  7096  004AB4  EC3E  F02B         	call	_if_solution_end	;wreg free
  7097  004AB8  0900               	iorlw	0
  7098  004ABA  B4D8               	btfsc	status,2,c
  7099  004ABC  0012               	return	
  7100                           
  7101                           ;master/solution_CES.c: 738:    for (i = 0; i < 7; i++)
  7102  004ABE  0E00               	movlw	0
  7103  004AC0  0100               	movlb	0	; () banked
  7104  004AC2  6F98               	movwf	make_step_8@i& (0+255),b
  7105  004AC4                     l8796:
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;master/solution_CES.c: 739:    {;master/solution_CES.c: 740:     command_turn_ARRAY_3(s
      +                          tep8[i]);
  7109  004AC4  5198               	movf	make_step_8@i& (0+255),w,b
  7110  004AC6  0D03               	mullw	3
  7111  004AC8  0EBB               	movlw	low make_step_8@step8
  7112  004ACA  24F3               	addwf	prodl,w,c
  7113  004ACC  6E5E               	movwf	command_turn_ARRAY_3@s,c
  7114  004ACE  0E7E               	movlw	high make_step_8@step8
  7115  004AD0  20F4               	addwfc	prodh,w,c
  7116  004AD2  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  7117  004AD4  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  7118                           
  7119                           ;master/solution_CES.c: 741:    }
  7120  004AD8  0100               	movlb	0	; () banked
  7121  004ADA  2B98               	incf	make_step_8@i& (0+255),f,b
  7122                           
  7123                           ; BSR set to: 0
  7124  004ADC  0E06               	movlw	6
  7125  004ADE  6598               	cpfsgt	make_step_8@i& (0+255),b
  7126  004AE0  D7F1               	goto	l8796
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;master/solution_CES.c: 742:    if (state_CE.ep[8] - state_CE.ep[4] == 4 && state_CE.cp[
      +                          5] - state_CE.cp[1] == 4)
  7130  004AE2  0101               	movlb	1	; () banked
  7131  004AE4  51A4               	movf	(_state_CE+20)& (0+255),w,b
  7132  004AE6  C1A8  F096         	movff	_state_CE+24,??_make_step_8
  7133  004AEA  0100               	movlb	0	; () banked
  7134  004AEC  6B97               	clrf	(??_make_step_8+1)& (0+255),b
  7135  004AEE  5F96               	subwf	??_make_step_8& (0+255),f,b
  7136  004AF0  0E00               	movlw	0
  7137  004AF2  5B97               	subwfb	(??_make_step_8+1)& (0+255),f,b
  7138  004AF4  0E04               	movlw	4
  7139  004AF6  1996               	xorwf	??_make_step_8& (0+255),w,b
  7140  004AF8  1197               	iorwf	(??_make_step_8+1)& (0+255),w,b
  7141  004AFA  A4D8               	btfss	status,2,c
  7142  004AFC  D00E               	goto	l8808
  7143                           
  7144                           ; BSR set to: 0
  7145  004AFE  0101               	movlb	1	; () banked
  7146  004B00  5191               	movf	(_state_CE+1)& (0+255),w,b
  7147  004B02  C195  F096         	movff	_state_CE+5,??_make_step_8
  7148  004B06  0100               	movlb	0	; () banked
  7149  004B08  6B97               	clrf	(??_make_step_8+1)& (0+255),b
  7150  004B0A  5F96               	subwf	??_make_step_8& (0+255),f,b
  7151  004B0C  0E00               	movlw	0
  7152  004B0E  5B97               	subwfb	(??_make_step_8+1)& (0+255),f,b
  7153  004B10  0E04               	movlw	4
  7154  004B12  1996               	xorwf	??_make_step_8& (0+255),w,b
  7155  004B14  1197               	iorwf	(??_make_step_8+1)& (0+255),w,b
  7156  004B16  B4D8               	btfsc	status,2,c
  7157  004B18  0012               	return	
  7158  004B1A                     l8808:
  7159                           
  7160                           ; BSR set to: 0
  7161                           ;master/solution_CES.c: 746:    {;master/solution_CES.c: 747:     for (i = 0; i < 7; i++
      +                          )
  7162  004B1A  0E00               	movlw	0
  7163  004B1C  6F98               	movwf	make_step_8@i& (0+255),b
  7164  004B1E                     l8814:
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;master/solution_CES.c: 748:     {;master/solution_CES.c: 749:      command_turn_ARRAY_3
      +                          (step8[i]);
  7168  004B1E  5198               	movf	make_step_8@i& (0+255),w,b
  7169  004B20  0D03               	mullw	3
  7170  004B22  0EBB               	movlw	low make_step_8@step8
  7171  004B24  24F3               	addwf	prodl,w,c
  7172  004B26  6E5E               	movwf	command_turn_ARRAY_3@s,c
  7173  004B28  0E7E               	movlw	high make_step_8@step8
  7174  004B2A  20F4               	addwfc	prodh,w,c
  7175  004B2C  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  7176  004B2E  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  7177                           
  7178                           ;master/solution_CES.c: 750:     }
  7179  004B32  0100               	movlb	0	; () banked
  7180  004B34  2B98               	incf	make_step_8@i& (0+255),f,b
  7181                           
  7182                           ; BSR set to: 0
  7183  004B36  0E06               	movlw	6
  7184  004B38  6598               	cpfsgt	make_step_8@i& (0+255),b
  7185  004B3A  D7F1               	goto	l8814
  7186  004B3C  0012               	return	
  7187  004B3E                     l8820:
  7188                           
  7189                           ; BSR set to: 0
  7190                           ;master/solution_CES.c: 754:   i++;
  7191  004B3E  2B98               	incf	make_step_8@i& (0+255),f,b
  7192                           
  7193                           ; BSR set to: 0
  7194                           ;master/solution_CES.c: 755:   command_turn_ARRAY_3("D");
  7195  004B40  0EE8               	movlw	low STR_4
  7196  004B42  6E5E               	movwf	command_turn_ARRAY_3@s,c
  7197  004B44  0E7F               	movlw	high STR_4
  7198  004B46  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  7199  004B48  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  7200                           
  7201                           ;master/solution_CES.c: 756:   if (i >= 4)
  7202  004B4C  0E03               	movlw	3
  7203  004B4E  0100               	movlb	0	; () banked
  7204  004B50  6598               	cpfsgt	make_step_8@i& (0+255),b
  7205  004B52  D78B               	goto	l8778
  7206                           
  7207                           ; BSR set to: 0
  7208                           ;master/solution_CES.c: 757:   {;master/solution_CES.c: 758:    command_turn_ARRAY_3("U"
      +                          );
  7209  004B54  0EF6               	movlw	low STR_3
  7210  004B56  6E5E               	movwf	command_turn_ARRAY_3@s,c
  7211  004B58  0E7F               	movlw	high STR_3
  7212  004B5A  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  7213  004B5C  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  7214                           
  7215                           ;master/solution_CES.c: 759:    command_turn_ARRAY_3("E'");
  7216  004B60  0EA4               	movlw	low STR_27
  7217  004B62  6E5E               	movwf	command_turn_ARRAY_3@s,c
  7218  004B64  0E7F               	movlw	high STR_27
  7219  004B66  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  7220  004B68  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  7221                           
  7222                           ;master/solution_CES.c: 760:    i = 0;
  7223  004B6C  0E00               	movlw	0
  7224  004B6E  0100               	movlb	0	; () banked
  7225  004B70  6F98               	movwf	make_step_8@i& (0+255),b
  7226  004B72  D77B               	goto	l8778
  7227  004B74                     __end_of_make_step_8:
  7228                           	opt callstack 0
  7229                           
  7230 ;; *************** function _if_solution_end *****************
  7231 ;; Defined at:
  7232 ;;		line 120 in file "master/solution_CES.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;		None
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;  j               1   10[COMRAM] unsigned char 
  7237 ;;  p_start         1    9[COMRAM] unsigned char 
  7238 ;;  i               1    8[COMRAM] unsigned char 
  7239 ;;  xo              1    7[COMRAM] unsigned char 
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  1    wreg      unsigned char 
  7242 ;; Registers used:
  7243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7249 ;;      Params:         0       0       0       0       0       0       0
  7250 ;;      Locals:         4       0       0       0       0       0       0
  7251 ;;      Temps:          7       0       0       0       0       0       0
  7252 ;;      Totals:        11       0       0       0       0       0       0
  7253 ;;Total ram usage:       11 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; This function calls:
  7256 ;;		Nothing
  7257 ;; This function is called by:
  7258 ;;		_Special_input
  7259 ;;		_made_cube
  7260 ;;		_make_step_8
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264                           	psect	text21
  7265  00567C                     __ptext21:
  7266                           	opt callstack 0
  7267  00567C                     _if_solution_end:
  7268                           	opt callstack 27
  7269                           
  7270                           ;master/solution_CES.c: 122:  char i, xo = 0, p_start, j;
  7271                           
  7272                           ;incstack = 0
  7273  00567C  0E00               	movlw	0
  7274  00567E  6E08               	movwf	if_solution_end@xo,c
  7275                           
  7276                           ;master/solution_CES.c: 124:  for (p_start = 0; p_start < 8; p_start++)
  7277  005680  0E00               	movlw	0
  7278  005682  6E0A               	movwf	if_solution_end@p_start,c
  7279  005684                     l7758:
  7280                           
  7281                           ;master/solution_CES.c: 125:  {;master/solution_CES.c: 126:   if (state_CE.cp[p_start] =
      +                          = 0)
  7282  005684  0E90               	movlw	low _state_CE
  7283  005686  240A               	addwf	if_solution_end@p_start,w,c
  7284  005688  6ED9               	movwf	fsr2l,c
  7285  00568A  6ADA               	clrf	fsr2h,c
  7286  00568C  0E01               	movlw	high _state_CE
  7287  00568E  22DA               	addwfc	fsr2h,f,c
  7288  005690  50DF               	movf	indf2,w,c
  7289  005692  B4D8               	btfsc	status,2,c
  7290  005694  D004               	goto	u5110
  7291                           
  7292                           ;master/solution_CES.c: 130:  }
  7293  005696  2A0A               	incf	if_solution_end@p_start,f,c
  7294  005698  0E07               	movlw	7
  7295  00569A  640A               	cpfsgt	if_solution_end@p_start,c
  7296  00569C  D7F3               	goto	l7758
  7297  00569E                     u5110:
  7298                           
  7299                           ;master/solution_CES.c: 131:  for (j = 0; j < 2; j++)
  7300  00569E  0E00               	movlw	0
  7301  0056A0  6E0B               	movwf	if_solution_end@j,c
  7302  0056A2                     l7772:
  7303                           
  7304                           ;master/solution_CES.c: 132:  {;master/solution_CES.c: 133:   for (i = j * 4; i < (1 + j
      +                          ) * 4; i++)
  7305  0056A2  500B               	movf	if_solution_end@j,w,c
  7306  0056A4  0D04               	mullw	4
  7307  0056A6  CFF3 F009          	movff	prodl,if_solution_end@i
  7308  0056AA  D033               	goto	l7784
  7309  0056AC                     l7774:
  7310                           
  7311                           ;master/solution_CES.c: 134:   {;master/solution_CES.c: 136:    if (state_CE.cp[(i + p_s
      +                          tart) % 4 + j * 4] != deff_CE.cp[i])
  7312  0056AC  500A               	movf	if_solution_end@p_start,w,c
  7313  0056AE  C009  F001         	movff	if_solution_end@i,??_if_solution_end
  7314  0056B2  6A02               	clrf	(??_if_solution_end+1)& (0+255),c
  7315  0056B4  2601               	addwf	??_if_solution_end,f,c
  7316  0056B6  0E00               	movlw	0
  7317  0056B8  2202               	addwfc	??_if_solution_end+1,f,c
  7318  0056BA  0E03               	movlw	3
  7319  0056BC  1601               	andwf	??_if_solution_end,f,c
  7320  0056BE  0E00               	movlw	0
  7321  0056C0  1602               	andwf	??_if_solution_end+1,f,c
  7322  0056C2  500B               	movf	if_solution_end@j,w,c
  7323  0056C4  0D04               	mullw	4
  7324  0056C6  0E90               	movlw	low _state_CE
  7325  0056C8  6E03               	movwf	(??_if_solution_end+2)& (0+255),c
  7326  0056CA  0E01               	movlw	high _state_CE
  7327  0056CC  6E04               	movwf	(??_if_solution_end+3)& (0+255),c
  7328  0056CE  50F3               	movf	prodl,w,c
  7329  0056D0  2603               	addwf	??_if_solution_end+2,f,c
  7330  0056D2  50F4               	movf	prodh,w,c
  7331  0056D4  2204               	addwfc	??_if_solution_end+3,f,c
  7332  0056D6  5001               	movf	??_if_solution_end,w,c
  7333  0056D8  2403               	addwf	??_if_solution_end+2,w,c
  7334  0056DA  6ED9               	movwf	fsr2l,c
  7335  0056DC  5002               	movf	??_if_solution_end+1,w,c
  7336  0056DE  2004               	addwfc	??_if_solution_end+3,w,c
  7337  0056E0  6EDA               	movwf	fsr2h,c
  7338  0056E2  50DF               	movf	indf2,w,c
  7339  0056E4  6E05               	movwf	(??_if_solution_end+4)& (0+255),c
  7340  0056E6  0EE9               	movlw	low _deff_CE
  7341  0056E8  2409               	addwf	if_solution_end@i,w,c
  7342  0056EA  6EF6               	movwf	tblptrl,c
  7343  0056EC  6AF7               	clrf	tblptrh,c
  7344  0056EE  0E7D               	movlw	high _deff_CE
  7345  0056F0  22F7               	addwfc	tblptrh,f,c
  7346  0056F2                     	if	0	;There are less than 3 active tblptr bytes
  7347  0056F2                     	endif
  7348  0056F2  0008               	tblrd		*
  7349  0056F4  50F5               	movf	tablat,w,c
  7350  0056F6  1805               	xorwf	??_if_solution_end+4,w,c
  7351  0056F8  B4D8               	btfsc	status,2,c
  7352  0056FA  D002               	goto	l7780
  7353  0056FC                     u5120:
  7354                           
  7355                           ;master/solution_CES.c: 137:     return 1;
  7356  0056FC  0E01               	movlw	1
  7357  0056FE  0012               	return	
  7358  005700                     l7780:
  7359                           
  7360                           ;master/solution_CES.c: 138:    xo += state_CE.co[i];
  7361  005700  0E98               	movlw	low (_state_CE+8)
  7362  005702  2409               	addwf	if_solution_end@i,w,c
  7363  005704  6ED9               	movwf	fsr2l,c
  7364  005706  6ADA               	clrf	fsr2h,c
  7365  005708  0E01               	movlw	high (_state_CE+8)
  7366  00570A  22DA               	addwfc	fsr2h,f,c
  7367  00570C  50DF               	movf	indf2,w,c
  7368  00570E  2608               	addwf	if_solution_end@xo,f,c
  7369                           
  7370                           ;master/solution_CES.c: 139:   }
  7371  005710  2A09               	incf	if_solution_end@i,f,c
  7372  005712                     l7784:
  7373  005712  500B               	movf	if_solution_end@j,w,c
  7374  005714  6E01               	movwf	??_if_solution_end& (0+255),c
  7375  005716  6A02               	clrf	(??_if_solution_end+1)& (0+255),c
  7376  005718  90D8               	bcf	status,0,c
  7377  00571A  3601               	rlcf	??_if_solution_end,f,c
  7378  00571C  3602               	rlcf	??_if_solution_end+1,f,c
  7379  00571E  90D8               	bcf	status,0,c
  7380  005720  3601               	rlcf	??_if_solution_end,f,c
  7381  005722  3602               	rlcf	??_if_solution_end+1,f,c
  7382  005724  0E04               	movlw	4
  7383  005726  2601               	addwf	??_if_solution_end,f,c
  7384  005728  0E00               	movlw	0
  7385  00572A  2202               	addwfc	??_if_solution_end+1,f,c
  7386  00572C  5009               	movf	if_solution_end@i,w,c
  7387  00572E  6E03               	movwf	(??_if_solution_end+2)& (0+255),c
  7388  005730  6A04               	clrf	(??_if_solution_end+3)& (0+255),c
  7389  005732  5001               	movf	??_if_solution_end,w,c
  7390  005734  5C03               	subwf	??_if_solution_end+2,w,c
  7391  005736  5004               	movf	??_if_solution_end+3,w,c
  7392  005738  0A80               	xorlw	128
  7393  00573A  6E05               	movwf	(??_if_solution_end+4)& (0+255),c
  7394  00573C  5002               	movf	??_if_solution_end+1,w,c
  7395  00573E  0A80               	xorlw	128
  7396  005740  5805               	subwfb	(??_if_solution_end+4)& (0+255),w,c
  7397  005742  A0D8               	btfss	status,0,c
  7398  005744  D7B3               	goto	l7774
  7399                           
  7400                           ;master/solution_CES.c: 140:  }
  7401  005746  2A0B               	incf	if_solution_end@j,f,c
  7402  005748  0E01               	movlw	1
  7403  00574A  640B               	cpfsgt	if_solution_end@j,c
  7404  00574C  D7AA               	goto	l7772
  7405                           
  7406                           ;master/solution_CES.c: 142:  if (xo != 0)
  7407  00574E  5008               	movf	if_solution_end@xo,w,c
  7408  005750  A4D8               	btfss	status,2,c
  7409  005752  D7D4               	goto	u5120
  7410                           
  7411                           ;master/solution_CES.c: 145:  for (p_start = 0; p_start < 12; p_start++)
  7412  005754  0E00               	movlw	0
  7413  005756  6E0A               	movwf	if_solution_end@p_start,c
  7414  005758                     l7802:
  7415                           
  7416                           ;master/solution_CES.c: 146:  {;master/solution_CES.c: 147:   if (state_CE.ep[p_start] =
      +                          = 0)
  7417  005758  0EA0               	movlw	low (_state_CE+16)
  7418  00575A  240A               	addwf	if_solution_end@p_start,w,c
  7419  00575C  6ED9               	movwf	fsr2l,c
  7420  00575E  6ADA               	clrf	fsr2h,c
  7421  005760  0E01               	movlw	high (_state_CE+16)
  7422  005762  22DA               	addwfc	fsr2h,f,c
  7423  005764  50DF               	movf	indf2,w,c
  7424  005766  B4D8               	btfsc	status,2,c
  7425  005768  D004               	goto	u5170
  7426                           
  7427                           ;master/solution_CES.c: 151:  }
  7428  00576A  2A0A               	incf	if_solution_end@p_start,f,c
  7429  00576C  0E0B               	movlw	11
  7430  00576E  640A               	cpfsgt	if_solution_end@p_start,c
  7431  005770  D7F3               	goto	l7802
  7432  005772                     u5170:
  7433                           
  7434                           ;master/solution_CES.c: 152:  xo = 0;
  7435  005772  0E00               	movlw	0
  7436  005774  6E08               	movwf	if_solution_end@xo,c
  7437                           
  7438                           ;master/solution_CES.c: 153:  for (j = 0; j < 3; j++)
  7439  005776  0E00               	movlw	0
  7440  005778  6E0B               	movwf	if_solution_end@j,c
  7441  00577A                     l7816:
  7442                           
  7443                           ;master/solution_CES.c: 154:  {;master/solution_CES.c: 155:   for (i = j * 4; i < (1 + j
      +                          ) * 4; i++)
  7444  00577A  500B               	movf	if_solution_end@j,w,c
  7445  00577C  0D04               	mullw	4
  7446  00577E  CFF3 F009          	movff	prodl,if_solution_end@i
  7447  005782  D03C               	goto	l7828
  7448  005784                     l7818:
  7449                           
  7450                           ;master/solution_CES.c: 156:   {;master/solution_CES.c: 158:    if (state_CE.ep[(i + p_s
      +                          tart) % 4 + j * 4] != deff_CE.ep[i])
  7451  005784  500A               	movf	if_solution_end@p_start,w,c
  7452  005786  C009  F001         	movff	if_solution_end@i,??_if_solution_end
  7453  00578A  6A02               	clrf	(??_if_solution_end+1)& (0+255),c
  7454  00578C  2601               	addwf	??_if_solution_end,f,c
  7455  00578E  0E00               	movlw	0
  7456  005790  2202               	addwfc	??_if_solution_end+1,f,c
  7457  005792  0E03               	movlw	3
  7458  005794  1601               	andwf	??_if_solution_end,f,c
  7459  005796  0E00               	movlw	0
  7460  005798  1602               	andwf	??_if_solution_end+1,f,c
  7461  00579A  500B               	movf	if_solution_end@j,w,c
  7462  00579C  0D04               	mullw	4
  7463  00579E  0E90               	movlw	low _state_CE
  7464  0057A0  6E03               	movwf	(??_if_solution_end+2)& (0+255),c
  7465  0057A2  0E01               	movlw	high _state_CE
  7466  0057A4  6E04               	movwf	(??_if_solution_end+3)& (0+255),c
  7467  0057A6  0E10               	movlw	16
  7468  0057A8  2603               	addwf	??_if_solution_end+2,f,c
  7469  0057AA  0E00               	movlw	0
  7470  0057AC  2204               	addwfc	??_if_solution_end+3,f,c
  7471  0057AE  50F3               	movf	prodl,w,c
  7472  0057B0  2603               	addwf	??_if_solution_end+2,f,c
  7473  0057B2  50F4               	movf	prodh,w,c
  7474  0057B4  2204               	addwfc	??_if_solution_end+3,f,c
  7475  0057B6  5001               	movf	??_if_solution_end,w,c
  7476  0057B8  2403               	addwf	??_if_solution_end+2,w,c
  7477  0057BA  6ED9               	movwf	fsr2l,c
  7478  0057BC  5002               	movf	??_if_solution_end+1,w,c
  7479  0057BE  2004               	addwfc	??_if_solution_end+3,w,c
  7480  0057C0  6EDA               	movwf	fsr2h,c
  7481  0057C2  50DF               	movf	indf2,w,c
  7482  0057C4  6E05               	movwf	(??_if_solution_end+4)& (0+255),c
  7483  0057C6  5009               	movf	if_solution_end@i,w,c
  7484  0057C8  6E06               	movwf	(??_if_solution_end+5)& (0+255),c
  7485  0057CA  6A07               	clrf	(??_if_solution_end+6)& (0+255),c
  7486  0057CC  0E10               	movlw	16
  7487  0057CE  2606               	addwf	??_if_solution_end+5,f,c
  7488  0057D0  0E00               	movlw	0
  7489  0057D2  2207               	addwfc	??_if_solution_end+6,f,c
  7490  0057D4  0EE9               	movlw	low _deff_CE
  7491  0057D6  2406               	addwf	??_if_solution_end+5,w,c
  7492  0057D8  6EF6               	movwf	tblptrl,c
  7493  0057DA  0E7D               	movlw	high _deff_CE
  7494  0057DC  2007               	addwfc	??_if_solution_end+6,w,c
  7495  0057DE  6EF7               	movwf	tblptrh,c
  7496  0057E0                     	if	0	;There are less than 3 active tblptr bytes
  7497  0057E0                     	endif
  7498  0057E0  0008               	tblrd		*
  7499  0057E2  50F5               	movf	tablat,w,c
  7500  0057E4  1805               	xorwf	??_if_solution_end+4,w,c
  7501  0057E6  A4D8               	btfss	status,2,c
  7502  0057E8  D789               	goto	u5120
  7503                           
  7504                           ;master/solution_CES.c: 160:    xo += state_CE.eo[i];
  7505  0057EA  0EAC               	movlw	low (_state_CE+28)
  7506  0057EC  2409               	addwf	if_solution_end@i,w,c
  7507  0057EE  6ED9               	movwf	fsr2l,c
  7508  0057F0  6ADA               	clrf	fsr2h,c
  7509  0057F2  0E01               	movlw	high (_state_CE+28)
  7510  0057F4  22DA               	addwfc	fsr2h,f,c
  7511  0057F6  50DF               	movf	indf2,w,c
  7512  0057F8  2608               	addwf	if_solution_end@xo,f,c
  7513                           
  7514                           ;master/solution_CES.c: 161:   }
  7515  0057FA  2A09               	incf	if_solution_end@i,f,c
  7516  0057FC                     l7828:
  7517  0057FC  500B               	movf	if_solution_end@j,w,c
  7518  0057FE  6E01               	movwf	??_if_solution_end& (0+255),c
  7519  005800  6A02               	clrf	(??_if_solution_end+1)& (0+255),c
  7520  005802  90D8               	bcf	status,0,c
  7521  005804  3601               	rlcf	??_if_solution_end,f,c
  7522  005806  3602               	rlcf	??_if_solution_end+1,f,c
  7523  005808  90D8               	bcf	status,0,c
  7524  00580A  3601               	rlcf	??_if_solution_end,f,c
  7525  00580C  3602               	rlcf	??_if_solution_end+1,f,c
  7526  00580E  0E04               	movlw	4
  7527  005810  2601               	addwf	??_if_solution_end,f,c
  7528  005812  0E00               	movlw	0
  7529  005814  2202               	addwfc	??_if_solution_end+1,f,c
  7530  005816  5009               	movf	if_solution_end@i,w,c
  7531  005818  6E03               	movwf	(??_if_solution_end+2)& (0+255),c
  7532  00581A  6A04               	clrf	(??_if_solution_end+3)& (0+255),c
  7533  00581C  5001               	movf	??_if_solution_end,w,c
  7534  00581E  5C03               	subwf	??_if_solution_end+2,w,c
  7535  005820  5004               	movf	??_if_solution_end+3,w,c
  7536  005822  0A80               	xorlw	128
  7537  005824  6E05               	movwf	(??_if_solution_end+4)& (0+255),c
  7538  005826  5002               	movf	??_if_solution_end+1,w,c
  7539  005828  0A80               	xorlw	128
  7540  00582A  5805               	subwfb	(??_if_solution_end+4)& (0+255),w,c
  7541  00582C  A0D8               	btfss	status,0,c
  7542  00582E  D7AA               	goto	l7818
  7543                           
  7544                           ;master/solution_CES.c: 162:  }
  7545  005830  2A0B               	incf	if_solution_end@j,f,c
  7546  005832  0E02               	movlw	2
  7547  005834  640B               	cpfsgt	if_solution_end@j,c
  7548  005836  D7A1               	goto	l7816
  7549                           
  7550                           ;master/solution_CES.c: 163:  if (xo != 0 && xo != 4)
  7551  005838  5008               	movf	if_solution_end@xo,w,c
  7552  00583A  B4D8               	btfsc	status,2,c
  7553  00583C  D004               	goto	l7842
  7554  00583E  0E04               	movlw	4
  7555  005840  1808               	xorwf	if_solution_end@xo,w,c
  7556  005842  A4D8               	btfss	status,2,c
  7557  005844  D75B               	goto	u5120
  7558  005846                     l7842:
  7559                           
  7560                           ;master/solution_CES.c: 166:  return 0;
  7561  005846  0E00               	movlw	0
  7562  005848  0012               	return		;funcret
  7563  00584A                     __end_of_if_solution_end:
  7564                           	opt callstack 0
  7565                           
  7566 ;; *************** function _make_step_7 *****************
  7567 ;; Defined at:
  7568 ;;		line 666 in file "master/solution_CES.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;		None
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;  i               1   58[BANK0 ] unsigned char 
  7573 ;; Return value:  Size  Location     Type
  7574 ;;                  1    wreg      void 
  7575 ;; Registers used:
  7576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  7577 ;; Tracked objects:
  7578 ;;		On entry : 0/0
  7579 ;;		On exit  : 0/0
  7580 ;;		Unchanged: 0/0
  7581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7582 ;;      Params:         0       0       0       0       0       0       0
  7583 ;;      Locals:         0       1       0       0       0       0       0
  7584 ;;      Temps:          0       2       0       0       0       0       0
  7585 ;;      Totals:         0       3       0       0       0       0       0
  7586 ;;Total ram usage:        3 bytes
  7587 ;; Hardware stack levels used:    1
  7588 ;; Hardware stack levels required when called:    8
  7589 ;; This function calls:
  7590 ;;		_command_turn_ARRAY_3
  7591 ;;		_if_2pair
  7592 ;;		_if_all_2pair
  7593 ;;		_if_no_pair
  7594 ;;		_make_flont_green
  7595 ;;		_operation_limit
  7596 ;;		_operation_setup
  7597 ;; This function is called by:
  7598 ;;		_made_cube
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           	psect	text22
  7603  00441A                     __ptext22:
  7604                           	opt callstack 0
  7605  00441A                     _make_step_7:
  7606                           	opt callstack 20
  7607                           
  7608                           ;master/solution_CES.c: 668:  const char start7[20][3] = {;master/solution_CES.c: 671:  
      +                          char i;;master/solution_CES.c: 672:  const char step7[14][3] = {;master/solution_CES.c: 
      +                          676:  if (if_no_pair() == 0)
  7609                           
  7610                           ;incstack = 0
  7611  00441A  ECB9  F017         	call	_if_no_pair	;wreg free
  7612  00441E  0900               	iorlw	0
  7613  004420  A4D8               	btfss	status,2,c
  7614  004422  D012               	goto	u6510
  7615                           
  7616                           ;master/solution_CES.c: 677:  {;master/solution_CES.c: 679:   for (i = 0; i < 20; i++)
  7617  004424  0E00               	movlw	0
  7618  004426  0100               	movlb	0	; () banked
  7619  004428  6F9A               	movwf	make_step_7@i& (0+255),b
  7620  00442A                     l8692:
  7621                           
  7622                           ; BSR set to: 0
  7623                           ;master/solution_CES.c: 680:   {;master/solution_CES.c: 681:    command_turn_ARRAY_3(sta
      +                          rt7[i]);
  7624  00442A  519A               	movf	make_step_7@i& (0+255),w,b
  7625  00442C  0D03               	mullw	3
  7626  00442E  0E4F               	movlw	low make_step_7@start7
  7627  004430  24F3               	addwf	prodl,w,c
  7628  004432  6E5E               	movwf	command_turn_ARRAY_3@s,c
  7629  004434  0E7B               	movlw	high make_step_7@start7
  7630  004436  20F4               	addwfc	prodh,w,c
  7631  004438  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  7632  00443A  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  7633                           
  7634                           ;master/solution_CES.c: 682:   }
  7635  00443E  0100               	movlb	0	; () banked
  7636  004440  2B9A               	incf	make_step_7@i& (0+255),f,b
  7637                           
  7638                           ; BSR set to: 0
  7639  004442  0E13               	movlw	19
  7640  004444  659A               	cpfsgt	make_step_7@i& (0+255),b
  7641  004446  D7F1               	goto	l8692
  7642  004448                     u6510:
  7643                           
  7644                           ;master/solution_CES.c: 684:  if (if_all_2pair() == 0)
  7645  004448  EC3E  F01D         	call	_if_all_2pair	;wreg free
  7646  00444C  0900               	iorlw	0
  7647  00444E  B4D8               	btfsc	status,2,c
  7648  004450  0012               	return	
  7649                           
  7650                           ;master/solution_CES.c: 688:  make_flont_green();
  7651  004452  ECAC  F015         	call	_make_flont_green	;wreg free
  7652                           
  7653                           ;master/solution_CES.c: 690:  if (operation_setup() == 1)
  7654  004456  EC61  F014         	call	_operation_setup	;wreg free
  7655  00445A  06E8               	decf	wreg,f,c
  7656  00445C  B4D8               	btfsc	status,2,c
  7657  00445E  0012               	return	
  7658  004460  D00F               	goto	l8714
  7659  004462                     l8708:
  7660                           
  7661                           ;master/solution_CES.c: 694:  {;master/solution_CES.c: 695:   if (operation_limit(50) ==
      +                           1)
  7662  004462  0E00               	movlw	0
  7663  004464  6E02               	movwf	operation_limit@count+1,c
  7664  004466  0E32               	movlw	50
  7665  004468  6E01               	movwf	operation_limit@count,c
  7666  00446A  EC0E  F015         	call	_operation_limit	;wreg free
  7667  00446E  06E8               	decf	wreg,f,c
  7668  004470  B4D8               	btfsc	status,2,c
  7669  004472  0012               	return	
  7670                           
  7671                           ;master/solution_CES.c: 697:   command_turn_ARRAY_3("D");
  7672  004474  0EE8               	movlw	low STR_4
  7673  004476  6E5E               	movwf	command_turn_ARRAY_3@s,c
  7674  004478  0E7F               	movlw	high STR_4
  7675  00447A  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  7676  00447C  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  7677  004480                     l8714:
  7678                           
  7679                           ;master/solution_CES.c: 693:  while (if_2pair() == 1)
  7680  004480  EC63  F015         	call	_if_2pair	;wreg free
  7681  004484  06E8               	decf	wreg,f,c
  7682  004486  B4D8               	btfsc	status,2,c
  7683  004488  D7EC               	goto	l8708
  7684                           
  7685                           ;master/solution_CES.c: 699:  command_turn_ARRAY_3("D");
  7686  00448A  0EE8               	movlw	low STR_4
  7687  00448C  6E5E               	movwf	command_turn_ARRAY_3@s,c
  7688  00448E  0E7F               	movlw	high STR_4
  7689  004490  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  7690  004492  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  7691                           
  7692                           ;master/solution_CES.c: 700:  if (operation_setup() == 1)
  7693  004496  EC61  F014         	call	_operation_setup	;wreg free
  7694  00449A  06E8               	decf	wreg,f,c
  7695  00449C  B4D8               	btfsc	status,2,c
  7696  00449E  0012               	return	
  7697  0044A0  D015               	goto	l8728
  7698  0044A2                     l8722:
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;master/solution_CES.c: 704:  {;master/solution_CES.c: 705:   if (operation_limit(8) == 
      +                          1)
  7702  0044A2  0E00               	movlw	0
  7703  0044A4  6E02               	movwf	operation_limit@count+1,c
  7704  0044A6  0E08               	movlw	8
  7705  0044A8  6E01               	movwf	operation_limit@count,c
  7706  0044AA  EC0E  F015         	call	_operation_limit	;wreg free
  7707  0044AE  06E8               	decf	wreg,f,c
  7708  0044B0  B4D8               	btfsc	status,2,c
  7709  0044B2  0012               	return	
  7710                           
  7711                           ;master/solution_CES.c: 707:   command_turn_ARRAY_3("U'");
  7712  0044B4  0EB6               	movlw	low STR_9
  7713  0044B6  6E5E               	movwf	command_turn_ARRAY_3@s,c
  7714  0044B8  0E7F               	movlw	high STR_9
  7715  0044BA  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  7716  0044BC  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  7717                           
  7718                           ;master/solution_CES.c: 708:   command_turn_ARRAY_3("E");
  7719  0044C0  0EEA               	movlw	low STR_21
  7720  0044C2  6E5E               	movwf	command_turn_ARRAY_3@s,c
  7721  0044C4  0E7F               	movlw	high STR_21
  7722  0044C6  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  7723  0044C8  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  7724  0044CC                     l8728:
  7725                           
  7726                           ;master/solution_CES.c: 703:  while (state_CE.cp[4] - state_CE.cp[0] != 4)
  7727  0044CC  0101               	movlb	1	; () banked
  7728  0044CE  5190               	movf	_state_CE& (0+255),w,b
  7729  0044D0  C194  F098         	movff	_state_CE+4,??_make_step_7
  7730  0044D4  0100               	movlb	0	; () banked
  7731  0044D6  6B99               	clrf	(??_make_step_7+1)& (0+255),b
  7732  0044D8  5F98               	subwf	??_make_step_7& (0+255),f,b
  7733  0044DA  0E00               	movlw	0
  7734  0044DC  5B99               	subwfb	(??_make_step_7+1)& (0+255),f,b
  7735  0044DE  0E04               	movlw	4
  7736  0044E0  1998               	xorwf	??_make_step_7& (0+255),w,b
  7737  0044E2  1199               	iorwf	(??_make_step_7+1)& (0+255),w,b
  7738  0044E4  A4D8               	btfss	status,2,c
  7739  0044E6  D7DD               	goto	l8722
  7740                           
  7741                           ; BSR set to: 0
  7742                           ;master/solution_CES.c: 711:  for (i = 0; i < 14; i++)
  7743  0044E8  0E00               	movlw	0
  7744  0044EA  6F9A               	movwf	make_step_7@i& (0+255),b
  7745  0044EC                     l8736:
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;master/solution_CES.c: 712:  {;master/solution_CES.c: 713:   command_turn_ARRAY_3(step7
      +                          [i]);
  7749  0044EC  519A               	movf	make_step_7@i& (0+255),w,b
  7750  0044EE  0D03               	mullw	3
  7751  0044F0  0E17               	movlw	low make_step_7@step7
  7752  0044F2  24F3               	addwf	prodl,w,c
  7753  0044F4  6E5E               	movwf	command_turn_ARRAY_3@s,c
  7754  0044F6  0E7E               	movlw	high make_step_7@step7
  7755  0044F8  20F4               	addwfc	prodh,w,c
  7756  0044FA  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  7757  0044FC  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  7758                           
  7759                           ;master/solution_CES.c: 714:  }
  7760  004500  0100               	movlb	0	; () banked
  7761  004502  2B9A               	incf	make_step_7@i& (0+255),f,b
  7762                           
  7763                           ; BSR set to: 0
  7764  004504  0E0D               	movlw	13
  7765  004506  659A               	cpfsgt	make_step_7@i& (0+255),b
  7766  004508  D7F1               	goto	l8736
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;master/solution_CES.c: 715:  make_flont_green();
  7770  00450A  ECAC  F015         	call	_make_flont_green	;wreg free
  7771  00450E  0012               	return		;funcret
  7772  004510                     __end_of_make_step_7:
  7773                           	opt callstack 0
  7774                           
  7775 ;; *************** function _if_no_pair *****************
  7776 ;; Defined at:
  7777 ;;		line 652 in file "master/solution_CES.c"
  7778 ;; Parameters:    Size  Location     Type
  7779 ;;		None
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;  i               1    0[BANK0 ] unsigned char 
  7782 ;; Return value:  Size  Location     Type
  7783 ;;                  1    wreg      unsigned char 
  7784 ;; Registers used:
  7785 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  7786 ;; Tracked objects:
  7787 ;;		On entry : 0/0
  7788 ;;		On exit  : 0/0
  7789 ;;		Unchanged: 0/0
  7790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7791 ;;      Params:         0       0       0       0       0       0       0
  7792 ;;      Locals:         0       1       0       0       0       0       0
  7793 ;;      Temps:          2       0       0       0       0       0       0
  7794 ;;      Totals:         2       1       0       0       0       0       0
  7795 ;;Total ram usage:        3 bytes
  7796 ;; Hardware stack levels used:    1
  7797 ;; Hardware stack levels required when called:    6
  7798 ;; This function calls:
  7799 ;;		_command_turn_ARRAY_3_end
  7800 ;;		_set_C
  7801 ;; This function is called by:
  7802 ;;		_make_step_7
  7803 ;; This function uses a non-reentrant model
  7804 ;;
  7805                           
  7806                           	psect	text23
  7807  002F72                     __ptext23:
  7808                           	opt callstack 0
  7809  002F72                     _if_no_pair:
  7810                           	opt callstack 21
  7811                           
  7812                           ;master/solution_CES.c: 654:  char i;;master/solution_CES.c: 656:  command_turn_ARRAY_3_
      +                          end();
  7813                           
  7814                           ;incstack = 0
  7815  002F72  EC2D  F030         	call	_command_turn_ARRAY_3_end	;wreg free
  7816                           
  7817                           ;master/solution_CES.c: 657:  set_C();
  7818  002F76  ECEA  F039         	call	_set_C	;wreg free
  7819                           
  7820                           ;master/solution_CES.c: 658:  for (i = 1; i < 5; i++)
  7821  002F7A  0E01               	movlw	1
  7822  002F7C  0100               	movlb	0	; () banked
  7823  002F7E  6F60               	movwf	if_no_pair@i& (0+255),b
  7824  002F80                     l8114:
  7825                           
  7826                           ; BSR set to: 0
  7827                           ;master/solution_CES.c: 659:  {;master/solution_CES.c: 660:   if (LED_Light[i][6] == LED
      +                          _Light[i][8])
  7828  002F80  5160               	movf	if_no_pair@i& (0+255),w,b
  7829  002F82  0D09               	mullw	9
  7830  002F84  0E45               	movlw	low (_LED_Light+8)
  7831  002F86  24F3               	addwf	prodl,w,c
  7832  002F88  6ED9               	movwf	fsr2l,c
  7833  002F8A  0E01               	movlw	high (_LED_Light+8)
  7834  002F8C  20F4               	addwfc	prodh,w,c
  7835  002F8E  6EDA               	movwf	fsr2h,c
  7836  002F90  5160               	movf	if_no_pair@i& (0+255),w,b
  7837  002F92  0D09               	mullw	9
  7838  002F94  0E43               	movlw	low (_LED_Light+6)
  7839  002F96  24F3               	addwf	prodl,w,c
  7840  002F98  6EE1               	movwf	fsr1l,c
  7841  002F9A  0E01               	movlw	high (_LED_Light+6)
  7842  002F9C  20F4               	addwfc	prodh,w,c
  7843  002F9E  6EE2               	movwf	fsr1h,c
  7844  002FA0  50DE               	movf	postinc2,w,c
  7845  002FA2  18E6               	xorwf	postinc1,w,c
  7846  002FA4  A4D8               	btfss	status,2,c
  7847  002FA6  D002               	goto	l8120
  7848                           
  7849                           ; BSR set to: 0
  7850                           ;master/solution_CES.c: 661:    return 1;
  7851  002FA8  0E01               	movlw	1
  7852  002FAA  0012               	return	
  7853  002FAC                     l8120:
  7854                           
  7855                           ; BSR set to: 0
  7856                           ;master/solution_CES.c: 662:  }
  7857  002FAC  2B60               	incf	if_no_pair@i& (0+255),f,b
  7858                           
  7859                           ; BSR set to: 0
  7860  002FAE  0E04               	movlw	4
  7861  002FB0  6560               	cpfsgt	if_no_pair@i& (0+255),b
  7862  002FB2  D7E6               	goto	l8114
  7863                           
  7864                           ; BSR set to: 0
  7865                           ;master/solution_CES.c: 663:  return 0;
  7866  002FB4  0E00               	movlw	0
  7867                           
  7868                           ; BSR set to: 0
  7869  002FB6  0012               	return		;funcret
  7870  002FB8                     __end_of_if_no_pair:
  7871                           	opt callstack 0
  7872                           
  7873 ;; *************** function _if_all_2pair *****************
  7874 ;; Defined at:
  7875 ;;		line 631 in file "master/solution_CES.c"
  7876 ;; Parameters:    Size  Location     Type
  7877 ;;		None
  7878 ;; Auto vars:     Size  Location     Type
  7879 ;;  i               2   12[COMRAM] int 
  7880 ;;  re              2   10[COMRAM] int 
  7881 ;;  if_flag         2    8[COMRAM] int 
  7882 ;;  y               2    6[COMRAM] int 
  7883 ;;  x               2    0        int 
  7884 ;; Return value:  Size  Location     Type
  7885 ;;                  1    wreg      unsigned char 
  7886 ;; Registers used:
  7887 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7893 ;;      Params:         0       0       0       0       0       0       0
  7894 ;;      Locals:         8       0       0       0       0       0       0
  7895 ;;      Temps:          6       0       0       0       0       0       0
  7896 ;;      Totals:        14       0       0       0       0       0       0
  7897 ;;Total ram usage:       14 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; This function calls:
  7900 ;;		Nothing
  7901 ;; This function is called by:
  7902 ;;		_make_step_7
  7903 ;; This function uses a non-reentrant model
  7904 ;;
  7905                           
  7906                           	psect	text24
  7907  003A7C                     __ptext24:
  7908                           	opt callstack 0
  7909  003A7C                     _if_all_2pair:
  7910                           	opt callstack 27
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;incstack = 0
  7914  003A7C  0E00               	movlw	0
  7915  003A7E  6E0C               	movwf	if_all_2pair@re+1,c
  7916  003A80  0E00               	movlw	0
  7917  003A82  6E0B               	movwf	if_all_2pair@re,c
  7918  003A84  0E00               	movlw	0
  7919  003A86  6E08               	movwf	if_all_2pair@y+1,c
  7920  003A88  0E00               	movlw	0
  7921  003A8A  6E07               	movwf	if_all_2pair@y,c
  7922                           
  7923                           ;master/solution_CES.c: 634:  for (i = 0; i < 4; i++)
  7924  003A8C  0E00               	movlw	0
  7925  003A8E  6E0E               	movwf	if_all_2pair@i+1,c
  7926  003A90  0E00               	movlw	0
  7927  003A92  6E0D               	movwf	if_all_2pair@i,c
  7928  003A94                     l8078:
  7929                           
  7930                           ;master/solution_CES.c: 635:  {;master/solution_CES.c: 636:   if (state_CE.cp[i + 4] == 
      +                          4)
  7931  003A94  0E94               	movlw	low (_state_CE+4)
  7932  003A96  240D               	addwf	if_all_2pair@i,w,c
  7933  003A98  6ED9               	movwf	fsr2l,c
  7934  003A9A  0E01               	movlw	high (_state_CE+4)
  7935  003A9C  200E               	addwfc	if_all_2pair@i+1,w,c
  7936  003A9E  6EDA               	movwf	fsr2h,c
  7937  003AA0  0E04               	movlw	4
  7938  003AA2  18DE               	xorwf	postinc2,w,c
  7939  003AA4  B4D8               	btfsc	status,2,c
  7940  003AA6  D00A               	goto	u5530
  7941                           
  7942                           ;master/solution_CES.c: 640:  }
  7943  003AA8  4A0D               	infsnz	if_all_2pair@i,f,c
  7944  003AAA  2A0E               	incf	if_all_2pair@i+1,f,c
  7945  003AAC  BE0E               	btfsc	if_all_2pair@i+1,7,c
  7946  003AAE  D7F2               	goto	l8078
  7947  003AB0  500E               	movf	if_all_2pair@i+1,w,c
  7948  003AB2  E104               	bnz	u5530
  7949  003AB4  0E04               	movlw	4
  7950  003AB6  5C0D               	subwf	if_all_2pair@i,w,c
  7951  003AB8  A0D8               	btfss	status,0,c
  7952  003ABA  D7EC               	goto	l8078
  7953  003ABC                     u5530:
  7954                           
  7955                           ;master/solution_CES.c: 641:  if_flag = i;
  7956  003ABC  C00D  F009         	movff	if_all_2pair@i,if_all_2pair@if_flag
  7957  003AC0  C00E  F00A         	movff	if_all_2pair@i+1,if_all_2pair@if_flag+1
  7958                           
  7959                           ;master/solution_CES.c: 642:  for (i = 0; i < 4; i++)
  7960  003AC4  0E00               	movlw	0
  7961  003AC6  6E0E               	movwf	if_all_2pair@i+1,c
  7962  003AC8  0E00               	movlw	0
  7963  003ACA  6E0D               	movwf	if_all_2pair@i,c
  7964  003ACC                     l8092:
  7965                           
  7966                           ;master/solution_CES.c: 643:  {;master/solution_CES.c: 644:   if (state_CE.cp[4 + (i + i
      +                          f_flag) % 4] != i + 4)
  7967  003ACC  5009               	movf	if_all_2pair@if_flag,w,c
  7968  003ACE  240D               	addwf	if_all_2pair@i,w,c
  7969  003AD0  6E01               	movwf	??_if_all_2pair& (0+255),c
  7970  003AD2  500A               	movf	if_all_2pair@if_flag+1,w,c
  7971  003AD4  200E               	addwfc	if_all_2pair@i+1,w,c
  7972  003AD6  6E02               	movwf	(??_if_all_2pair+1)& (0+255),c
  7973  003AD8  0E03               	movlw	3
  7974  003ADA  1601               	andwf	??_if_all_2pair,f,c
  7975  003ADC  0E00               	movlw	0
  7976  003ADE  1602               	andwf	??_if_all_2pair+1,f,c
  7977  003AE0  0E94               	movlw	low (_state_CE+4)
  7978  003AE2  2401               	addwf	??_if_all_2pair,w,c
  7979  003AE4  6ED9               	movwf	fsr2l,c
  7980  003AE6  0E01               	movlw	high (_state_CE+4)
  7981  003AE8  2002               	addwfc	??_if_all_2pair+1,w,c
  7982  003AEA  6EDA               	movwf	fsr2h,c
  7983  003AEC  50DF               	movf	indf2,w,c
  7984  003AEE  6E03               	movwf	(??_if_all_2pair+2)& (0+255),c
  7985  003AF0  6A04               	clrf	(??_if_all_2pair+3)& (0+255),c
  7986  003AF2  0E04               	movlw	4
  7987  003AF4  240D               	addwf	if_all_2pair@i,w,c
  7988  003AF6  6E05               	movwf	(??_if_all_2pair+4)& (0+255),c
  7989  003AF8  0E00               	movlw	0
  7990  003AFA  200E               	addwfc	if_all_2pair@i+1,w,c
  7991  003AFC  6E06               	movwf	(??_if_all_2pair+5)& (0+255),c
  7992  003AFE  5003               	movf	??_if_all_2pair+2,w,c
  7993  003B00  1805               	xorwf	??_if_all_2pair+4,w,c
  7994  003B02  E104               	bnz	u5540
  7995  003B04  5004               	movf	??_if_all_2pair+3,w,c
  7996  003B06  1806               	xorwf	??_if_all_2pair+5,w,c
  7997  003B08  B4D8               	btfsc	status,2,c
  7998  003B0A  D004               	goto	l8096
  7999  003B0C                     u5540:
  8000                           
  8001                           ;master/solution_CES.c: 645:   {;master/solution_CES.c: 646:    re = 1;
  8002  003B0C  0E00               	movlw	0
  8003  003B0E  6E0C               	movwf	if_all_2pair@re+1,c
  8004  003B10  0E01               	movlw	1
  8005  003B12  6E0B               	movwf	if_all_2pair@re,c
  8006  003B14                     l8096:
  8007                           
  8008                           ;master/solution_CES.c: 648:  }
  8009  003B14  4A0D               	infsnz	if_all_2pair@i,f,c
  8010  003B16  2A0E               	incf	if_all_2pair@i+1,f,c
  8011  003B18  BE0E               	btfsc	if_all_2pair@i+1,7,c
  8012  003B1A  D7D8               	goto	l8092
  8013  003B1C  500E               	movf	if_all_2pair@i+1,w,c
  8014  003B1E  E104               	bnz	u5550
  8015  003B20  0E04               	movlw	4
  8016  003B22  5C0D               	subwf	if_all_2pair@i,w,c
  8017  003B24  A0D8               	btfss	status,0,c
  8018  003B26  D7D2               	goto	l8092
  8019  003B28                     u5550:
  8020                           
  8021                           ;master/solution_CES.c: 649:  return re;
  8022  003B28  500B               	movf	if_all_2pair@re,w,c
  8023  003B2A  0012               	return		;funcret
  8024  003B2C                     __end_of_if_all_2pair:
  8025                           	opt callstack 0
  8026                           
  8027 ;; *************** function _if_2pair *****************
  8028 ;; Defined at:
  8029 ;;		line 765 in file "master/solution_CES.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;		None
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;  i               1    0        unsigned char 
  8034 ;; Return value:  Size  Location     Type
  8035 ;;                  1    wreg      unsigned char 
  8036 ;; Registers used:
  8037 ;;		wreg, status,2, status,0
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8043 ;;      Params:         0       0       0       0       0       0       0
  8044 ;;      Locals:         0       0       0       0       0       0       0
  8045 ;;      Temps:          2       0       0       0       0       0       0
  8046 ;;      Totals:         2       0       0       0       0       0       0
  8047 ;;Total ram usage:        2 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; This function calls:
  8050 ;;		Nothing
  8051 ;; This function is called by:
  8052 ;;		_make_step_7
  8053 ;; This function uses a non-reentrant model
  8054 ;;
  8055                           
  8056                           	psect	text25
  8057  002AC6                     __ptext25:
  8058                           	opt callstack 0
  8059  002AC6                     _if_2pair:
  8060                           	opt callstack 27
  8061                           
  8062                           ;master/solution_CES.c: 767:  char i;;master/solution_CES.c: 768:  if (state_CE.cp[5] - 
      +                          state_CE.cp[4] == 1)
  8063                           
  8064                           ;incstack = 0
  8065  002AC6  0101               	movlb	1	; () banked
  8066  002AC8  5194               	movf	(_state_CE+4)& (0+255),w,b
  8067  002ACA  C195  F001         	movff	_state_CE+5,??_if_2pair
  8068  002ACE  6A02               	clrf	(??_if_2pair+1)& (0+255),c
  8069  002AD0  5E01               	subwf	??_if_2pair,f,c
  8070  002AD2  0E00               	movlw	0
  8071  002AD4  5A02               	subwfb	??_if_2pair+1,f,c
  8072  002AD6  0401               	decf	??_if_2pair,w,c
  8073  002AD8  1002               	iorwf	??_if_2pair+1,w,c
  8074  002ADA  A4D8               	btfss	status,2,c
  8075  002ADC  D002               	goto	l8134
  8076  002ADE                     u5580:
  8077                           
  8078                           ; BSR set to: 1
  8079                           ;master/solution_CES.c: 769:  {;master/solution_CES.c: 770:   return 0;
  8080  002ADE  0E00               	movlw	0
  8081  002AE0  0012               	return	
  8082  002AE2                     l8134:
  8083                           
  8084                           ; BSR set to: 1
  8085                           ;master/solution_CES.c: 772:  if (state_CE.cp[5] == 4 && state_CE.cp[4] == 7)
  8086  002AE2  0E04               	movlw	4
  8087  002AE4  1995               	xorwf	(_state_CE+5)& (0+255),w,b
  8088  002AE6  A4D8               	btfss	status,2,c
  8089  002AE8  D004               	goto	l8142
  8090                           
  8091                           ; BSR set to: 1
  8092  002AEA  0E07               	movlw	7
  8093  002AEC  1994               	xorwf	(_state_CE+4)& (0+255),w,b
  8094  002AEE  B4D8               	btfsc	status,2,c
  8095  002AF0  D7F6               	goto	u5580
  8096  002AF2                     l8142:
  8097                           
  8098                           ; BSR set to: 1
  8099                           ;master/solution_CES.c: 776:  return 1;
  8100  002AF2  0E01               	movlw	1
  8101                           
  8102                           ; BSR set to: 1
  8103  002AF4  0012               	return		;funcret
  8104  002AF6                     __end_of_if_2pair:
  8105                           	opt callstack 0
  8106                           
  8107 ;; *************** function _make_second_flower_perfect *****************
  8108 ;; Defined at:
  8109 ;;		line 366 in file "master/solution_CES.c"
  8110 ;; Parameters:    Size  Location     Type
  8111 ;;		None
  8112 ;; Auto vars:     Size  Location     Type
  8113 ;;  i               1   62[BANK0 ] unsigned char 
  8114 ;;  search_ep       1   61[BANK0 ] unsigned char 
  8115 ;;  j               1   60[BANK0 ] unsigned char 
  8116 ;;  flont_0         1   59[BANK0 ] unsigned char 
  8117 ;; Return value:  Size  Location     Type
  8118 ;;                  1    wreg      void 
  8119 ;; Registers used:
  8120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  8121 ;; Tracked objects:
  8122 ;;		On entry : 0/0
  8123 ;;		On exit  : 0/0
  8124 ;;		Unchanged: 0/0
  8125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8126 ;;      Params:         0       0       0       0       0       0       0
  8127 ;;      Locals:         0       4       0       0       0       0       0
  8128 ;;      Temps:          0       3       0       0       0       0       0
  8129 ;;      Totals:         0       7       0       0       0       0       0
  8130 ;;Total ram usage:        7 bytes
  8131 ;; Hardware stack levels used:    1
  8132 ;; Hardware stack levels required when called:    8
  8133 ;; This function calls:
  8134 ;;		_command_turn_ARRAY_3
  8135 ;;		_if_second_flower_perfect
  8136 ;;		_make_flont_green
  8137 ;;		_operation_limit
  8138 ;;		_operation_setup
  8139 ;; This function is called by:
  8140 ;;		_made_cube
  8141 ;; This function uses a non-reentrant model
  8142 ;;
  8143                           
  8144                           	psect	text26
  8145  0062FE                     __ptext26:
  8146                           	opt callstack 0
  8147  0062FE                     _make_second_flower_perfect:
  8148                           	opt callstack 20
  8149                           
  8150                           ;master/solution_CES.c: 369:  const char command_drop_right[8][3] = {"U", "R", "U'", "R'
      +                          ", "U'", "F'", "U", "F"};;master/solution_CES.c: 370:  const char command_drop_left[8][3
      +                          ] = {"U'", "L'", "U", "L", "U", "F", "U'", "F'"};;master/solution_CES.c: 372:  if (opera
      +                          tion_setup() == 1)
  8151                           
  8152                           ; BSR set to: 1
  8153                           ;incstack = 0
  8154  0062FE  EC61  F014         	call	_operation_setup	;wreg free
  8155  006302  06E8               	decf	wreg,f,c
  8156  006304  B4D8               	btfsc	status,2,c
  8157  006306  0012               	return	
  8158  006308  D14B               	goto	u6300
  8159  00630A                     l8382:
  8160                           
  8161                           ;master/solution_CES.c: 376:  {;master/solution_CES.c: 378:   if (operation_limit(100) =
      +                          = 1)
  8162  00630A  0E00               	movlw	0
  8163  00630C  6E02               	movwf	operation_limit@count+1,c
  8164  00630E  0E64               	movlw	100
  8165  006310  6E01               	movwf	operation_limit@count,c
  8166  006312  EC0E  F015         	call	_operation_limit	;wreg free
  8167  006316  06E8               	decf	wreg,f,c
  8168  006318  B4D8               	btfsc	status,2,c
  8169  00631A  0012               	return	
  8170                           
  8171                           ;master/solution_CES.c: 380:   for (search_ep = 0; search_ep < 4; search_ep++)
  8172  00631C  0E00               	movlw	0
  8173  00631E  0100               	movlb	0	; () banked
  8174  006320  6F9D               	movwf	make_second_flower_perfect@search_ep& (0+255),b
  8175  006322                     l8392:
  8176                           
  8177                           ; BSR set to: 0
  8178                           ;master/solution_CES.c: 381:   {;master/solution_CES.c: 382:    if (if_second_flower_per
      +                          fect() == 0)
  8179  006322  EC68  F01F         	call	_if_second_flower_perfect	;wreg free
  8180  006326  0900               	iorlw	0
  8181  006328  B4D8               	btfsc	status,2,c
  8182  00632A  D13A               	goto	u6300
  8183                           
  8184                           ;master/solution_CES.c: 384:    if (operation_limit(100) == 1)
  8185  00632C  0E00               	movlw	0
  8186  00632E  6E02               	movwf	operation_limit@count+1,c
  8187  006330  0E64               	movlw	100
  8188  006332  6E01               	movwf	operation_limit@count,c
  8189  006334  EC0E  F015         	call	_operation_limit	;wreg free
  8190  006338  06E8               	decf	wreg,f,c
  8191  00633A  B4D8               	btfsc	status,2,c
  8192  00633C  0012               	return	
  8193                           
  8194                           ;master/solution_CES.c: 386:    make_flont_green();
  8195  00633E  ECAC  F015         	call	_make_flont_green	;wreg free
  8196                           
  8197                           ;master/solution_CES.c: 388:    if (state_CE.ep[0] == search_ep || state_CE.ep[1] == sea
      +                          rch_ep || state_CE.ep[2] == search_ep || state_CE.ep[3] == search_ep)
  8198  006342  0100               	movlb	0	; () banked
  8199  006344  519D               	movf	make_second_flower_perfect@search_ep& (0+255),w,b
  8200  006346  0101               	movlb	1	; () banked
  8201  006348  19A0               	xorwf	(_state_CE+16)& (0+255),w,b
  8202  00634A  B4D8               	btfsc	status,2,c
  8203  00634C  D012               	goto	u6090
  8204                           
  8205                           ; BSR set to: 1
  8206  00634E  0100               	movlb	0	; () banked
  8207  006350  519D               	movf	make_second_flower_perfect@search_ep& (0+255),w,b
  8208  006352  0101               	movlb	1	; () banked
  8209  006354  19A1               	xorwf	(_state_CE+17)& (0+255),w,b
  8210  006356  B4D8               	btfsc	status,2,c
  8211  006358  D00C               	goto	u6090
  8212                           
  8213                           ; BSR set to: 1
  8214  00635A  0100               	movlb	0	; () banked
  8215  00635C  519D               	movf	make_second_flower_perfect@search_ep& (0+255),w,b
  8216  00635E  0101               	movlb	1	; () banked
  8217  006360  19A2               	xorwf	(_state_CE+18)& (0+255),w,b
  8218  006362  B4D8               	btfsc	status,2,c
  8219  006364  D006               	goto	u6090
  8220                           
  8221                           ; BSR set to: 1
  8222  006366  0100               	movlb	0	; () banked
  8223  006368  519D               	movf	make_second_flower_perfect@search_ep& (0+255),w,b
  8224  00636A  0101               	movlb	1	; () banked
  8225  00636C  19A3               	xorwf	(_state_CE+19)& (0+255),w,b
  8226  00636E  A4D8               	btfss	status,2,c
  8227  006370  D058               	goto	u6150
  8228  006372                     u6090:
  8229                           
  8230                           ; BSR set to: 1
  8231                           ;master/solution_CES.c: 389:    {;master/solution_CES.c: 390:     if (state_CE.eo[search
      +                          _ep] != 0 || state_CE.cp[search_ep + 4] - state_CE.ep[search_ep] != 0)
  8232  006372  0EAC               	movlw	low (_state_CE+28)
  8233  006374  0100               	movlb	0	; () banked
  8234  006376  259D               	addwf	make_second_flower_perfect@search_ep& (0+255),w,b
  8235  006378  6ED9               	movwf	fsr2l,c
  8236  00637A  6ADA               	clrf	fsr2h,c
  8237  00637C  0E01               	movlw	high (_state_CE+28)
  8238  00637E  22DA               	addwfc	fsr2h,f,c
  8239  006380  50DF               	movf	indf2,w,c
  8240  006382  A4D8               	btfss	status,2,c
  8241  006384  D019               	goto	u6110
  8242                           
  8243                           ; BSR set to: 0
  8244  006386  0E94               	movlw	low (_state_CE+4)
  8245  006388  259D               	addwf	make_second_flower_perfect@search_ep& (0+255),w,b
  8246  00638A  6ED9               	movwf	fsr2l,c
  8247  00638C  6ADA               	clrf	fsr2h,c
  8248  00638E  0E01               	movlw	high (_state_CE+4)
  8249  006390  22DA               	addwfc	fsr2h,f,c
  8250  006392  50DF               	movf	indf2,w,c
  8251  006394  6F98               	movwf	??_make_second_flower_perfect& (0+255),b
  8252  006396  6B99               	clrf	(??_make_second_flower_perfect+1)& (0+255),b
  8253  006398  0EA0               	movlw	low (_state_CE+16)
  8254  00639A  259D               	addwf	make_second_flower_perfect@search_ep& (0+255),w,b
  8255  00639C  6ED9               	movwf	fsr2l,c
  8256  00639E  6ADA               	clrf	fsr2h,c
  8257  0063A0  0E01               	movlw	high (_state_CE+16)
  8258  0063A2  22DA               	addwfc	fsr2h,f,c
  8259  0063A4  50DF               	movf	indf2,w,c
  8260  0063A6  6F9A               	movwf	(??_make_second_flower_perfect+2)& (0+255),b
  8261  0063A8  519A               	movf	(??_make_second_flower_perfect+2)& (0+255),w,b
  8262  0063AA  5F98               	subwf	??_make_second_flower_perfect& (0+255),f,b
  8263  0063AC  0E00               	movlw	0
  8264  0063AE  5B99               	subwfb	(??_make_second_flower_perfect+1)& (0+255),f,b
  8265  0063B0  5198               	movf	??_make_second_flower_perfect& (0+255),w,b
  8266  0063B2  1199               	iorwf	(??_make_second_flower_perfect+1)& (0+255),w,b
  8267  0063B4  B4D8               	btfsc	status,2,c
  8268  0063B6  D0F0               	goto	u6290
  8269  0063B8                     u6110:
  8270                           
  8271                           ; BSR set to: 0
  8272                           ;master/solution_CES.c: 391:     {;master/solution_CES.c: 392:      if (search_ep <= 1)
  8273  0063B8  0E02               	movlw	2
  8274  0063BA  619D               	cpfslt	make_second_flower_perfect@search_ep& (0+255),b
  8275  0063BC  D00C               	goto	l8418
  8276                           
  8277                           ; BSR set to: 0
  8278                           ;master/solution_CES.c: 393:      {;master/solution_CES.c: 394:       command_turn_ARRAY
      +                          _3("Y");
  8279  0063BE  0EFA               	movlw	low STR_31
  8280  0063C0  6E5E               	movwf	command_turn_ARRAY_3@s,c
  8281  0063C2  0E7F               	movlw	high STR_31
  8282  0063C4  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  8283  0063C6  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  8284                           
  8285                           ;master/solution_CES.c: 395:       command_turn_ARRAY_3("Y");
  8286  0063CA  0EFA               	movlw	low STR_31
  8287  0063CC  6E5E               	movwf	command_turn_ARRAY_3@s,c
  8288  0063CE  0E7F               	movlw	high STR_31
  8289  0063D0  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  8290  0063D2  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  8291  0063D6                     l8418:
  8292                           
  8293                           ;master/solution_CES.c: 397:      if (search_ep % 2 == 0)
  8294  0063D6  0100               	movlb	0	; () banked
  8295  0063D8  B19D               	btfsc	make_second_flower_perfect@search_ep& (0+255),0,b
  8296  0063DA  D012               	goto	l8432
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;master/solution_CES.c: 398:      {;master/solution_CES.c: 399:       for (i = 0; i < 8;
      +                           i++)
  8300  0063DC  0E00               	movlw	0
  8301  0063DE  6F9E               	movwf	make_second_flower_perfect@i& (0+255),b
  8302  0063E0                     l8426:
  8303                           
  8304                           ; BSR set to: 0
  8305                           ;master/solution_CES.c: 400:       {;master/solution_CES.c: 401:        command_turn_ARR
      +                          AY_3(command_drop_right[i]);
  8306  0063E0  519E               	movf	make_second_flower_perfect@i& (0+255),w,b
  8307  0063E2  0D03               	mullw	3
  8308  0063E4  0EA3               	movlw	low make_second_flower_perfect@command_drop_right
  8309  0063E6  24F3               	addwf	prodl,w,c
  8310  0063E8  6E5E               	movwf	command_turn_ARRAY_3@s,c
  8311  0063EA  0E7E               	movlw	high make_second_flower_perfect@command_drop_right
  8312  0063EC  20F4               	addwfc	prodh,w,c
  8313  0063EE  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  8314  0063F0  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  8315                           
  8316                           ;master/solution_CES.c: 402:       }
  8317  0063F4  0100               	movlb	0	; () banked
  8318  0063F6  2B9E               	incf	make_second_flower_perfect@i& (0+255),f,b
  8319                           
  8320                           ; BSR set to: 0
  8321  0063F8  0E07               	movlw	7
  8322  0063FA  659E               	cpfsgt	make_second_flower_perfect@i& (0+255),b
  8323  0063FC  D7F1               	goto	l8426
  8324  0063FE  D011               	goto	u6150
  8325  006400                     l8432:
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;master/solution_CES.c: 405:      {;master/solution_CES.c: 406:       for (i = 0; i < 8;
      +                           i++)
  8329  006400  0E00               	movlw	0
  8330  006402  6F9E               	movwf	make_second_flower_perfect@i& (0+255),b
  8331  006404                     l8438:
  8332                           
  8333                           ; BSR set to: 0
  8334                           ;master/solution_CES.c: 407:       {;master/solution_CES.c: 408:        command_turn_ARR
      +                          AY_3(command_drop_left[i]);
  8335  006404  519E               	movf	make_second_flower_perfect@i& (0+255),w,b
  8336  006406  0D03               	mullw	3
  8337  006408  0E8B               	movlw	low make_second_flower_perfect@command_drop_left
  8338  00640A  24F3               	addwf	prodl,w,c
  8339  00640C  6E5E               	movwf	command_turn_ARRAY_3@s,c
  8340  00640E  0E7E               	movlw	high make_second_flower_perfect@command_drop_left
  8341  006410  20F4               	addwfc	prodh,w,c
  8342  006412  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  8343  006414  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  8344                           
  8345                           ;master/solution_CES.c: 409:       }
  8346  006418  0100               	movlb	0	; () banked
  8347  00641A  2B9E               	incf	make_second_flower_perfect@i& (0+255),f,b
  8348                           
  8349                           ; BSR set to: 0
  8350  00641C  0E07               	movlw	7
  8351  00641E  659E               	cpfsgt	make_second_flower_perfect@i& (0+255),b
  8352  006420  D7F1               	goto	l8438
  8353  006422                     u6150:
  8354                           
  8355                           ;master/solution_CES.c: 417:    if (search_ep < 2)
  8356  006422  0E02               	movlw	2
  8357  006424  0100               	movlb	0	; () banked
  8358  006426  619D               	cpfslt	make_second_flower_perfect@search_ep& (0+255),b
  8359  006428  D00C               	goto	l8448
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;master/solution_CES.c: 418:    {;master/solution_CES.c: 419:     command_turn_ARRAY_3("
      +                          Y");
  8363  00642A  0EFA               	movlw	low STR_31
  8364  00642C  6E5E               	movwf	command_turn_ARRAY_3@s,c
  8365  00642E  0E7F               	movlw	high STR_31
  8366  006430  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  8367  006432  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  8368                           
  8369                           ;master/solution_CES.c: 420:     command_turn_ARRAY_3("Y");
  8370  006436  0EFA               	movlw	low STR_31
  8371  006438  6E5E               	movwf	command_turn_ARRAY_3@s,c
  8372  00643A  0E7F               	movlw	high STR_31
  8373  00643C  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  8374  00643E  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  8375  006442                     l8448:
  8376                           
  8377                           ;master/solution_CES.c: 422:    for (i = 0; i < 4; i++)
  8378  006442  0E00               	movlw	0
  8379  006444  0100               	movlb	0	; () banked
  8380  006446  6F9E               	movwf	make_second_flower_perfect@i& (0+255),b
  8381  006448                     l8454:
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;master/solution_CES.c: 423:    {;master/solution_CES.c: 424:     if (state_CE.ep[6] == 
      +                          search_ep)
  8385  006448  519D               	movf	make_second_flower_perfect@search_ep& (0+255),w,b
  8386  00644A  0101               	movlb	1	; () banked
  8387  00644C  19A6               	xorwf	(_state_CE+22)& (0+255),w,b
  8388  00644E  A4D8               	btfss	status,2,c
  8389  006450  D055               	goto	l8496
  8390                           
  8391                           ; BSR set to: 1
  8392                           ;master/solution_CES.c: 425:     {;master/solution_CES.c: 426:      flont_0 = 0;
  8393  006452  0E00               	movlw	0
  8394  006454  0100               	movlb	0	; () banked
  8395  006456  6F9B               	movwf	make_second_flower_perfect@flont_0& (0+255),b
  8396                           
  8397                           ;master/solution_CES.c: 427:      if (state_CE.eo[6] == 0)
  8398  006458  0101               	movlb	1	; () banked
  8399  00645A  51B2               	movf	(_state_CE+34)& (0+255),w,b
  8400  00645C  A4D8               	btfss	status,2,c
  8401  00645E  D01E               	goto	l8466
  8402                           
  8403                           ; BSR set to: 1
  8404                           ;master/solution_CES.c: 428:      {;master/solution_CES.c: 429:       if (search_ep % 2 
      +                          == 0)
  8405  006460  0100               	movlb	0	; () banked
  8406  006462  B19D               	btfsc	make_second_flower_perfect@search_ep& (0+255),0,b
  8407  006464  D00D               	goto	l8462
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;master/solution_CES.c: 430:       {;master/solution_CES.c: 431:        command_turn_ARR
      +                          AY_3("E");
  8411  006466  0EEA               	movlw	low STR_21
  8412  006468  6E5E               	movwf	command_turn_ARRAY_3@s,c
  8413  00646A  0E7F               	movlw	high STR_21
  8414  00646C  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  8415  00646E  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  8416                           
  8417                           ;master/solution_CES.c: 432:        command_turn_ARRAY_3("D");
  8418  006472  0EE8               	movlw	low STR_4
  8419  006474  6E5E               	movwf	command_turn_ARRAY_3@s,c
  8420  006476  0E7F               	movlw	high STR_4
  8421  006478  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  8422  00647A  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  8423                           
  8424                           ;master/solution_CES.c: 433:       }
  8425  00647E  D00C               	goto	l8464
  8426  006480                     l8462:
  8427                           
  8428                           ; BSR set to: 0
  8429                           ;master/solution_CES.c: 435:       {;master/solution_CES.c: 436:        command_turn_ARR
      +                          AY_3("E'");
  8430  006480  0EA4               	movlw	low STR_27
  8431  006482  6E5E               	movwf	command_turn_ARRAY_3@s,c
  8432  006484  0E7F               	movlw	high STR_27
  8433  006486  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  8434  006488  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  8435                           
  8436                           ;master/solution_CES.c: 437:        command_turn_ARRAY_3("D'");
  8437  00648C  0EA1               	movlw	low STR_10
  8438  00648E  6E5E               	movwf	command_turn_ARRAY_3@s,c
  8439  006490  0E7F               	movlw	high STR_10
  8440  006492  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  8441  006494  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  8442  006498                     l8464:
  8443                           
  8444                           ;master/solution_CES.c: 440:       flont_0++;
  8445  006498  0100               	movlb	0	; () banked
  8446  00649A  2B9B               	incf	make_second_flower_perfect@flont_0& (0+255),f,b
  8447  00649C                     l8466:
  8448                           
  8449                           ;master/solution_CES.c: 443:      if ((search_ep + flont_0) % 2 == 1)
  8450  00649C  0100               	movlb	0	; () banked
  8451  00649E  519B               	movf	make_second_flower_perfect@flont_0& (0+255),w,b
  8452  0064A0  C09D  F098         	movff	make_second_flower_perfect@search_ep,??_make_second_flower_perfect
  8453  0064A4  6B99               	clrf	(??_make_second_flower_perfect+1)& (0+255),b
  8454  0064A6  2798               	addwf	??_make_second_flower_perfect& (0+255),f,b
  8455  0064A8  0E00               	movlw	0
  8456  0064AA  2399               	addwfc	(??_make_second_flower_perfect+1)& (0+255),f,b
  8457  0064AC  A198               	btfss	??_make_second_flower_perfect& (0+255),0,b
  8458  0064AE  D012               	goto	l8480
  8459                           
  8460                           ; BSR set to: 0
  8461                           ;master/solution_CES.c: 444:      {;master/solution_CES.c: 445:       for (j = 0; j < 8;
      +                           j++)
  8462  0064B0  0E00               	movlw	0
  8463  0064B2  6F9C               	movwf	make_second_flower_perfect@j& (0+255),b
  8464  0064B4                     l8474:
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;master/solution_CES.c: 446:       {;master/solution_CES.c: 447:        command_turn_ARR
      +                          AY_3(command_drop_right[j]);
  8468  0064B4  519C               	movf	make_second_flower_perfect@j& (0+255),w,b
  8469  0064B6  0D03               	mullw	3
  8470  0064B8  0EA3               	movlw	low make_second_flower_perfect@command_drop_right
  8471  0064BA  24F3               	addwf	prodl,w,c
  8472  0064BC  6E5E               	movwf	command_turn_ARRAY_3@s,c
  8473  0064BE  0E7E               	movlw	high make_second_flower_perfect@command_drop_right
  8474  0064C0  20F4               	addwfc	prodh,w,c
  8475  0064C2  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  8476  0064C4  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  8477                           
  8478                           ;master/solution_CES.c: 448:       }
  8479  0064C8  0100               	movlb	0	; () banked
  8480  0064CA  2B9C               	incf	make_second_flower_perfect@j& (0+255),f,b
  8481                           
  8482                           ; BSR set to: 0
  8483  0064CC  0E07               	movlw	7
  8484  0064CE  659C               	cpfsgt	make_second_flower_perfect@j& (0+255),b
  8485  0064D0  D7F1               	goto	l8474
  8486  0064D2  D011               	goto	u6220
  8487  0064D4                     l8480:
  8488                           
  8489                           ; BSR set to: 0
  8490                           ;master/solution_CES.c: 451:      {;master/solution_CES.c: 452:       for (j = 0; j < 8;
      +                           j++)
  8491  0064D4  0E00               	movlw	0
  8492  0064D6  6F9C               	movwf	make_second_flower_perfect@j& (0+255),b
  8493  0064D8                     l8486:
  8494                           
  8495                           ; BSR set to: 0
  8496                           ;master/solution_CES.c: 453:       {;master/solution_CES.c: 454:        command_turn_ARR
      +                          AY_3(command_drop_left[j]);
  8497  0064D8  519C               	movf	make_second_flower_perfect@j& (0+255),w,b
  8498  0064DA  0D03               	mullw	3
  8499  0064DC  0E8B               	movlw	low make_second_flower_perfect@command_drop_left
  8500  0064DE  24F3               	addwf	prodl,w,c
  8501  0064E0  6E5E               	movwf	command_turn_ARRAY_3@s,c
  8502  0064E2  0E7E               	movlw	high make_second_flower_perfect@command_drop_left
  8503  0064E4  20F4               	addwfc	prodh,w,c
  8504  0064E6  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  8505  0064E8  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  8506                           
  8507                           ;master/solution_CES.c: 455:       }
  8508  0064EC  0100               	movlb	0	; () banked
  8509  0064EE  2B9C               	incf	make_second_flower_perfect@j& (0+255),f,b
  8510                           
  8511                           ; BSR set to: 0
  8512  0064F0  0E07               	movlw	7
  8513  0064F2  659C               	cpfsgt	make_second_flower_perfect@j& (0+255),b
  8514  0064F4  D7F1               	goto	l8486
  8515  0064F6                     u6220:
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;master/solution_CES.c: 457:      search_ep = 0;
  8519  0064F6  0E00               	movlw	0
  8520  0064F8  6F9D               	movwf	make_second_flower_perfect@search_ep& (0+255),b
  8521                           
  8522                           ;master/solution_CES.c: 458:      break;
  8523  0064FA  D04E               	goto	u6290
  8524  0064FC                     l8496:
  8525                           
  8526                           ; BSR set to: 1
  8527                           ;master/solution_CES.c: 461:     {;master/solution_CES.c: 462:      command_turn_ARRAY_3
      +                          ("U");
  8528  0064FC  0EF6               	movlw	low STR_3
  8529  0064FE  6E5E               	movwf	command_turn_ARRAY_3@s,c
  8530  006500  0E7F               	movlw	high STR_3
  8531  006502  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  8532  006504  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  8533                           
  8534                           ;master/solution_CES.c: 463:      if (i == 3 && search_ep == 3)
  8535  006508  0E03               	movlw	3
  8536  00650A  0100               	movlb	0	; () banked
  8537  00650C  199E               	xorwf	make_second_flower_perfect@i& (0+255),w,b
  8538  00650E  A4D8               	btfss	status,2,c
  8539  006510  D03F               	goto	l8540
  8540                           
  8541                           ; BSR set to: 0
  8542  006512  0E03               	movlw	3
  8543  006514  199D               	xorwf	make_second_flower_perfect@search_ep& (0+255),w,b
  8544  006516  A4D8               	btfss	status,2,c
  8545  006518  D03B               	goto	l8540
  8546                           
  8547                           ; BSR set to: 0
  8548                           ;master/solution_CES.c: 464:      {;master/solution_CES.c: 465:       make_flont_green()
      +                          ;
  8549  00651A  ECAC  F015         	call	_make_flont_green	;wreg free
  8550                           
  8551                           ;master/solution_CES.c: 466:       for (i = 0; i < 4; i++)
  8552  00651E  0E00               	movlw	0
  8553  006520  0100               	movlb	0	; () banked
  8554  006522  6F9E               	movwf	make_second_flower_perfect@i& (0+255),b
  8555  006524                     l8510:
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;master/solution_CES.c: 467:       {;master/solution_CES.c: 468:        if (state_CE.ep[
      +                          i] == i)
  8559  006524  0EA0               	movlw	low (_state_CE+16)
  8560  006526  259E               	addwf	make_second_flower_perfect@i& (0+255),w,b
  8561  006528  6ED9               	movwf	fsr2l,c
  8562  00652A  6ADA               	clrf	fsr2h,c
  8563  00652C  0E01               	movlw	high (_state_CE+16)
  8564  00652E  22DA               	addwfc	fsr2h,f,c
  8565  006530  519E               	movf	make_second_flower_perfect@i& (0+255),w,b
  8566  006532  18DE               	xorwf	postinc2,w,c
  8567  006534  A4D8               	btfss	status,2,c
  8568  006536  D004               	goto	l8514
  8569                           
  8570                           ; BSR set to: 0
  8571                           ;master/solution_CES.c: 469:        {;master/solution_CES.c: 470:         search_ep = 3 
      +                          - i;
  8572  006538  519E               	movf	make_second_flower_perfect@i& (0+255),w,b
  8573  00653A  0803               	sublw	3
  8574  00653C  6F9D               	movwf	make_second_flower_perfect@search_ep& (0+255),b
  8575                           
  8576                           ;master/solution_CES.c: 471:         break;
  8577  00653E  D004               	goto	u6260
  8578  006540                     l8514:
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;master/solution_CES.c: 473:       }
  8582  006540  2B9E               	incf	make_second_flower_perfect@i& (0+255),f,b
  8583                           
  8584                           ; BSR set to: 0
  8585  006542  0E03               	movlw	3
  8586  006544  659E               	cpfsgt	make_second_flower_perfect@i& (0+255),b
  8587  006546  D7EE               	goto	l8510
  8588  006548                     u6260:
  8589                           
  8590                           ; BSR set to: 0
  8591                           ;master/solution_CES.c: 474:       for (i = 0; i < search_ep; i++)
  8592  006548  0E00               	movlw	0
  8593  00654A  6F9E               	movwf	make_second_flower_perfect@i& (0+255),b
  8594  00654C  D008               	goto	l8524
  8595  00654E                     l8520:
  8596                           
  8597                           ; BSR set to: 0
  8598                           ;master/solution_CES.c: 475:       {;master/solution_CES.c: 476:        command_turn_ARR
      +                          AY_3("Y");
  8599  00654E  0EFA               	movlw	low STR_31
  8600  006550  6E5E               	movwf	command_turn_ARRAY_3@s,c
  8601  006552  0E7F               	movlw	high STR_31
  8602  006554  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  8603  006556  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  8604                           
  8605                           ;master/solution_CES.c: 477:       }
  8606  00655A  0100               	movlb	0	; () banked
  8607  00655C  2B9E               	incf	make_second_flower_perfect@i& (0+255),f,b
  8608  00655E                     l8524:
  8609                           
  8610                           ; BSR set to: 0
  8611  00655E  519D               	movf	make_second_flower_perfect@search_ep& (0+255),w,b
  8612  006560  5D9E               	subwf	make_second_flower_perfect@i& (0+255),w,b
  8613  006562  A0D8               	btfss	status,0,c
  8614  006564  D7F4               	goto	l8520
  8615                           
  8616                           ; BSR set to: 0
  8617                           ;master/solution_CES.c: 478:       for (i = 0; i < 8; i++)
  8618  006566  0E00               	movlw	0
  8619  006568  6F9E               	movwf	make_second_flower_perfect@i& (0+255),b
  8620  00656A                     l8532:
  8621                           
  8622                           ; BSR set to: 0
  8623                           ;master/solution_CES.c: 479:       {;master/solution_CES.c: 480:        command_turn_ARR
      +                          AY_3(command_drop_left[i]);
  8624  00656A  519E               	movf	make_second_flower_perfect@i& (0+255),w,b
  8625  00656C  0D03               	mullw	3
  8626  00656E  0E8B               	movlw	low make_second_flower_perfect@command_drop_left
  8627  006570  24F3               	addwf	prodl,w,c
  8628  006572  6E5E               	movwf	command_turn_ARRAY_3@s,c
  8629  006574  0E7E               	movlw	high make_second_flower_perfect@command_drop_left
  8630  006576  20F4               	addwfc	prodh,w,c
  8631  006578  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  8632  00657A  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  8633                           
  8634                           ;master/solution_CES.c: 481:       }
  8635  00657E  0100               	movlb	0	; () banked
  8636  006580  2B9E               	incf	make_second_flower_perfect@i& (0+255),f,b
  8637                           
  8638                           ; BSR set to: 0
  8639  006582  0E07               	movlw	7
  8640  006584  659E               	cpfsgt	make_second_flower_perfect@i& (0+255),b
  8641  006586  D7F1               	goto	l8532
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;master/solution_CES.c: 482:       i = 5;
  8645  006588  0E05               	movlw	5
  8646  00658A  6F9E               	movwf	make_second_flower_perfect@i& (0+255),b
  8647                           
  8648                           ;master/solution_CES.c: 483:       search_ep = 0;
  8649  00658C  0E00               	movlw	0
  8650  00658E  6F9D               	movwf	make_second_flower_perfect@search_ep& (0+255),b
  8651  006590                     l8540:
  8652                           
  8653                           ; BSR set to: 0
  8654                           ;master/solution_CES.c: 486:    }
  8655  006590  2B9E               	incf	make_second_flower_perfect@i& (0+255),f,b
  8656                           
  8657                           ; BSR set to: 0
  8658  006592  0E03               	movlw	3
  8659  006594  659E               	cpfsgt	make_second_flower_perfect@i& (0+255),b
  8660  006596  D758               	goto	l8454
  8661  006598                     u6290:
  8662                           
  8663                           ; BSR set to: 0
  8664  006598  2B9D               	incf	make_second_flower_perfect@search_ep& (0+255),f,b
  8665                           
  8666                           ; BSR set to: 0
  8667  00659A  0E03               	movlw	3
  8668  00659C  659D               	cpfsgt	make_second_flower_perfect@search_ep& (0+255),b
  8669  00659E  D6C1               	goto	l8392
  8670  0065A0                     u6300:
  8671                           
  8672                           ;master/solution_CES.c: 375:  while (if_second_flower_perfect() != 0)
  8673  0065A0  EC68  F01F         	call	_if_second_flower_perfect	;wreg free
  8674  0065A4  0900               	iorlw	0
  8675  0065A6  B4D8               	btfsc	status,2,c
  8676  0065A8  0012               	return	
  8677  0065AA  D6AF               	goto	l8382
  8678  0065AC                     __end_of_make_second_flower_perfect:
  8679                           	opt callstack 0
  8680                           
  8681 ;; *************** function _if_second_flower_perfect *****************
  8682 ;; Defined at:
  8683 ;;		line 326 in file "master/solution_CES.c"
  8684 ;; Parameters:    Size  Location     Type
  8685 ;;		None
  8686 ;; Auto vars:     Size  Location     Type
  8687 ;;  i               1   11[COMRAM] char 
  8688 ;;  j               1   10[COMRAM] char 
  8689 ;; Return value:  Size  Location     Type
  8690 ;;                  1    wreg      unsigned char 
  8691 ;; Registers used:
  8692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8693 ;; Tracked objects:
  8694 ;;		On entry : 0/0
  8695 ;;		On exit  : 0/0
  8696 ;;		Unchanged: 0/0
  8697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8698 ;;      Params:         0       0       0       0       0       0       0
  8699 ;;      Locals:         2       0       0       0       0       0       0
  8700 ;;      Temps:          5       0       0       0       0       0       0
  8701 ;;      Totals:         7       0       0       0       0       0       0
  8702 ;;Total ram usage:        7 bytes
  8703 ;; Hardware stack levels used:    1
  8704 ;; Hardware stack levels required when called:    1
  8705 ;; This function calls:
  8706 ;;		_if_EP
  8707 ;; This function is called by:
  8708 ;;		_made_cube
  8709 ;;		_make_second_flower_perfect
  8710 ;; This function uses a non-reentrant model
  8711 ;;
  8712                           
  8713                           	psect	text27
  8714  003ED0                     __ptext27:
  8715                           	opt callstack 0
  8716  003ED0                     _if_second_flower_perfect:
  8717                           	opt callstack 26
  8718                           
  8719                           ;master/solution_CES.c: 328:  signed char i, j;;master/solution_CES.c: 329:  for (i = 0;
      +                           i < 4; i++)
  8720                           
  8721                           ;incstack = 0
  8722  003ED0  0E00               	movlw	0
  8723  003ED2  6E0C               	movwf	if_second_flower_perfect@i,c
  8724  003ED4                     l7930:
  8725                           
  8726                           ;master/solution_CES.c: 330:  {;master/solution_CES.c: 331:   if (if_EP(i, 0, 3) != 1)
  8727  003ED4  0E00               	movlw	0
  8728  003ED6  6E01               	movwf	if_EP@s_ep,c
  8729  003ED8  0E03               	movlw	3
  8730  003EDA  6E02               	movwf	if_EP@e_ep,c
  8731  003EDC  500C               	movf	if_second_flower_perfect@i,w,c
  8732  003EDE  EC4C  F015         	call	_if_EP
  8733  003EE2  06E8               	decf	wreg,f,c
  8734  003EE4  B4D8               	btfsc	status,2,c
  8735  003EE6  D002               	goto	l7936
  8736                           
  8737                           ;master/solution_CES.c: 332:    return 1;
  8738  003EE8  0E01               	movlw	1
  8739  003EEA  0012               	return	
  8740  003EEC                     l7936:
  8741                           
  8742                           ;master/solution_CES.c: 333:  }
  8743  003EEC  2A0C               	incf	if_second_flower_perfect@i,f,c
  8744  003EEE  500C               	movf	if_second_flower_perfect@i,w,c
  8745  003EF0  0A80               	xorlw	128
  8746  003EF2  0F7C               	addlw	-132
  8747  003EF4  A0D8               	btfss	status,0,c
  8748  003EF6  D7EE               	goto	l7930
  8749                           
  8750                           ;master/solution_CES.c: 335:  j = 0;
  8751  003EF8  0E00               	movlw	0
  8752  003EFA  6E0B               	movwf	if_second_flower_perfect@j,c
  8753                           
  8754                           ;master/solution_CES.c: 336:  for (i = 0; i < 4; i++)
  8755  003EFC  0E00               	movlw	0
  8756  003EFE  6E0C               	movwf	if_second_flower_perfect@i,c
  8757  003F00                     l7946:
  8758                           
  8759                           ;master/solution_CES.c: 337:  {;master/solution_CES.c: 338:   j += state_CE.eo[i];
  8760  003F00  0EAC               	movlw	low (_state_CE+28)
  8761  003F02  240C               	addwf	if_second_flower_perfect@i,w,c
  8762  003F04  6ED9               	movwf	fsr2l,c
  8763  003F06  6ADA               	clrf	fsr2h,c
  8764  003F08  0E01               	movlw	high (_state_CE+28)
  8765  003F0A  22DA               	addwfc	fsr2h,f,c
  8766  003F0C  50DF               	movf	indf2,w,c
  8767  003F0E  260B               	addwf	if_second_flower_perfect@j,f,c
  8768                           
  8769                           ;master/solution_CES.c: 339:  }
  8770  003F10  2A0C               	incf	if_second_flower_perfect@i,f,c
  8771  003F12  500C               	movf	if_second_flower_perfect@i,w,c
  8772  003F14  0A80               	xorlw	128
  8773  003F16  0F7C               	addlw	-132
  8774  003F18  A0D8               	btfss	status,0,c
  8775  003F1A  D7F2               	goto	l7946
  8776                           
  8777                           ;master/solution_CES.c: 340:  if (j != 0 && j != 4)
  8778  003F1C  500B               	movf	if_second_flower_perfect@j,w,c
  8779  003F1E  B4D8               	btfsc	status,2,c
  8780  003F20  D006               	goto	l7960
  8781  003F22  0E04               	movlw	4
  8782  003F24  180B               	xorwf	if_second_flower_perfect@j,w,c
  8783  003F26  B4D8               	btfsc	status,2,c
  8784  003F28  D002               	goto	l7960
  8785                           
  8786                           ;master/solution_CES.c: 341:   return 2;
  8787  003F2A  0E02               	movlw	2
  8788  003F2C  0012               	return	
  8789  003F2E                     l7960:
  8790                           
  8791                           ;master/solution_CES.c: 343:  for (i = 3; i >= 0; i--)
  8792  003F2E  0E03               	movlw	3
  8793  003F30  6E0C               	movwf	if_second_flower_perfect@i,c
  8794  003F32                     l7966:
  8795                           
  8796                           ;master/solution_CES.c: 344:  {;master/solution_CES.c: 345:   if (state_CE.ep[i] == 0)
  8797  003F32  0EA0               	movlw	low (_state_CE+16)
  8798  003F34  240C               	addwf	if_second_flower_perfect@i,w,c
  8799  003F36  6ED9               	movwf	fsr2l,c
  8800  003F38  6ADA               	clrf	fsr2h,c
  8801  003F3A  0E01               	movlw	high (_state_CE+16)
  8802  003F3C  22DA               	addwfc	fsr2h,f,c
  8803  003F3E  50DF               	movf	indf2,w,c
  8804  003F40  B4D8               	btfsc	status,2,c
  8805  003F42  D003               	goto	u5400
  8806                           
  8807                           ;master/solution_CES.c: 347:  }
  8808  003F44  060C               	decf	if_second_flower_perfect@i,f,c
  8809  003F46  AE0C               	btfss	if_second_flower_perfect@i,7,c
  8810  003F48  D7F4               	goto	l7966
  8811  003F4A                     u5400:
  8812                           
  8813                           ;master/solution_CES.c: 348:  for (j = 0; j < 4; j++)
  8814  003F4A  0E00               	movlw	0
  8815  003F4C  6E0B               	movwf	if_second_flower_perfect@j,c
  8816  003F4E                     l7980:
  8817                           
  8818                           ;master/solution_CES.c: 349:  {;master/solution_CES.c: 350:   if (state_CE.cp[4 + j] - s
      +                          tate_CE.ep[j] != 0)
  8819  003F4E  C00B  F006         	movff	if_second_flower_perfect@j,??_if_second_flower_perfect
  8820  003F52  6A07               	clrf	(??_if_second_flower_perfect+1)& (0+255),c
  8821  003F54  BE06               	btfsc	??_if_second_flower_perfect& (0+255),7,c
  8822  003F56  0607               	decf	(??_if_second_flower_perfect+1)& (0+255),f,c
  8823  003F58  0E94               	movlw	low (_state_CE+4)
  8824  003F5A  2406               	addwf	??_if_second_flower_perfect,w,c
  8825  003F5C  6ED9               	movwf	fsr2l,c
  8826  003F5E  0E01               	movlw	high (_state_CE+4)
  8827  003F60  2007               	addwfc	??_if_second_flower_perfect+1,w,c
  8828  003F62  6EDA               	movwf	fsr2h,c
  8829  003F64  50DF               	movf	indf2,w,c
  8830  003F66  6E08               	movwf	(??_if_second_flower_perfect+2)& (0+255),c
  8831  003F68  6A09               	clrf	(??_if_second_flower_perfect+3)& (0+255),c
  8832  003F6A  0EA0               	movlw	low (_state_CE+16)
  8833  003F6C  240B               	addwf	if_second_flower_perfect@j,w,c
  8834  003F6E  6ED9               	movwf	fsr2l,c
  8835  003F70  6ADA               	clrf	fsr2h,c
  8836  003F72  0E01               	movlw	high (_state_CE+16)
  8837  003F74  22DA               	addwfc	fsr2h,f,c
  8838  003F76  50DF               	movf	indf2,w,c
  8839  003F78  6E0A               	movwf	(??_if_second_flower_perfect+4)& (0+255),c
  8840  003F7A  500A               	movf	??_if_second_flower_perfect+4,w,c
  8841  003F7C  5E08               	subwf	??_if_second_flower_perfect+2,f,c
  8842  003F7E  0E00               	movlw	0
  8843  003F80  5A09               	subwfb	??_if_second_flower_perfect+3,f,c
  8844  003F82  5008               	movf	??_if_second_flower_perfect+2,w,c
  8845  003F84  1009               	iorwf	??_if_second_flower_perfect+3,w,c
  8846  003F86  B4D8               	btfsc	status,2,c
  8847  003F88  D002               	goto	l7986
  8848                           
  8849                           ;master/solution_CES.c: 351:    return 3;
  8850  003F8A  0E03               	movlw	3
  8851  003F8C  0012               	return	
  8852  003F8E                     l7986:
  8853                           
  8854                           ;master/solution_CES.c: 352:  }
  8855  003F8E  2A0B               	incf	if_second_flower_perfect@j,f,c
  8856  003F90  500B               	movf	if_second_flower_perfect@j,w,c
  8857  003F92  0A80               	xorlw	128
  8858  003F94  0F7C               	addlw	-132
  8859  003F96  A0D8               	btfss	status,0,c
  8860  003F98  D7DA               	goto	l7980
  8861                           
  8862                           ;master/solution_CES.c: 353:  return 0;
  8863  003F9A  0E00               	movlw	0
  8864  003F9C  0012               	return		;funcret
  8865  003F9E                     __end_of_if_second_flower_perfect:
  8866                           	opt callstack 0
  8867                           
  8868 ;; *************** function _if_EP *****************
  8869 ;; Defined at:
  8870 ;;		line 285 in file "master/solution_CES.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;  check           1    wreg     unsigned char 
  8873 ;;  s_ep            1    0[COMRAM] unsigned char 
  8874 ;;  e_ep            1    1[COMRAM] unsigned char 
  8875 ;; Auto vars:     Size  Location     Type
  8876 ;;  check           1    3[COMRAM] unsigned char 
  8877 ;;  i               1    4[COMRAM] unsigned char 
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  1    wreg      unsigned char 
  8880 ;; Registers used:
  8881 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8887 ;;      Params:         2       0       0       0       0       0       0
  8888 ;;      Locals:         2       0       0       0       0       0       0
  8889 ;;      Temps:          1       0       0       0       0       0       0
  8890 ;;      Totals:         5       0       0       0       0       0       0
  8891 ;;Total ram usage:        5 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; This function calls:
  8894 ;;		Nothing
  8895 ;; This function is called by:
  8896 ;;		_make_white_yellow_flower
  8897 ;;		_if_second_flower_perfect
  8898 ;; This function uses a non-reentrant model
  8899 ;;
  8900                           
  8901                           	psect	text28
  8902  002A98                     __ptext28:
  8903                           	opt callstack 0
  8904  002A98                     _if_EP:
  8905                           	opt callstack 27
  8906                           
  8907                           ;incstack = 0
  8908                           ;if_EP@check stored from wreg
  8909  002A98  6E04               	movwf	if_EP@check,c
  8910                           
  8911                           ;master/solution_CES.c: 285: char if_EP(char check, char s_ep, char e_ep);master/solutio
      +                          n_CES.c: 286: {;master/solution_CES.c: 287:  char i;;master/solution_CES.c: 288:  for (i
      +                           = s_ep; i <= e_ep; i++)
  8912  002A9A  C001  F005         	movff	if_EP@s_ep,if_EP@i
  8913  002A9E  D00D               	goto	l7730
  8914  002AA0                     l7722:
  8915                           
  8916                           ;master/solution_CES.c: 289:  {;master/solution_CES.c: 290:   if (state_CE.ep[check] == 
      +                          i)
  8917  002AA0  0EA0               	movlw	low (_state_CE+16)
  8918  002AA2  2404               	addwf	if_EP@check,w,c
  8919  002AA4  6ED9               	movwf	fsr2l,c
  8920  002AA6  6ADA               	clrf	fsr2h,c
  8921  002AA8  0E01               	movlw	high (_state_CE+16)
  8922  002AAA  22DA               	addwfc	fsr2h,f,c
  8923  002AAC  5005               	movf	if_EP@i,w,c
  8924  002AAE  18DE               	xorwf	postinc2,w,c
  8925  002AB0  A4D8               	btfss	status,2,c
  8926  002AB2  D002               	goto	l7728
  8927                           
  8928                           ;master/solution_CES.c: 291:   {;master/solution_CES.c: 292:    return 1;
  8929  002AB4  0E01               	movlw	1
  8930  002AB6  0012               	return	
  8931  002AB8                     l7728:
  8932                           
  8933                           ;master/solution_CES.c: 294:  }
  8934  002AB8  2A05               	incf	if_EP@i,f,c
  8935  002ABA                     l7730:
  8936  002ABA  5005               	movf	if_EP@i,w,c
  8937  002ABC  5C02               	subwf	if_EP@e_ep,w,c
  8938  002ABE  B0D8               	btfsc	status,0,c
  8939  002AC0  D7EF               	goto	l7722
  8940                           
  8941                           ;master/solution_CES.c: 295:  return 0;
  8942  002AC2  0E00               	movlw	0
  8943  002AC4  0012               	return		;funcret
  8944  002AC6                     __end_of_if_EP:
  8945                           	opt callstack 0
  8946                           
  8947 ;; *************** function _make_perfect_white *****************
  8948 ;; Defined at:
  8949 ;;		line 779 in file "master/solution_CES.c"
  8950 ;; Parameters:    Size  Location     Type
  8951 ;;		None
  8952 ;; Auto vars:     Size  Location     Type
  8953 ;;  mark_count      1   63[BANK0 ] char 
  8954 ;;  j               1   62[BANK0 ] char 
  8955 ;;  EPW_count       1   61[BANK0 ] char 
  8956 ;;  i               1   60[BANK0 ] char 
  8957 ;; Return value:  Size  Location     Type
  8958 ;;                  1    wreg      void 
  8959 ;; Registers used:
  8960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  8961 ;; Tracked objects:
  8962 ;;		On entry : 0/0
  8963 ;;		On exit  : 0/0
  8964 ;;		Unchanged: 0/0
  8965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8966 ;;      Params:         0       0       0       0       0       0       0
  8967 ;;      Locals:         0       4       0       0       0       0       0
  8968 ;;      Temps:          0       4       0       0       0       0       0
  8969 ;;      Totals:         0       8       0       0       0       0       0
  8970 ;;Total ram usage:        8 bytes
  8971 ;; Hardware stack levels used:    1
  8972 ;; Hardware stack levels required when called:    8
  8973 ;; This function calls:
  8974 ;;		_command_turn_ARRAY_3
  8975 ;;		_command_turn_ARRAY_3_end
  8976 ;;		_if_CP
  8977 ;;		_if_perfect_white
  8978 ;;		_make_flont_green
  8979 ;;		_operation_limit
  8980 ;;		_operation_setup
  8981 ;; This function is called by:
  8982 ;;		_made_cube
  8983 ;; This function uses a non-reentrant model
  8984 ;;
  8985                           
  8986                           	psect	text29
  8987  00514C                     __ptext29:
  8988                           	opt callstack 0
  8989  00514C                     _make_perfect_white:
  8990                           	opt callstack 20
  8991                           
  8992                           ;master/solution_CES.c: 782:  signed char mark_count = 3, EPW_count = 1, i = 3, j;
  8993                           
  8994                           ;incstack = 0
  8995  00514C  0E03               	movlw	3
  8996  00514E  0100               	movlb	0	; () banked
  8997  005150  6F9F               	movwf	make_perfect_white@mark_count& (0+255),b
  8998  005152  0E01               	movlw	1
  8999  005154  6F9D               	movwf	make_perfect_white@EPW_count& (0+255),b
  9000                           
  9001                           ; BSR set to: 0
  9002                           ;master/solution_CES.c: 784:  make_flont_green();
  9003  005156  ECAC  F015         	call	_make_flont_green	;wreg free
  9004                           
  9005                           ;master/solution_CES.c: 785:  if (operation_setup() == 1)
  9006  00515A  EC61  F014         	call	_operation_setup	;wreg free
  9007  00515E  06E8               	decf	wreg,f,c
  9008  005160  B4D8               	btfsc	status,2,c
  9009  005162  0012               	return	
  9010                           
  9011                           ;master/solution_CES.c: 787:  command_turn_ARRAY_3_end();
  9012  005164  EC2D  F030         	call	_command_turn_ARRAY_3_end	;wreg free
  9013                           
  9014                           ;master/solution_CES.c: 789:  while (if_perfect_white() != 0)
  9015  005168  D0C1               	goto	l8368
  9016  00516A                     l8302:
  9017                           
  9018                           ;master/solution_CES.c: 790:  {;master/solution_CES.c: 791:   command_turn_ARRAY_3_end()
      +                          ;
  9019  00516A  EC2D  F030         	call	_command_turn_ARRAY_3_end	;wreg free
  9020                           
  9021                           ;master/solution_CES.c: 793:   if (operation_limit(100) == 1)
  9022  00516E  0E00               	movlw	0
  9023  005170  6E02               	movwf	operation_limit@count+1,c
  9024  005172  0E64               	movlw	100
  9025  005174  6E01               	movwf	operation_limit@count,c
  9026  005176  EC0E  F015         	call	_operation_limit	;wreg free
  9027  00517A  06E8               	decf	wreg,f,c
  9028  00517C  B4D8               	btfsc	status,2,c
  9029  00517E  0012               	return	
  9030                           
  9031                           ;master/solution_CES.c: 796:   if (if_CP(3, 0, 3) == 1)
  9032  005180  0E00               	movlw	0
  9033  005182  6E01               	movwf	if_CP@s_cp,c
  9034  005184  0E03               	movlw	3
  9035  005186  6E02               	movwf	if_CP@e_cp,c
  9036  005188  0E03               	movlw	3
  9037  00518A  ECDF  F015         	call	_if_CP
  9038  00518E  06E8               	decf	wreg,f,c
  9039  005190  A4D8               	btfss	status,2,c
  9040  005192  D041               	goto	l8326
  9041                           
  9042                           ;master/solution_CES.c: 797:   {;master/solution_CES.c: 799:    if (state_CE.co[3] != 0 
      +                          || state_CE.cp[3] != mark_count)
  9043  005194  0101               	movlb	1	; () banked
  9044  005196  519B               	movf	(_state_CE+11)& (0+255),w,b
  9045  005198  A4D8               	btfss	status,2,c
  9046  00519A  D012               	goto	u5950
  9047                           
  9048                           ; BSR set to: 1
  9049  00519C  C09F  F098         	movff	make_perfect_white@mark_count,??_make_perfect_white
  9050  0051A0  0100               	movlb	0	; () banked
  9051  0051A2  6B99               	clrf	(??_make_perfect_white+1)& (0+255),b
  9052  0051A4  BF98               	btfsc	??_make_perfect_white& (0+255),7,b
  9053  0051A6  0799               	decf	(??_make_perfect_white+1)& (0+255),f,b
  9054  0051A8  0101               	movlb	1	; () banked
  9055  0051AA  5193               	movf	(_state_CE+3)& (0+255),w,b
  9056  0051AC  0100               	movlb	0	; () banked
  9057  0051AE  6F9A               	movwf	(??_make_perfect_white+2)& (0+255),b
  9058  0051B0  6B9B               	clrf	(??_make_perfect_white+3)& (0+255),b
  9059  0051B2  5198               	movf	??_make_perfect_white& (0+255),w,b
  9060  0051B4  199A               	xorwf	(??_make_perfect_white+2)& (0+255),w,b
  9061  0051B6  E104               	bnz	u5950
  9062  0051B8  5199               	movf	(??_make_perfect_white+1)& (0+255),w,b
  9063  0051BA  199B               	xorwf	(??_make_perfect_white+3)& (0+255),w,b
  9064  0051BC  B4D8               	btfsc	status,2,c
  9065  0051BE  D018               	goto	l8316
  9066  0051C0                     u5950:
  9067                           
  9068                           ;master/solution_CES.c: 800:    {;master/solution_CES.c: 802:     command_turn_ARRAY_3("
      +                          L");
  9069  0051C0  0EEE               	movlw	low STR_5
  9070  0051C2  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9071  0051C4  0E7F               	movlw	high STR_5
  9072  0051C6  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9073  0051C8  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9074                           
  9075                           ;master/solution_CES.c: 803:     command_turn_ARRAY_3("D");
  9076  0051CC  0EE8               	movlw	low STR_4
  9077  0051CE  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9078  0051D0  0E7F               	movlw	high STR_4
  9079  0051D2  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9080  0051D4  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9081                           
  9082                           ;master/solution_CES.c: 804:     command_turn_ARRAY_3("L'");
  9083  0051D8  0EAA               	movlw	low STR_11
  9084  0051DA  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9085  0051DC  0E7F               	movlw	high STR_11
  9086  0051DE  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9087  0051E0  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9088                           
  9089                           ;master/solution_CES.c: 805:     command_turn_ARRAY_3("D'");
  9090  0051E4  0EA1               	movlw	low STR_10
  9091  0051E6  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9092  0051E8  0E7F               	movlw	high STR_10
  9093  0051EA  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9094  0051EC  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9095  0051F0                     l8316:
  9096                           
  9097                           ;master/solution_CES.c: 809:    mark_count--;
  9098  0051F0  0100               	movlb	0	; () banked
  9099  0051F2  079F               	decf	make_perfect_white@mark_count& (0+255),f,b
  9100                           
  9101                           ; BSR set to: 0
  9102                           ;master/solution_CES.c: 810:    if (mark_count < 0)
  9103  0051F4  AF9F               	btfss	make_perfect_white@mark_count& (0+255),7,b
  9104  0051F6  D002               	goto	l8322
  9105                           
  9106                           ; BSR set to: 0
  9107                           ;master/solution_CES.c: 811:     mark_count = 3;
  9108  0051F8  0E03               	movlw	3
  9109  0051FA  6F9F               	movwf	make_perfect_white@mark_count& (0+255),b
  9110  0051FC                     l8322:
  9111                           
  9112                           ; BSR set to: 0
  9113                           ;master/solution_CES.c: 812:    command_turn_ARRAY_3("U");
  9114  0051FC  0EF6               	movlw	low STR_3
  9115  0051FE  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9116  005200  0E7F               	movlw	high STR_3
  9117  005202  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9118  005204  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9119                           
  9120                           ;master/solution_CES.c: 813:    command_turn_ARRAY_3("E'");
  9121  005208  0EA4               	movlw	low STR_27
  9122  00520A  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9123  00520C  0E7F               	movlw	high STR_27
  9124  00520E  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9125  005210  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9126                           
  9127                           ;master/solution_CES.c: 814:    continue;
  9128  005214  D06B               	goto	l8368
  9129  005216                     l8326:
  9130                           
  9131                           ;master/solution_CES.c: 817:   for (j = 0; j < 4; j++)
  9132  005216  0E00               	movlw	0
  9133  005218  0100               	movlb	0	; () banked
  9134  00521A  6F9E               	movwf	make_perfect_white@j& (0+255),b
  9135  00521C                     l8332:
  9136                           
  9137                           ; BSR set to: 0
  9138                           ;master/solution_CES.c: 818:   {;master/solution_CES.c: 820:    if (state_CE.cp[7] == ma
      +                          rk_count)
  9139  00521C  C09F  F098         	movff	make_perfect_white@mark_count,??_make_perfect_white
  9140  005220  6B99               	clrf	(??_make_perfect_white+1)& (0+255),b
  9141  005222  BF98               	btfsc	??_make_perfect_white& (0+255),7,b
  9142  005224  0799               	decf	(??_make_perfect_white+1)& (0+255),f,b
  9143  005226  0101               	movlb	1	; () banked
  9144  005228  5197               	movf	(_state_CE+7)& (0+255),w,b
  9145  00522A  0100               	movlb	0	; () banked
  9146  00522C  6F9A               	movwf	(??_make_perfect_white+2)& (0+255),b
  9147  00522E  6B9B               	clrf	(??_make_perfect_white+3)& (0+255),b
  9148  005230  5198               	movf	??_make_perfect_white& (0+255),w,b
  9149  005232  199A               	xorwf	(??_make_perfect_white+2)& (0+255),w,b
  9150  005234  E143               	bnz	l8354
  9151  005236  5199               	movf	(??_make_perfect_white+1)& (0+255),w,b
  9152  005238  199B               	xorwf	(??_make_perfect_white+3)& (0+255),w,b
  9153  00523A  B4D8               	btfsc	status,2,c
  9154  00523C  D006               	goto	l8342
  9155  00523E  D03E               	goto	l8354
  9156  005240                     l8336:
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;master/solution_CES.c: 826:      EPW_count = 3;
  9160  005240  0E03               	movlw	3
  9161  005242  D001               	goto	L5
  9162  005244                     l8338:
  9163                           
  9164                           ; BSR set to: 0
  9165                           ;master/solution_CES.c: 831:      EPW_count = 1;
  9166                           
  9167                           ; BSR set to: 0
  9168                           ;master/solution_CES.c: 830:     case 2:
  9169  005244  0E01               	movlw	1
  9170  005246                     L5:
  9171  005246  6F9D               	movwf	make_perfect_white@EPW_count& (0+255),b
  9172                           
  9173                           ;master/solution_CES.c: 832:      break;
  9174  005248  D013               	goto	l8344
  9175  00524A                     l8342:
  9176                           
  9177                           ; BSR set to: 0
  9178  00524A  0101               	movlb	1	; () banked
  9179  00524C  519F               	movf	(_state_CE+15)& (0+255),w,b
  9180  00524E  0100               	movlb	0	; () banked
  9181  005250  6F98               	movwf	??_make_perfect_white& (0+255),b
  9182  005252  6B99               	clrf	(??_make_perfect_white+1)& (0+255),b
  9183                           
  9184                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9185                           ; Switch size 1, requested type "simple"
  9186                           ; Number of cases is 1, Range of values is 0 to 0
  9187                           ; switch strategies available:
  9188                           ; Name         Instructions Cycles
  9189                           ; simple_byte            4     3 (average)
  9190                           ;	Chosen strategy is simple_byte
  9191  005254  5199               	movf	(??_make_perfect_white+1)& (0+255),w,b
  9192  005256  0A00               	xorlw	0	; case 0
  9193  005258  A4D8               	btfss	status,2,c
  9194  00525A  D00A               	goto	l8344
  9195                           
  9196                           ; BSR set to: 0
  9197                           ; Switch size 1, requested type "simple"
  9198                           ; Number of cases is 3, Range of values is 0 to 2
  9199                           ; switch strategies available:
  9200                           ; Name         Instructions Cycles
  9201                           ; simple_byte           10     6 (average)
  9202                           ;	Chosen strategy is simple_byte
  9203  00525C  5198               	movf	??_make_perfect_white& (0+255),w,b
  9204  00525E  0A00               	xorlw	0	; case 0
  9205  005260  B4D8               	btfsc	status,2,c
  9206  005262  D7EE               	goto	l8336
  9207  005264  0A01               	xorlw	1	; case 1
  9208  005266  B4D8               	btfsc	status,2,c
  9209  005268  D7ED               	goto	l8338
  9210  00526A  0A03               	xorlw	3	; case 2
  9211  00526C  B4D8               	btfsc	status,2,c
  9212  00526E  D7EA               	goto	l8338
  9213  005270                     l8344:
  9214                           
  9215                           ; BSR set to: 0
  9216                           ;master/solution_CES.c: 837:     for (i = 0; i < EPW_count; i++)
  9217  005270  0E00               	movlw	0
  9218  005272  6F9C               	movwf	make_perfect_white@i& (0+255),b
  9219  005274  D01A               	goto	l8352
  9220  005276                     l8346:
  9221                           
  9222                           ; BSR set to: 0
  9223                           ;master/solution_CES.c: 838:     {;master/solution_CES.c: 839:      command_turn_ARRAY_3
      +                          ("L");
  9224  005276  0EEE               	movlw	low STR_5
  9225  005278  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9226  00527A  0E7F               	movlw	high STR_5
  9227  00527C  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9228  00527E  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9229                           
  9230                           ;master/solution_CES.c: 840:      command_turn_ARRAY_3("D");
  9231  005282  0EE8               	movlw	low STR_4
  9232  005284  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9233  005286  0E7F               	movlw	high STR_4
  9234  005288  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9235  00528A  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9236                           
  9237                           ;master/solution_CES.c: 841:      command_turn_ARRAY_3("L'");
  9238  00528E  0EAA               	movlw	low STR_11
  9239  005290  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9240  005292  0E7F               	movlw	high STR_11
  9241  005294  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9242  005296  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9243                           
  9244                           ;master/solution_CES.c: 842:      command_turn_ARRAY_3("D'");
  9245  00529A  0EA1               	movlw	low STR_10
  9246  00529C  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9247  00529E  0E7F               	movlw	high STR_10
  9248  0052A0  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9249  0052A2  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9250                           
  9251                           ;master/solution_CES.c: 844:     }
  9252  0052A6  0100               	movlb	0	; () banked
  9253  0052A8  2B9C               	incf	make_perfect_white@i& (0+255),f,b
  9254  0052AA                     l8352:
  9255                           
  9256                           ; BSR set to: 0
  9257  0052AA  519C               	movf	make_perfect_white@i& (0+255),w,b
  9258  0052AC  0A80               	xorlw	128
  9259  0052AE  6F98               	movwf	??_make_perfect_white& (0+255),b
  9260  0052B0  519D               	movf	make_perfect_white@EPW_count& (0+255),w,b
  9261  0052B2  0A80               	xorlw	128
  9262  0052B4  5D98               	subwf	??_make_perfect_white& (0+255),w,b
  9263  0052B6  B0D8               	btfsc	status,0,c
  9264  0052B8  D00E               	goto	u5990
  9265  0052BA  D7DD               	goto	l8346
  9266  0052BC                     l8354:
  9267                           
  9268                           ; BSR set to: 0
  9269                           ;master/solution_CES.c: 848:    command_turn_ARRAY_3("D'");
  9270  0052BC  0EA1               	movlw	low STR_10
  9271  0052BE  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9272  0052C0  0E7F               	movlw	high STR_10
  9273  0052C2  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9274  0052C4  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9275                           
  9276                           ;master/solution_CES.c: 849:   }
  9277  0052C8  0100               	movlb	0	; () banked
  9278  0052CA  2B9E               	incf	make_perfect_white@j& (0+255),f,b
  9279                           
  9280                           ; BSR set to: 0
  9281  0052CC  519E               	movf	make_perfect_white@j& (0+255),w,b
  9282  0052CE  0A80               	xorlw	128
  9283  0052D0  0F7C               	addlw	-132
  9284  0052D2  A0D8               	btfss	status,0,c
  9285  0052D4  D7A3               	goto	l8332
  9286  0052D6                     u5990:
  9287                           
  9288                           ; BSR set to: 0
  9289                           ;master/solution_CES.c: 850:   mark_count--;
  9290  0052D6  079F               	decf	make_perfect_white@mark_count& (0+255),f,b
  9291                           
  9292                           ; BSR set to: 0
  9293                           ;master/solution_CES.c: 851:   if (mark_count < 0)
  9294  0052D8  AF9F               	btfss	make_perfect_white@mark_count& (0+255),7,b
  9295  0052DA  D002               	goto	l8366
  9296                           
  9297                           ; BSR set to: 0
  9298                           ;master/solution_CES.c: 852:   {;master/solution_CES.c: 853:    mark_count = 3;
  9299  0052DC  0E03               	movlw	3
  9300  0052DE  6F9F               	movwf	make_perfect_white@mark_count& (0+255),b
  9301  0052E0                     l8366:
  9302                           
  9303                           ; BSR set to: 0
  9304                           ;master/solution_CES.c: 855:   command_turn_ARRAY_3("Y");
  9305  0052E0  0EFA               	movlw	low STR_31
  9306  0052E2  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9307  0052E4  0E7F               	movlw	high STR_31
  9308  0052E6  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9309  0052E8  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9310  0052EC                     l8368:
  9311                           
  9312                           ;master/solution_CES.c: 789:  while (if_perfect_white() != 0)
  9313  0052EC  EC95  F021         	call	_if_perfect_white	;wreg free
  9314  0052F0  0900               	iorlw	0
  9315  0052F2  B4D8               	btfsc	status,2,c
  9316  0052F4  0012               	return	
  9317  0052F6  D739               	goto	l8302
  9318  0052F8                     __end_of_make_perfect_white:
  9319                           	opt callstack 0
  9320                           
  9321 ;; *************** function _make_flont_green *****************
  9322 ;; Defined at:
  9323 ;;		line 491 in file "master/solution_CES.c"
  9324 ;; Parameters:    Size  Location     Type
  9325 ;;		None
  9326 ;; Auto vars:     Size  Location     Type
  9327 ;;  move_count      2    0        int 
  9328 ;; Return value:  Size  Location     Type
  9329 ;;                  1    wreg      unsigned char 
  9330 ;; Registers used:
  9331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  9332 ;; Tracked objects:
  9333 ;;		On entry : 0/0
  9334 ;;		On exit  : 0/0
  9335 ;;		Unchanged: 0/0
  9336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9337 ;;      Params:         0       0       0       0       0       0       0
  9338 ;;      Locals:         0       2       0       0       0       0       0
  9339 ;;      Temps:          0       0       0       0       0       0       0
  9340 ;;      Totals:         0       2       0       0       0       0       0
  9341 ;;Total ram usage:        2 bytes
  9342 ;; Hardware stack levels used:    1
  9343 ;; Hardware stack levels required when called:    7
  9344 ;; This function calls:
  9345 ;;		_command_turn_ARRAY_3
  9346 ;; This function is called by:
  9347 ;;		_make_second_flower_perfect
  9348 ;;		_make_step_7
  9349 ;;		_make_perfect_white
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           	psect	text30
  9354  002B58                     __ptext30:
  9355                           	opt callstack 0
  9356  002B58                     _make_flont_green:
  9357                           	opt callstack 20
  9358                           
  9359                           ;master/solution_CES.c: 494:  if (state_CE.sp[0] == 1 || state_CE.sp[5] == 1)
  9360                           
  9361                           ;incstack = 0
  9362  002B58  0101               	movlb	1	; () banked
  9363  002B5A  05B8               	decf	(_state_CE+40)& (0+255),w,b
  9364  002B5C  B4D8               	btfsc	status,2,c
  9365  002B5E  D003               	goto	u5460
  9366                           
  9367                           ; BSR set to: 1
  9368  002B60  05BD               	decf	(_state_CE+45)& (0+255),w,b
  9369  002B62  A4D8               	btfss	status,2,c
  9370  002B64  D00D               	goto	l8030
  9371  002B66                     u5460:
  9372                           
  9373                           ; BSR set to: 1
  9374                           ;master/solution_CES.c: 495:   command_turn_ARRAY_3("X");
  9375  002B66  0EF8               	movlw	low STR_30
  9376  002B68  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9377  002B6A  0E7F               	movlw	high STR_30
  9378  002B6C  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9379  002B6E  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9380  002B72  D006               	goto	l8030
  9381  002B74                     l8028:
  9382                           
  9383                           ; BSR set to: 1
  9384                           ;master/solution_CES.c: 498:  {;master/solution_CES.c: 500:   command_turn_ARRAY_3("Y");
  9385  002B74  0EFA               	movlw	low STR_31
  9386  002B76  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9387  002B78  0E7F               	movlw	high STR_31
  9388  002B7A  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9389  002B7C  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9390  002B80                     l8030:
  9391                           
  9392                           ;master/solution_CES.c: 497:  while (state_CE.sp[1] != 1)
  9393  002B80  0101               	movlb	1	; () banked
  9394  002B82  05B9               	decf	(_state_CE+41)& (0+255),w,b
  9395  002B84  B4D8               	btfsc	status,2,c
  9396  002B86  0012               	return	
  9397  002B88  D7F5               	goto	l8028
  9398  002B8A                     __end_of_make_flont_green:
  9399                           	opt callstack 0
  9400                           
  9401 ;; *************** function _if_perfect_white *****************
  9402 ;; Defined at:
  9403 ;;		line 298 in file "master/solution_CES.c"
  9404 ;; Parameters:    Size  Location     Type
  9405 ;;		None
  9406 ;; Auto vars:     Size  Location     Type
  9407 ;;  i               1   94[COMRAM] char 
  9408 ;;  j               1   93[COMRAM] char 
  9409 ;; Return value:  Size  Location     Type
  9410 ;;                  1    wreg      unsigned char 
  9411 ;; Registers used:
  9412 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  9413 ;; Tracked objects:
  9414 ;;		On entry : 0/0
  9415 ;;		On exit  : 0/0
  9416 ;;		Unchanged: 0/0
  9417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9418 ;;      Params:         0       0       0       0       0       0       0
  9419 ;;      Locals:         2       0       0       0       0       0       0
  9420 ;;      Temps:          0      10       0       0       0       0       0
  9421 ;;      Totals:         2      10       0       0       0       0       0
  9422 ;;Total ram usage:       12 bytes
  9423 ;; Hardware stack levels used:    1
  9424 ;; Hardware stack levels required when called:    6
  9425 ;; This function calls:
  9426 ;;		_command_turn_ARRAY_3_end
  9427 ;;		_if_CP
  9428 ;; This function is called by:
  9429 ;;		_made_cube
  9430 ;;		_make_perfect_white
  9431 ;; This function uses a non-reentrant model
  9432 ;;
  9433                           
  9434                           	psect	text31
  9435  00432A                     __ptext31:
  9436                           	opt callstack 0
  9437  00432A                     _if_perfect_white:
  9438                           	opt callstack 21
  9439                           
  9440                           ;master/solution_CES.c: 300:  signed char j, i;;master/solution_CES.c: 301:  command_tur
      +                          n_ARRAY_3_end();
  9441                           
  9442                           ; BSR set to: 1
  9443                           ;incstack = 0
  9444  00432A  EC2D  F030         	call	_command_turn_ARRAY_3_end	;wreg free
  9445                           
  9446                           ;master/solution_CES.c: 302:  for (i = 0; i < 4; i++)
  9447  00432E  0E00               	movlw	0
  9448  004330  6E5F               	movwf	if_perfect_white@i,c
  9449  004332                     l7864:
  9450                           
  9451                           ;master/solution_CES.c: 303:  {;master/solution_CES.c: 304:   if (if_CP(i, 0, 3) != 1)
  9452  004332  0E00               	movlw	0
  9453  004334  6E01               	movwf	if_CP@s_cp,c
  9454  004336  0E03               	movlw	3
  9455  004338  6E02               	movwf	if_CP@e_cp,c
  9456  00433A  505F               	movf	if_perfect_white@i,w,c
  9457  00433C  ECDF  F015         	call	_if_CP
  9458  004340  06E8               	decf	wreg,f,c
  9459  004342  B4D8               	btfsc	status,2,c
  9460  004344  D002               	goto	l7870
  9461                           
  9462                           ;master/solution_CES.c: 305:    return 1;
  9463  004346  0E01               	movlw	1
  9464  004348  0012               	return	
  9465  00434A                     l7870:
  9466                           
  9467                           ;master/solution_CES.c: 306:  }
  9468  00434A  2A5F               	incf	if_perfect_white@i,f,c
  9469  00434C  505F               	movf	if_perfect_white@i,w,c
  9470  00434E  0A80               	xorlw	128
  9471  004350  0F7C               	addlw	-132
  9472  004352  A0D8               	btfss	status,0,c
  9473  004354  D7EE               	goto	l7864
  9474                           
  9475                           ;master/solution_CES.c: 307:  for (i = 0; i < 4; i++)
  9476  004356  0E00               	movlw	0
  9477  004358  6E5F               	movwf	if_perfect_white@i,c
  9478  00435A                     l7880:
  9479                           
  9480                           ;master/solution_CES.c: 308:  {;master/solution_CES.c: 309:   if (state_CE.co[i] != 0)
  9481  00435A  0E98               	movlw	low (_state_CE+8)
  9482  00435C  245F               	addwf	if_perfect_white@i,w,c
  9483  00435E  6ED9               	movwf	fsr2l,c
  9484  004360  6ADA               	clrf	fsr2h,c
  9485  004362  0E01               	movlw	high (_state_CE+8)
  9486  004364  22DA               	addwfc	fsr2h,f,c
  9487  004366  50DF               	movf	indf2,w,c
  9488  004368  B4D8               	btfsc	status,2,c
  9489  00436A  D002               	goto	l7886
  9490                           
  9491                           ;master/solution_CES.c: 310:    return 2;
  9492  00436C  0E02               	movlw	2
  9493  00436E  0012               	return	
  9494  004370                     l7886:
  9495                           
  9496                           ;master/solution_CES.c: 311:  }
  9497  004370  2A5F               	incf	if_perfect_white@i,f,c
  9498  004372  505F               	movf	if_perfect_white@i,w,c
  9499  004374  0A80               	xorlw	128
  9500  004376  0F7C               	addlw	-132
  9501  004378  A0D8               	btfss	status,0,c
  9502  00437A  D7EF               	goto	l7880
  9503                           
  9504                           ;master/solution_CES.c: 313:  for (i = 3; i >= 0; i--)
  9505  00437C  0E03               	movlw	3
  9506  00437E  6E5F               	movwf	if_perfect_white@i,c
  9507  004380                     l7896:
  9508                           
  9509                           ;master/solution_CES.c: 314:  {;master/solution_CES.c: 315:   if (state_CE.cp[i] == 3)
  9510  004380  0E90               	movlw	low _state_CE
  9511  004382  245F               	addwf	if_perfect_white@i,w,c
  9512  004384  6ED9               	movwf	fsr2l,c
  9513  004386  6ADA               	clrf	fsr2h,c
  9514  004388  0E01               	movlw	high _state_CE
  9515  00438A  22DA               	addwfc	fsr2h,f,c
  9516  00438C  0E03               	movlw	3
  9517  00438E  18DE               	xorwf	postinc2,w,c
  9518  004390  B4D8               	btfsc	status,2,c
  9519  004392  D003               	goto	u5310
  9520                           
  9521                           ;master/solution_CES.c: 317:  }
  9522  004394  065F               	decf	if_perfect_white@i,f,c
  9523  004396  AE5F               	btfss	if_perfect_white@i,7,c
  9524  004398  D7F3               	goto	l7896
  9525  00439A                     u5310:
  9526                           
  9527                           ;master/solution_CES.c: 318:  for (j = 0; j < 4; j++)
  9528  00439A  0E00               	movlw	0
  9529  00439C  6E5E               	movwf	if_perfect_white@j,c
  9530  00439E                     l7910:
  9531                           
  9532                           ;master/solution_CES.c: 319:  {;master/solution_CES.c: 320:   if (state_CE.cp[(i - j + 4
      +                          ) % 4] != 3 - j)
  9533  00439E  C05E  F060         	movff	if_perfect_white@j,??_if_perfect_white
  9534  0043A2  0100               	movlb	0	; () banked
  9535  0043A4  6B61               	clrf	(??_if_perfect_white+1)& (0+255),b
  9536  0043A6  BF60               	btfsc	??_if_perfect_white& (0+255),7,b
  9537  0043A8  0761               	decf	(??_if_perfect_white+1)& (0+255),f,b
  9538  0043AA  0E03               	movlw	3
  9539  0043AC  6F62               	movwf	(??_if_perfect_white+2)& (0+255),b
  9540  0043AE  0E00               	movlw	0
  9541  0043B0  6F63               	movwf	(??_if_perfect_white+3)& (0+255),b
  9542  0043B2  5160               	movf	??_if_perfect_white& (0+255),w,b
  9543  0043B4  5F62               	subwf	(??_if_perfect_white+2)& (0+255),f,b
  9544  0043B6  5161               	movf	(??_if_perfect_white+1)& (0+255),w,b
  9545  0043B8  5B63               	subwfb	(??_if_perfect_white+3)& (0+255),f,b
  9546  0043BA  C05E  F064         	movff	if_perfect_white@j,??_if_perfect_white+4
  9547  0043BE  6B65               	clrf	(??_if_perfect_white+5)& (0+255),b
  9548  0043C0  BF64               	btfsc	(??_if_perfect_white+4)& (0+255),7,b
  9549  0043C2  0765               	decf	(??_if_perfect_white+5)& (0+255),f,b
  9550  0043C4  C05F  F066         	movff	if_perfect_white@i,??_if_perfect_white+6
  9551  0043C8  6B67               	clrf	(??_if_perfect_white+7)& (0+255),b
  9552  0043CA  BF66               	btfsc	(??_if_perfect_white+6)& (0+255),7,b
  9553  0043CC  0767               	decf	(??_if_perfect_white+7)& (0+255),f,b
  9554  0043CE  5164               	movf	(??_if_perfect_white+4)& (0+255),w,b
  9555  0043D0  5F66               	subwf	(??_if_perfect_white+6)& (0+255),f,b
  9556  0043D2  5165               	movf	(??_if_perfect_white+5)& (0+255),w,b
  9557  0043D4  5B67               	subwfb	(??_if_perfect_white+7)& (0+255),f,b
  9558  0043D6  0E04               	movlw	4
  9559  0043D8  2766               	addwf	(??_if_perfect_white+6)& (0+255),f,b
  9560  0043DA  0E00               	movlw	0
  9561  0043DC  2367               	addwfc	(??_if_perfect_white+7)& (0+255),f,b
  9562  0043DE  0E03               	movlw	3
  9563  0043E0  1766               	andwf	(??_if_perfect_white+6)& (0+255),f,b
  9564  0043E2  0E00               	movlw	0
  9565  0043E4  1767               	andwf	(??_if_perfect_white+7)& (0+255),f,b
  9566  0043E6  0E90               	movlw	low _state_CE
  9567  0043E8  2566               	addwf	(??_if_perfect_white+6)& (0+255),w,b
  9568  0043EA  6ED9               	movwf	fsr2l,c
  9569  0043EC  0E01               	movlw	high _state_CE
  9570  0043EE  2167               	addwfc	(??_if_perfect_white+7)& (0+255),w,b
  9571  0043F0  6EDA               	movwf	fsr2h,c
  9572  0043F2  50DF               	movf	indf2,w,c
  9573  0043F4  6F68               	movwf	(??_if_perfect_white+8)& (0+255),b
  9574  0043F6  6B69               	clrf	(??_if_perfect_white+9)& (0+255),b
  9575  0043F8  5162               	movf	(??_if_perfect_white+2)& (0+255),w,b
  9576  0043FA  1968               	xorwf	(??_if_perfect_white+8)& (0+255),w,b
  9577  0043FC  E104               	bnz	u5320
  9578  0043FE  5163               	movf	(??_if_perfect_white+3)& (0+255),w,b
  9579  004400  1969               	xorwf	(??_if_perfect_white+9)& (0+255),w,b
  9580  004402  B4D8               	btfsc	status,2,c
  9581  004404  D002               	goto	l7916
  9582  004406                     u5320:
  9583                           
  9584                           ; BSR set to: 0
  9585                           ;master/solution_CES.c: 321:    return 3;
  9586  004406  0E03               	movlw	3
  9587  004408  0012               	return	
  9588  00440A                     l7916:
  9589                           
  9590                           ; BSR set to: 0
  9591                           ;master/solution_CES.c: 322:  }
  9592  00440A  2A5E               	incf	if_perfect_white@j,f,c
  9593                           
  9594                           ; BSR set to: 0
  9595  00440C  505E               	movf	if_perfect_white@j,w,c
  9596  00440E  0A80               	xorlw	128
  9597  004410  0F7C               	addlw	-132
  9598  004412  A0D8               	btfss	status,0,c
  9599  004414  D7C4               	goto	l7910
  9600                           
  9601                           ; BSR set to: 0
  9602                           ;master/solution_CES.c: 323:  return 0;
  9603  004416  0E00               	movlw	0
  9604  004418  0012               	return		;funcret
  9605  00441A                     __end_of_if_perfect_white:
  9606                           	opt callstack 0
  9607                           
  9608 ;; *************** function _if_CP *****************
  9609 ;; Defined at:
  9610 ;;		line 271 in file "master/solution_CES.c"
  9611 ;; Parameters:    Size  Location     Type
  9612 ;;  check           1    wreg     unsigned char 
  9613 ;;  s_cp            1    0[COMRAM] unsigned char 
  9614 ;;  e_cp            1    1[COMRAM] unsigned char 
  9615 ;; Auto vars:     Size  Location     Type
  9616 ;;  check           1    3[COMRAM] unsigned char 
  9617 ;;  i               1    5[COMRAM] unsigned char 
  9618 ;;  DATA            1    4[COMRAM] unsigned char 
  9619 ;; Return value:  Size  Location     Type
  9620 ;;                  1    wreg      unsigned char 
  9621 ;; Registers used:
  9622 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9623 ;; Tracked objects:
  9624 ;;		On entry : 0/0
  9625 ;;		On exit  : 0/0
  9626 ;;		Unchanged: 0/0
  9627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9628 ;;      Params:         2       0       0       0       0       0       0
  9629 ;;      Locals:         3       0       0       0       0       0       0
  9630 ;;      Temps:          1       0       0       0       0       0       0
  9631 ;;      Totals:         6       0       0       0       0       0       0
  9632 ;;Total ram usage:        6 bytes
  9633 ;; Hardware stack levels used:    1
  9634 ;; This function calls:
  9635 ;;		Nothing
  9636 ;; This function is called by:
  9637 ;;		_if_perfect_white
  9638 ;;		_make_perfect_white
  9639 ;; This function uses a non-reentrant model
  9640 ;;
  9641                           
  9642                           	psect	text32
  9643  002BBE                     __ptext32:
  9644                           	opt callstack 0
  9645  002BBE                     _if_CP:
  9646                           	opt callstack 26
  9647                           
  9648                           ;incstack = 0
  9649                           ;if_CP@check stored from wreg
  9650  002BBE  6E04               	movwf	if_CP@check,c
  9651                           
  9652                           ;master/solution_CES.c: 271: char if_CP(char check, char s_cp, char e_cp);master/solutio
      +                          n_CES.c: 272: {;master/solution_CES.c: 273:  char i, DATA = 0;
  9653  002BC0  0E00               	movlw	0
  9654  002BC2  6E05               	movwf	if_CP@DATA,c
  9655                           
  9656                           ;master/solution_CES.c: 274:  for (i = s_cp; i <= e_cp; i++)
  9657  002BC4  C001  F006         	movff	if_CP@s_cp,if_CP@i
  9658  002BC8  D00E               	goto	l7746
  9659  002BCA                     l7740:
  9660                           
  9661                           ;master/solution_CES.c: 275:  {;master/solution_CES.c: 276:   if (state_CE.cp[check] == 
      +                          i)
  9662  002BCA  0E90               	movlw	low _state_CE
  9663  002BCC  2404               	addwf	if_CP@check,w,c
  9664  002BCE  6ED9               	movwf	fsr2l,c
  9665  002BD0  6ADA               	clrf	fsr2h,c
  9666  002BD2  0E01               	movlw	high _state_CE
  9667  002BD4  22DA               	addwfc	fsr2h,f,c
  9668  002BD6  5006               	movf	if_CP@i,w,c
  9669  002BD8  18DE               	xorwf	postinc2,w,c
  9670  002BDA  A4D8               	btfss	status,2,c
  9671  002BDC  D003               	goto	l7744
  9672                           
  9673                           ;master/solution_CES.c: 277:   {;master/solution_CES.c: 278:    DATA = 1;
  9674  002BDE  0E01               	movlw	1
  9675  002BE0  6E05               	movwf	if_CP@DATA,c
  9676                           
  9677                           ;master/solution_CES.c: 279:    break;
  9678  002BE2  D005               	goto	u5090
  9679  002BE4                     l7744:
  9680                           
  9681                           ;master/solution_CES.c: 281:  }
  9682  002BE4  2A06               	incf	if_CP@i,f,c
  9683  002BE6                     l7746:
  9684  002BE6  5006               	movf	if_CP@i,w,c
  9685  002BE8  5C02               	subwf	if_CP@e_cp,w,c
  9686  002BEA  B0D8               	btfsc	status,0,c
  9687  002BEC  D7EE               	goto	l7740
  9688  002BEE                     u5090:
  9689                           
  9690                           ;master/solution_CES.c: 282:  return DATA;
  9691  002BEE  5005               	movf	if_CP@DATA,w,c
  9692  002BF0  0012               	return		;funcret
  9693  002BF2                     __end_of_if_CP:
  9694                           	opt callstack 0
  9695                           
  9696 ;; *************** function _make_justice_axis *****************
  9697 ;; Defined at:
  9698 ;;		line 859 in file "master/solution_CES.c"
  9699 ;; Parameters:    Size  Location     Type
  9700 ;;		None
  9701 ;; Auto vars:     Size  Location     Type
  9702 ;;		None
  9703 ;; Return value:  Size  Location     Type
  9704 ;;                  1    wreg      void 
  9705 ;; Registers used:
  9706 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  9707 ;; Tracked objects:
  9708 ;;		On entry : 0/0
  9709 ;;		On exit  : 0/0
  9710 ;;		Unchanged: 0/0
  9711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9712 ;;      Params:         0       0       0       0       0       0       0
  9713 ;;      Locals:         0       0       0       0       0       0       0
  9714 ;;      Temps:          0       0       0       0       0       0       0
  9715 ;;      Totals:         0       0       0       0       0       0       0
  9716 ;;Total ram usage:        0 bytes
  9717 ;; Hardware stack levels used:    1
  9718 ;; Hardware stack levels required when called:    8
  9719 ;; This function calls:
  9720 ;;		_command_turn_ARRAY_3
  9721 ;;		_make_up_white
  9722 ;;		_operation_limit
  9723 ;;		_operation_setup
  9724 ;; This function is called by:
  9725 ;;		_Special_input
  9726 ;;		_made_cube
  9727 ;; This function uses a non-reentrant model
  9728 ;;
  9729                           
  9730                           	psect	text33
  9731  002C9C                     __ptext33:
  9732                           	opt callstack 0
  9733  002C9C                     _make_justice_axis:
  9734                           	opt callstack 21
  9735                           
  9736                           ;master/solution_CES.c: 861:  if (state_CE.sp[0] != 0)
  9737                           
  9738                           ;incstack = 0
  9739  002C9C  0101               	movlb	1	; () banked
  9740  002C9E  51B8               	movf	(_state_CE+40)& (0+255),w,b
  9741  002CA0  A4D8               	btfss	status,2,c
  9742                           
  9743                           ; BSR set to: 1
  9744                           ;master/solution_CES.c: 862:  {;master/solution_CES.c: 863:   make_up_white();
  9745  002CA2  EC93  F015         	call	_make_up_white	;wreg free
  9746                           
  9747                           ;master/solution_CES.c: 865:  if (operation_setup() == 1)
  9748  002CA6  EC61  F014         	call	_operation_setup	;wreg free
  9749  002CAA  06E8               	decf	wreg,f,c
  9750  002CAC  B4D8               	btfsc	status,2,c
  9751  002CAE  0012               	return	
  9752  002CB0  D00F               	goto	l8190
  9753  002CB2                     l8184:
  9754                           
  9755                           ; BSR set to: 1
  9756                           ;master/solution_CES.c: 868:  {;master/solution_CES.c: 869:   if (operation_limit(8) == 
      +                          1)
  9757  002CB2  0E00               	movlw	0
  9758  002CB4  6E02               	movwf	operation_limit@count+1,c
  9759  002CB6  0E08               	movlw	8
  9760  002CB8  6E01               	movwf	operation_limit@count,c
  9761  002CBA  EC0E  F015         	call	_operation_limit	;wreg free
  9762  002CBE  06E8               	decf	wreg,f,c
  9763  002CC0  B4D8               	btfsc	status,2,c
  9764  002CC2  0012               	return	
  9765                           
  9766                           ;master/solution_CES.c: 871:   command_turn_ARRAY_3("Y");
  9767  002CC4  0EFA               	movlw	low STR_31
  9768  002CC6  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9769  002CC8  0E7F               	movlw	high STR_31
  9770  002CCA  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9771  002CCC  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9772  002CD0                     l8190:
  9773                           
  9774                           ;master/solution_CES.c: 867:  while (state_CE.sp[1] != 1)
  9775  002CD0  0101               	movlb	1	; () banked
  9776  002CD2  05B9               	decf	(_state_CE+41)& (0+255),w,b
  9777  002CD4  B4D8               	btfsc	status,2,c
  9778  002CD6  0012               	return	
  9779  002CD8  D7EC               	goto	l8184
  9780  002CDA                     __end_of_make_justice_axis:
  9781                           	opt callstack 0
  9782                           
  9783 ;; *************** function _make_up_white *****************
  9784 ;; Defined at:
  9785 ;;		line 505 in file "master/solution_CES.c"
  9786 ;; Parameters:    Size  Location     Type
  9787 ;;		None
  9788 ;; Auto vars:     Size  Location     Type
  9789 ;;		None
  9790 ;; Return value:  Size  Location     Type
  9791 ;;                  1    wreg      void 
  9792 ;; Registers used:
  9793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  9794 ;; Tracked objects:
  9795 ;;		On entry : 0/0
  9796 ;;		On exit  : 0/0
  9797 ;;		Unchanged: 0/0
  9798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9799 ;;      Params:         0       0       0       0       0       0       0
  9800 ;;      Locals:         0       0       0       0       0       0       0
  9801 ;;      Temps:          0       0       0       0       0       0       0
  9802 ;;      Totals:         0       0       0       0       0       0       0
  9803 ;;Total ram usage:        0 bytes
  9804 ;; Hardware stack levels used:    1
  9805 ;; Hardware stack levels required when called:    7
  9806 ;; This function calls:
  9807 ;;		_command_turn_ARRAY_3
  9808 ;; This function is called by:
  9809 ;;		_made_cube
  9810 ;;		_make_justice_axis
  9811 ;; This function uses a non-reentrant model
  9812 ;;
  9813                           
  9814                           	psect	text34
  9815  002B26                     __ptext34:
  9816                           	opt callstack 0
  9817  002B26                     _make_up_white:
  9818                           	opt callstack 21
  9819                           
  9820                           ;master/solution_CES.c: 507:  if (state_CE.sp[2] == 0 || state_CE.sp[4] == 0)
  9821                           
  9822                           ;incstack = 0
  9823  002B26  0101               	movlb	1	; () banked
  9824  002B28  51BA               	movf	(_state_CE+42)& (0+255),w,b
  9825  002B2A  B4D8               	btfsc	status,2,c
  9826  002B2C  D003               	goto	u5240
  9827                           
  9828                           ; BSR set to: 1
  9829  002B2E  51BC               	movf	(_state_CE+44)& (0+255),w,b
  9830  002B30  A4D8               	btfss	status,2,c
  9831  002B32  D00D               	goto	l7854
  9832  002B34                     u5240:
  9833                           
  9834                           ; BSR set to: 1
  9835                           ;master/solution_CES.c: 508:   command_turn_ARRAY_3("Y");
  9836  002B34  0EFA               	movlw	low STR_31
  9837  002B36  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9838  002B38  0E7F               	movlw	high STR_31
  9839  002B3A  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9840  002B3C  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9841  002B40  D006               	goto	l7854
  9842  002B42                     l7852:
  9843                           
  9844                           ; BSR set to: 1
  9845                           ;master/solution_CES.c: 511:  {;master/solution_CES.c: 513:   command_turn_ARRAY_3("X");
  9846  002B42  0EF8               	movlw	low STR_30
  9847  002B44  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9848  002B46  0E7F               	movlw	high STR_30
  9849  002B48  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9850  002B4A  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9851  002B4E                     l7854:
  9852                           
  9853                           ;master/solution_CES.c: 510:  while (state_CE.sp[0] != 0)
  9854  002B4E  0101               	movlb	1	; () banked
  9855  002B50  51B8               	movf	(_state_CE+40)& (0+255),w,b
  9856  002B52  B4D8               	btfsc	status,2,c
  9857  002B54  0012               	return	
  9858  002B56  D7F5               	goto	l7852
  9859  002B58                     __end_of_make_up_white:
  9860                           	opt callstack 0
  9861                           
  9862 ;; *************** function _if_start_step8 *****************
  9863 ;; Defined at:
  9864 ;;		line 169 in file "master/solution_CES.c"
  9865 ;; Parameters:    Size  Location     Type
  9866 ;;		None
  9867 ;; Auto vars:     Size  Location     Type
  9868 ;;  i               1   57[BANK0 ] unsigned char 
  9869 ;;  j               1    0        unsigned char 
  9870 ;; Return value:  Size  Location     Type
  9871 ;;                  1    wreg      unsigned char 
  9872 ;; Registers used:
  9873 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  9874 ;; Tracked objects:
  9875 ;;		On entry : 0/0
  9876 ;;		On exit  : 0/0
  9877 ;;		Unchanged: 0/0
  9878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9879 ;;      Params:         0       0       0       0       0       0       0
  9880 ;;      Locals:         0       2       0       0       0       0       0
  9881 ;;      Temps:          0       2       0       0       0       0       0
  9882 ;;      Totals:         0       4       0       0       0       0       0
  9883 ;;Total ram usage:        4 bytes
  9884 ;; Hardware stack levels used:    1
  9885 ;; Hardware stack levels required when called:    7
  9886 ;; This function calls:
  9887 ;;		_command_turn_ARRAY_3
  9888 ;; This function is called by:
  9889 ;;		_made_cube
  9890 ;; This function uses a non-reentrant model
  9891 ;;
  9892                           
  9893                           	psect	text35
  9894  003050                     __ptext35:
  9895                           	opt callstack 0
  9896  003050                     _if_start_step8:
  9897                           	opt callstack 21
  9898                           
  9899                           ;master/solution_CES.c: 172:  for (i = 0; i < 4; i++)
  9900                           
  9901                           ; BSR set to: 1
  9902                           ;incstack = 0
  9903  003050  0E00               	movlw	0
  9904  003052  0100               	movlb	0	; () banked
  9905  003054  6F99               	movwf	if_start_step8@i& (0+255),b
  9906  003056                     l8750:
  9907                           
  9908                           ; BSR set to: 0
  9909                           ;master/solution_CES.c: 173:  {;master/solution_CES.c: 174:   if (state_CE.ep[8] - state
      +                          _CE.cp[4] == 4)
  9910  003056  0101               	movlb	1	; () banked
  9911  003058  5194               	movf	(_state_CE+4)& (0+255),w,b
  9912  00305A  C1A8  F096         	movff	_state_CE+24,??_if_start_step8
  9913  00305E  0100               	movlb	0	; () banked
  9914  003060  6B97               	clrf	(??_if_start_step8+1)& (0+255),b
  9915  003062  5F96               	subwf	??_if_start_step8& (0+255),f,b
  9916  003064  0E00               	movlw	0
  9917  003066  5B97               	subwfb	(??_if_start_step8+1)& (0+255),f,b
  9918  003068  0E04               	movlw	4
  9919  00306A  1996               	xorwf	??_if_start_step8& (0+255),w,b
  9920  00306C  1197               	iorwf	(??_if_start_step8+1)& (0+255),w,b
  9921  00306E  A4D8               	btfss	status,2,c
  9922  003070  D002               	goto	l8756
  9923                           
  9924                           ; BSR set to: 0
  9925                           ;master/solution_CES.c: 175:   {;master/solution_CES.c: 176:    return 0;
  9926  003072  0E00               	movlw	0
  9927  003074  0012               	return	
  9928  003076                     l8756:
  9929                           
  9930                           ; BSR set to: 0
  9931                           ;master/solution_CES.c: 178:   command_turn_ARRAY_3("Y");
  9932  003076  0EFA               	movlw	low STR_31
  9933  003078  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9934  00307A  0E7F               	movlw	high STR_31
  9935  00307C  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9936  00307E  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9937                           
  9938                           ;master/solution_CES.c: 179:  }
  9939  003082  0100               	movlb	0	; () banked
  9940  003084  2B99               	incf	if_start_step8@i& (0+255),f,b
  9941                           
  9942                           ; BSR set to: 0
  9943  003086  0E03               	movlw	3
  9944  003088  6599               	cpfsgt	if_start_step8@i& (0+255),b
  9945  00308A  D7E5               	goto	l8750
  9946                           
  9947                           ; BSR set to: 0
  9948                           ;master/solution_CES.c: 180:  command_turn_ARRAY_3("Y");
  9949  00308C  0EFA               	movlw	low STR_31
  9950  00308E  6E5E               	movwf	command_turn_ARRAY_3@s,c
  9951  003090  0E7F               	movlw	high STR_31
  9952  003092  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
  9953  003094  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
  9954                           
  9955                           ;master/solution_CES.c: 181:  return 1;
  9956  003098  0E01               	movlw	1
  9957  00309A  0012               	return		;funcret
  9958  00309C                     __end_of_if_start_step8:
  9959                           	opt callstack 0
  9960                           
  9961 ;; *************** function _if_perfect_yellow *****************
  9962 ;; Defined at:
  9963 ;;		line 184 in file "master/solution_CES.c"
  9964 ;; Parameters:    Size  Location     Type
  9965 ;;		None
  9966 ;; Auto vars:     Size  Location     Type
  9967 ;;  i               1    5[COMRAM] unsigned char 
  9968 ;;  distortion      1    4[COMRAM] unsigned char 
  9969 ;; Return value:  Size  Location     Type
  9970 ;;                  1    wreg      unsigned char 
  9971 ;; Registers used:
  9972 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9973 ;; Tracked objects:
  9974 ;;		On entry : 0/0
  9975 ;;		On exit  : 0/0
  9976 ;;		Unchanged: 0/0
  9977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9978 ;;      Params:         0       0       0       0       0       0       0
  9979 ;;      Locals:         2       0       0       0       0       0       0
  9980 ;;      Temps:          4       0       0       0       0       0       0
  9981 ;;      Totals:         6       0       0       0       0       0       0
  9982 ;;Total ram usage:        6 bytes
  9983 ;; Hardware stack levels used:    1
  9984 ;; This function calls:
  9985 ;;		Nothing
  9986 ;; This function is called by:
  9987 ;;		_made_cube
  9988 ;; This function uses a non-reentrant model
  9989 ;;
  9990                           
  9991                           	psect	text36
  9992  0039D6                     __ptext36:
  9993                           	opt callstack 0
  9994  0039D6                     _if_perfect_yellow:
  9995                           	opt callstack 28
  9996                           
  9997                           ;master/solution_CES.c: 186:  char i, distortion = 0;
  9998                           
  9999                           ;incstack = 0
 10000  0039D6  0E00               	movlw	0
 10001  0039D8  6E05               	movwf	if_perfect_yellow@distortion,c
 10002                           
 10003                           ;master/solution_CES.c: 187:  for (i = 0; i < 4; i++)
 10004  0039DA  0E00               	movlw	0
 10005  0039DC  6E06               	movwf	if_perfect_yellow@i,c
 10006  0039DE                     l8556:
 10007                           
 10008                           ;master/solution_CES.c: 188:  {;master/solution_CES.c: 189:   if (state_CE.cp[i + 4] != 
      +                          i + 4)
 10009  0039DE  0E94               	movlw	low (_state_CE+4)
 10010  0039E0  2406               	addwf	if_perfect_yellow@i,w,c
 10011  0039E2  6ED9               	movwf	fsr2l,c
 10012  0039E4  6ADA               	clrf	fsr2h,c
 10013  0039E6  0E01               	movlw	high (_state_CE+4)
 10014  0039E8  22DA               	addwfc	fsr2h,f,c
 10015  0039EA  50DF               	movf	indf2,w,c
 10016  0039EC  6E01               	movwf	??_if_perfect_yellow& (0+255),c
 10017  0039EE  6A02               	clrf	(??_if_perfect_yellow+1)& (0+255),c
 10018  0039F0  5006               	movf	if_perfect_yellow@i,w,c
 10019  0039F2  6E03               	movwf	(??_if_perfect_yellow+2)& (0+255),c
 10020  0039F4  6A04               	clrf	(??_if_perfect_yellow+3)& (0+255),c
 10021  0039F6  0E04               	movlw	4
 10022  0039F8  2603               	addwf	??_if_perfect_yellow+2,f,c
 10023  0039FA  0E00               	movlw	0
 10024  0039FC  2204               	addwfc	??_if_perfect_yellow+3,f,c
 10025  0039FE  5001               	movf	??_if_perfect_yellow,w,c
 10026  003A00  1803               	xorwf	??_if_perfect_yellow+2,w,c
 10027  003A02  E104               	bnz	u6320
 10028  003A04  5002               	movf	??_if_perfect_yellow+1,w,c
 10029  003A06  1804               	xorwf	??_if_perfect_yellow+3,w,c
 10030  003A08  B4D8               	btfsc	status,2,c
 10031  003A0A  D002               	goto	l8562
 10032  003A0C                     u6320:
 10033  003A0C                     l8558:
 10034                           
 10035                           ;master/solution_CES.c: 190:    return 1;
 10036  003A0C  0E01               	movlw	1
 10037  003A0E  0012               	return	
 10038  003A10                     l8562:
 10039                           
 10040                           ;master/solution_CES.c: 191:   distortion += state_CE.co[i + 4];
 10041  003A10  0E9C               	movlw	low (_state_CE+12)
 10042  003A12  2406               	addwf	if_perfect_yellow@i,w,c
 10043  003A14  6ED9               	movwf	fsr2l,c
 10044  003A16  6ADA               	clrf	fsr2h,c
 10045  003A18  0E01               	movlw	high (_state_CE+12)
 10046  003A1A  22DA               	addwfc	fsr2h,f,c
 10047  003A1C  50DF               	movf	indf2,w,c
 10048  003A1E  2605               	addwf	if_perfect_yellow@distortion,f,c
 10049                           
 10050                           ;master/solution_CES.c: 192:  }
 10051  003A20  2A06               	incf	if_perfect_yellow@i,f,c
 10052  003A22  0E03               	movlw	3
 10053  003A24  6406               	cpfsgt	if_perfect_yellow@i,c
 10054  003A26  D7DB               	goto	l8556
 10055                           
 10056                           ;master/solution_CES.c: 193:  for (i = 0; i < 4; i++)
 10057  003A28  0E00               	movlw	0
 10058  003A2A  6E06               	movwf	if_perfect_yellow@i,c
 10059  003A2C                     l8574:
 10060                           
 10061                           ;master/solution_CES.c: 194:  {;master/solution_CES.c: 195:   if (state_CE.ep[i + 8] != 
      +                          i + 8)
 10062  003A2C  0EA8               	movlw	low (_state_CE+24)
 10063  003A2E  2406               	addwf	if_perfect_yellow@i,w,c
 10064  003A30  6ED9               	movwf	fsr2l,c
 10065  003A32  6ADA               	clrf	fsr2h,c
 10066  003A34  0E01               	movlw	high (_state_CE+24)
 10067  003A36  22DA               	addwfc	fsr2h,f,c
 10068  003A38  50DF               	movf	indf2,w,c
 10069  003A3A  6E01               	movwf	??_if_perfect_yellow& (0+255),c
 10070  003A3C  6A02               	clrf	(??_if_perfect_yellow+1)& (0+255),c
 10071  003A3E  5006               	movf	if_perfect_yellow@i,w,c
 10072  003A40  6E03               	movwf	(??_if_perfect_yellow+2)& (0+255),c
 10073  003A42  6A04               	clrf	(??_if_perfect_yellow+3)& (0+255),c
 10074  003A44  0E08               	movlw	8
 10075  003A46  2603               	addwf	??_if_perfect_yellow+2,f,c
 10076  003A48  0E00               	movlw	0
 10077  003A4A  2204               	addwfc	??_if_perfect_yellow+3,f,c
 10078  003A4C  5001               	movf	??_if_perfect_yellow,w,c
 10079  003A4E  1803               	xorwf	??_if_perfect_yellow+2,w,c
 10080  003A50  E1DD               	bnz	l8558
 10081  003A52  5002               	movf	??_if_perfect_yellow+1,w,c
 10082  003A54  1804               	xorwf	??_if_perfect_yellow+3,w,c
 10083  003A56  A4D8               	btfss	status,2,c
 10084  003A58  D7D9               	goto	u6320
 10085                           
 10086                           ;master/solution_CES.c: 197:   distortion += state_CE.eo[i + 8];
 10087  003A5A  0EB4               	movlw	low (_state_CE+36)
 10088  003A5C  2406               	addwf	if_perfect_yellow@i,w,c
 10089  003A5E  6ED9               	movwf	fsr2l,c
 10090  003A60  6ADA               	clrf	fsr2h,c
 10091  003A62  0E01               	movlw	high (_state_CE+36)
 10092  003A64  22DA               	addwfc	fsr2h,f,c
 10093  003A66  50DF               	movf	indf2,w,c
 10094  003A68  2605               	addwf	if_perfect_yellow@distortion,f,c
 10095                           
 10096                           ;master/solution_CES.c: 198:  }
 10097  003A6A  2A06               	incf	if_perfect_yellow@i,f,c
 10098  003A6C  0E03               	movlw	3
 10099  003A6E  6406               	cpfsgt	if_perfect_yellow@i,c
 10100  003A70  D7DD               	goto	l8574
 10101                           
 10102                           ;master/solution_CES.c: 199:  if (distortion != 0)
 10103  003A72  5005               	movf	if_perfect_yellow@distortion,w,c
 10104  003A74  A4D8               	btfss	status,2,c
 10105  003A76  D7CA               	goto	u6320
 10106                           
 10107                           ;master/solution_CES.c: 201:  return 0;
 10108  003A78  0E00               	movlw	0
 10109  003A7A  0012               	return		;funcret
 10110  003A7C                     __end_of_if_perfect_yellow:
 10111                           	opt callstack 0
 10112                           
 10113 ;; *************** function _all_yellow *****************
 10114 ;; Defined at:
 10115 ;;		line 565 in file "master/solution_CES.c"
 10116 ;; Parameters:    Size  Location     Type
 10117 ;;		None
 10118 ;; Auto vars:     Size  Location     Type
 10119 ;;  j               1   56[BANK0 ] unsigned char 
 10120 ;;  i               1   55[BANK0 ] unsigned char 
 10121 ;;  check_CO        1   54[BANK0 ] unsigned char 
 10122 ;; Return value:  Size  Location     Type
 10123 ;;                  1    wreg      void 
 10124 ;; Registers used:
 10125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10126 ;; Tracked objects:
 10127 ;;		On entry : 0/0
 10128 ;;		On exit  : 0/0
 10129 ;;		Unchanged: 0/0
 10130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10131 ;;      Params:         0       0       0       0       0       0       0
 10132 ;;      Locals:         0       3       0       0       0       0       0
 10133 ;;      Temps:          0       0       0       0       0       0       0
 10134 ;;      Totals:         0       3       0       0       0       0       0
 10135 ;;Total ram usage:        3 bytes
 10136 ;; Hardware stack levels used:    1
 10137 ;; Hardware stack levels required when called:    7
 10138 ;; This function calls:
 10139 ;;		_command_turn_ARRAY_3
 10140 ;;		_if_yellow_co
 10141 ;;		_operation_limit
 10142 ;;		_operation_setup
 10143 ;; This function is called by:
 10144 ;;		_made_cube
 10145 ;; This function uses a non-reentrant model
 10146 ;;
 10147                           
 10148                           	psect	text37
 10149  003898                     __ptext37:
 10150                           	opt callstack 0
 10151  003898                     _all_yellow:
 10152                           	opt callstack 21
 10153                           
 10154                           ;master/solution_CES.c: 567:  char check_CO = 7, i, j;
 10155                           
 10156                           ;incstack = 0
 10157  003898  0E07               	movlw	7
 10158  00389A  0100               	movlb	0	; () banked
 10159  00389C  6F96               	movwf	all_yellow@check_CO& (0+255),b
 10160                           
 10161                           ; BSR set to: 0
 10162                           ;master/solution_CES.c: 568:  const char CO[8][4] = {;master/solution_CES.c: 577:  const
      +                           char step6[7][3] = {"R", "D2", "R'", "D'", "R", "D'", "R'"};;master/solution_CES.c: 579
      +                          :  if (operation_setup() == 1)
 10163  00389E  EC61  F014         	call	_operation_setup	;wreg free
 10164  0038A2  06E8               	decf	wreg,f,c
 10165  0038A4  B4D8               	btfsc	status,2,c
 10166  0038A6  0012               	return	
 10167  0038A8  D03A               	goto	l8682
 10168  0038AA                     l8646:
 10169                           
 10170                           ;master/solution_CES.c: 583:  {;master/solution_CES.c: 584:   if (operation_limit(50) ==
      +                           1)
 10171  0038AA  0E00               	movlw	0
 10172  0038AC  6E02               	movwf	operation_limit@count+1,c
 10173  0038AE  0E32               	movlw	50
 10174  0038B0  6E01               	movwf	operation_limit@count,c
 10175  0038B2  EC0E  F015         	call	_operation_limit	;wreg free
 10176  0038B6  06E8               	decf	wreg,f,c
 10177  0038B8  B4D8               	btfsc	status,2,c
 10178  0038BA  0012               	return	
 10179                           
 10180                           ;master/solution_CES.c: 586:   for (i = 0; i < 4; i++)
 10181  0038BC  0E00               	movlw	0
 10182  0038BE  0100               	movlb	0	; () banked
 10183  0038C0  6F97               	movwf	all_yellow@i& (0+255),b
 10184  0038C2                     l8656:
 10185                           
 10186                           ; BSR set to: 0
 10187                           ;master/solution_CES.c: 587:   {;master/solution_CES.c: 588:    if (if_yellow_co(CO[chec
      +                          k_CO]) == 0)
 10188  0038C2  5196               	movf	all_yellow@check_CO& (0+255),w,b
 10189  0038C4  0D04               	mullw	4
 10190  0038C6  0E6B               	movlw	low all_yellow@CO
 10191  0038C8  24F3               	addwf	prodl,w,c
 10192  0038CA  6E01               	movwf	if_yellow_co@co,c
 10193  0038CC  0E7E               	movlw	high all_yellow@CO
 10194  0038CE  20F4               	addwfc	prodh,w,c
 10195  0038D0  6E02               	movwf	if_yellow_co@co+1,c
 10196  0038D2  EC54  F017         	call	_if_yellow_co	;wreg free
 10197  0038D6  0900               	iorlw	0
 10198  0038D8  A4D8               	btfss	status,2,c
 10199  0038DA  D015               	goto	l8674
 10200                           
 10201                           ;master/solution_CES.c: 589:    {;master/solution_CES.c: 590:     for (j = 0; j < 7; j++
      +                          )
 10202  0038DC  0E00               	movlw	0
 10203  0038DE  0100               	movlb	0	; () banked
 10204  0038E0  6F98               	movwf	all_yellow@j& (0+255),b
 10205  0038E2                     l8664:
 10206                           
 10207                           ; BSR set to: 0
 10208                           ;master/solution_CES.c: 591:     {;master/solution_CES.c: 592:      command_turn_ARRAY_3
      +                          (step6[j]);
 10209  0038E2  5198               	movf	all_yellow@j& (0+255),w,b
 10210  0038E4  0D03               	mullw	3
 10211  0038E6  0ED0               	movlw	low all_yellow@step6
 10212  0038E8  24F3               	addwf	prodl,w,c
 10213  0038EA  6E5E               	movwf	command_turn_ARRAY_3@s,c
 10214  0038EC  0E7E               	movlw	high all_yellow@step6
 10215  0038EE  20F4               	addwfc	prodh,w,c
 10216  0038F0  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
 10217  0038F2  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
 10218                           
 10219                           ;master/solution_CES.c: 593:     }
 10220  0038F6  0100               	movlb	0	; () banked
 10221  0038F8  2B98               	incf	all_yellow@j& (0+255),f,b
 10222                           
 10223                           ; BSR set to: 0
 10224  0038FA  0E06               	movlw	6
 10225  0038FC  6598               	cpfsgt	all_yellow@j& (0+255),b
 10226  0038FE  D7F1               	goto	l8664
 10227                           
 10228                           ; BSR set to: 0
 10229                           ;master/solution_CES.c: 594:     check_CO = 7;
 10230  003900  0E07               	movlw	7
 10231  003902  6F96               	movwf	all_yellow@check_CO& (0+255),b
 10232                           
 10233                           ;master/solution_CES.c: 595:     break;
 10234  003904  D00B               	goto	u6480
 10235  003906                     l8674:
 10236                           
 10237                           ;master/solution_CES.c: 598:    {;master/solution_CES.c: 599:     command_turn_ARRAY_3("
      +                          D");
 10238  003906  0EE8               	movlw	low STR_4
 10239  003908  6E5E               	movwf	command_turn_ARRAY_3@s,c
 10240  00390A  0E7F               	movlw	high STR_4
 10241  00390C  6E5F               	movwf	command_turn_ARRAY_3@s+1,c
 10242  00390E  ECE8  F01A         	call	_command_turn_ARRAY_3	;wreg free
 10243                           
 10244                           ;master/solution_CES.c: 601:   }
 10245  003912  0100               	movlb	0	; () banked
 10246  003914  2B97               	incf	all_yellow@i& (0+255),f,b
 10247                           
 10248                           ; BSR set to: 0
 10249  003916  0E03               	movlw	3
 10250  003918  6597               	cpfsgt	all_yellow@i& (0+255),b
 10251  00391A  D7D3               	goto	l8656
 10252  00391C                     u6480:
 10253                           
 10254                           ; BSR set to: 0
 10255                           ;master/solution_CES.c: 602:   check_CO--;
 10256  00391C  0796               	decf	all_yellow@check_CO& (0+255),f,b
 10257  00391E                     l8682:
 10258                           
 10259                           ;master/solution_CES.c: 582:  while (if_yellow_co(CO[7]) != 0)
 10260  00391E  0E87               	movlw	low (all_yellow@CO+28)
 10261  003920  6E01               	movwf	if_yellow_co@co,c
 10262  003922  0E7E               	movlw	high (all_yellow@CO+28)
 10263  003924  6E02               	movwf	if_yellow_co@co+1,c
 10264  003926  EC54  F017         	call	_if_yellow_co	;wreg free
 10265  00392A  0900               	iorlw	0
 10266  00392C  B4D8               	btfsc	status,2,c
 10267  00392E  0012               	return	
 10268  003930  D7BC               	goto	l8646
 10269  003932                     __end_of_all_yellow:
 10270                           	opt callstack 0
 10271                           
 10272 ;; *************** function _operation_setup *****************
 10273 ;; Defined at:
 10274 ;;		line 892 in file "master/solution_CES.c"
 10275 ;; Parameters:    Size  Location     Type
 10276 ;;		None
 10277 ;; Auto vars:     Size  Location     Type
 10278 ;;		None
 10279 ;; Return value:  Size  Location     Type
 10280 ;;                  1    wreg      unsigned char 
 10281 ;; Registers used:
 10282 ;;		wreg, status,2, status,0
 10283 ;; Tracked objects:
 10284 ;;		On entry : 0/0
 10285 ;;		On exit  : 0/0
 10286 ;;		Unchanged: 0/0
 10287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10288 ;;      Params:         0       0       0       0       0       0       0
 10289 ;;      Locals:         0       0       0       0       0       0       0
 10290 ;;      Temps:          0       0       0       0       0       0       0
 10291 ;;      Totals:         0       0       0       0       0       0       0
 10292 ;;Total ram usage:        0 bytes
 10293 ;; Hardware stack levels used:    1
 10294 ;; This function calls:
 10295 ;;		Nothing
 10296 ;; This function is called by:
 10297 ;;		_make_while_flower
 10298 ;;		_make_second_flower_perfect
 10299 ;;		_yellow_cross
 10300 ;;		_all_yellow
 10301 ;;		_make_step_7
 10302 ;;		_make_step_8
 10303 ;;		_make_perfect_white
 10304 ;;		_make_justice_axis
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           	psect	text38
 10309  0028C2                     __ptext38:
 10310                           	opt callstack 0
 10311  0028C2                     _operation_setup:
 10312                           	opt callstack 28
 10313                           
 10314                           ;master/solution_CES.c: 894:  if (opereation_over_flag == 1)
 10315                           
 10316                           ;incstack = 0
 10317  0028C2  0100               	movlb	0	; () banked
 10318  0028C4  05ED               	decf	_opereation_over_flag& (0+255),w,b
 10319  0028C6  A4D8               	btfss	status,2,c
 10320  0028C8  D002               	goto	l8000
 10321                           
 10322                           ; BSR set to: 0
 10323                           ;master/solution_CES.c: 895:  {;master/solution_CES.c: 896:   return 1;
 10324  0028CA  0E01               	movlw	1
 10325  0028CC  0012               	return	
 10326  0028CE                     l8000:
 10327                           
 10328                           ; BSR set to: 0
 10329                           ;master/solution_CES.c: 898:  opereation_count = 0;
 10330  0028CE  0E00               	movlw	0
 10331  0028D0  6FE7               	movwf	(_opereation_count+1)& (0+255),b
 10332  0028D2  0E00               	movlw	0
 10333  0028D4  6FE6               	movwf	_opereation_count& (0+255),b
 10334                           
 10335                           ; BSR set to: 0
 10336                           ;master/solution_CES.c: 899:  return 0;
 10337  0028D6  0E00               	movlw	0
 10338                           
 10339                           ; BSR set to: 0
 10340  0028D8  0012               	return		;funcret
 10341  0028DA                     __end_of_operation_setup:
 10342                           	opt callstack 0
 10343                           
 10344 ;; *************** function _operation_limit *****************
 10345 ;; Defined at:
 10346 ;;		line 875 in file "master/solution_CES.c"
 10347 ;; Parameters:    Size  Location     Type
 10348 ;;  count           2    0[COMRAM] const int 
 10349 ;; Auto vars:     Size  Location     Type
 10350 ;;		None
 10351 ;; Return value:  Size  Location     Type
 10352 ;;                  1    wreg      unsigned char 
 10353 ;; Registers used:
 10354 ;;		wreg, status,2, status,0
 10355 ;; Tracked objects:
 10356 ;;		On entry : 0/0
 10357 ;;		On exit  : 0/0
 10358 ;;		Unchanged: 0/0
 10359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10360 ;;      Params:         2       0       0       0       0       0       0
 10361 ;;      Locals:         0       0       0       0       0       0       0
 10362 ;;      Temps:          1       0       0       0       0       0       0
 10363 ;;      Totals:         3       0       0       0       0       0       0
 10364 ;;Total ram usage:        3 bytes
 10365 ;; Hardware stack levels used:    1
 10366 ;; This function calls:
 10367 ;;		Nothing
 10368 ;; This function is called by:
 10369 ;;		_make_while_flower
 10370 ;;		_make_second_flower_perfect
 10371 ;;		_yellow_cross
 10372 ;;		_all_yellow
 10373 ;;		_make_step_7
 10374 ;;		_make_step_8
 10375 ;;		_make_perfect_white
 10376 ;;		_make_justice_axis
 10377 ;; This function uses a non-reentrant model
 10378 ;;
 10379                           
 10380                           	psect	text39
 10381  002A1C                     __ptext39:
 10382                           	opt callstack 0
 10383  002A1C                     _operation_limit:
 10384                           	opt callstack 28
 10385                           
 10386                           ;master/solution_CES.c: 875: char operation_limit(const int count);master/solution_CES.c
      +                          : 876: {;master/solution_CES.c: 877:  opereation_count++;
 10387                           
 10388                           ; BSR set to: 0
 10389                           ;incstack = 0
 10390  002A1C  0100               	movlb	0	; () banked
 10391  002A1E  4BE6               	infsnz	_opereation_count& (0+255),f,b
 10392  002A20  2BE7               	incf	(_opereation_count+1)& (0+255),f,b
 10393                           
 10394                           ; BSR set to: 0
 10395                           ;master/solution_CES.c: 878:  if (opereation_count > count)
 10396  002A22  51E6               	movf	_opereation_count& (0+255),w,b
 10397  002A24  5C01               	subwf	operation_limit@count,w,c
 10398  002A26  5002               	movf	operation_limit@count+1,w,c
 10399  002A28  0A80               	xorlw	128
 10400  002A2A  6E03               	movwf	??_operation_limit& (0+255),c
 10401  002A2C  51E7               	movf	(_opereation_count+1)& (0+255),w,b
 10402  002A2E  0A80               	xorlw	128
 10403  002A30  5803               	subwfb	??_operation_limit& (0+255),w,c
 10404  002A32  B0D8               	btfsc	status,0,c
 10405  002A34  D004               	goto	l8016
 10406                           
 10407                           ; BSR set to: 0
 10408                           ;master/solution_CES.c: 879:  {;master/solution_CES.c: 880:   opereation_over_flag = 1;
 10409  002A36  0E01               	movlw	1
 10410  002A38  6FED               	movwf	_opereation_over_flag& (0+255),b
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;master/solution_CES.c: 881:   return 1;
 10414  002A3A  0E01               	movlw	1
 10415  002A3C  0012               	return	
 10416  002A3E                     l8016:
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;master/solution_CES.c: 883:  return 0;
 10420  002A3E  0E00               	movlw	0
 10421                           
 10422                           ; BSR set to: 0
 10423  002A40  0012               	return		;funcret
 10424  002A42                     __end_of_operation_limit:
 10425                           	opt callstack 0
 10426                           
 10427 ;; *************** function _if_yellow_co *****************
 10428 ;; Defined at:
 10429 ;;		line 606 in file "master/solution_CES.c"
 10430 ;; Parameters:    Size  Location     Type
 10431 ;;  co              2    0[COMRAM] PTR const unsigned char 
 10432 ;;		 -> all_yellow@CO(32), 
 10433 ;; Auto vars:     Size  Location     Type
 10434 ;;  i               1    5[COMRAM] unsigned char 
 10435 ;; Return value:  Size  Location     Type
 10436 ;;                  1    wreg      unsigned char 
 10437 ;; Registers used:
 10438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10439 ;; Tracked objects:
 10440 ;;		On entry : 0/0
 10441 ;;		On exit  : 0/0
 10442 ;;		Unchanged: 0/0
 10443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10444 ;;      Params:         2       0       0       0       0       0       0
 10445 ;;      Locals:         1       0       0       0       0       0       0
 10446 ;;      Temps:          3       0       0       0       0       0       0
 10447 ;;      Totals:         6       0       0       0       0       0       0
 10448 ;;Total ram usage:        6 bytes
 10449 ;; Hardware stack levels used:    1
 10450 ;; This function calls:
 10451 ;;		Nothing
 10452 ;; This function is called by:
 10453 ;;		_all_yellow
 10454 ;; This function uses a non-reentrant model
 10455 ;;
 10456                           
 10457                           	psect	text40
 10458  002EA8                     __ptext40:
 10459                           	opt callstack 0
 10460  002EA8                     _if_yellow_co:
 10461                           	opt callstack 27
 10462                           
 10463                           ;master/solution_CES.c: 606: char if_yellow_co(const char co[]);master/solution_CES.c: 6
      +                          07: {;master/solution_CES.c: 608:  char i;;master/solution_CES.c: 609:  for (i = 0; i < 
      +                          4; i++)
 10464                           
 10465                           ; BSR set to: 0
 10466                           ;incstack = 0
 10467  002EA8  0E00               	movlw	0
 10468  002EAA  6E06               	movwf	if_yellow_co@i,c
 10469  002EAC                     l8058:
 10470                           
 10471                           ;master/solution_CES.c: 610:  {;master/solution_CES.c: 611:   if (state_CE.co[4 + i] != 
      +                          co[i])
 10472  002EAC  0E9C               	movlw	low (_state_CE+12)
 10473  002EAE  2406               	addwf	if_yellow_co@i,w,c
 10474  002EB0  6ED9               	movwf	fsr2l,c
 10475  002EB2  6ADA               	clrf	fsr2h,c
 10476  002EB4  0E01               	movlw	high (_state_CE+12)
 10477  002EB6  22DA               	addwfc	fsr2h,f,c
 10478  002EB8  50DF               	movf	indf2,w,c
 10479  002EBA  6E03               	movwf	??_if_yellow_co& (0+255),c
 10480  002EBC  5006               	movf	if_yellow_co@i,w,c
 10481  002EBE  2401               	addwf	if_yellow_co@co,w,c
 10482  002EC0  6E04               	movwf	(??_if_yellow_co+1)& (0+255),c
 10483  002EC2  0E00               	movlw	0
 10484  002EC4  2002               	addwfc	if_yellow_co@co+1,w,c
 10485  002EC6  6E05               	movwf	(??_if_yellow_co+2)& (0+255),c
 10486  002EC8  C004  FFF6         	movff	??_if_yellow_co+1,tblptrl
 10487  002ECC  C005  FFF7         	movff	??_if_yellow_co+2,tblptrh
 10488  002ED0                     	if	0	;tblptru may be non-zero
 10489  002ED0                     	endif
 10490  002ED0                     	if	0	;tblptru may be non-zero
 10491  002ED0                     	endif
 10492  002ED0  0008               	tblrd		*
 10493  002ED2  50F5               	movf	tablat,w,c
 10494  002ED4  1803               	xorwf	??_if_yellow_co,w,c
 10495  002ED6  B4D8               	btfsc	status,2,c
 10496  002ED8  D002               	goto	l8064
 10497                           
 10498                           ;master/solution_CES.c: 612:   {;master/solution_CES.c: 613:    return 1;
 10499  002EDA  0E01               	movlw	1
 10500  002EDC  0012               	return	
 10501  002EDE                     l8064:
 10502                           
 10503                           ;master/solution_CES.c: 615:  }
 10504  002EDE  2A06               	incf	if_yellow_co@i,f,c
 10505  002EE0  0E03               	movlw	3
 10506  002EE2  6406               	cpfsgt	if_yellow_co@i,c
 10507  002EE4  D7E3               	goto	l8058
 10508                           
 10509                           ;master/solution_CES.c: 616:  return 0;
 10510  002EE6  0E00               	movlw	0
 10511  002EE8  0012               	return		;funcret
 10512  002EEA                     __end_of_if_yellow_co:
 10513                           	opt callstack 0
 10514                           
 10515 ;; *************** function _command_turn_ARRAY_3 *****************
 10516 ;; Defined at:
 10517 ;;		line 210 in file "master/animation.c"
 10518 ;; Parameters:    Size  Location     Type
 10519 ;;  s               2   93[COMRAM] PTR const unsigned char 
 10520 ;;		 -> STR_95(2), STR_94(2), STR_93(3), STR_92(3), 
 10521 ;;		 -> STR_91(3), STR_90(2), STR_89(2), STR_88(3), 
 10522 ;;		 -> STR_87(2), STR_86(3), STR_85(3), STR_84(2), 
 10523 ;;		 -> STR_83(2), STR_82(3), STR_81(2), STR_80(2), 
 10524 ;;		 -> make_step_8@step8(21), make_step_7@step7(42), STR_79(2), STR_78(3), 
 10525 ;;		 -> STR_77(2), STR_76(2), make_step_7@start7(60), STR_75(2), 
 10526 ;;		 -> STR_74(2), STR_73(2), all_yellow@step6(21), yellow_cross@step5(18), 
 10527 ;;		 -> STR_72(2), STR_71(2), STR_70(2), STR_69(2), 
 10528 ;;		 -> STR_68(2), STR_67(2), STR_66(2), STR_65(3), 
 10529 ;;		 -> STR_64(3), STR_63(2), STR_62(2), STR_61(2), 
 10530 ;;		 -> STR_60(2), make_second_flower_perfect@command_drop_left(24), make_second_flower_perfect@command_drop_right(24), 
      +STR_59(2), 
 10531 ;;		 -> STR_58(2), STR_57(3), STR_56(3), STR_55(3), 
 10532 ;;		 -> STR_54(3), STR_53(2), STR_52(2), make_white_yellow_flower@command(54), 
 10533 ;;		 -> STR_51(2), STR_50(2), STR_49(3), STR_48(2), 
 10534 ;;		 -> STR_47(2), STR_46(2), STR_45(2), STR_44(2), 
 10535 ;;		 -> STR_43(2), STR_42(2), STR_41(2), STR_40(2), 
 10536 ;;		 -> STR_39(2), made_cube@start8(42), 
 10537 ;; Auto vars:     Size  Location     Type
 10538 ;;		None
 10539 ;; Return value:  Size  Location     Type
 10540 ;;                  1    wreg      void 
 10541 ;; Registers used:
 10542 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10543 ;; Tracked objects:
 10544 ;;		On entry : 0/0
 10545 ;;		On exit  : 0/0
 10546 ;;		Unchanged: 0/0
 10547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10548 ;;      Params:         2       0       0       0       0       0       0
 10549 ;;      Locals:         0       0       0       0       0       0       0
 10550 ;;      Temps:          0       4       0       0       0       0       0
 10551 ;;      Totals:         2       4       0       0       0       0       0
 10552 ;;Total ram usage:        6 bytes
 10553 ;; Hardware stack levels used:    1
 10554 ;; Hardware stack levels required when called:    6
 10555 ;; This function calls:
 10556 ;;		_command_turn_ARRAY_3_end
 10557 ;;		_command_turn_CE
 10558 ;; This function is called by:
 10559 ;;		_made_cube
 10560 ;;		_if_start_step8
 10561 ;;		_make_while_flower
 10562 ;;		_make_white_yellow_flower
 10563 ;;		_make_second_flower_perfect
 10564 ;;		_make_flont_green
 10565 ;;		_make_up_white
 10566 ;;		_yellow_cross
 10567 ;;		_all_yellow
 10568 ;;		_make_up_yellow
 10569 ;;		_make_step_7
 10570 ;;		_make_step_8
 10571 ;;		_make_perfect_white
 10572 ;;		_make_justice_axis
 10573 ;; This function uses a non-reentrant model
 10574 ;;
 10575                           
 10576                           	psect	text41
 10577  0035D0                     __ptext41:
 10578                           	opt callstack 0
 10579  0035D0                     _command_turn_ARRAY_3:
 10580                           	opt callstack 21
 10581                           
 10582                           ;master/animation.c: 211:     if (past_command_3 != *(s + 0)) {
 10583                           
 10584                           ;incstack = 0
 10585  0035D0  C05E  FFF6         	movff	command_turn_ARRAY_3@s,tblptrl
 10586  0035D4  C05F  FFF7         	movff	command_turn_ARRAY_3@s+1,tblptrh
 10587  0035D8                     	if	0	;tblptru may be non-zero
 10588  0035D8                     	endif
 10589  0035D8                     	if	0	;tblptru may be non-zero
 10590  0035D8                     	endif
 10591  0035D8  0008               	tblrd		*
 10592  0035DA  50F5               	movf	tablat,w,c
 10593  0035DC  0100               	movlb	0	; () banked
 10594  0035DE  19F2               	xorwf	_past_command_3& (0+255),w,b
 10595  0035E0  B4D8               	btfsc	status,2,c
 10596  0035E2  D00C               	goto	l7704
 10597                           
 10598                           ; BSR set to: 0
 10599                           ;master/animation.c: 212:         command_turn_ARRAY_3_end();
 10600  0035E4  EC2D  F030         	call	_command_turn_ARRAY_3_end	;wreg free
 10601                           
 10602                           ;master/animation.c: 213:         past_command_3 = *(s + 0);
 10603  0035E8  C05E  FFF6         	movff	command_turn_ARRAY_3@s,tblptrl
 10604  0035EC  C05F  FFF7         	movff	command_turn_ARRAY_3@s+1,tblptrh
 10605  0035F0                     	if	0	;tblptru may be non-zero
 10606  0035F0                     	endif
 10607  0035F0                     	if	0	;tblptru may be non-zero
 10608  0035F0                     	endif
 10609  0035F0  0008               	tblrd		*
 10610  0035F2  CFF5 F0F2          	movff	tablat,_past_command_3
 10611                           
 10612                           ;master/animation.c: 214:         past_command_count_3 = 0;
 10613  0035F6  0E00               	movlw	0
 10614  0035F8  0100               	movlb	0	; () banked
 10615  0035FA  6FF1               	movwf	_past_command_count_3& (0+255),b
 10616  0035FC                     l7704:
 10617                           
 10618                           ; BSR set to: 0
 10619                           ;master/animation.c: 216:     command_turn_CE(s);
 10620  0035FC  C05E  F033         	movff	command_turn_ARRAY_3@s,command_turn_CE@s
 10621  003600  C05F  F034         	movff	command_turn_ARRAY_3@s+1,command_turn_CE@s+1
 10622  003604  ECEF  F01D         	call	_command_turn_CE	;wreg free
 10623                           
 10624                           ;master/animation.c: 217:     switch (*(s + 1)) {
 10625  003608  D008               	goto	l7714
 10626  00360A                     l7706:
 10627                           
 10628                           ; BSR set to: 0
 10629                           ;master/animation.c: 219:             past_command_count_3 += 3;
 10630  00360A  0E03               	movlw	3
 10631  00360C  27F1               	addwf	_past_command_count_3& (0+255),f,b
 10632                           
 10633                           ;master/animation.c: 220:             break;
 10634  00360E  0012               	return	
 10635  003610                     l7708:
 10636                           
 10637                           ; BSR set to: 0
 10638                           ;master/animation.c: 222:             past_command_count_3 += 2;
 10639  003610  0E02               	movlw	2
 10640  003612  27F1               	addwf	_past_command_count_3& (0+255),f,b
 10641                           
 10642                           ;master/animation.c: 223:             break;
 10643  003614  0012               	return	
 10644  003616                     l7710:
 10645                           
 10646                           ; BSR set to: 0
 10647                           ;master/animation.c: 225:             past_command_count_3 += 1;
 10648  003616  2BF1               	incf	_past_command_count_3& (0+255),f,b
 10649                           
 10650                           ;master/animation.c: 226:             break;
 10651  003618  0012               	return	
 10652  00361A                     l7714:
 10653  00361A  0E01               	movlw	1
 10654  00361C  245E               	addwf	command_turn_ARRAY_3@s,w,c
 10655  00361E  0100               	movlb	0	; () banked
 10656  003620  6F92               	movwf	??_command_turn_ARRAY_3& (0+255),b
 10657  003622  0E00               	movlw	0
 10658  003624  205F               	addwfc	command_turn_ARRAY_3@s+1,w,c
 10659  003626  6F93               	movwf	(??_command_turn_ARRAY_3+1)& (0+255),b
 10660  003628  C092  FFF6         	movff	??_command_turn_ARRAY_3,tblptrl
 10661  00362C  C093  FFF7         	movff	??_command_turn_ARRAY_3+1,tblptrh
 10662  003630                     	if	0	;tblptru may be non-zero
 10663  003630                     	endif
 10664  003630                     	if	0	;tblptru may be non-zero
 10665  003630                     	endif
 10666  003630  0008               	tblrd		*
 10667  003632  50F5               	movf	tablat,w,c
 10668  003634  6F94               	movwf	(??_command_turn_ARRAY_3+2)& (0+255),b
 10669  003636  6B95               	clrf	(??_command_turn_ARRAY_3+3)& (0+255),b
 10670                           
 10671                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10672                           ; Switch size 1, requested type "simple"
 10673                           ; Number of cases is 1, Range of values is 0 to 0
 10674                           ; switch strategies available:
 10675                           ; Name         Instructions Cycles
 10676                           ; simple_byte            4     3 (average)
 10677                           ;	Chosen strategy is simple_byte
 10678  003638  5195               	movf	(??_command_turn_ARRAY_3+3)& (0+255),w,b
 10679  00363A  0A00               	xorlw	0	; case 0
 10680  00363C  A4D8               	btfss	status,2,c
 10681  00363E  0012               	return	
 10682                           
 10683                           ; BSR set to: 0
 10684                           ; Switch size 1, requested type "simple"
 10685                           ; Number of cases is 3, Range of values is 0 to 50
 10686                           ; switch strategies available:
 10687                           ; Name         Instructions Cycles
 10688                           ; simple_byte           10     6 (average)
 10689                           ;	Chosen strategy is simple_byte
 10690  003640  5194               	movf	(??_command_turn_ARRAY_3+2)& (0+255),w,b
 10691  003642  0A00               	xorlw	0	; case 0
 10692  003644  B4D8               	btfsc	status,2,c
 10693  003646  D7E7               	goto	l7710
 10694  003648  0A27               	xorlw	39	; case 39
 10695  00364A  B4D8               	btfsc	status,2,c
 10696  00364C  D7DE               	goto	l7706
 10697  00364E  0A15               	xorlw	21	; case 50
 10698  003650  A4D8               	btfss	status,2,c
 10699  003652  0012               	return	
 10700  003654  D7DD               	goto	l7708
 10701  003656                     __end_of_command_turn_ARRAY_3:
 10702                           	opt callstack 0
 10703                           
 10704 ;; *************** function _command_turn_CE *****************
 10705 ;; Defined at:
 10706 ;;		line 199 in file "master/operation_CES.c"
 10707 ;; Parameters:    Size  Location     Type
 10708 ;;  s               2   50[COMRAM] PTR const unsigned char 
 10709 ;;		 -> STR_198(3), STR_197(3), STR_196(3), STR_195(3), 
 10710 ;;		 -> STR_194(3), STR_193(3), STR_192(3), STR_191(3), 
 10711 ;;		 -> STR_190(3), STR_189(3), STR_188(3), STR_187(3), 
 10712 ;;		 -> STR_186(2), STR_185(2), STR_184(2), STR_183(2), 
 10713 ;;		 -> STR_182(2), STR_181(2), STR_180(5), STR_95(2), 
 10714 ;;		 -> STR_94(2), STR_93(3), STR_92(3), STR_91(3), 
 10715 ;;		 -> STR_90(2), STR_89(2), STR_88(3), STR_87(2), 
 10716 ;;		 -> STR_86(3), STR_85(3), STR_84(2), STR_83(2), 
 10717 ;;		 -> STR_82(3), STR_81(2), STR_80(2), make_step_8@step8(21), 
 10718 ;;		 -> make_step_7@step7(42), STR_79(2), STR_78(3), STR_77(2), 
 10719 ;;		 -> STR_76(2), make_step_7@start7(60), STR_75(2), STR_74(2), 
 10720 ;;		 -> STR_73(2), all_yellow@step6(21), yellow_cross@step5(18), STR_72(2), 
 10721 ;;		 -> STR_71(2), STR_70(2), STR_69(2), STR_68(2), 
 10722 ;;		 -> STR_67(2), STR_66(2), STR_65(3), STR_64(3), 
 10723 ;;		 -> STR_63(2), STR_62(2), STR_61(2), STR_60(2), 
 10724 ;;		 -> make_second_flower_perfect@command_drop_left(24), make_second_flower_perfect@command_drop_right(24), STR_59(2), 
      +STR_58(2), 
 10725 ;;		 -> STR_57(3), STR_56(3), STR_55(3), STR_54(3), 
 10726 ;;		 -> STR_53(2), STR_52(2), make_white_yellow_flower@command(54), STR_51(2), 
 10727 ;;		 -> STR_50(2), STR_49(3), STR_48(2), STR_47(2), 
 10728 ;;		 -> STR_46(2), STR_45(2), STR_44(2), STR_43(2), 
 10729 ;;		 -> STR_42(2), STR_41(2), STR_40(2), STR_39(2), 
 10730 ;;		 -> made_cube@start8(42), STR_38(3), STR_37(3), STR_36(3), 
 10731 ;;		 -> STR_35(3), STR_34(3), STR_33(3), STR_32(2), 
 10732 ;;		 -> STR_31(2), STR_30(2), STR_29(3), STR_28(3), 
 10733 ;;		 -> STR_27(3), STR_26(3), STR_25(3), STR_24(3), 
 10734 ;;		 -> STR_23(2), STR_22(2), STR_21(2), STR_20(3), 
 10735 ;;		 -> STR_19(3), STR_18(3), STR_17(3), STR_16(3), 
 10736 ;;		 -> STR_15(3), STR_14(3), STR_13(3), STR_12(3), 
 10737 ;;		 -> STR_11(3), STR_10(3), STR_9(3), STR_8(2), 
 10738 ;;		 -> STR_7(2), STR_6(2), STR_5(2), STR_4(2), 
 10739 ;;		 -> STR_3(2), STR_2(6), STR_1(5), 
 10740 ;; Auto vars:     Size  Location     Type
 10741 ;;  i               2   52[COMRAM] int 
 10742 ;; Return value:  Size  Location     Type
 10743 ;;                  1    wreg      unsigned char 
 10744 ;; Registers used:
 10745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10746 ;; Tracked objects:
 10747 ;;		On entry : 0/0
 10748 ;;		On exit  : 0/0
 10749 ;;		Unchanged: 0/0
 10750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10751 ;;      Params:         2       0       0       0       0       0       0
 10752 ;;      Locals:         2       0       0       0       0       0       0
 10753 ;;      Temps:          0       0       0       0       0       0       0
 10754 ;;      Totals:         4       0       0       0       0       0       0
 10755 ;;Total ram usage:        4 bytes
 10756 ;; Hardware stack levels used:    1
 10757 ;; Hardware stack levels required when called:    2
 10758 ;; This function calls:
 10759 ;;		___wmul
 10760 ;;		_str_cmp_const
 10761 ;;		_turn_CE
 10762 ;; This function is called by:
 10763 ;;		_main
 10764 ;;		_Special_input
 10765 ;;		_shuffle_state_CE
 10766 ;;		_command_turn_ARRAY_3
 10767 ;;		_command_turn_ARRAY_2
 10768 ;; This function uses a non-reentrant model
 10769 ;;
 10770                           
 10771                           	psect	text42
 10772  003BDE                     __ptext42:
 10773                           	opt callstack 0
 10774  003BDE                     _command_turn_CE:
 10775                           	opt callstack 28
 10776                           
 10777                           ;master/operation_CES.c: 199: char command_turn_CE(const char *s);master/operation_CES.c
      +                          : 200: {;master/operation_CES.c: 201:     int i;;master/operation_CES.c: 203:     for (i
      +                           = 0; i < (2 + 12 * 3); i++)
 10778                           
 10779                           ; BSR set to: 0
 10780                           ;incstack = 0
 10781  003BDE  0E00               	movlw	0
 10782  003BE0  6E36               	movwf	command_turn_CE@i+1,c
 10783  003BE2  0E00               	movlw	0
 10784  003BE4  6E35               	movwf	command_turn_CE@i,c
 10785  003BE6                     l7574:
 10786                           
 10787                           ;master/operation_CES.c: 204:     {;master/operation_CES.c: 205:         if (str_cmp_con
      +                          st(s, CE_LIST[i].name) == 0)
 10788  003BE6  C033  F007         	movff	command_turn_CE@s,str_cmp_const@p1
 10789  003BEA  C034  F008         	movff	command_turn_CE@s+1,str_cmp_const@p1+1
 10790  003BEE  C035  F001         	movff	command_turn_CE@i,___wmul@multiplier
 10791  003BF2  C036  F002         	movff	command_turn_CE@i+1,___wmul@multiplier+1
 10792  003BF6  0E00               	movlw	0
 10793  003BF8  6E04               	movwf	___wmul@multiplicand+1,c
 10794  003BFA  0E05               	movlw	5
 10795  003BFC  6E03               	movwf	___wmul@multiplicand,c
 10796  003BFE  ECFB  F014         	call	___wmul	;wreg free
 10797  003C02  0E02               	movlw	2
 10798  003C04  2601               	addwf	?___wmul,f,c
 10799  003C06  0E00               	movlw	0
 10800  003C08  2202               	addwfc	?___wmul+1,f,c
 10801  003C0A  0E91               	movlw	low _CE_LIST
 10802  003C0C  2401               	addwf	?___wmul,w,c
 10803  003C0E  6EF6               	movwf	tblptrl,c
 10804  003C10  0E7A               	movlw	high _CE_LIST
 10805  003C12  2002               	addwfc	?___wmul+1,w,c
 10806  003C14  6EF7               	movwf	tblptrh,c
 10807  003C16                     	if	0	;There are less than 3 active tblptr bytes
 10808  003C16                     	endif
 10809  003C16  0009               	tblrd		*+
 10810  003C18  CFF5 F009          	movff	tablat,str_cmp_const@p2
 10811  003C1C  000A               	tblrd		*-
 10812  003C1E  CFF5 F00A          	movff	tablat,str_cmp_const@p2+1
 10813  003C22  EC96  F01D         	call	_str_cmp_const	;wreg free
 10814  003C26  0900               	iorlw	0
 10815  003C28  A4D8               	btfss	status,2,c
 10816  003C2A  D026               	goto	l7586
 10817                           
 10818                           ;master/operation_CES.c: 206:         {;master/operation_CES.c: 207:             turn_CE
      +                          (&CE_LIST[i]);
 10819  003C2C  C035  F001         	movff	command_turn_CE@i,___wmul@multiplier
 10820  003C30  C036  F002         	movff	command_turn_CE@i+1,___wmul@multiplier+1
 10821  003C34  0E00               	movlw	0
 10822  003C36  6E04               	movwf	___wmul@multiplicand+1,c
 10823  003C38  0E05               	movlw	5
 10824  003C3A  6E03               	movwf	___wmul@multiplicand,c
 10825  003C3C  ECFB  F014         	call	___wmul	;wreg free
 10826  003C40  0E91               	movlw	low _CE_LIST
 10827  003C42  2401               	addwf	?___wmul,w,c
 10828  003C44  6E29               	movwf	turn_CE@change,c
 10829  003C46  0E7A               	movlw	high _CE_LIST
 10830  003C48  2002               	addwfc	?___wmul+1,w,c
 10831  003C4A  6E2A               	movwf	turn_CE@change+1,c
 10832  003C4C  ECF6  F035         	call	_turn_CE	;wreg free
 10833                           
 10834                           ;master/operation_CES.c: 208:             if (i > 1 && i < (2 + 12 * 3) - 9)
 10835  003C50  BE36               	btfsc	command_turn_CE@i+1,7,c
 10836  003C52  0012               	return	
 10837  003C54  5036               	movf	command_turn_CE@i+1,w,c
 10838  003C56  E104               	bnz	u4940
 10839  003C58  0E02               	movlw	2
 10840  003C5A  5C35               	subwf	command_turn_CE@i,w,c
 10841  003C5C  A0D8               	btfss	status,0,c
 10842  003C5E  0012               	return	
 10843  003C60                     u4940:
 10844  003C60  BE36               	btfsc	command_turn_CE@i+1,7,c
 10845  003C62  D006               	goto	u4950
 10846  003C64  5036               	movf	command_turn_CE@i+1,w,c
 10847  003C66  E113               	bnz	l709
 10848  003C68  0E1D               	movlw	29
 10849  003C6A  5C35               	subwf	command_turn_CE@i,w,c
 10850  003C6C  B0D8               	btfsc	status,0,c
 10851  003C6E  0012               	return	
 10852  003C70                     u4950:
 10853                           
 10854                           ;master/operation_CES.c: 209:             {;master/operation_CES.c: 210:                
      +                           total_number_of_moves++;
 10855  003C70  0100               	movlb	0	; () banked
 10856  003C72  4BE8               	infsnz	_total_number_of_moves& (0+255),f,b
 10857  003C74  2BE9               	incf	(_total_number_of_moves+1)& (0+255),f,b
 10858  003C76  0012               	return	
 10859  003C78                     l7586:
 10860                           
 10861                           ;master/operation_CES.c: 214:     }
 10862  003C78  4A35               	infsnz	command_turn_CE@i,f,c
 10863  003C7A  2A36               	incf	command_turn_CE@i+1,f,c
 10864  003C7C  BE36               	btfsc	command_turn_CE@i+1,7,c
 10865  003C7E  D7B3               	goto	l7574
 10866  003C80  5036               	movf	command_turn_CE@i+1,w,c
 10867  003C82  E105               	bnz	u4960
 10868  003C84  0E26               	movlw	38
 10869  003C86  5C35               	subwf	command_turn_CE@i,w,c
 10870  003C88  B0D8               	btfsc	status,0,c
 10871  003C8A  0012               	return	
 10872  003C8C  D7AC               	goto	l7574
 10873  003C8E                     u4960:
 10874  003C8E                     l709:
 10875  003C8E  0012               	return		;funcret
 10876  003C90                     __end_of_command_turn_CE:
 10877                           	opt callstack 0
 10878                           
 10879 ;; *************** function _turn_CE *****************
 10880 ;; Defined at:
 10881 ;;		line 15 in file "master/operation_CES.c"
 10882 ;; Parameters:    Size  Location     Type
 10883 ;;  change          2   40[COMRAM] PTR const struct enm
 10884 ;;		 -> CE_LIST(190), 
 10885 ;; Auto vars:     Size  Location     Type
 10886 ;;  past           46    2[BANK0 ] struct CE_2
 10887 ;;  i               2   48[BANK0 ] int 
 10888 ;;  j               2    0[BANK0 ] int 
 10889 ;; Return value:  Size  Location     Type
 10890 ;;                  1    wreg      void 
 10891 ;; Registers used:
 10892 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10893 ;; Tracked objects:
 10894 ;;		On entry : 0/0
 10895 ;;		On exit  : 0/0
 10896 ;;		Unchanged: 0/0
 10897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10898 ;;      Params:         2       0       0       0       0       0       0
 10899 ;;      Locals:         0      50       0       0       0       0       0
 10900 ;;      Temps:          8       0       0       0       0       0       0
 10901 ;;      Totals:        10      50       0       0       0       0       0
 10902 ;;Total ram usage:       60 bytes
 10903 ;; Hardware stack levels used:    1
 10904 ;; Hardware stack levels required when called:    1
 10905 ;; This function calls:
 10906 ;;		___awmod
 10907 ;; This function is called by:
 10908 ;;		_command_turn_CE
 10909 ;; This function uses a non-reentrant model
 10910 ;;
 10911                           
 10912                           	psect	text43
 10913  006BEC                     __ptext43:
 10914                           	opt callstack 0
 10915  006BEC                     _turn_CE:
 10916                           	opt callstack 28
 10917                           
 10918                           ;master/operation_CES.c: 15: void turn_CE(const CE_LISTER *change);master/operation_CES.
      +                          c: 16: {;master/operation_CES.c: 17:     int i, j;;master/operation_CES.c: 18:     for (
      +                          j = 0; j < change->CE_count; j++)
 10919                           
 10920                           ;incstack = 0
 10921  006BEC  0E00               	movlw	0
 10922  006BEE  0100               	movlb	0	; () banked
 10923  006BF0  6F61               	movwf	(turn_CE@j+1)& (0+255),b
 10924  006BF2  0E00               	movlw	0
 10925  006BF4  6F60               	movwf	turn_CE@j& (0+255),b
 10926  006BF6  D193               	goto	l7460
 10927  006BF8                     l7418:
 10928                           
 10929                           ; BSR set to: 0
 10930                           ;master/operation_CES.c: 19:     {;master/operation_CES.c: 20:         CE past = state_C
      +                          E;
 10931  006BF8  EE21  F090         	lfsr	2,_state_CE
 10932  006BFC  EE10  F062         	lfsr	1,turn_CE@past
 10933  006C00  0E2D               	movlw	45
 10934  006C02                     u4661:
 10935  006C02  CFDB FFE3          	movff	plusw2,plusw1
 10936  006C06  06E8               	decf	wreg,f,c
 10937  006C08  E2FC               	bc	u4661
 10938                           
 10939                           ; BSR set to: 0
 10940                           ;master/operation_CES.c: 22:         for (i = 0; i < 8; i++)
 10941  006C0A  0E00               	movlw	0
 10942  006C0C  6F91               	movwf	(turn_CE@i+1)& (0+255),b
 10943  006C0E  0E00               	movlw	0
 10944  006C10  6F90               	movwf	turn_CE@i& (0+255),b
 10945  006C12                     l7426:
 10946                           
 10947                           ; BSR set to: 0
 10948                           ;master/operation_CES.c: 23:         {;master/operation_CES.c: 24:             state_CE.
      +                          cp[i] = past.cp[change->DATA->cp[i]];
 10949  006C12  C029  FFF6         	movff	turn_CE@change,tblptrl
 10950  006C16  C02A  FFF7         	movff	turn_CE@change+1,tblptrh
 10951  006C1A                     	if	0	;tblptru may be non-zero
 10952  006C1A                     	endif
 10953  006C1A                     	if	0	;tblptru may be non-zero
 10954  006C1A                     	endif
 10955  006C1A  0009               	tblrd		*+
 10956  006C1C  CFF5 F02B          	movff	tablat,??_turn_CE
 10957  006C20  0009               	tblrd		*+
 10958  006C22  CFF5 F02C          	movff	tablat,??_turn_CE+1
 10959  006C26  5190               	movf	turn_CE@i& (0+255),w,b
 10960  006C28  262B               	addwf	??_turn_CE,f,c
 10961  006C2A  5191               	movf	(turn_CE@i+1)& (0+255),w,b
 10962  006C2C  222C               	addwfc	??_turn_CE+1,f,c
 10963  006C2E  C02B  FFF6         	movff	??_turn_CE,tblptrl
 10964  006C32  C02C  FFF7         	movff	??_turn_CE+1,tblptrh
 10965  006C36  6AF8               	clrf	tblptru,c
 10966  006C38  0E05               	movlw	(high __ramtop+-1)
 10967  006C3A  64F7               	cpfsgt	tblptrh,c
 10968  006C3C  D003               	bra	u4677
 10969  006C3E  0008               	tblrd		*
 10970  006C40  50F5               	movf	tablat,w,c
 10971  006C42  D005               	bra	u4670
 10972  006C44                     u4677:
 10973  006C44  CFF6 FFE9          	movff	tblptrl,fsr0l
 10974  006C48  CFF7 FFEA          	movff	tblptrh,fsr0h
 10975  006C4C  50EF               	movf	indf0,w,c
 10976  006C4E                     u4670:
 10977  006C4E  6E2D               	movwf	(??_turn_CE+2)& (0+255),c
 10978  006C50  6A2E               	clrf	(??_turn_CE+3)& (0+255),c
 10979  006C52  0E62               	movlw	low turn_CE@past
 10980  006C54  242D               	addwf	??_turn_CE+2,w,c
 10981  006C56  6ED9               	movwf	fsr2l,c
 10982  006C58  0E00               	movlw	high turn_CE@past
 10983  006C5A  202E               	addwfc	??_turn_CE+3,w,c
 10984  006C5C  6EDA               	movwf	fsr2h,c
 10985  006C5E  0E90               	movlw	low _state_CE
 10986  006C60  0100               	movlb	0	; () banked
 10987  006C62  2590               	addwf	turn_CE@i& (0+255),w,b
 10988  006C64  6EE1               	movwf	fsr1l,c
 10989  006C66  0E01               	movlw	high _state_CE
 10990  006C68  2191               	addwfc	(turn_CE@i+1)& (0+255),w,b
 10991  006C6A  6EE2               	movwf	fsr1h,c
 10992  006C6C  CFDF FFE7          	movff	indf2,indf1
 10993                           
 10994                           ; BSR set to: 0
 10995                           ;master/operation_CES.c: 25:             state_CE.co[i] = (past.co[change->DATA->cp[i]] 
      +                          + change->DATA->co[i]) % 3;
 10996  006C70  0E98               	movlw	low (_state_CE+8)
 10997  006C72  2590               	addwf	turn_CE@i& (0+255),w,b
 10998  006C74  6ED9               	movwf	fsr2l,c
 10999  006C76  0E01               	movlw	high (_state_CE+8)
 11000  006C78  2191               	addwfc	(turn_CE@i+1)& (0+255),w,b
 11001  006C7A  6EDA               	movwf	fsr2h,c
 11002  006C7C  C029  FFF6         	movff	turn_CE@change,tblptrl
 11003  006C80  C02A  FFF7         	movff	turn_CE@change+1,tblptrh
 11004  006C84                     	if	0	;tblptru may be non-zero
 11005  006C84                     	endif
 11006  006C84                     	if	0	;tblptru may be non-zero
 11007  006C84                     	endif
 11008  006C84  0009               	tblrd		*+
 11009  006C86  CFF5 F02B          	movff	tablat,??_turn_CE
 11010  006C8A  0009               	tblrd		*+
 11011  006C8C  CFF5 F02C          	movff	tablat,??_turn_CE+1
 11012  006C90  5190               	movf	turn_CE@i& (0+255),w,b
 11013  006C92  262B               	addwf	??_turn_CE,f,c
 11014  006C94  5191               	movf	(turn_CE@i+1)& (0+255),w,b
 11015  006C96  222C               	addwfc	??_turn_CE+1,f,c
 11016  006C98  0E08               	movlw	8
 11017  006C9A  262B               	addwf	??_turn_CE,f,c
 11018  006C9C  0E00               	movlw	0
 11019  006C9E  222C               	addwfc	??_turn_CE+1,f,c
 11020  006CA0  C02B  FFF6         	movff	??_turn_CE,tblptrl
 11021  006CA4  C02C  FFF7         	movff	??_turn_CE+1,tblptrh
 11022  006CA8  6AF8               	clrf	tblptru,c
 11023  006CAA  0E05               	movlw	(high __ramtop+-1)
 11024  006CAC  64F7               	cpfsgt	tblptrh,c
 11025  006CAE  D003               	bra	u4687
 11026  006CB0  0008               	tblrd		*
 11027  006CB2  50F5               	movf	tablat,w,c
 11028  006CB4  D005               	bra	u4680
 11029  006CB6                     u4687:
 11030  006CB6  CFF6 FFE9          	movff	tblptrl,fsr0l
 11031  006CBA  CFF7 FFEA          	movff	tblptrh,fsr0h
 11032  006CBE  50EF               	movf	indf0,w,c
 11033  006CC0                     u4680:
 11034  006CC0  6E2D               	movwf	(??_turn_CE+2)& (0+255),c
 11035  006CC2  C029  FFF6         	movff	turn_CE@change,tblptrl
 11036  006CC6  C02A  FFF7         	movff	turn_CE@change+1,tblptrh
 11037  006CCA                     	if	0	;tblptru may be non-zero
 11038  006CCA                     	endif
 11039  006CCA                     	if	0	;tblptru may be non-zero
 11040  006CCA                     	endif
 11041  006CCA  0009               	tblrd		*+
 11042  006CCC  CFF5 F02E          	movff	tablat,??_turn_CE+3
 11043  006CD0  0009               	tblrd		*+
 11044  006CD2  CFF5 F02F          	movff	tablat,??_turn_CE+4
 11045  006CD6  0100               	movlb	0	; () banked
 11046  006CD8  5190               	movf	turn_CE@i& (0+255),w,b
 11047  006CDA  262E               	addwf	??_turn_CE+3,f,c
 11048  006CDC  5191               	movf	(turn_CE@i+1)& (0+255),w,b
 11049  006CDE  222F               	addwfc	??_turn_CE+4,f,c
 11050  006CE0  C02E  FFF6         	movff	??_turn_CE+3,tblptrl
 11051  006CE4  C02F  FFF7         	movff	??_turn_CE+4,tblptrh
 11052  006CE8  6AF8               	clrf	tblptru,c
 11053  006CEA  0E05               	movlw	(high __ramtop+-1)
 11054  006CEC  64F7               	cpfsgt	tblptrh,c
 11055  006CEE  D003               	bra	u4697
 11056  006CF0  0008               	tblrd		*
 11057  006CF2  50F5               	movf	tablat,w,c
 11058  006CF4  D005               	bra	u4690
 11059  006CF6                     u4697:
 11060  006CF6  CFF6 FFE9          	movff	tblptrl,fsr0l
 11061  006CFA  CFF7 FFEA          	movff	tblptrh,fsr0h
 11062  006CFE  50EF               	movf	indf0,w,c
 11063  006D00                     u4690:
 11064  006D00  6E30               	movwf	(??_turn_CE+5)& (0+255),c
 11065  006D02  6A31               	clrf	(??_turn_CE+6)& (0+255),c
 11066  006D04  0E08               	movlw	8
 11067  006D06  2630               	addwf	??_turn_CE+5,f,c
 11068  006D08  0E00               	movlw	0
 11069  006D0A  2231               	addwfc	??_turn_CE+6,f,c
 11070  006D0C  0E62               	movlw	low turn_CE@past
 11071  006D0E  2430               	addwf	??_turn_CE+5,w,c
 11072  006D10  6EE1               	movwf	fsr1l,c
 11073  006D12  0E00               	movlw	high turn_CE@past
 11074  006D14  2031               	addwfc	??_turn_CE+6,w,c
 11075  006D16  6EE2               	movwf	fsr1h,c
 11076  006D18  50E7               	movf	indf1,w,c
 11077  006D1A  6E32               	movwf	(??_turn_CE+7)& (0+255),c
 11078  006D1C  5032               	movf	??_turn_CE+7,w,c
 11079  006D1E  242D               	addwf	??_turn_CE+2,w,c
 11080  006D20  6E23               	movwf	___awmod@dividend,c
 11081  006D22  6A24               	clrf	___awmod@dividend+1,c
 11082  006D24  3624               	rlcf	___awmod@dividend+1,f,c
 11083  006D26  0E00               	movlw	0
 11084  006D28  6E26               	movwf	___awmod@divisor+1,c
 11085  006D2A  0E03               	movlw	3
 11086  006D2C  6E25               	movwf	___awmod@divisor,c
 11087  006D2E  EC77  F01A         	call	___awmod	;wreg free
 11088  006D32  5023               	movf	?___awmod,w,c
 11089  006D34  6EDF               	movwf	indf2,c
 11090                           
 11091                           ;master/operation_CES.c: 26:         }
 11092  006D36  0100               	movlb	0	; () banked
 11093  006D38  4B90               	infsnz	turn_CE@i& (0+255),f,b
 11094  006D3A  2B91               	incf	(turn_CE@i+1)& (0+255),f,b
 11095                           
 11096                           ; BSR set to: 0
 11097  006D3C  BF91               	btfsc	(turn_CE@i+1)& (0+255),7,b
 11098  006D3E  D769               	goto	l7426
 11099  006D40  5191               	movf	(turn_CE@i+1)& (0+255),w,b
 11100  006D42  E104               	bnz	u4700
 11101  006D44  0E08               	movlw	8
 11102  006D46  5D90               	subwf	turn_CE@i& (0+255),w,b
 11103  006D48  A0D8               	btfss	status,0,c
 11104  006D4A  D763               	goto	l7426
 11105  006D4C                     u4700:
 11106                           
 11107                           ; BSR set to: 0
 11108                           ;master/operation_CES.c: 27:         for (i = 0; i < 12; i++)
 11109  006D4C  0E00               	movlw	0
 11110  006D4E  6F91               	movwf	(turn_CE@i+1)& (0+255),b
 11111  006D50  0E00               	movlw	0
 11112  006D52  6F90               	movwf	turn_CE@i& (0+255),b
 11113  006D54                     l7440:
 11114                           
 11115                           ; BSR set to: 0
 11116                           ;master/operation_CES.c: 28:         {;master/operation_CES.c: 29:             state_CE.
      +                          ep[i] = past.ep[change->DATA->ep[i]];
 11117  006D54  C029  FFF6         	movff	turn_CE@change,tblptrl
 11118  006D58  C02A  FFF7         	movff	turn_CE@change+1,tblptrh
 11119  006D5C                     	if	0	;tblptru may be non-zero
 11120  006D5C                     	endif
 11121  006D5C                     	if	0	;tblptru may be non-zero
 11122  006D5C                     	endif
 11123  006D5C  0009               	tblrd		*+
 11124  006D5E  CFF5 F02B          	movff	tablat,??_turn_CE
 11125  006D62  0009               	tblrd		*+
 11126  006D64  CFF5 F02C          	movff	tablat,??_turn_CE+1
 11127  006D68  5190               	movf	turn_CE@i& (0+255),w,b
 11128  006D6A  262B               	addwf	??_turn_CE,f,c
 11129  006D6C  5191               	movf	(turn_CE@i+1)& (0+255),w,b
 11130  006D6E  222C               	addwfc	??_turn_CE+1,f,c
 11131  006D70  0E10               	movlw	16
 11132  006D72  262B               	addwf	??_turn_CE,f,c
 11133  006D74  0E00               	movlw	0
 11134  006D76  222C               	addwfc	??_turn_CE+1,f,c
 11135  006D78  C02B  FFF6         	movff	??_turn_CE,tblptrl
 11136  006D7C  C02C  FFF7         	movff	??_turn_CE+1,tblptrh
 11137  006D80  6AF8               	clrf	tblptru,c
 11138  006D82  0E05               	movlw	(high __ramtop+-1)
 11139  006D84  64F7               	cpfsgt	tblptrh,c
 11140  006D86  D003               	bra	u4717
 11141  006D88  0008               	tblrd		*
 11142  006D8A  50F5               	movf	tablat,w,c
 11143  006D8C  D005               	bra	u4710
 11144  006D8E                     u4717:
 11145  006D8E  CFF6 FFE9          	movff	tblptrl,fsr0l
 11146  006D92  CFF7 FFEA          	movff	tblptrh,fsr0h
 11147  006D96  50EF               	movf	indf0,w,c
 11148  006D98                     u4710:
 11149  006D98  6E2D               	movwf	(??_turn_CE+2)& (0+255),c
 11150  006D9A  6A2E               	clrf	(??_turn_CE+3)& (0+255),c
 11151  006D9C  0E10               	movlw	16
 11152  006D9E  262D               	addwf	??_turn_CE+2,f,c
 11153  006DA0  0E00               	movlw	0
 11154  006DA2  222E               	addwfc	??_turn_CE+3,f,c
 11155  006DA4  0E62               	movlw	low turn_CE@past
 11156  006DA6  242D               	addwf	??_turn_CE+2,w,c
 11157  006DA8  6ED9               	movwf	fsr2l,c
 11158  006DAA  0E00               	movlw	high turn_CE@past
 11159  006DAC  202E               	addwfc	??_turn_CE+3,w,c
 11160  006DAE  6EDA               	movwf	fsr2h,c
 11161  006DB0  0EA0               	movlw	low (_state_CE+16)
 11162  006DB2  0100               	movlb	0	; () banked
 11163  006DB4  2590               	addwf	turn_CE@i& (0+255),w,b
 11164  006DB6  6EE1               	movwf	fsr1l,c
 11165  006DB8  0E01               	movlw	high (_state_CE+16)
 11166  006DBA  2191               	addwfc	(turn_CE@i+1)& (0+255),w,b
 11167  006DBC  6EE2               	movwf	fsr1h,c
 11168  006DBE  CFDF FFE7          	movff	indf2,indf1
 11169                           
 11170                           ;master/operation_CES.c: 30:             state_CE.eo[i] = (past.eo[change->DATA->ep[i]] 
      +                          + change->DATA->eo[i]) % 2;
 11171  006DC2  0EAC               	movlw	low (_state_CE+28)
 11172  006DC4  2590               	addwf	turn_CE@i& (0+255),w,b
 11173  006DC6  6ED9               	movwf	fsr2l,c
 11174  006DC8  0E01               	movlw	high (_state_CE+28)
 11175  006DCA  2191               	addwfc	(turn_CE@i+1)& (0+255),w,b
 11176  006DCC  6EDA               	movwf	fsr2h,c
 11177  006DCE  C029  FFF6         	movff	turn_CE@change,tblptrl
 11178  006DD2  C02A  FFF7         	movff	turn_CE@change+1,tblptrh
 11179  006DD6                     	if	0	;tblptru may be non-zero
 11180  006DD6                     	endif
 11181  006DD6                     	if	0	;tblptru may be non-zero
 11182  006DD6                     	endif
 11183  006DD6  0009               	tblrd		*+
 11184  006DD8  CFF5 F02B          	movff	tablat,??_turn_CE
 11185  006DDC  0009               	tblrd		*+
 11186  006DDE  CFF5 F02C          	movff	tablat,??_turn_CE+1
 11187  006DE2  5190               	movf	turn_CE@i& (0+255),w,b
 11188  006DE4  262B               	addwf	??_turn_CE,f,c
 11189  006DE6  5191               	movf	(turn_CE@i+1)& (0+255),w,b
 11190  006DE8  222C               	addwfc	??_turn_CE+1,f,c
 11191  006DEA  0E1C               	movlw	28
 11192  006DEC  262B               	addwf	??_turn_CE,f,c
 11193  006DEE  0E00               	movlw	0
 11194  006DF0  222C               	addwfc	??_turn_CE+1,f,c
 11195  006DF2  C02B  FFF6         	movff	??_turn_CE,tblptrl
 11196  006DF6  C02C  FFF7         	movff	??_turn_CE+1,tblptrh
 11197  006DFA  6AF8               	clrf	tblptru,c
 11198  006DFC  0E05               	movlw	(high __ramtop+-1)
 11199  006DFE  64F7               	cpfsgt	tblptrh,c
 11200  006E00  D003               	bra	u4727
 11201  006E02  0008               	tblrd		*
 11202  006E04  50F5               	movf	tablat,w,c
 11203  006E06  D005               	bra	u4720
 11204  006E08                     u4727:
 11205  006E08  CFF6 FFE9          	movff	tblptrl,fsr0l
 11206  006E0C  CFF7 FFEA          	movff	tblptrh,fsr0h
 11207  006E10  50EF               	movf	indf0,w,c
 11208  006E12                     u4720:
 11209  006E12  6E2D               	movwf	(??_turn_CE+2)& (0+255),c
 11210  006E14  C029  FFF6         	movff	turn_CE@change,tblptrl
 11211  006E18  C02A  FFF7         	movff	turn_CE@change+1,tblptrh
 11212  006E1C                     	if	0	;tblptru may be non-zero
 11213  006E1C                     	endif
 11214  006E1C                     	if	0	;tblptru may be non-zero
 11215  006E1C                     	endif
 11216  006E1C  0009               	tblrd		*+
 11217  006E1E  CFF5 F02E          	movff	tablat,??_turn_CE+3
 11218  006E22  0009               	tblrd		*+
 11219  006E24  CFF5 F02F          	movff	tablat,??_turn_CE+4
 11220  006E28  0100               	movlb	0	; () banked
 11221  006E2A  5190               	movf	turn_CE@i& (0+255),w,b
 11222  006E2C  262E               	addwf	??_turn_CE+3,f,c
 11223  006E2E  5191               	movf	(turn_CE@i+1)& (0+255),w,b
 11224  006E30  222F               	addwfc	??_turn_CE+4,f,c
 11225  006E32  0E10               	movlw	16
 11226  006E34  262E               	addwf	??_turn_CE+3,f,c
 11227  006E36  0E00               	movlw	0
 11228  006E38  222F               	addwfc	??_turn_CE+4,f,c
 11229  006E3A  C02E  FFF6         	movff	??_turn_CE+3,tblptrl
 11230  006E3E  C02F  FFF7         	movff	??_turn_CE+4,tblptrh
 11231  006E42  6AF8               	clrf	tblptru,c
 11232  006E44  0E05               	movlw	(high __ramtop+-1)
 11233  006E46  64F7               	cpfsgt	tblptrh,c
 11234  006E48  D003               	bra	u4737
 11235  006E4A  0008               	tblrd		*
 11236  006E4C  50F5               	movf	tablat,w,c
 11237  006E4E  D005               	bra	u4730
 11238  006E50                     u4737:
 11239  006E50  CFF6 FFE9          	movff	tblptrl,fsr0l
 11240  006E54  CFF7 FFEA          	movff	tblptrh,fsr0h
 11241  006E58  50EF               	movf	indf0,w,c
 11242  006E5A                     u4730:
 11243  006E5A  6E30               	movwf	(??_turn_CE+5)& (0+255),c
 11244  006E5C  6A31               	clrf	(??_turn_CE+6)& (0+255),c
 11245  006E5E  0E1C               	movlw	28
 11246  006E60  2630               	addwf	??_turn_CE+5,f,c
 11247  006E62  0E00               	movlw	0
 11248  006E64  2231               	addwfc	??_turn_CE+6,f,c
 11249  006E66  0E62               	movlw	low turn_CE@past
 11250  006E68  2430               	addwf	??_turn_CE+5,w,c
 11251  006E6A  6EE1               	movwf	fsr1l,c
 11252  006E6C  0E00               	movlw	high turn_CE@past
 11253  006E6E  2031               	addwfc	??_turn_CE+6,w,c
 11254  006E70  6EE2               	movwf	fsr1h,c
 11255  006E72  50E7               	movf	indf1,w,c
 11256  006E74  242D               	addwf	??_turn_CE+2,w,c
 11257  006E76  0B01               	andlw	1
 11258  006E78  6EDF               	movwf	indf2,c
 11259                           
 11260                           ;master/operation_CES.c: 31:         }
 11261  006E7A  0100               	movlb	0	; () banked
 11262  006E7C  4B90               	infsnz	turn_CE@i& (0+255),f,b
 11263  006E7E  2B91               	incf	(turn_CE@i+1)& (0+255),f,b
 11264                           
 11265                           ; BSR set to: 0
 11266  006E80  BF91               	btfsc	(turn_CE@i+1)& (0+255),7,b
 11267  006E82  D768               	goto	l7440
 11268  006E84  5191               	movf	(turn_CE@i+1)& (0+255),w,b
 11269  006E86  E104               	bnz	u4740
 11270  006E88  0E0C               	movlw	12
 11271  006E8A  5D90               	subwf	turn_CE@i& (0+255),w,b
 11272  006E8C  A0D8               	btfss	status,0,c
 11273  006E8E  D762               	goto	l7440
 11274  006E90                     u4740:
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;master/operation_CES.c: 32:         for (i = 0; i < 6; i++)
 11278  006E90  0E00               	movlw	0
 11279  006E92  6F91               	movwf	(turn_CE@i+1)& (0+255),b
 11280  006E94  0E00               	movlw	0
 11281  006E96  6F90               	movwf	turn_CE@i& (0+255),b
 11282  006E98                     l7452:
 11283                           
 11284                           ; BSR set to: 0
 11285                           ;master/operation_CES.c: 33:         {;master/operation_CES.c: 34:             state_CE.
      +                          sp[i] = past.sp[change->DATA->sp[i]];
 11286  006E98  C029  FFF6         	movff	turn_CE@change,tblptrl
 11287  006E9C  C02A  FFF7         	movff	turn_CE@change+1,tblptrh
 11288  006EA0                     	if	0	;tblptru may be non-zero
 11289  006EA0                     	endif
 11290  006EA0                     	if	0	;tblptru may be non-zero
 11291  006EA0                     	endif
 11292  006EA0  0009               	tblrd		*+
 11293  006EA2  CFF5 F02B          	movff	tablat,??_turn_CE
 11294  006EA6  0009               	tblrd		*+
 11295  006EA8  CFF5 F02C          	movff	tablat,??_turn_CE+1
 11296  006EAC  5190               	movf	turn_CE@i& (0+255),w,b
 11297  006EAE  262B               	addwf	??_turn_CE,f,c
 11298  006EB0  5191               	movf	(turn_CE@i+1)& (0+255),w,b
 11299  006EB2  222C               	addwfc	??_turn_CE+1,f,c
 11300  006EB4  0E28               	movlw	40
 11301  006EB6  262B               	addwf	??_turn_CE,f,c
 11302  006EB8  0E00               	movlw	0
 11303  006EBA  222C               	addwfc	??_turn_CE+1,f,c
 11304  006EBC  C02B  FFF6         	movff	??_turn_CE,tblptrl
 11305  006EC0  C02C  FFF7         	movff	??_turn_CE+1,tblptrh
 11306  006EC4  6AF8               	clrf	tblptru,c
 11307  006EC6  0E05               	movlw	(high __ramtop+-1)
 11308  006EC8  64F7               	cpfsgt	tblptrh,c
 11309  006ECA  D003               	bra	u4757
 11310  006ECC  0008               	tblrd		*
 11311  006ECE  50F5               	movf	tablat,w,c
 11312  006ED0  D005               	bra	u4750
 11313  006ED2                     u4757:
 11314  006ED2  CFF6 FFE9          	movff	tblptrl,fsr0l
 11315  006ED6  CFF7 FFEA          	movff	tblptrh,fsr0h
 11316  006EDA  50EF               	movf	indf0,w,c
 11317  006EDC                     u4750:
 11318  006EDC  6E2D               	movwf	(??_turn_CE+2)& (0+255),c
 11319  006EDE  6A2E               	clrf	(??_turn_CE+3)& (0+255),c
 11320  006EE0  0E28               	movlw	40
 11321  006EE2  262D               	addwf	??_turn_CE+2,f,c
 11322  006EE4  0E00               	movlw	0
 11323  006EE6  222E               	addwfc	??_turn_CE+3,f,c
 11324  006EE8  0E62               	movlw	low turn_CE@past
 11325  006EEA  242D               	addwf	??_turn_CE+2,w,c
 11326  006EEC  6ED9               	movwf	fsr2l,c
 11327  006EEE  0E00               	movlw	high turn_CE@past
 11328  006EF0  202E               	addwfc	??_turn_CE+3,w,c
 11329  006EF2  6EDA               	movwf	fsr2h,c
 11330  006EF4  0EB8               	movlw	low (_state_CE+40)
 11331  006EF6  0100               	movlb	0	; () banked
 11332  006EF8  2590               	addwf	turn_CE@i& (0+255),w,b
 11333  006EFA  6EE1               	movwf	fsr1l,c
 11334  006EFC  0E01               	movlw	high (_state_CE+40)
 11335  006EFE  2191               	addwfc	(turn_CE@i+1)& (0+255),w,b
 11336  006F00  6EE2               	movwf	fsr1h,c
 11337  006F02  CFDF FFE7          	movff	indf2,indf1
 11338                           
 11339                           ; BSR set to: 0
 11340                           ;master/operation_CES.c: 35:         }
 11341  006F06  4B90               	infsnz	turn_CE@i& (0+255),f,b
 11342  006F08  2B91               	incf	(turn_CE@i+1)& (0+255),f,b
 11343                           
 11344                           ; BSR set to: 0
 11345  006F0A  BF91               	btfsc	(turn_CE@i+1)& (0+255),7,b
 11346  006F0C  D7C5               	goto	l7452
 11347  006F0E  5191               	movf	(turn_CE@i+1)& (0+255),w,b
 11348  006F10  E104               	bnz	u4760
 11349  006F12  0E06               	movlw	6
 11350  006F14  5D90               	subwf	turn_CE@i& (0+255),w,b
 11351  006F16  A0D8               	btfss	status,0,c
 11352  006F18  D7BF               	goto	l7452
 11353  006F1A                     u4760:
 11354                           
 11355                           ; BSR set to: 0
 11356                           ;master/operation_CES.c: 36:     }
 11357  006F1A  4B60               	infsnz	turn_CE@j& (0+255),f,b
 11358  006F1C  2B61               	incf	(turn_CE@j+1)& (0+255),f,b
 11359  006F1E                     l7460:
 11360                           
 11361                           ; BSR set to: 0
 11362  006F1E  0E04               	movlw	4
 11363  006F20  2429               	addwf	turn_CE@change,w,c
 11364  006F22  6E2B               	movwf	??_turn_CE& (0+255),c
 11365  006F24  0E00               	movlw	0
 11366  006F26  202A               	addwfc	turn_CE@change+1,w,c
 11367  006F28  6E2C               	movwf	(??_turn_CE+1)& (0+255),c
 11368  006F2A  C02B  FFF6         	movff	??_turn_CE,tblptrl
 11369  006F2E  C02C  FFF7         	movff	??_turn_CE+1,tblptrh
 11370  006F32                     	if	0	;tblptru may be non-zero
 11371  006F32                     	endif
 11372  006F32                     	if	0	;tblptru may be non-zero
 11373  006F32                     	endif
 11374  006F32  0008               	tblrd		*
 11375  006F34  50F5               	movf	tablat,w,c
 11376  006F36  6E2D               	movwf	(??_turn_CE+2)& (0+255),c
 11377  006F38  6A2E               	clrf	(??_turn_CE+3)& (0+255),c
 11378  006F3A  502D               	movf	??_turn_CE+2,w,c
 11379  006F3C  5D60               	subwf	turn_CE@j& (0+255),w,b
 11380  006F3E  5161               	movf	(turn_CE@j+1)& (0+255),w,b
 11381  006F40  0A80               	xorlw	128
 11382  006F42  6E2F               	movwf	(??_turn_CE+4)& (0+255),c
 11383  006F44  502E               	movf	??_turn_CE+3,w,c
 11384  006F46  0A80               	xorlw	128
 11385  006F48  582F               	subwfb	(??_turn_CE+4)& (0+255),w,c
 11386  006F4A  B0D8               	btfsc	status,0,c
 11387  006F4C  0012               	return	
 11388  006F4E  D654               	goto	l7418
 11389  006F50                     __end_of_turn_CE:
 11390                           	opt callstack 0
 11391                           
 11392 ;; *************** function _command_turn_ARRAY_3_end *****************
 11393 ;; Defined at:
 11394 ;;		line 128 in file "master/animation.c"
 11395 ;; Parameters:    Size  Location     Type
 11396 ;;		None
 11397 ;; Auto vars:     Size  Location     Type
 11398 ;;  s2              3   90[COMRAM] unsigned char [3]
 11399 ;; Return value:  Size  Location     Type
 11400 ;;                  1    wreg      void 
 11401 ;; Registers used:
 11402 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 11403 ;; Tracked objects:
 11404 ;;		On entry : 0/0
 11405 ;;		On exit  : 0/0
 11406 ;;		Unchanged: 0/0
 11407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11408 ;;      Params:         0       0       0       0       0       0       0
 11409 ;;      Locals:         3       0       0       0       0       0       0
 11410 ;;      Temps:          4       0       0       0       0       0       0
 11411 ;;      Totals:         7       0       0       0       0       0       0
 11412 ;;Total ram usage:        7 bytes
 11413 ;; Hardware stack levels used:    1
 11414 ;; Hardware stack levels required when called:    5
 11415 ;; This function calls:
 11416 ;;		_OUT_LED_ARRAY
 11417 ;;		_command_turn_ARRAY_2_2
 11418 ;;		_command_turn_ARRAY_2_3
 11419 ;;		_convert_ROTtoLED
 11420 ;;		_set_CES
 11421 ;;		_str_cmp_const
 11422 ;; This function is called by:
 11423 ;;		_made_cube
 11424 ;;		_if_perfect_white
 11425 ;;		_if_no_pair
 11426 ;;		_make_perfect_white
 11427 ;;		_command_turn_ARRAY_3
 11428 ;; This function uses a non-reentrant model
 11429 ;;
 11430                           
 11431                           	psect	text44
 11432  00605A                     __ptext44:
 11433                           	opt callstack 0
 11434  00605A                     _command_turn_ARRAY_3_end:
 11435                           	opt callstack 21
 11436                           
 11437                           ;master/animation.c: 129:     char s2[3] = {'\0', '\0', '\0'};
 11438                           
 11439                           ; BSR set to: 0
 11440                           ;incstack = 0
 11441  00605A  0E00               	movlw	0
 11442  00605C  6E5B               	movwf	command_turn_ARRAY_3_end@s2,c
 11443  00605E  0E00               	movlw	0
 11444  006060  6E5C               	movwf	command_turn_ARRAY_3_end@s2+1,c
 11445  006062  0E00               	movlw	0
 11446  006064  6E5D               	movwf	command_turn_ARRAY_3_end@s2+2,c
 11447                           
 11448                           ;master/animation.c: 131:     const char s2_2[3] = {'\0', '2', '\''};;master/animation.c
      +                          : 132:     if (past_command_3 == 0) {
 11449  006066  0100               	movlb	0	; () banked
 11450  006068  51F2               	movf	_past_command_3& (0+255),w,b
 11451  00606A  A4D8               	btfss	status,2,c
 11452  00606C  D011               	goto	l7602
 11453  00606E                     u4970:
 11454                           
 11455                           ; BSR set to: 0
 11456                           ;master/animation.c: 133:         past_command_3 = 0;
 11457  00606E  0E00               	movlw	0
 11458  006070  6FF2               	movwf	_past_command_3& (0+255),b
 11459                           
 11460                           ;master/animation.c: 134:         past_command_count_3 = 0;
 11461  006072  0E00               	movlw	0
 11462  006074  6FF1               	movwf	_past_command_count_3& (0+255),b
 11463  006076                     l7594:
 11464                           
 11465                           ;master/animation.c: 135:         set_CES();
 11466  006076  ECFB  F013         	call	_set_CES	;wreg free
 11467                           
 11468                           ;master/animation.c: 136:         convert_ROTtoLED();
 11469  00607A  EC00  F01C         	call	_convert_ROTtoLED	;wreg free
 11470                           
 11471                           ;master/animation.c: 137:         OUT_LED_ARRAY(LED_ARRAY, POWER);
 11472  00607E  0E07               	movlw	low _LED_ARRAY
 11473  006080  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
 11474  006082  0E01               	movlw	high _LED_ARRAY
 11475  006084  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
 11476  006086  C0F0  F009         	movff	_POWER,OUT_LED_ARRAY@LED_POWER
 11477  00608A  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
 11478  00608E  0012               	return	
 11479  006090                     l7602:
 11480                           
 11481                           ; BSR set to: 0
 11482                           ;master/animation.c: 141:     past_command_count_3 %= 4;
 11483  006090  0E03               	movlw	3
 11484  006092  17F1               	andwf	_past_command_count_3& (0+255),f,b
 11485                           
 11486                           ; BSR set to: 0
 11487                           ;master/animation.c: 142:     if (past_command_count_3 == 0) {
 11488  006094  51F1               	movf	_past_command_count_3& (0+255),w,b
 11489  006096  B4D8               	btfsc	status,2,c
 11490  006098  D7EA               	goto	u4970
 11491                           
 11492                           ; BSR set to: 0
 11493                           ;master/animation.c: 151:     s2[1] = s2_2[past_command_count_3 - 1];
 11494  00609A  0EFF               	movlw	255
 11495  00609C  6E57               	movwf	??_command_turn_ARRAY_3_end& (0+255),c
 11496  00609E  0EFF               	movlw	255
 11497  0060A0  6E58               	movwf	(??_command_turn_ARRAY_3_end+1)& (0+255),c
 11498  0060A2  51F1               	movf	_past_command_count_3& (0+255),w,b
 11499  0060A4  6E59               	movwf	(??_command_turn_ARRAY_3_end+2)& (0+255),c
 11500  0060A6  6A5A               	clrf	(??_command_turn_ARRAY_3_end+3)& (0+255),c
 11501  0060A8  5057               	movf	??_command_turn_ARRAY_3_end,w,c
 11502  0060AA  2659               	addwf	??_command_turn_ARRAY_3_end+2,f,c
 11503  0060AC  5058               	movf	??_command_turn_ARRAY_3_end+1,w,c
 11504  0060AE  225A               	addwfc	??_command_turn_ARRAY_3_end+3,f,c
 11505  0060B0  0E8E               	movlw	low command_turn_ARRAY_3_end@s2_2
 11506  0060B2  2459               	addwf	??_command_turn_ARRAY_3_end+2,w,c
 11507  0060B4  6EF6               	movwf	tblptrl,c
 11508  0060B6  0E7A               	movlw	high command_turn_ARRAY_3_end@s2_2
 11509  0060B8  205A               	addwfc	??_command_turn_ARRAY_3_end+3,w,c
 11510  0060BA  6EF7               	movwf	tblptrh,c
 11511  0060BC                     	if	0	;There are less than 3 active tblptr bytes
 11512  0060BC                     	endif
 11513  0060BC  0008               	tblrd		*
 11514  0060BE  CFF5 F05C          	movff	tablat,command_turn_ARRAY_3_end@s2+1
 11515                           
 11516                           ; BSR set to: 0
 11517                           ;master/animation.c: 152:     s2[0] = past_command_3;
 11518  0060C2  C0F2  F05B         	movff	_past_command_3,command_turn_ARRAY_3_end@s2
 11519                           
 11520                           ; BSR set to: 0
 11521                           ;master/animation.c: 153:     past_command_3 = 0;
 11522  0060C6  0E00               	movlw	0
 11523  0060C8  6FF2               	movwf	_past_command_3& (0+255),b
 11524                           
 11525                           ; BSR set to: 0
 11526                           ;master/animation.c: 154:     past_command_count_3 = 0;
 11527  0060CA  0E00               	movlw	0
 11528  0060CC  6FF1               	movwf	_past_command_count_3& (0+255),b
 11529                           
 11530                           ;master/animation.c: 159:     switch (s2[0]) {
 11531  0060CE  D0FF               	goto	l7680
 11532  0060D0                     l7624:
 11533                           
 11534                           ; BSR set to: 0
 11535                           ;master/animation.c: 161:             if (str_cmp_const(s2, "Z") == 0) {
 11536  0060D0  0E5B               	movlw	low command_turn_ARRAY_3_end@s2
 11537  0060D2  6E07               	movwf	str_cmp_const@p1,c
 11538  0060D4  0E00               	movlw	high command_turn_ARRAY_3_end@s2
 11539  0060D6  6E08               	movwf	str_cmp_const@p1+1,c
 11540  0060D8  0EFC               	movlw	low STR_32
 11541  0060DA  6E09               	movwf	str_cmp_const@p2,c
 11542  0060DC  0E7F               	movlw	high STR_32
 11543  0060DE  6E0A               	movwf	str_cmp_const@p2+1,c
 11544  0060E0  EC96  F01D         	call	_str_cmp_const	;wreg free
 11545  0060E4  0900               	iorlw	0
 11546  0060E6  A4D8               	btfss	status,2,c
 11547  0060E8  D00F               	goto	l7628
 11548                           
 11549                           ;master/animation.c: 162:                 command_turn_ARRAY_2_3("F", "S", "B'");
 11550  0060EA  0EEC               	movlw	low STR_7
 11551  0060EC  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
 11552  0060EE  0E7F               	movlw	high STR_7
 11553  0060F0  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
 11554  0060F2  0EF4               	movlw	low STR_22
 11555  0060F4  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
 11556  0060F6  0E7F               	movlw	high STR_22
 11557  0060F8  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
 11558  0060FA  0E9E               	movlw	low STR_14
 11559  0060FC  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
 11560  0060FE  0E7F               	movlw	high STR_14
 11561  006100  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
 11562  006102  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
 11563                           
 11564                           ;master/animation.c: 163:             } else if (str_cmp_const(s2, "Z'") == 0) {
 11565  006106  D7B7               	goto	l7594
 11566  006108                     l7628:
 11567  006108  0E5B               	movlw	low command_turn_ARRAY_3_end@s2
 11568  00610A  6E07               	movwf	str_cmp_const@p1,c
 11569  00610C  0E00               	movlw	high command_turn_ARRAY_3_end@s2
 11570  00610E  6E08               	movwf	str_cmp_const@p1+1,c
 11571  006110  0EBF               	movlw	low STR_35
 11572  006112  6E09               	movwf	str_cmp_const@p2,c
 11573  006114  0E7F               	movlw	high STR_35
 11574  006116  6E0A               	movwf	str_cmp_const@p2+1,c
 11575  006118  EC96  F01D         	call	_str_cmp_const	;wreg free
 11576  00611C  0900               	iorlw	0
 11577  00611E  A4D8               	btfss	status,2,c
 11578  006120  D00F               	goto	l7632
 11579                           
 11580                           ;master/animation.c: 164:                 command_turn_ARRAY_2_3("F'", "S'", "B");
 11581  006122  0EA7               	movlw	low STR_13
 11582  006124  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
 11583  006126  0E7F               	movlw	high STR_13
 11584  006128  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
 11585  00612A  0EB3               	movlw	low STR_28
 11586  00612C  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
 11587  00612E  0E7F               	movlw	high STR_28
 11588  006130  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
 11589  006132  0EE6               	movlw	low STR_8
 11590  006134  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
 11591  006136  0E7F               	movlw	high STR_8
 11592  006138  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
 11593  00613A  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
 11594                           
 11595                           ;master/animation.c: 165:             } else {
 11596  00613E  D79B               	goto	l7594
 11597  006140                     l7632:
 11598                           
 11599                           ;master/animation.c: 166:                 command_turn_ARRAY_2_3("F", "S", "B'");
 11600  006140  0EEC               	movlw	low STR_7
 11601  006142  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
 11602  006144  0E7F               	movlw	high STR_7
 11603  006146  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
 11604  006148  0EF4               	movlw	low STR_22
 11605  00614A  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
 11606  00614C  0E7F               	movlw	high STR_22
 11607  00614E  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
 11608  006150  0E9E               	movlw	low STR_14
 11609  006152  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
 11610  006154  0E7F               	movlw	high STR_14
 11611  006156  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
 11612  006158  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
 11613                           
 11614                           ;master/animation.c: 167:                 command_turn_ARRAY_2_3("F", "S", "B'");
 11615  00615C  0EEC               	movlw	low STR_7
 11616  00615E  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
 11617  006160  0E7F               	movlw	high STR_7
 11618  006162  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
 11619  006164  0EF4               	movlw	low STR_22
 11620  006166  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
 11621  006168  0E7F               	movlw	high STR_22
 11622  00616A  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
 11623  00616C  0E9E               	movlw	low STR_14
 11624  00616E  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
 11625  006170  0E7F               	movlw	high STR_14
 11626  006172  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
 11627  006174  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
 11628  006178  D77E               	goto	l7594
 11629  00617A                     l7642:
 11630                           
 11631                           ; BSR set to: 0
 11632                           ;master/animation.c: 174:             if (str_cmp_const(s2, "Y") == 0) {
 11633  00617A  0E5B               	movlw	low command_turn_ARRAY_3_end@s2
 11634  00617C  6E07               	movwf	str_cmp_const@p1,c
 11635  00617E  0E00               	movlw	high command_turn_ARRAY_3_end@s2
 11636  006180  6E08               	movwf	str_cmp_const@p1+1,c
 11637  006182  0EFA               	movlw	low STR_31
 11638  006184  6E09               	movwf	str_cmp_const@p2,c
 11639  006186  0E7F               	movlw	high STR_31
 11640  006188  6E0A               	movwf	str_cmp_const@p2+1,c
 11641  00618A  EC96  F01D         	call	_str_cmp_const	;wreg free
 11642  00618E  0900               	iorlw	0
 11643  006190  A4D8               	btfss	status,2,c
 11644  006192  D00F               	goto	l7646
 11645                           
 11646                           ;master/animation.c: 175:                 command_turn_ARRAY_2_3("U", "E'", "D'");
 11647  006194  0EF6               	movlw	low STR_3
 11648  006196  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
 11649  006198  0E7F               	movlw	high STR_3
 11650  00619A  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
 11651  00619C  0EA4               	movlw	low STR_27
 11652  00619E  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
 11653  0061A0  0E7F               	movlw	high STR_27
 11654  0061A2  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
 11655  0061A4  0EA1               	movlw	low STR_10
 11656  0061A6  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
 11657  0061A8  0E7F               	movlw	high STR_10
 11658  0061AA  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
 11659  0061AC  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
 11660                           
 11661                           ;master/animation.c: 176:             } else if (str_cmp_const(s2, "Y'") == 0) {
 11662  0061B0  D762               	goto	l7594
 11663  0061B2                     l7646:
 11664  0061B2  0E5B               	movlw	low command_turn_ARRAY_3_end@s2
 11665  0061B4  6E07               	movwf	str_cmp_const@p1,c
 11666  0061B6  0E00               	movlw	high command_turn_ARRAY_3_end@s2
 11667  0061B8  6E08               	movwf	str_cmp_const@p1+1,c
 11668  0061BA  0EBC               	movlw	low STR_34
 11669  0061BC  6E09               	movwf	str_cmp_const@p2,c
 11670  0061BE  0E7F               	movlw	high STR_34
 11671  0061C0  6E0A               	movwf	str_cmp_const@p2+1,c
 11672  0061C2  EC96  F01D         	call	_str_cmp_const	;wreg free
 11673  0061C6  0900               	iorlw	0
 11674  0061C8  A4D8               	btfss	status,2,c
 11675  0061CA  D00F               	goto	l7650
 11676                           
 11677                           ;master/animation.c: 177:                 command_turn_ARRAY_2_3("U'", "E", "D");
 11678  0061CC  0EB6               	movlw	low STR_9
 11679  0061CE  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
 11680  0061D0  0E7F               	movlw	high STR_9
 11681  0061D2  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
 11682  0061D4  0EEA               	movlw	low STR_21
 11683  0061D6  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
 11684  0061D8  0E7F               	movlw	high STR_21
 11685  0061DA  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
 11686  0061DC  0EE8               	movlw	low STR_4
 11687  0061DE  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
 11688  0061E0  0E7F               	movlw	high STR_4
 11689  0061E2  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
 11690  0061E4  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
 11691                           
 11692                           ;master/animation.c: 178:             } else {
 11693  0061E8  D746               	goto	l7594
 11694  0061EA                     l7650:
 11695                           
 11696                           ;master/animation.c: 179:                 command_turn_ARRAY_2_3("U", "E'", "D'");
 11697  0061EA  0EF6               	movlw	low STR_3
 11698  0061EC  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
 11699  0061EE  0E7F               	movlw	high STR_3
 11700  0061F0  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
 11701  0061F2  0EA4               	movlw	low STR_27
 11702  0061F4  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
 11703  0061F6  0E7F               	movlw	high STR_27
 11704  0061F8  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
 11705  0061FA  0EA1               	movlw	low STR_10
 11706  0061FC  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
 11707  0061FE  0E7F               	movlw	high STR_10
 11708  006200  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
 11709  006202  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
 11710                           
 11711                           ;master/animation.c: 180:                 command_turn_ARRAY_2_3("U", "E'", "D'");
 11712  006206  0EF6               	movlw	low STR_3
 11713  006208  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
 11714  00620A  0E7F               	movlw	high STR_3
 11715  00620C  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
 11716  00620E  0EA4               	movlw	low STR_27
 11717  006210  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
 11718  006212  0E7F               	movlw	high STR_27
 11719  006214  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
 11720  006216  0EA1               	movlw	low STR_10
 11721  006218  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
 11722  00621A  0E7F               	movlw	high STR_10
 11723  00621C  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
 11724  00621E  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
 11725  006222  D729               	goto	l7594
 11726  006224                     l7660:
 11727                           
 11728                           ; BSR set to: 0
 11729                           ;master/animation.c: 187:             if (str_cmp_const(s2, "X") == 0) {
 11730  006224  0E5B               	movlw	low command_turn_ARRAY_3_end@s2
 11731  006226  6E07               	movwf	str_cmp_const@p1,c
 11732  006228  0E00               	movlw	high command_turn_ARRAY_3_end@s2
 11733  00622A  6E08               	movwf	str_cmp_const@p1+1,c
 11734  00622C  0EF8               	movlw	low STR_30
 11735  00622E  6E09               	movwf	str_cmp_const@p2,c
 11736  006230  0E7F               	movlw	high STR_30
 11737  006232  6E0A               	movwf	str_cmp_const@p2+1,c
 11738  006234  EC96  F01D         	call	_str_cmp_const	;wreg free
 11739  006238  0900               	iorlw	0
 11740  00623A  A4D8               	btfss	status,2,c
 11741  00623C  D00F               	goto	l7664
 11742                           
 11743                           ;master/animation.c: 188:                 command_turn_ARRAY_2_3("R", "M'", "L'");
 11744  00623E  0EF2               	movlw	low STR_6
 11745  006240  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
 11746  006242  0E7F               	movlw	high STR_6
 11747  006244  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
 11748  006246  0EAD               	movlw	low STR_29
 11749  006248  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
 11750  00624A  0E7F               	movlw	high STR_29
 11751  00624C  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
 11752  00624E  0EAA               	movlw	low STR_11
 11753  006250  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
 11754  006252  0E7F               	movlw	high STR_11
 11755  006254  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
 11756  006256  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
 11757                           
 11758                           ;master/animation.c: 189:             } else if (str_cmp_const(s2, "X'") == 0) {
 11759  00625A  D70D               	goto	l7594
 11760  00625C                     l7664:
 11761  00625C  0E5B               	movlw	low command_turn_ARRAY_3_end@s2
 11762  00625E  6E07               	movwf	str_cmp_const@p1,c
 11763  006260  0E00               	movlw	high command_turn_ARRAY_3_end@s2
 11764  006262  6E08               	movwf	str_cmp_const@p1+1,c
 11765  006264  0EB9               	movlw	low STR_33
 11766  006266  6E09               	movwf	str_cmp_const@p2,c
 11767  006268  0E7F               	movlw	high STR_33
 11768  00626A  6E0A               	movwf	str_cmp_const@p2+1,c
 11769  00626C  EC96  F01D         	call	_str_cmp_const	;wreg free
 11770  006270  0900               	iorlw	0
 11771  006272  A4D8               	btfss	status,2,c
 11772  006274  D00F               	goto	l7668
 11773                           
 11774                           ;master/animation.c: 190:                 command_turn_ARRAY_2_3("R'", "M", "L");
 11775  006276  0EB0               	movlw	low STR_12
 11776  006278  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
 11777  00627A  0E7F               	movlw	high STR_12
 11778  00627C  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
 11779  00627E  0EF0               	movlw	low STR_23
 11780  006280  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
 11781  006282  0E7F               	movlw	high STR_23
 11782  006284  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
 11783  006286  0EEE               	movlw	low STR_5
 11784  006288  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
 11785  00628A  0E7F               	movlw	high STR_5
 11786  00628C  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
 11787  00628E  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
 11788                           
 11789                           ;master/animation.c: 191:             } else {
 11790  006292  D6F1               	goto	l7594
 11791  006294                     l7668:
 11792                           
 11793                           ;master/animation.c: 192:                 command_turn_ARRAY_2_3("R", "M'", "L'");
 11794  006294  0EF2               	movlw	low STR_6
 11795  006296  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
 11796  006298  0E7F               	movlw	high STR_6
 11797  00629A  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
 11798  00629C  0EAD               	movlw	low STR_29
 11799  00629E  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
 11800  0062A0  0E7F               	movlw	high STR_29
 11801  0062A2  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
 11802  0062A4  0EAA               	movlw	low STR_11
 11803  0062A6  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
 11804  0062A8  0E7F               	movlw	high STR_11
 11805  0062AA  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
 11806  0062AC  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
 11807                           
 11808                           ;master/animation.c: 193:                 command_turn_ARRAY_2_3("R", "M'", "L'");
 11809  0062B0  0EF2               	movlw	low STR_6
 11810  0062B2  6E4A               	movwf	command_turn_ARRAY_2_3@s1,c
 11811  0062B4  0E7F               	movlw	high STR_6
 11812  0062B6  6E4B               	movwf	command_turn_ARRAY_2_3@s1+1,c
 11813  0062B8  0EAD               	movlw	low STR_29
 11814  0062BA  6E4C               	movwf	command_turn_ARRAY_2_3@s2,c
 11815  0062BC  0E7F               	movlw	high STR_29
 11816  0062BE  6E4D               	movwf	command_turn_ARRAY_2_3@s2+1,c
 11817  0062C0  0EAA               	movlw	low STR_11
 11818  0062C2  6E4E               	movwf	command_turn_ARRAY_2_3@s3,c
 11819  0062C4  0E7F               	movlw	high STR_11
 11820  0062C6  6E4F               	movwf	command_turn_ARRAY_2_3@s3+1,c
 11821  0062C8  EC3C  F020         	call	_command_turn_ARRAY_2_3	;wreg free
 11822  0062CC  D6D4               	goto	l7594
 11823  0062CE                     l7680:
 11824                           
 11825                           ; BSR set to: 0
 11826  0062CE  505B               	movf	command_turn_ARRAY_3_end@s2,w,c
 11827  0062D0  6E57               	movwf	??_command_turn_ARRAY_3_end& (0+255),c
 11828  0062D2  6A58               	clrf	(??_command_turn_ARRAY_3_end+1)& (0+255),c
 11829                           
 11830                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11831                           ; Switch size 1, requested type "simple"
 11832                           ; Number of cases is 1, Range of values is 0 to 0
 11833                           ; switch strategies available:
 11834                           ; Name         Instructions Cycles
 11835                           ; simple_byte            4     3 (average)
 11836                           ;	Chosen strategy is simple_byte
 11837  0062D4  5058               	movf	??_command_turn_ARRAY_3_end+1,w,c
 11838  0062D6  0A00               	xorlw	0	; case 0
 11839  0062D8  A4D8               	btfss	status,2,c
 11840  0062DA  D00A               	goto	l7682
 11841                           
 11842                           ; BSR set to: 0
 11843                           ; Switch size 1, requested type "simple"
 11844                           ; Number of cases is 3, Range of values is 88 to 90
 11845                           ; switch strategies available:
 11846                           ; Name         Instructions Cycles
 11847                           ; simple_byte           10     6 (average)
 11848                           ;	Chosen strategy is simple_byte
 11849  0062DC  5057               	movf	??_command_turn_ARRAY_3_end,w,c
 11850  0062DE  0A58               	xorlw	88	; case 88
 11851  0062E0  B4D8               	btfsc	status,2,c
 11852  0062E2  D7A0               	goto	l7660
 11853  0062E4  0A01               	xorlw	1	; case 89
 11854  0062E6  B4D8               	btfsc	status,2,c
 11855  0062E8  D748               	goto	l7642
 11856  0062EA  0A03               	xorlw	3	; case 90
 11857  0062EC  B4D8               	btfsc	status,2,c
 11858  0062EE  D6F0               	goto	l7624
 11859  0062F0                     l7682:
 11860                           
 11861                           ; BSR set to: 0
 11862                           ;master/animation.c: 202:     command_turn_ARRAY_2_2(s2);
 11863  0062F0  0E5B               	movlw	low command_turn_ARRAY_3_end@s2
 11864  0062F2  6E4A               	movwf	command_turn_ARRAY_2_2@s,c
 11865  0062F4  0E00               	movlw	high command_turn_ARRAY_3_end@s2
 11866  0062F6  6E4B               	movwf	command_turn_ARRAY_2_2@s+1,c
 11867  0062F8  EC00  F027         	call	_command_turn_ARRAY_2_2	;wreg free
 11868  0062FC  D6BC               	goto	l7594
 11869  0062FE                     __end_of_command_turn_ARRAY_3_end:
 11870                           	opt callstack 0
 11871                           
 11872 ;; *************** function _set_CES *****************
 11873 ;; Defined at:
 11874 ;;		line 6 in file "master/operation_CES.c"
 11875 ;; Parameters:    Size  Location     Type
 11876 ;;		None
 11877 ;; Auto vars:     Size  Location     Type
 11878 ;;  i               2    0        int 
 11879 ;; Return value:  Size  Location     Type
 11880 ;;                  1    wreg      void 
 11881 ;; Registers used:
 11882 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11883 ;; Tracked objects:
 11884 ;;		On entry : 0/0
 11885 ;;		On exit  : 0/0
 11886 ;;		Unchanged: 0/0
 11887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11888 ;;      Params:         0       0       0       0       0       0       0
 11889 ;;      Locals:         0       0       0       0       0       0       0
 11890 ;;      Temps:          0       0       0       0       0       0       0
 11891 ;;      Totals:         0       0       0       0       0       0       0
 11892 ;;Total ram usage:        0 bytes
 11893 ;; Hardware stack levels used:    1
 11894 ;; Hardware stack levels required when called:    2
 11895 ;; This function calls:
 11896 ;;		_set_C
 11897 ;;		_set_E
 11898 ;;		_set_S
 11899 ;; This function is called by:
 11900 ;;		_main
 11901 ;;		_command_turn_ARRAY_3_end
 11902 ;; This function uses a non-reentrant model
 11903 ;;
 11904                           
 11905                           	psect	text45
 11906  0027F6                     __ptext45:
 11907                           	opt callstack 0
 11908  0027F6                     _set_CES:
 11909                           	opt callstack 28
 11910                           
 11911                           ;master/operation_CES.c: 8:     int i;;master/operation_CES.c: 10:     set_S();
 11912                           
 11913                           ;incstack = 0
 11914  0027F6  EC87  F014         	call	_set_S	;wreg free
 11915                           
 11916                           ;master/operation_CES.c: 11:     set_C();
 11917  0027FA  ECEA  F039         	call	_set_C	;wreg free
 11918                           
 11919                           ;master/operation_CES.c: 12:     set_E();
 11920  0027FE  ECA8  F037         	call	_set_E	;wreg free
 11921  002802  0012               	return		;funcret
 11922  002804                     __end_of_set_CES:
 11923                           	opt callstack 0
 11924                           
 11925 ;; *************** function _set_S *****************
 11926 ;; Defined at:
 11927 ;;		line 246 in file "master/operation_CES.c"
 11928 ;; Parameters:    Size  Location     Type
 11929 ;;		None
 11930 ;; Auto vars:     Size  Location     Type
 11931 ;;		None
 11932 ;; Return value:  Size  Location     Type
 11933 ;;                  1    wreg      void 
 11934 ;; Registers used:
 11935 ;;		None
 11936 ;; Tracked objects:
 11937 ;;		On entry : 0/0
 11938 ;;		On exit  : 0/0
 11939 ;;		Unchanged: 0/0
 11940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11941 ;;      Params:         0       0       0       0       0       0       0
 11942 ;;      Locals:         0       0       0       0       0       0       0
 11943 ;;      Temps:          0       0       0       0       0       0       0
 11944 ;;      Totals:         0       0       0       0       0       0       0
 11945 ;;Total ram usage:        0 bytes
 11946 ;; Hardware stack levels used:    1
 11947 ;; This function calls:
 11948 ;;		Nothing
 11949 ;; This function is called by:
 11950 ;;		_set_CES
 11951 ;; This function uses a non-reentrant model
 11952 ;;
 11953                           
 11954                           	psect	text46
 11955  00290E                     __ptext46:
 11956                           	opt callstack 0
 11957  00290E                     _set_S:
 11958                           	opt callstack 29
 11959                           
 11960                           ;master/operation_CES.c: 249:     LED_Light[0][4] = state_CE.sp[0];
 11961                           
 11962                           ;incstack = 0
 11963  00290E  C1B8  F141         	movff	_state_CE+40,_LED_Light+4
 11964                           
 11965                           ;master/operation_CES.c: 250:     LED_Light[1][4] = state_CE.sp[1];
 11966  002912  C1B9  F14A         	movff	_state_CE+41,_LED_Light+13
 11967                           
 11968                           ;master/operation_CES.c: 251:     LED_Light[4][4] = state_CE.sp[2];
 11969  002916  C1BA  F165         	movff	_state_CE+42,_LED_Light+40
 11970                           
 11971                           ;master/operation_CES.c: 252:     LED_Light[3][4] = state_CE.sp[3];
 11972  00291A  C1BB  F15C         	movff	_state_CE+43,_LED_Light+31
 11973                           
 11974                           ;master/operation_CES.c: 253:     LED_Light[2][4] = state_CE.sp[4];
 11975  00291E  C1BC  F153         	movff	_state_CE+44,_LED_Light+22
 11976                           
 11977                           ;master/operation_CES.c: 254:     LED_Light[5][4] = state_CE.sp[5];
 11978  002922  C1BD  F16E         	movff	_state_CE+45,_LED_Light+49
 11979  002926  0012               	return		;funcret
 11980  002928                     __end_of_set_S:
 11981                           	opt callstack 0
 11982                           
 11983 ;; *************** function _set_E *****************
 11984 ;; Defined at:
 11985 ;;		line 291 in file "master/operation_CES.c"
 11986 ;; Parameters:    Size  Location     Type
 11987 ;;		None
 11988 ;; Auto vars:     Size  Location     Type
 11989 ;;		None
 11990 ;; Return value:  Size  Location     Type
 11991 ;;                  1    wreg      void 
 11992 ;; Registers used:
 11993 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11994 ;; Tracked objects:
 11995 ;;		On entry : 0/0
 11996 ;;		On exit  : 0/0
 11997 ;;		Unchanged: 0/0
 11998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11999 ;;      Params:         0       0       0       0       0       0       0
 12000 ;;      Locals:         0       0       0       0       0       0       0
 12001 ;;      Temps:          3       0       0       0       0       0       0
 12002 ;;      Totals:         3       0       0       0       0       0       0
 12003 ;;Total ram usage:        3 bytes
 12004 ;; Hardware stack levels used:    1
 12005 ;; This function calls:
 12006 ;;		Nothing
 12007 ;; This function is called by:
 12008 ;;		_set_CES
 12009 ;; This function uses a non-reentrant model
 12010 ;;
 12011                           
 12012                           	psect	text47
 12013  006F50                     __ptext47:
 12014                           	opt callstack 0
 12015  006F50                     _set_E:
 12016                           	opt callstack 29
 12017                           
 12018                           ;master/operation_CES.c: 293:     LED_Light[0][1] = LED_E[state_CE.ep[4]][state_CE.eo[4]
      +                          ];
 12019                           
 12020                           ;incstack = 0
 12021  006F50  0101               	movlb	1	; () banked
 12022  006F52  51A4               	movf	(_state_CE+20)& (0+255),w,b
 12023  006F54  0D02               	mullw	2
 12024  006F56  0E52               	movlw	low _LED_E
 12025  006F58  6E01               	movwf	??_set_E& (0+255),c
 12026  006F5A  0E7A               	movlw	high _LED_E
 12027  006F5C  6E02               	movwf	(??_set_E+1)& (0+255),c
 12028  006F5E  50F3               	movf	prodl,w,c
 12029  006F60  2601               	addwf	??_set_E,f,c
 12030  006F62  50F4               	movf	prodh,w,c
 12031  006F64  2202               	addwfc	??_set_E+1,f,c
 12032  006F66  51B0               	movf	(_state_CE+32)& (0+255),w,b
 12033  006F68  2601               	addwf	??_set_E,f,c
 12034  006F6A  0E00               	movlw	0
 12035  006F6C  2202               	addwfc	??_set_E+1,f,c
 12036  006F6E  C001  FFF6         	movff	??_set_E,tblptrl
 12037  006F72  C002  FFF7         	movff	??_set_E+1,tblptrh
 12038  006F76                     	if	0	;tblptru may be non-zero
 12039  006F76                     	endif
 12040  006F76                     	if	0	;tblptru may be non-zero
 12041  006F76                     	endif
 12042  006F76  0008               	tblrd		*
 12043  006F78  CFF5 F13E          	movff	tablat,_LED_Light+1
 12044                           
 12045                           ;master/operation_CES.c: 294:     LED_Light[0][5] = LED_E[state_CE.ep[7]][state_CE.eo[7]
      +                          ];
 12046  006F7C  51A7               	movf	(_state_CE+23)& (0+255),w,b
 12047  006F7E  0D02               	mullw	2
 12048  006F80  0E52               	movlw	low _LED_E
 12049  006F82  6E01               	movwf	??_set_E& (0+255),c
 12050  006F84  0E7A               	movlw	high _LED_E
 12051  006F86  6E02               	movwf	(??_set_E+1)& (0+255),c
 12052  006F88  50F3               	movf	prodl,w,c
 12053  006F8A  2601               	addwf	??_set_E,f,c
 12054  006F8C  50F4               	movf	prodh,w,c
 12055  006F8E  2202               	addwfc	??_set_E+1,f,c
 12056  006F90  51B3               	movf	(_state_CE+35)& (0+255),w,b
 12057  006F92  2601               	addwf	??_set_E,f,c
 12058  006F94  0E00               	movlw	0
 12059  006F96  2202               	addwfc	??_set_E+1,f,c
 12060  006F98  C001  FFF6         	movff	??_set_E,tblptrl
 12061  006F9C  C002  FFF7         	movff	??_set_E+1,tblptrh
 12062  006FA0                     	if	0	;tblptru may be non-zero
 12063  006FA0                     	endif
 12064  006FA0                     	if	0	;tblptru may be non-zero
 12065  006FA0                     	endif
 12066  006FA0  0008               	tblrd		*
 12067  006FA2  CFF5 F142          	movff	tablat,_LED_Light+5
 12068                           
 12069                           ;master/operation_CES.c: 295:     LED_Light[0][3] = LED_E[state_CE.ep[5]][state_CE.eo[5]
      +                          ];
 12070  006FA6  51A5               	movf	(_state_CE+21)& (0+255),w,b
 12071  006FA8  0D02               	mullw	2
 12072  006FAA  0E52               	movlw	low _LED_E
 12073  006FAC  6E01               	movwf	??_set_E& (0+255),c
 12074  006FAE  0E7A               	movlw	high _LED_E
 12075  006FB0  6E02               	movwf	(??_set_E+1)& (0+255),c
 12076  006FB2  50F3               	movf	prodl,w,c
 12077  006FB4  2601               	addwf	??_set_E,f,c
 12078  006FB6  50F4               	movf	prodh,w,c
 12079  006FB8  2202               	addwfc	??_set_E+1,f,c
 12080  006FBA  51B1               	movf	(_state_CE+33)& (0+255),w,b
 12081  006FBC  2601               	addwf	??_set_E,f,c
 12082  006FBE  0E00               	movlw	0
 12083  006FC0  2202               	addwfc	??_set_E+1,f,c
 12084  006FC2  C001  FFF6         	movff	??_set_E,tblptrl
 12085  006FC6  C002  FFF7         	movff	??_set_E+1,tblptrh
 12086  006FCA                     	if	0	;tblptru may be non-zero
 12087  006FCA                     	endif
 12088  006FCA                     	if	0	;tblptru may be non-zero
 12089  006FCA                     	endif
 12090  006FCA  0008               	tblrd		*
 12091  006FCC  CFF5 F140          	movff	tablat,_LED_Light+3
 12092                           
 12093                           ;master/operation_CES.c: 296:     LED_Light[0][7] = LED_E[state_CE.ep[6]][state_CE.eo[6]
      +                          ];
 12094  006FD0  51A6               	movf	(_state_CE+22)& (0+255),w,b
 12095  006FD2  0D02               	mullw	2
 12096  006FD4  0E52               	movlw	low _LED_E
 12097  006FD6  6E01               	movwf	??_set_E& (0+255),c
 12098  006FD8  0E7A               	movlw	high _LED_E
 12099  006FDA  6E02               	movwf	(??_set_E+1)& (0+255),c
 12100  006FDC  50F3               	movf	prodl,w,c
 12101  006FDE  2601               	addwf	??_set_E,f,c
 12102  006FE0  50F4               	movf	prodh,w,c
 12103  006FE2  2202               	addwfc	??_set_E+1,f,c
 12104  006FE4  51B2               	movf	(_state_CE+34)& (0+255),w,b
 12105  006FE6  2601               	addwf	??_set_E,f,c
 12106  006FE8  0E00               	movlw	0
 12107  006FEA  2202               	addwfc	??_set_E+1,f,c
 12108  006FEC  C001  FFF6         	movff	??_set_E,tblptrl
 12109  006FF0  C002  FFF7         	movff	??_set_E+1,tblptrh
 12110  006FF4                     	if	0	;tblptru may be non-zero
 12111  006FF4                     	endif
 12112  006FF4                     	if	0	;tblptru may be non-zero
 12113  006FF4                     	endif
 12114  006FF4  0008               	tblrd		*
 12115  006FF6  CFF5 F144          	movff	tablat,_LED_Light+7
 12116                           
 12117                           ;master/operation_CES.c: 298:     LED_Light[1][1] = LED_E[state_CE.ep[6]][(state_CE.eo[6
      +                          ] + 1) % 2];
 12118  006FFA  51A6               	movf	(_state_CE+22)& (0+255),w,b
 12119  006FFC  0D02               	mullw	2
 12120  006FFE  0E52               	movlw	low _LED_E
 12121  007000  6E01               	movwf	??_set_E& (0+255),c
 12122  007002  0E7A               	movlw	high _LED_E
 12123  007004  6E02               	movwf	(??_set_E+1)& (0+255),c
 12124  007006  50F3               	movf	prodl,w,c
 12125  007008  2601               	addwf	??_set_E,f,c
 12126  00700A  50F4               	movf	prodh,w,c
 12127  00700C  2202               	addwfc	??_set_E+1,f,c
 12128  00700E  C1B2  F003         	movff	_state_CE+34,??_set_E+2
 12129  007012  0E01               	movlw	1
 12130  007014  2603               	addwf	??_set_E+2,f,c
 12131  007016  0E01               	movlw	1
 12132  007018  1603               	andwf	??_set_E+2,f,c
 12133  00701A  5003               	movf	??_set_E+2,w,c
 12134  00701C  2601               	addwf	??_set_E,f,c
 12135  00701E  0E00               	movlw	0
 12136  007020  2202               	addwfc	??_set_E+1,f,c
 12137  007022  C001  FFF6         	movff	??_set_E,tblptrl
 12138  007026  C002  FFF7         	movff	??_set_E+1,tblptrh
 12139  00702A                     	if	0	;tblptru may be non-zero
 12140  00702A                     	endif
 12141  00702A                     	if	0	;tblptru may be non-zero
 12142  00702A                     	endif
 12143  00702A  0008               	tblrd		*
 12144  00702C  CFF5 F147          	movff	tablat,_LED_Light+10
 12145                           
 12146                           ;master/operation_CES.c: 299:     LED_Light[1][5] = LED_E[state_CE.ep[3]][(state_CE.eo[3
      +                          ])];
 12147  007030  51A3               	movf	(_state_CE+19)& (0+255),w,b
 12148  007032  0D02               	mullw	2
 12149  007034  0E52               	movlw	low _LED_E
 12150  007036  6E01               	movwf	??_set_E& (0+255),c
 12151  007038  0E7A               	movlw	high _LED_E
 12152  00703A  6E02               	movwf	(??_set_E+1)& (0+255),c
 12153  00703C  50F3               	movf	prodl,w,c
 12154  00703E  2601               	addwf	??_set_E,f,c
 12155  007040  50F4               	movf	prodh,w,c
 12156  007042  2202               	addwfc	??_set_E+1,f,c
 12157  007044  51AF               	movf	(_state_CE+31)& (0+255),w,b
 12158  007046  2601               	addwf	??_set_E,f,c
 12159  007048  0E00               	movlw	0
 12160  00704A  2202               	addwfc	??_set_E+1,f,c
 12161  00704C  C001  FFF6         	movff	??_set_E,tblptrl
 12162  007050  C002  FFF7         	movff	??_set_E+1,tblptrh
 12163  007054                     	if	0	;tblptru may be non-zero
 12164  007054                     	endif
 12165  007054                     	if	0	;tblptru may be non-zero
 12166  007054                     	endif
 12167  007054  0008               	tblrd		*
 12168  007056  CFF5 F14B          	movff	tablat,_LED_Light+14
 12169                           
 12170                           ;master/operation_CES.c: 300:     LED_Light[1][3] = LED_E[state_CE.ep[2]][(state_CE.eo[2
      +                          ])];
 12171  00705A  51A2               	movf	(_state_CE+18)& (0+255),w,b
 12172  00705C  0D02               	mullw	2
 12173  00705E  0E52               	movlw	low _LED_E
 12174  007060  6E01               	movwf	??_set_E& (0+255),c
 12175  007062  0E7A               	movlw	high _LED_E
 12176  007064  6E02               	movwf	(??_set_E+1)& (0+255),c
 12177  007066  50F3               	movf	prodl,w,c
 12178  007068  2601               	addwf	??_set_E,f,c
 12179  00706A  50F4               	movf	prodh,w,c
 12180  00706C  2202               	addwfc	??_set_E+1,f,c
 12181  00706E  51AE               	movf	(_state_CE+30)& (0+255),w,b
 12182  007070  2601               	addwf	??_set_E,f,c
 12183  007072  0E00               	movlw	0
 12184  007074  2202               	addwfc	??_set_E+1,f,c
 12185  007076  C001  FFF6         	movff	??_set_E,tblptrl
 12186  00707A  C002  FFF7         	movff	??_set_E+1,tblptrh
 12187  00707E                     	if	0	;tblptru may be non-zero
 12188  00707E                     	endif
 12189  00707E                     	if	0	;tblptru may be non-zero
 12190  00707E                     	endif
 12191  00707E  0008               	tblrd		*
 12192  007080  CFF5 F149          	movff	tablat,_LED_Light+12
 12193                           
 12194                           ;master/operation_CES.c: 301:     LED_Light[1][7] = LED_E[state_CE.ep[10]][(state_CE.eo[
      +                          10] + 1) % 2];
 12195  007084  51AA               	movf	(_state_CE+26)& (0+255),w,b
 12196  007086  0D02               	mullw	2
 12197  007088  0E52               	movlw	low _LED_E
 12198  00708A  6E01               	movwf	??_set_E& (0+255),c
 12199  00708C  0E7A               	movlw	high _LED_E
 12200  00708E  6E02               	movwf	(??_set_E+1)& (0+255),c
 12201  007090  50F3               	movf	prodl,w,c
 12202  007092  2601               	addwf	??_set_E,f,c
 12203  007094  50F4               	movf	prodh,w,c
 12204  007096  2202               	addwfc	??_set_E+1,f,c
 12205  007098  C1B6  F003         	movff	_state_CE+38,??_set_E+2
 12206  00709C  0E01               	movlw	1
 12207  00709E  2603               	addwf	??_set_E+2,f,c
 12208  0070A0  0E01               	movlw	1
 12209  0070A2  1603               	andwf	??_set_E+2,f,c
 12210  0070A4  5003               	movf	??_set_E+2,w,c
 12211  0070A6  2601               	addwf	??_set_E,f,c
 12212  0070A8  0E00               	movlw	0
 12213  0070AA  2202               	addwfc	??_set_E+1,f,c
 12214  0070AC  C001  FFF6         	movff	??_set_E,tblptrl
 12215  0070B0  C002  FFF7         	movff	??_set_E+1,tblptrh
 12216  0070B4                     	if	0	;tblptru may be non-zero
 12217  0070B4                     	endif
 12218  0070B4                     	if	0	;tblptru may be non-zero
 12219  0070B4                     	endif
 12220  0070B4  0008               	tblrd		*
 12221  0070B6  CFF5 F14D          	movff	tablat,_LED_Light+16
 12222                           
 12223                           ;master/operation_CES.c: 303:     LED_Light[4][1] = LED_E[state_CE.ep[5]][(state_CE.eo[5
      +                          ] + 1) % 2];
 12224  0070BA  51A5               	movf	(_state_CE+21)& (0+255),w,b
 12225  0070BC  0D02               	mullw	2
 12226  0070BE  0E52               	movlw	low _LED_E
 12227  0070C0  6E01               	movwf	??_set_E& (0+255),c
 12228  0070C2  0E7A               	movlw	high _LED_E
 12229  0070C4  6E02               	movwf	(??_set_E+1)& (0+255),c
 12230  0070C6  50F3               	movf	prodl,w,c
 12231  0070C8  2601               	addwf	??_set_E,f,c
 12232  0070CA  50F4               	movf	prodh,w,c
 12233  0070CC  2202               	addwfc	??_set_E+1,f,c
 12234  0070CE  C1B1  F003         	movff	_state_CE+33,??_set_E+2
 12235  0070D2  0E01               	movlw	1
 12236  0070D4  2603               	addwf	??_set_E+2,f,c
 12237  0070D6  0E01               	movlw	1
 12238  0070D8  1603               	andwf	??_set_E+2,f,c
 12239  0070DA  5003               	movf	??_set_E+2,w,c
 12240  0070DC  2601               	addwf	??_set_E,f,c
 12241  0070DE  0E00               	movlw	0
 12242  0070E0  2202               	addwfc	??_set_E+1,f,c
 12243  0070E2  C001  FFF6         	movff	??_set_E,tblptrl
 12244  0070E6  C002  FFF7         	movff	??_set_E+1,tblptrh
 12245  0070EA                     	if	0	;tblptru may be non-zero
 12246  0070EA                     	endif
 12247  0070EA                     	if	0	;tblptru may be non-zero
 12248  0070EA                     	endif
 12249  0070EA  0008               	tblrd		*
 12250  0070EC  CFF5 F162          	movff	tablat,_LED_Light+37
 12251                           
 12252                           ;master/operation_CES.c: 304:     LED_Light[4][5] = LED_E[state_CE.ep[2]][(state_CE.eo[2
      +                          ] + 1) % 2];
 12253  0070F0  51A2               	movf	(_state_CE+18)& (0+255),w,b
 12254  0070F2  0D02               	mullw	2
 12255  0070F4  0E52               	movlw	low _LED_E
 12256  0070F6  6E01               	movwf	??_set_E& (0+255),c
 12257  0070F8  0E7A               	movlw	high _LED_E
 12258  0070FA  6E02               	movwf	(??_set_E+1)& (0+255),c
 12259  0070FC  50F3               	movf	prodl,w,c
 12260  0070FE  2601               	addwf	??_set_E,f,c
 12261  007100  50F4               	movf	prodh,w,c
 12262  007102  2202               	addwfc	??_set_E+1,f,c
 12263  007104  C1AE  F003         	movff	_state_CE+30,??_set_E+2
 12264  007108  0E01               	movlw	1
 12265  00710A  2603               	addwf	??_set_E+2,f,c
 12266  00710C  0E01               	movlw	1
 12267  00710E  1603               	andwf	??_set_E+2,f,c
 12268  007110  5003               	movf	??_set_E+2,w,c
 12269  007112  2601               	addwf	??_set_E,f,c
 12270  007114  0E00               	movlw	0
 12271  007116  2202               	addwfc	??_set_E+1,f,c
 12272  007118  C001  FFF6         	movff	??_set_E,tblptrl
 12273  00711C  C002  FFF7         	movff	??_set_E+1,tblptrh
 12274  007120                     	if	0	;tblptru may be non-zero
 12275  007120                     	endif
 12276  007120                     	if	0	;tblptru may be non-zero
 12277  007120                     	endif
 12278  007120  0008               	tblrd		*
 12279  007122  CFF5 F166          	movff	tablat,_LED_Light+41
 12280                           
 12281                           ;master/operation_CES.c: 305:     LED_Light[4][3] = LED_E[state_CE.ep[1]][(state_CE.eo[1
      +                          ] + 1) % 2];
 12282  007126  51A1               	movf	(_state_CE+17)& (0+255),w,b
 12283  007128  0D02               	mullw	2
 12284  00712A  0E52               	movlw	low _LED_E
 12285  00712C  6E01               	movwf	??_set_E& (0+255),c
 12286  00712E  0E7A               	movlw	high _LED_E
 12287  007130  6E02               	movwf	(??_set_E+1)& (0+255),c
 12288  007132  50F3               	movf	prodl,w,c
 12289  007134  2601               	addwf	??_set_E,f,c
 12290  007136  50F4               	movf	prodh,w,c
 12291  007138  2202               	addwfc	??_set_E+1,f,c
 12292  00713A  C1AD  F003         	movff	_state_CE+29,??_set_E+2
 12293  00713E  0E01               	movlw	1
 12294  007140  2603               	addwf	??_set_E+2,f,c
 12295  007142  0E01               	movlw	1
 12296  007144  1603               	andwf	??_set_E+2,f,c
 12297  007146  5003               	movf	??_set_E+2,w,c
 12298  007148  2601               	addwf	??_set_E,f,c
 12299  00714A  0E00               	movlw	0
 12300  00714C  2202               	addwfc	??_set_E+1,f,c
 12301  00714E  C001  FFF6         	movff	??_set_E,tblptrl
 12302  007152  C002  FFF7         	movff	??_set_E+1,tblptrh
 12303  007156                     	if	0	;tblptru may be non-zero
 12304  007156                     	endif
 12305  007156                     	if	0	;tblptru may be non-zero
 12306  007156                     	endif
 12307  007156  0008               	tblrd		*
 12308  007158  CFF5 F164          	movff	tablat,_LED_Light+39
 12309                           
 12310                           ;master/operation_CES.c: 306:     LED_Light[4][7] = LED_E[state_CE.ep[9]][(state_CE.eo[9
      +                          ] + 1) % 2];
 12311  00715C  51A9               	movf	(_state_CE+25)& (0+255),w,b
 12312  00715E  0D02               	mullw	2
 12313  007160  0E52               	movlw	low _LED_E
 12314  007162  6E01               	movwf	??_set_E& (0+255),c
 12315  007164  0E7A               	movlw	high _LED_E
 12316  007166  6E02               	movwf	(??_set_E+1)& (0+255),c
 12317  007168  50F3               	movf	prodl,w,c
 12318  00716A  2601               	addwf	??_set_E,f,c
 12319  00716C  50F4               	movf	prodh,w,c
 12320  00716E  2202               	addwfc	??_set_E+1,f,c
 12321  007170  C1B5  F003         	movff	_state_CE+37,??_set_E+2
 12322  007174  0E01               	movlw	1
 12323  007176  2603               	addwf	??_set_E+2,f,c
 12324  007178  0E01               	movlw	1
 12325  00717A  1603               	andwf	??_set_E+2,f,c
 12326  00717C  5003               	movf	??_set_E+2,w,c
 12327  00717E  2601               	addwf	??_set_E,f,c
 12328  007180  0E00               	movlw	0
 12329  007182  2202               	addwfc	??_set_E+1,f,c
 12330  007184  C001  FFF6         	movff	??_set_E,tblptrl
 12331  007188  C002  FFF7         	movff	??_set_E+1,tblptrh
 12332  00718C                     	if	0	;tblptru may be non-zero
 12333  00718C                     	endif
 12334  00718C                     	if	0	;tblptru may be non-zero
 12335  00718C                     	endif
 12336  00718C  0008               	tblrd		*
 12337  00718E  CFF5 F168          	movff	tablat,_LED_Light+43
 12338                           
 12339                           ;master/operation_CES.c: 308:     LED_Light[3][1] = LED_E[state_CE.ep[4]][(state_CE.eo[4
      +                          ] + 1) % 2];
 12340  007192  51A4               	movf	(_state_CE+20)& (0+255),w,b
 12341  007194  0D02               	mullw	2
 12342  007196  0E52               	movlw	low _LED_E
 12343  007198  6E01               	movwf	??_set_E& (0+255),c
 12344  00719A  0E7A               	movlw	high _LED_E
 12345  00719C  6E02               	movwf	(??_set_E+1)& (0+255),c
 12346  00719E  50F3               	movf	prodl,w,c
 12347  0071A0  2601               	addwf	??_set_E,f,c
 12348  0071A2  50F4               	movf	prodh,w,c
 12349  0071A4  2202               	addwfc	??_set_E+1,f,c
 12350  0071A6  C1B0  F003         	movff	_state_CE+32,??_set_E+2
 12351  0071AA  0E01               	movlw	1
 12352  0071AC  2603               	addwf	??_set_E+2,f,c
 12353  0071AE  0E01               	movlw	1
 12354  0071B0  1603               	andwf	??_set_E+2,f,c
 12355  0071B2  5003               	movf	??_set_E+2,w,c
 12356  0071B4  2601               	addwf	??_set_E,f,c
 12357  0071B6  0E00               	movlw	0
 12358  0071B8  2202               	addwfc	??_set_E+1,f,c
 12359  0071BA  C001  FFF6         	movff	??_set_E,tblptrl
 12360  0071BE  C002  FFF7         	movff	??_set_E+1,tblptrh
 12361  0071C2                     	if	0	;tblptru may be non-zero
 12362  0071C2                     	endif
 12363  0071C2                     	if	0	;tblptru may be non-zero
 12364  0071C2                     	endif
 12365  0071C2  0008               	tblrd		*
 12366  0071C4  CFF5 F159          	movff	tablat,_LED_Light+28
 12367                           
 12368                           ;master/operation_CES.c: 309:     LED_Light[3][5] = LED_E[state_CE.ep[1]][(state_CE.eo[1
      +                          ])];
 12369  0071C8  51A1               	movf	(_state_CE+17)& (0+255),w,b
 12370  0071CA  0D02               	mullw	2
 12371  0071CC  0E52               	movlw	low _LED_E
 12372  0071CE  6E01               	movwf	??_set_E& (0+255),c
 12373  0071D0  0E7A               	movlw	high _LED_E
 12374  0071D2  6E02               	movwf	(??_set_E+1)& (0+255),c
 12375  0071D4  50F3               	movf	prodl,w,c
 12376  0071D6  2601               	addwf	??_set_E,f,c
 12377  0071D8  50F4               	movf	prodh,w,c
 12378  0071DA  2202               	addwfc	??_set_E+1,f,c
 12379  0071DC  51AD               	movf	(_state_CE+29)& (0+255),w,b
 12380  0071DE  2601               	addwf	??_set_E,f,c
 12381  0071E0  0E00               	movlw	0
 12382  0071E2  2202               	addwfc	??_set_E+1,f,c
 12383  0071E4  C001  FFF6         	movff	??_set_E,tblptrl
 12384  0071E8  C002  FFF7         	movff	??_set_E+1,tblptrh
 12385  0071EC                     	if	0	;tblptru may be non-zero
 12386  0071EC                     	endif
 12387  0071EC                     	if	0	;tblptru may be non-zero
 12388  0071EC                     	endif
 12389  0071EC  0008               	tblrd		*
 12390  0071EE  CFF5 F15D          	movff	tablat,_LED_Light+32
 12391                           
 12392                           ;master/operation_CES.c: 310:     LED_Light[3][3] = LED_E[state_CE.ep[0]][(state_CE.eo[0
      +                          ])];
 12393  0071F2  51A0               	movf	(_state_CE+16)& (0+255),w,b
 12394  0071F4  0D02               	mullw	2
 12395  0071F6  0E52               	movlw	low _LED_E
 12396  0071F8  6E01               	movwf	??_set_E& (0+255),c
 12397  0071FA  0E7A               	movlw	high _LED_E
 12398  0071FC  6E02               	movwf	(??_set_E+1)& (0+255),c
 12399  0071FE  50F3               	movf	prodl,w,c
 12400  007200  2601               	addwf	??_set_E,f,c
 12401  007202  50F4               	movf	prodh,w,c
 12402  007204  2202               	addwfc	??_set_E+1,f,c
 12403  007206  51AC               	movf	(_state_CE+28)& (0+255),w,b
 12404  007208  2601               	addwf	??_set_E,f,c
 12405  00720A  0E00               	movlw	0
 12406  00720C  2202               	addwfc	??_set_E+1,f,c
 12407  00720E  C001  FFF6         	movff	??_set_E,tblptrl
 12408  007212  C002  FFF7         	movff	??_set_E+1,tblptrh
 12409  007216                     	if	0	;tblptru may be non-zero
 12410  007216                     	endif
 12411  007216                     	if	0	;tblptru may be non-zero
 12412  007216                     	endif
 12413  007216  0008               	tblrd		*
 12414  007218  CFF5 F15B          	movff	tablat,_LED_Light+30
 12415                           
 12416                           ;master/operation_CES.c: 311:     LED_Light[3][7] = LED_E[state_CE.ep[8]][(state_CE.eo[8
      +                          ] + 1) % 2];
 12417  00721C  51A8               	movf	(_state_CE+24)& (0+255),w,b
 12418  00721E  0D02               	mullw	2
 12419  007220  0E52               	movlw	low _LED_E
 12420  007222  6E01               	movwf	??_set_E& (0+255),c
 12421  007224  0E7A               	movlw	high _LED_E
 12422  007226  6E02               	movwf	(??_set_E+1)& (0+255),c
 12423  007228  50F3               	movf	prodl,w,c
 12424  00722A  2601               	addwf	??_set_E,f,c
 12425  00722C  50F4               	movf	prodh,w,c
 12426  00722E  2202               	addwfc	??_set_E+1,f,c
 12427  007230  C1B4  F003         	movff	_state_CE+36,??_set_E+2
 12428  007234  0E01               	movlw	1
 12429  007236  2603               	addwf	??_set_E+2,f,c
 12430  007238  0E01               	movlw	1
 12431  00723A  1603               	andwf	??_set_E+2,f,c
 12432  00723C  5003               	movf	??_set_E+2,w,c
 12433  00723E  2601               	addwf	??_set_E,f,c
 12434  007240  0E00               	movlw	0
 12435  007242  2202               	addwfc	??_set_E+1,f,c
 12436  007244  C001  FFF6         	movff	??_set_E,tblptrl
 12437  007248  C002  FFF7         	movff	??_set_E+1,tblptrh
 12438  00724C                     	if	0	;tblptru may be non-zero
 12439  00724C                     	endif
 12440  00724C                     	if	0	;tblptru may be non-zero
 12441  00724C                     	endif
 12442  00724C  0008               	tblrd		*
 12443  00724E  CFF5 F15F          	movff	tablat,_LED_Light+34
 12444                           
 12445                           ;master/operation_CES.c: 313:     LED_Light[2][1] = LED_E[state_CE.ep[7]][(state_CE.eo[7
      +                          ] + 1) % 2];
 12446  007252  51A7               	movf	(_state_CE+23)& (0+255),w,b
 12447  007254  0D02               	mullw	2
 12448  007256  0E52               	movlw	low _LED_E
 12449  007258  6E01               	movwf	??_set_E& (0+255),c
 12450  00725A  0E7A               	movlw	high _LED_E
 12451  00725C  6E02               	movwf	(??_set_E+1)& (0+255),c
 12452  00725E  50F3               	movf	prodl,w,c
 12453  007260  2601               	addwf	??_set_E,f,c
 12454  007262  50F4               	movf	prodh,w,c
 12455  007264  2202               	addwfc	??_set_E+1,f,c
 12456  007266  C1B3  F003         	movff	_state_CE+35,??_set_E+2
 12457  00726A  0E01               	movlw	1
 12458  00726C  2603               	addwf	??_set_E+2,f,c
 12459  00726E  0E01               	movlw	1
 12460  007270  1603               	andwf	??_set_E+2,f,c
 12461  007272  5003               	movf	??_set_E+2,w,c
 12462  007274  2601               	addwf	??_set_E,f,c
 12463  007276  0E00               	movlw	0
 12464  007278  2202               	addwfc	??_set_E+1,f,c
 12465  00727A  C001  FFF6         	movff	??_set_E,tblptrl
 12466  00727E  C002  FFF7         	movff	??_set_E+1,tblptrh
 12467  007282                     	if	0	;tblptru may be non-zero
 12468  007282                     	endif
 12469  007282                     	if	0	;tblptru may be non-zero
 12470  007282                     	endif
 12471  007282  0008               	tblrd		*
 12472  007284  CFF5 F150          	movff	tablat,_LED_Light+19
 12473                           
 12474                           ;master/operation_CES.c: 314:     LED_Light[2][5] = LED_E[state_CE.ep[0]][(state_CE.eo[0
      +                          ] + 1) % 2];
 12475  007288  51A0               	movf	(_state_CE+16)& (0+255),w,b
 12476  00728A  0D02               	mullw	2
 12477  00728C  0E52               	movlw	low _LED_E
 12478  00728E  6E01               	movwf	??_set_E& (0+255),c
 12479  007290  0E7A               	movlw	high _LED_E
 12480  007292  6E02               	movwf	(??_set_E+1)& (0+255),c
 12481  007294  50F3               	movf	prodl,w,c
 12482  007296  2601               	addwf	??_set_E,f,c
 12483  007298  50F4               	movf	prodh,w,c
 12484  00729A  2202               	addwfc	??_set_E+1,f,c
 12485  00729C  C1AC  F003         	movff	_state_CE+28,??_set_E+2
 12486  0072A0  0E01               	movlw	1
 12487  0072A2  2603               	addwf	??_set_E+2,f,c
 12488  0072A4  0E01               	movlw	1
 12489  0072A6  1603               	andwf	??_set_E+2,f,c
 12490  0072A8  5003               	movf	??_set_E+2,w,c
 12491  0072AA  2601               	addwf	??_set_E,f,c
 12492  0072AC  0E00               	movlw	0
 12493  0072AE  2202               	addwfc	??_set_E+1,f,c
 12494  0072B0  C001  FFF6         	movff	??_set_E,tblptrl
 12495  0072B4  C002  FFF7         	movff	??_set_E+1,tblptrh
 12496  0072B8                     	if	0	;tblptru may be non-zero
 12497  0072B8                     	endif
 12498  0072B8                     	if	0	;tblptru may be non-zero
 12499  0072B8                     	endif
 12500  0072B8  0008               	tblrd		*
 12501  0072BA  CFF5 F154          	movff	tablat,_LED_Light+23
 12502                           
 12503                           ;master/operation_CES.c: 315:     LED_Light[2][3] = LED_E[state_CE.ep[3]][(state_CE.eo[3
      +                          ] + 1) % 2];
 12504  0072BE  51A3               	movf	(_state_CE+19)& (0+255),w,b
 12505  0072C0  0D02               	mullw	2
 12506  0072C2  0E52               	movlw	low _LED_E
 12507  0072C4  6E01               	movwf	??_set_E& (0+255),c
 12508  0072C6  0E7A               	movlw	high _LED_E
 12509  0072C8  6E02               	movwf	(??_set_E+1)& (0+255),c
 12510  0072CA  50F3               	movf	prodl,w,c
 12511  0072CC  2601               	addwf	??_set_E,f,c
 12512  0072CE  50F4               	movf	prodh,w,c
 12513  0072D0  2202               	addwfc	??_set_E+1,f,c
 12514  0072D2  C1AF  F003         	movff	_state_CE+31,??_set_E+2
 12515  0072D6  0E01               	movlw	1
 12516  0072D8  2603               	addwf	??_set_E+2,f,c
 12517  0072DA  0E01               	movlw	1
 12518  0072DC  1603               	andwf	??_set_E+2,f,c
 12519  0072DE  5003               	movf	??_set_E+2,w,c
 12520  0072E0  2601               	addwf	??_set_E,f,c
 12521  0072E2  0E00               	movlw	0
 12522  0072E4  2202               	addwfc	??_set_E+1,f,c
 12523  0072E6  C001  FFF6         	movff	??_set_E,tblptrl
 12524  0072EA  C002  FFF7         	movff	??_set_E+1,tblptrh
 12525  0072EE                     	if	0	;tblptru may be non-zero
 12526  0072EE                     	endif
 12527  0072EE                     	if	0	;tblptru may be non-zero
 12528  0072EE                     	endif
 12529  0072EE  0008               	tblrd		*
 12530  0072F0  CFF5 F152          	movff	tablat,_LED_Light+21
 12531                           
 12532                           ;master/operation_CES.c: 316:     LED_Light[2][7] = LED_E[state_CE.ep[11]][(state_CE.eo[
      +                          11] + 1) % 2];
 12533  0072F4  51AB               	movf	(_state_CE+27)& (0+255),w,b
 12534  0072F6  0D02               	mullw	2
 12535  0072F8  0E52               	movlw	low _LED_E
 12536  0072FA  6E01               	movwf	??_set_E& (0+255),c
 12537  0072FC  0E7A               	movlw	high _LED_E
 12538  0072FE  6E02               	movwf	(??_set_E+1)& (0+255),c
 12539  007300  50F3               	movf	prodl,w,c
 12540  007302  2601               	addwf	??_set_E,f,c
 12541  007304  50F4               	movf	prodh,w,c
 12542  007306  2202               	addwfc	??_set_E+1,f,c
 12543  007308  C1B7  F003         	movff	_state_CE+39,??_set_E+2
 12544  00730C  0E01               	movlw	1
 12545  00730E  2603               	addwf	??_set_E+2,f,c
 12546  007310  0E01               	movlw	1
 12547  007312  1603               	andwf	??_set_E+2,f,c
 12548  007314  5003               	movf	??_set_E+2,w,c
 12549  007316  2601               	addwf	??_set_E,f,c
 12550  007318  0E00               	movlw	0
 12551  00731A  2202               	addwfc	??_set_E+1,f,c
 12552  00731C  C001  FFF6         	movff	??_set_E,tblptrl
 12553  007320  C002  FFF7         	movff	??_set_E+1,tblptrh
 12554  007324                     	if	0	;tblptru may be non-zero
 12555  007324                     	endif
 12556  007324                     	if	0	;tblptru may be non-zero
 12557  007324                     	endif
 12558  007324  0008               	tblrd		*
 12559  007326  CFF5 F156          	movff	tablat,_LED_Light+25
 12560                           
 12561                           ;master/operation_CES.c: 318:     LED_Light[5][1] = LED_E[state_CE.ep[10]][state_CE.eo[1
      +                          0]];
 12562  00732A  51AA               	movf	(_state_CE+26)& (0+255),w,b
 12563  00732C  0D02               	mullw	2
 12564  00732E  0E52               	movlw	low _LED_E
 12565  007330  6E01               	movwf	??_set_E& (0+255),c
 12566  007332  0E7A               	movlw	high _LED_E
 12567  007334  6E02               	movwf	(??_set_E+1)& (0+255),c
 12568  007336  50F3               	movf	prodl,w,c
 12569  007338  2601               	addwf	??_set_E,f,c
 12570  00733A  50F4               	movf	prodh,w,c
 12571  00733C  2202               	addwfc	??_set_E+1,f,c
 12572  00733E  51B6               	movf	(_state_CE+38)& (0+255),w,b
 12573  007340  2601               	addwf	??_set_E,f,c
 12574  007342  0E00               	movlw	0
 12575  007344  2202               	addwfc	??_set_E+1,f,c
 12576  007346  C001  FFF6         	movff	??_set_E,tblptrl
 12577  00734A  C002  FFF7         	movff	??_set_E+1,tblptrh
 12578  00734E                     	if	0	;tblptru may be non-zero
 12579  00734E                     	endif
 12580  00734E                     	if	0	;tblptru may be non-zero
 12581  00734E                     	endif
 12582  00734E  0008               	tblrd		*
 12583  007350  CFF5 F16B          	movff	tablat,_LED_Light+46
 12584                           
 12585                           ;master/operation_CES.c: 319:     LED_Light[5][5] = LED_E[state_CE.ep[11]][state_CE.eo[1
      +                          1]];
 12586  007354  51AB               	movf	(_state_CE+27)& (0+255),w,b
 12587  007356  0D02               	mullw	2
 12588  007358  0E52               	movlw	low _LED_E
 12589  00735A  6E01               	movwf	??_set_E& (0+255),c
 12590  00735C  0E7A               	movlw	high _LED_E
 12591  00735E  6E02               	movwf	(??_set_E+1)& (0+255),c
 12592  007360  50F3               	movf	prodl,w,c
 12593  007362  2601               	addwf	??_set_E,f,c
 12594  007364  50F4               	movf	prodh,w,c
 12595  007366  2202               	addwfc	??_set_E+1,f,c
 12596  007368  51B7               	movf	(_state_CE+39)& (0+255),w,b
 12597  00736A  2601               	addwf	??_set_E,f,c
 12598  00736C  0E00               	movlw	0
 12599  00736E  2202               	addwfc	??_set_E+1,f,c
 12600  007370  C001  FFF6         	movff	??_set_E,tblptrl
 12601  007374  C002  FFF7         	movff	??_set_E+1,tblptrh
 12602  007378                     	if	0	;tblptru may be non-zero
 12603  007378                     	endif
 12604  007378                     	if	0	;tblptru may be non-zero
 12605  007378                     	endif
 12606  007378  0008               	tblrd		*
 12607  00737A  CFF5 F16F          	movff	tablat,_LED_Light+50
 12608                           
 12609                           ;master/operation_CES.c: 320:     LED_Light[5][3] = LED_E[state_CE.ep[9]][state_CE.eo[9]
      +                          ];
 12610  00737E  51A9               	movf	(_state_CE+25)& (0+255),w,b
 12611  007380  0D02               	mullw	2
 12612  007382  0E52               	movlw	low _LED_E
 12613  007384  6E01               	movwf	??_set_E& (0+255),c
 12614  007386  0E7A               	movlw	high _LED_E
 12615  007388  6E02               	movwf	(??_set_E+1)& (0+255),c
 12616  00738A  50F3               	movf	prodl,w,c
 12617  00738C  2601               	addwf	??_set_E,f,c
 12618  00738E  50F4               	movf	prodh,w,c
 12619  007390  2202               	addwfc	??_set_E+1,f,c
 12620  007392  51B5               	movf	(_state_CE+37)& (0+255),w,b
 12621  007394  2601               	addwf	??_set_E,f,c
 12622  007396  0E00               	movlw	0
 12623  007398  2202               	addwfc	??_set_E+1,f,c
 12624  00739A  C001  FFF6         	movff	??_set_E,tblptrl
 12625  00739E  C002  FFF7         	movff	??_set_E+1,tblptrh
 12626  0073A2                     	if	0	;tblptru may be non-zero
 12627  0073A2                     	endif
 12628  0073A2                     	if	0	;tblptru may be non-zero
 12629  0073A2                     	endif
 12630  0073A2  0008               	tblrd		*
 12631  0073A4  CFF5 F16D          	movff	tablat,_LED_Light+48
 12632                           
 12633                           ;master/operation_CES.c: 321:     LED_Light[5][7] = LED_E[state_CE.ep[8]][state_CE.eo[8]
      +                          ];
 12634  0073A8  51A8               	movf	(_state_CE+24)& (0+255),w,b
 12635  0073AA  0D02               	mullw	2
 12636  0073AC  0E52               	movlw	low _LED_E
 12637  0073AE  6E01               	movwf	??_set_E& (0+255),c
 12638  0073B0  0E7A               	movlw	high _LED_E
 12639  0073B2  6E02               	movwf	(??_set_E+1)& (0+255),c
 12640  0073B4  50F3               	movf	prodl,w,c
 12641  0073B6  2601               	addwf	??_set_E,f,c
 12642  0073B8  50F4               	movf	prodh,w,c
 12643  0073BA  2202               	addwfc	??_set_E+1,f,c
 12644  0073BC  51B4               	movf	(_state_CE+36)& (0+255),w,b
 12645  0073BE  2601               	addwf	??_set_E,f,c
 12646  0073C0  0E00               	movlw	0
 12647  0073C2  2202               	addwfc	??_set_E+1,f,c
 12648  0073C4  C001  FFF6         	movff	??_set_E,tblptrl
 12649  0073C8  C002  FFF7         	movff	??_set_E+1,tblptrh
 12650  0073CC                     	if	0	;tblptru may be non-zero
 12651  0073CC                     	endif
 12652  0073CC                     	if	0	;tblptru may be non-zero
 12653  0073CC                     	endif
 12654  0073CC  0008               	tblrd		*
 12655  0073CE  CFF5 F171          	movff	tablat,_LED_Light+52
 12656                           
 12657                           ; BSR set to: 1
 12658  0073D2  0012               	return		;funcret
 12659  0073D4                     __end_of_set_E:
 12660                           	opt callstack 0
 12661                           
 12662 ;; *************** function _set_C *****************
 12663 ;; Defined at:
 12664 ;;		line 257 in file "master/operation_CES.c"
 12665 ;; Parameters:    Size  Location     Type
 12666 ;;		None
 12667 ;; Auto vars:     Size  Location     Type
 12668 ;;		None
 12669 ;; Return value:  Size  Location     Type
 12670 ;;                  1    wreg      void 
 12671 ;; Registers used:
 12672 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12673 ;; Tracked objects:
 12674 ;;		On entry : 0/0
 12675 ;;		On exit  : 0/0
 12676 ;;		Unchanged: 0/0
 12677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12678 ;;      Params:         0       0       0       0       0       0       0
 12679 ;;      Locals:         0       0       0       0       0       0       0
 12680 ;;      Temps:          2       0       0       0       0       0       0
 12681 ;;      Totals:         2       0       0       0       0       0       0
 12682 ;;Total ram usage:        2 bytes
 12683 ;; Hardware stack levels used:    1
 12684 ;; Hardware stack levels required when called:    1
 12685 ;; This function calls:
 12686 ;;		___awmod
 12687 ;; This function is called by:
 12688 ;;		_set_CES
 12689 ;;		_if_no_pair
 12690 ;; This function uses a non-reentrant model
 12691 ;;
 12692                           
 12693                           	psect	text48
 12694  0073D4                     __ptext48:
 12695                           	opt callstack 0
 12696  0073D4                     _set_C:
 12697                           	opt callstack 28
 12698                           
 12699                           ;master/operation_CES.c: 260:     LED_Light[0][2] = LED_C[state_CE.cp[0]][state_CE.co[0]
      +                          ];
 12700                           
 12701                           ; BSR set to: 1
 12702                           ;incstack = 0
 12703  0073D4  0101               	movlb	1	; () banked
 12704  0073D6  5190               	movf	_state_CE& (0+255),w,b
 12705  0073D8  0D03               	mullw	3
 12706  0073DA  0E6A               	movlw	low _LED_C
 12707  0073DC  6E29               	movwf	??_set_C& (0+255),c
 12708  0073DE  0E7A               	movlw	high _LED_C
 12709  0073E0  6E2A               	movwf	(??_set_C+1)& (0+255),c
 12710  0073E2  50F3               	movf	prodl,w,c
 12711  0073E4  2629               	addwf	??_set_C,f,c
 12712  0073E6  50F4               	movf	prodh,w,c
 12713  0073E8  222A               	addwfc	??_set_C+1,f,c
 12714  0073EA  5198               	movf	(_state_CE+8)& (0+255),w,b
 12715  0073EC  2629               	addwf	??_set_C,f,c
 12716  0073EE  0E00               	movlw	0
 12717  0073F0  222A               	addwfc	??_set_C+1,f,c
 12718  0073F2  C029  FFF6         	movff	??_set_C,tblptrl
 12719  0073F6  C02A  FFF7         	movff	??_set_C+1,tblptrh
 12720  0073FA                     	if	0	;tblptru may be non-zero
 12721  0073FA                     	endif
 12722  0073FA                     	if	0	;tblptru may be non-zero
 12723  0073FA                     	endif
 12724  0073FA  0008               	tblrd		*
 12725  0073FC  CFF5 F13F          	movff	tablat,_LED_Light+2
 12726                           
 12727                           ;master/operation_CES.c: 261:     LED_Light[0][0] = LED_C[state_CE.cp[1]][state_CE.co[1]
      +                          ];
 12728  007400  5191               	movf	(_state_CE+1)& (0+255),w,b
 12729  007402  0D03               	mullw	3
 12730  007404  0E6A               	movlw	low _LED_C
 12731  007406  6E29               	movwf	??_set_C& (0+255),c
 12732  007408  0E7A               	movlw	high _LED_C
 12733  00740A  6E2A               	movwf	(??_set_C+1)& (0+255),c
 12734  00740C  50F3               	movf	prodl,w,c
 12735  00740E  2629               	addwf	??_set_C,f,c
 12736  007410  50F4               	movf	prodh,w,c
 12737  007412  222A               	addwfc	??_set_C+1,f,c
 12738  007414  5199               	movf	(_state_CE+9)& (0+255),w,b
 12739  007416  2629               	addwf	??_set_C,f,c
 12740  007418  0E00               	movlw	0
 12741  00741A  222A               	addwfc	??_set_C+1,f,c
 12742  00741C  C029  FFF6         	movff	??_set_C,tblptrl
 12743  007420  C02A  FFF7         	movff	??_set_C+1,tblptrh
 12744  007424                     	if	0	;tblptru may be non-zero
 12745  007424                     	endif
 12746  007424                     	if	0	;tblptru may be non-zero
 12747  007424                     	endif
 12748  007424  0008               	tblrd		*
 12749  007426  CFF5 F13D          	movff	tablat,_LED_Light
 12750                           
 12751                           ;master/operation_CES.c: 262:     LED_Light[0][8] = LED_C[state_CE.cp[3]][state_CE.co[3]
      +                          ];
 12752  00742A  5193               	movf	(_state_CE+3)& (0+255),w,b
 12753  00742C  0D03               	mullw	3
 12754  00742E  0E6A               	movlw	low _LED_C
 12755  007430  6E29               	movwf	??_set_C& (0+255),c
 12756  007432  0E7A               	movlw	high _LED_C
 12757  007434  6E2A               	movwf	(??_set_C+1)& (0+255),c
 12758  007436  50F3               	movf	prodl,w,c
 12759  007438  2629               	addwf	??_set_C,f,c
 12760  00743A  50F4               	movf	prodh,w,c
 12761  00743C  222A               	addwfc	??_set_C+1,f,c
 12762  00743E  519B               	movf	(_state_CE+11)& (0+255),w,b
 12763  007440  2629               	addwf	??_set_C,f,c
 12764  007442  0E00               	movlw	0
 12765  007444  222A               	addwfc	??_set_C+1,f,c
 12766  007446  C029  FFF6         	movff	??_set_C,tblptrl
 12767  00744A  C02A  FFF7         	movff	??_set_C+1,tblptrh
 12768  00744E                     	if	0	;tblptru may be non-zero
 12769  00744E                     	endif
 12770  00744E                     	if	0	;tblptru may be non-zero
 12771  00744E                     	endif
 12772  00744E  0008               	tblrd		*
 12773  007450  CFF5 F145          	movff	tablat,_LED_Light+8
 12774                           
 12775                           ;master/operation_CES.c: 263:     LED_Light[0][6] = LED_C[state_CE.cp[2]][state_CE.co[2]
      +                          ];
 12776  007454  5192               	movf	(_state_CE+2)& (0+255),w,b
 12777  007456  0D03               	mullw	3
 12778  007458  0E6A               	movlw	low _LED_C
 12779  00745A  6E29               	movwf	??_set_C& (0+255),c
 12780  00745C  0E7A               	movlw	high _LED_C
 12781  00745E  6E2A               	movwf	(??_set_C+1)& (0+255),c
 12782  007460  50F3               	movf	prodl,w,c
 12783  007462  2629               	addwf	??_set_C,f,c
 12784  007464  50F4               	movf	prodh,w,c
 12785  007466  222A               	addwfc	??_set_C+1,f,c
 12786  007468  519A               	movf	(_state_CE+10)& (0+255),w,b
 12787  00746A  2629               	addwf	??_set_C,f,c
 12788  00746C  0E00               	movlw	0
 12789  00746E  222A               	addwfc	??_set_C+1,f,c
 12790  007470  C029  FFF6         	movff	??_set_C,tblptrl
 12791  007474  C02A  FFF7         	movff	??_set_C+1,tblptrh
 12792  007478                     	if	0	;tblptru may be non-zero
 12793  007478                     	endif
 12794  007478                     	if	0	;tblptru may be non-zero
 12795  007478                     	endif
 12796  007478  0008               	tblrd		*
 12797  00747A  CFF5 F143          	movff	tablat,_LED_Light+6
 12798                           
 12799                           ; BSR set to: 1
 12800                           ;master/operation_CES.c: 265:     LED_Light[1][2] = LED_C[state_CE.cp[3]][(state_CE.co[3
      +                          ] + 2) % 3];
 12801  00747E  0E02               	movlw	2
 12802  007480  259B               	addwf	(_state_CE+11)& (0+255),w,b
 12803  007482  6E23               	movwf	___awmod@dividend,c
 12804  007484  6A24               	clrf	___awmod@dividend+1,c
 12805  007486  0E00               	movlw	0
 12806  007488  2224               	addwfc	___awmod@dividend+1,f,c
 12807  00748A  0E00               	movlw	0
 12808  00748C  6E26               	movwf	___awmod@divisor+1,c
 12809  00748E  0E03               	movlw	3
 12810  007490  6E25               	movwf	___awmod@divisor,c
 12811  007492  EC77  F01A         	call	___awmod	;wreg free
 12812  007496  0101               	movlb	1	; () banked
 12813  007498  5193               	movf	(_state_CE+3)& (0+255),w,b
 12814  00749A  0D03               	mullw	3
 12815  00749C  0E6A               	movlw	low _LED_C
 12816  00749E  6E29               	movwf	??_set_C& (0+255),c
 12817  0074A0  0E7A               	movlw	high _LED_C
 12818  0074A2  6E2A               	movwf	(??_set_C+1)& (0+255),c
 12819  0074A4  50F3               	movf	prodl,w,c
 12820  0074A6  2629               	addwf	??_set_C,f,c
 12821  0074A8  50F4               	movf	prodh,w,c
 12822  0074AA  222A               	addwfc	??_set_C+1,f,c
 12823  0074AC  5023               	movf	?___awmod,w,c
 12824  0074AE  2629               	addwf	??_set_C,f,c
 12825  0074B0  5024               	movf	?___awmod+1,w,c
 12826  0074B2  222A               	addwfc	??_set_C+1,f,c
 12827  0074B4  C029  FFF6         	movff	??_set_C,tblptrl
 12828  0074B8  C02A  FFF7         	movff	??_set_C+1,tblptrh
 12829  0074BC                     	if	0	;tblptru may be non-zero
 12830  0074BC                     	endif
 12831  0074BC                     	if	0	;tblptru may be non-zero
 12832  0074BC                     	endif
 12833  0074BC  0008               	tblrd		*
 12834  0074BE  CFF5 F148          	movff	tablat,_LED_Light+11
 12835                           
 12836                           ; BSR set to: 1
 12837                           ;master/operation_CES.c: 266:     LED_Light[1][0] = LED_C[state_CE.cp[2]][(state_CE.co[2
      +                          ] + 1) % 3];
 12838  0074C2  0E01               	movlw	1
 12839  0074C4  259A               	addwf	(_state_CE+10)& (0+255),w,b
 12840  0074C6  6E23               	movwf	___awmod@dividend,c
 12841  0074C8  6A24               	clrf	___awmod@dividend+1,c
 12842  0074CA  0E00               	movlw	0
 12843  0074CC  2224               	addwfc	___awmod@dividend+1,f,c
 12844  0074CE  0E00               	movlw	0
 12845  0074D0  6E26               	movwf	___awmod@divisor+1,c
 12846  0074D2  0E03               	movlw	3
 12847  0074D4  6E25               	movwf	___awmod@divisor,c
 12848  0074D6  EC77  F01A         	call	___awmod	;wreg free
 12849  0074DA  0101               	movlb	1	; () banked
 12850  0074DC  5192               	movf	(_state_CE+2)& (0+255),w,b
 12851  0074DE  0D03               	mullw	3
 12852  0074E0  0E6A               	movlw	low _LED_C
 12853  0074E2  6E29               	movwf	??_set_C& (0+255),c
 12854  0074E4  0E7A               	movlw	high _LED_C
 12855  0074E6  6E2A               	movwf	(??_set_C+1)& (0+255),c
 12856  0074E8  50F3               	movf	prodl,w,c
 12857  0074EA  2629               	addwf	??_set_C,f,c
 12858  0074EC  50F4               	movf	prodh,w,c
 12859  0074EE  222A               	addwfc	??_set_C+1,f,c
 12860  0074F0  5023               	movf	?___awmod,w,c
 12861  0074F2  2629               	addwf	??_set_C,f,c
 12862  0074F4  5024               	movf	?___awmod+1,w,c
 12863  0074F6  222A               	addwfc	??_set_C+1,f,c
 12864  0074F8  C029  FFF6         	movff	??_set_C,tblptrl
 12865  0074FC  C02A  FFF7         	movff	??_set_C+1,tblptrh
 12866  007500                     	if	0	;tblptru may be non-zero
 12867  007500                     	endif
 12868  007500                     	if	0	;tblptru may be non-zero
 12869  007500                     	endif
 12870  007500  0008               	tblrd		*
 12871  007502  CFF5 F146          	movff	tablat,_LED_Light+9
 12872                           
 12873                           ; BSR set to: 1
 12874                           ;master/operation_CES.c: 267:     LED_Light[1][8] = LED_C[state_CE.cp[7]][(state_CE.co[7
      +                          ] + 1) % 3];
 12875  007506  0E01               	movlw	1
 12876  007508  259F               	addwf	(_state_CE+15)& (0+255),w,b
 12877  00750A  6E23               	movwf	___awmod@dividend,c
 12878  00750C  6A24               	clrf	___awmod@dividend+1,c
 12879  00750E  0E00               	movlw	0
 12880  007510  2224               	addwfc	___awmod@dividend+1,f,c
 12881  007512  0E00               	movlw	0
 12882  007514  6E26               	movwf	___awmod@divisor+1,c
 12883  007516  0E03               	movlw	3
 12884  007518  6E25               	movwf	___awmod@divisor,c
 12885  00751A  EC77  F01A         	call	___awmod	;wreg free
 12886  00751E  0101               	movlb	1	; () banked
 12887  007520  5197               	movf	(_state_CE+7)& (0+255),w,b
 12888  007522  0D03               	mullw	3
 12889  007524  0E6A               	movlw	low _LED_C
 12890  007526  6E29               	movwf	??_set_C& (0+255),c
 12891  007528  0E7A               	movlw	high _LED_C
 12892  00752A  6E2A               	movwf	(??_set_C+1)& (0+255),c
 12893  00752C  50F3               	movf	prodl,w,c
 12894  00752E  2629               	addwf	??_set_C,f,c
 12895  007530  50F4               	movf	prodh,w,c
 12896  007532  222A               	addwfc	??_set_C+1,f,c
 12897  007534  5023               	movf	?___awmod,w,c
 12898  007536  2629               	addwf	??_set_C,f,c
 12899  007538  5024               	movf	?___awmod+1,w,c
 12900  00753A  222A               	addwfc	??_set_C+1,f,c
 12901  00753C  C029  FFF6         	movff	??_set_C,tblptrl
 12902  007540  C02A  FFF7         	movff	??_set_C+1,tblptrh
 12903  007544                     	if	0	;tblptru may be non-zero
 12904  007544                     	endif
 12905  007544                     	if	0	;tblptru may be non-zero
 12906  007544                     	endif
 12907  007544  0008               	tblrd		*
 12908  007546  CFF5 F14E          	movff	tablat,_LED_Light+17
 12909                           
 12910                           ; BSR set to: 1
 12911                           ;master/operation_CES.c: 268:     LED_Light[1][6] = LED_C[state_CE.cp[6]][(state_CE.co[6
      +                          ] + 2) % 3];
 12912  00754A  0E02               	movlw	2
 12913  00754C  259E               	addwf	(_state_CE+14)& (0+255),w,b
 12914  00754E  6E23               	movwf	___awmod@dividend,c
 12915  007550  6A24               	clrf	___awmod@dividend+1,c
 12916  007552  0E00               	movlw	0
 12917  007554  2224               	addwfc	___awmod@dividend+1,f,c
 12918  007556  0E00               	movlw	0
 12919  007558  6E26               	movwf	___awmod@divisor+1,c
 12920  00755A  0E03               	movlw	3
 12921  00755C  6E25               	movwf	___awmod@divisor,c
 12922  00755E  EC77  F01A         	call	___awmod	;wreg free
 12923  007562  0101               	movlb	1	; () banked
 12924  007564  5196               	movf	(_state_CE+6)& (0+255),w,b
 12925  007566  0D03               	mullw	3
 12926  007568  0E6A               	movlw	low _LED_C
 12927  00756A  6E29               	movwf	??_set_C& (0+255),c
 12928  00756C  0E7A               	movlw	high _LED_C
 12929  00756E  6E2A               	movwf	(??_set_C+1)& (0+255),c
 12930  007570  50F3               	movf	prodl,w,c
 12931  007572  2629               	addwf	??_set_C,f,c
 12932  007574  50F4               	movf	prodh,w,c
 12933  007576  222A               	addwfc	??_set_C+1,f,c
 12934  007578  5023               	movf	?___awmod,w,c
 12935  00757A  2629               	addwf	??_set_C,f,c
 12936  00757C  5024               	movf	?___awmod+1,w,c
 12937  00757E  222A               	addwfc	??_set_C+1,f,c
 12938  007580  C029  FFF6         	movff	??_set_C,tblptrl
 12939  007584  C02A  FFF7         	movff	??_set_C+1,tblptrh
 12940  007588                     	if	0	;tblptru may be non-zero
 12941  007588                     	endif
 12942  007588                     	if	0	;tblptru may be non-zero
 12943  007588                     	endif
 12944  007588  0008               	tblrd		*
 12945  00758A  CFF5 F14C          	movff	tablat,_LED_Light+15
 12946                           
 12947                           ; BSR set to: 1
 12948                           ;master/operation_CES.c: 270:     LED_Light[4][2] = LED_C[state_CE.cp[2]][(state_CE.co[2
      +                          ] + 2) % 3];
 12949  00758E  0E02               	movlw	2
 12950  007590  259A               	addwf	(_state_CE+10)& (0+255),w,b
 12951  007592  6E23               	movwf	___awmod@dividend,c
 12952  007594  6A24               	clrf	___awmod@dividend+1,c
 12953  007596  0E00               	movlw	0
 12954  007598  2224               	addwfc	___awmod@dividend+1,f,c
 12955  00759A  0E00               	movlw	0
 12956  00759C  6E26               	movwf	___awmod@divisor+1,c
 12957  00759E  0E03               	movlw	3
 12958  0075A0  6E25               	movwf	___awmod@divisor,c
 12959  0075A2  EC77  F01A         	call	___awmod	;wreg free
 12960  0075A6  0101               	movlb	1	; () banked
 12961  0075A8  5192               	movf	(_state_CE+2)& (0+255),w,b
 12962  0075AA  0D03               	mullw	3
 12963  0075AC  0E6A               	movlw	low _LED_C
 12964  0075AE  6E29               	movwf	??_set_C& (0+255),c
 12965  0075B0  0E7A               	movlw	high _LED_C
 12966  0075B2  6E2A               	movwf	(??_set_C+1)& (0+255),c
 12967  0075B4  50F3               	movf	prodl,w,c
 12968  0075B6  2629               	addwf	??_set_C,f,c
 12969  0075B8  50F4               	movf	prodh,w,c
 12970  0075BA  222A               	addwfc	??_set_C+1,f,c
 12971  0075BC  5023               	movf	?___awmod,w,c
 12972  0075BE  2629               	addwf	??_set_C,f,c
 12973  0075C0  5024               	movf	?___awmod+1,w,c
 12974  0075C2  222A               	addwfc	??_set_C+1,f,c
 12975  0075C4  C029  FFF6         	movff	??_set_C,tblptrl
 12976  0075C8  C02A  FFF7         	movff	??_set_C+1,tblptrh
 12977  0075CC                     	if	0	;tblptru may be non-zero
 12978  0075CC                     	endif
 12979  0075CC                     	if	0	;tblptru may be non-zero
 12980  0075CC                     	endif
 12981  0075CC  0008               	tblrd		*
 12982  0075CE  CFF5 F163          	movff	tablat,_LED_Light+38
 12983                           
 12984                           ; BSR set to: 1
 12985                           ;master/operation_CES.c: 271:     LED_Light[4][0] = LED_C[state_CE.cp[1]][(state_CE.co[1
      +                          ] + 1) % 3];
 12986  0075D2  0E01               	movlw	1
 12987  0075D4  2599               	addwf	(_state_CE+9)& (0+255),w,b
 12988  0075D6  6E23               	movwf	___awmod@dividend,c
 12989  0075D8  6A24               	clrf	___awmod@dividend+1,c
 12990  0075DA  0E00               	movlw	0
 12991  0075DC  2224               	addwfc	___awmod@dividend+1,f,c
 12992  0075DE  0E00               	movlw	0
 12993  0075E0  6E26               	movwf	___awmod@divisor+1,c
 12994  0075E2  0E03               	movlw	3
 12995  0075E4  6E25               	movwf	___awmod@divisor,c
 12996  0075E6  EC77  F01A         	call	___awmod	;wreg free
 12997  0075EA  0101               	movlb	1	; () banked
 12998  0075EC  5191               	movf	(_state_CE+1)& (0+255),w,b
 12999  0075EE  0D03               	mullw	3
 13000  0075F0  0E6A               	movlw	low _LED_C
 13001  0075F2  6E29               	movwf	??_set_C& (0+255),c
 13002  0075F4  0E7A               	movlw	high _LED_C
 13003  0075F6  6E2A               	movwf	(??_set_C+1)& (0+255),c
 13004  0075F8  50F3               	movf	prodl,w,c
 13005  0075FA  2629               	addwf	??_set_C,f,c
 13006  0075FC  50F4               	movf	prodh,w,c
 13007  0075FE  222A               	addwfc	??_set_C+1,f,c
 13008  007600  5023               	movf	?___awmod,w,c
 13009  007602  2629               	addwf	??_set_C,f,c
 13010  007604  5024               	movf	?___awmod+1,w,c
 13011  007606  222A               	addwfc	??_set_C+1,f,c
 13012  007608  C029  FFF6         	movff	??_set_C,tblptrl
 13013  00760C  C02A  FFF7         	movff	??_set_C+1,tblptrh
 13014  007610                     	if	0	;tblptru may be non-zero
 13015  007610                     	endif
 13016  007610                     	if	0	;tblptru may be non-zero
 13017  007610                     	endif
 13018  007610  0008               	tblrd		*
 13019  007612  CFF5 F161          	movff	tablat,_LED_Light+36
 13020                           
 13021                           ; BSR set to: 1
 13022                           ;master/operation_CES.c: 272:     LED_Light[4][8] = LED_C[state_CE.cp[6]][(state_CE.co[6
      +                          ] + 1) % 3];
 13023  007616  0E01               	movlw	1
 13024  007618  259E               	addwf	(_state_CE+14)& (0+255),w,b
 13025  00761A  6E23               	movwf	___awmod@dividend,c
 13026  00761C  6A24               	clrf	___awmod@dividend+1,c
 13027  00761E  0E00               	movlw	0
 13028  007620  2224               	addwfc	___awmod@dividend+1,f,c
 13029  007622  0E00               	movlw	0
 13030  007624  6E26               	movwf	___awmod@divisor+1,c
 13031  007626  0E03               	movlw	3
 13032  007628  6E25               	movwf	___awmod@divisor,c
 13033  00762A  EC77  F01A         	call	___awmod	;wreg free
 13034  00762E  0101               	movlb	1	; () banked
 13035  007630  5196               	movf	(_state_CE+6)& (0+255),w,b
 13036  007632  0D03               	mullw	3
 13037  007634  0E6A               	movlw	low _LED_C
 13038  007636  6E29               	movwf	??_set_C& (0+255),c
 13039  007638  0E7A               	movlw	high _LED_C
 13040  00763A  6E2A               	movwf	(??_set_C+1)& (0+255),c
 13041  00763C  50F3               	movf	prodl,w,c
 13042  00763E  2629               	addwf	??_set_C,f,c
 13043  007640  50F4               	movf	prodh,w,c
 13044  007642  222A               	addwfc	??_set_C+1,f,c
 13045  007644  5023               	movf	?___awmod,w,c
 13046  007646  2629               	addwf	??_set_C,f,c
 13047  007648  5024               	movf	?___awmod+1,w,c
 13048  00764A  222A               	addwfc	??_set_C+1,f,c
 13049  00764C  C029  FFF6         	movff	??_set_C,tblptrl
 13050  007650  C02A  FFF7         	movff	??_set_C+1,tblptrh
 13051  007654                     	if	0	;tblptru may be non-zero
 13052  007654                     	endif
 13053  007654                     	if	0	;tblptru may be non-zero
 13054  007654                     	endif
 13055  007654  0008               	tblrd		*
 13056  007656  CFF5 F169          	movff	tablat,_LED_Light+44
 13057                           
 13058                           ; BSR set to: 1
 13059                           ;master/operation_CES.c: 273:     LED_Light[4][6] = LED_C[state_CE.cp[5]][(state_CE.co[5
      +                          ] + 2) % 3];
 13060  00765A  0E02               	movlw	2
 13061  00765C  259D               	addwf	(_state_CE+13)& (0+255),w,b
 13062  00765E  6E23               	movwf	___awmod@dividend,c
 13063  007660  6A24               	clrf	___awmod@dividend+1,c
 13064  007662  0E00               	movlw	0
 13065  007664  2224               	addwfc	___awmod@dividend+1,f,c
 13066  007666  0E00               	movlw	0
 13067  007668  6E26               	movwf	___awmod@divisor+1,c
 13068  00766A  0E03               	movlw	3
 13069  00766C  6E25               	movwf	___awmod@divisor,c
 13070  00766E  EC77  F01A         	call	___awmod	;wreg free
 13071  007672  0101               	movlb	1	; () banked
 13072  007674  5195               	movf	(_state_CE+5)& (0+255),w,b
 13073  007676  0D03               	mullw	3
 13074  007678  0E6A               	movlw	low _LED_C
 13075  00767A  6E29               	movwf	??_set_C& (0+255),c
 13076  00767C  0E7A               	movlw	high _LED_C
 13077  00767E  6E2A               	movwf	(??_set_C+1)& (0+255),c
 13078  007680  50F3               	movf	prodl,w,c
 13079  007682  2629               	addwf	??_set_C,f,c
 13080  007684  50F4               	movf	prodh,w,c
 13081  007686  222A               	addwfc	??_set_C+1,f,c
 13082  007688  5023               	movf	?___awmod,w,c
 13083  00768A  2629               	addwf	??_set_C,f,c
 13084  00768C  5024               	movf	?___awmod+1,w,c
 13085  00768E  222A               	addwfc	??_set_C+1,f,c
 13086  007690  C029  FFF6         	movff	??_set_C,tblptrl
 13087  007694  C02A  FFF7         	movff	??_set_C+1,tblptrh
 13088  007698                     	if	0	;tblptru may be non-zero
 13089  007698                     	endif
 13090  007698                     	if	0	;tblptru may be non-zero
 13091  007698                     	endif
 13092  007698  0008               	tblrd		*
 13093  00769A  CFF5 F167          	movff	tablat,_LED_Light+42
 13094                           
 13095                           ; BSR set to: 1
 13096                           ;master/operation_CES.c: 275:     LED_Light[3][2] = LED_C[state_CE.cp[1]][(state_CE.co[1
      +                          ] + 2) % 3];
 13097  00769E  0E02               	movlw	2
 13098  0076A0  2599               	addwf	(_state_CE+9)& (0+255),w,b
 13099  0076A2  6E23               	movwf	___awmod@dividend,c
 13100  0076A4  6A24               	clrf	___awmod@dividend+1,c
 13101  0076A6  0E00               	movlw	0
 13102  0076A8  2224               	addwfc	___awmod@dividend+1,f,c
 13103  0076AA  0E00               	movlw	0
 13104  0076AC  6E26               	movwf	___awmod@divisor+1,c
 13105  0076AE  0E03               	movlw	3
 13106  0076B0  6E25               	movwf	___awmod@divisor,c
 13107  0076B2  EC77  F01A         	call	___awmod	;wreg free
 13108  0076B6  0101               	movlb	1	; () banked
 13109  0076B8  5191               	movf	(_state_CE+1)& (0+255),w,b
 13110  0076BA  0D03               	mullw	3
 13111  0076BC  0E6A               	movlw	low _LED_C
 13112  0076BE  6E29               	movwf	??_set_C& (0+255),c
 13113  0076C0  0E7A               	movlw	high _LED_C
 13114  0076C2  6E2A               	movwf	(??_set_C+1)& (0+255),c
 13115  0076C4  50F3               	movf	prodl,w,c
 13116  0076C6  2629               	addwf	??_set_C,f,c
 13117  0076C8  50F4               	movf	prodh,w,c
 13118  0076CA  222A               	addwfc	??_set_C+1,f,c
 13119  0076CC  5023               	movf	?___awmod,w,c
 13120  0076CE  2629               	addwf	??_set_C,f,c
 13121  0076D0  5024               	movf	?___awmod+1,w,c
 13122  0076D2  222A               	addwfc	??_set_C+1,f,c
 13123  0076D4  C029  FFF6         	movff	??_set_C,tblptrl
 13124  0076D8  C02A  FFF7         	movff	??_set_C+1,tblptrh
 13125  0076DC                     	if	0	;tblptru may be non-zero
 13126  0076DC                     	endif
 13127  0076DC                     	if	0	;tblptru may be non-zero
 13128  0076DC                     	endif
 13129  0076DC  0008               	tblrd		*
 13130  0076DE  CFF5 F15A          	movff	tablat,_LED_Light+29
 13131                           
 13132                           ; BSR set to: 1
 13133                           ;master/operation_CES.c: 276:     LED_Light[3][0] = LED_C[state_CE.cp[0]][(state_CE.co[0
      +                          ] + 1) % 3];
 13134  0076E2  0E01               	movlw	1
 13135  0076E4  2598               	addwf	(_state_CE+8)& (0+255),w,b
 13136  0076E6  6E23               	movwf	___awmod@dividend,c
 13137  0076E8  6A24               	clrf	___awmod@dividend+1,c
 13138  0076EA  0E00               	movlw	0
 13139  0076EC  2224               	addwfc	___awmod@dividend+1,f,c
 13140  0076EE  0E00               	movlw	0
 13141  0076F0  6E26               	movwf	___awmod@divisor+1,c
 13142  0076F2  0E03               	movlw	3
 13143  0076F4  6E25               	movwf	___awmod@divisor,c
 13144  0076F6  EC77  F01A         	call	___awmod	;wreg free
 13145  0076FA  0101               	movlb	1	; () banked
 13146  0076FC  5190               	movf	_state_CE& (0+255),w,b
 13147  0076FE  0D03               	mullw	3
 13148  007700  0E6A               	movlw	low _LED_C
 13149  007702  6E29               	movwf	??_set_C& (0+255),c
 13150  007704  0E7A               	movlw	high _LED_C
 13151  007706  6E2A               	movwf	(??_set_C+1)& (0+255),c
 13152  007708  50F3               	movf	prodl,w,c
 13153  00770A  2629               	addwf	??_set_C,f,c
 13154  00770C  50F4               	movf	prodh,w,c
 13155  00770E  222A               	addwfc	??_set_C+1,f,c
 13156  007710  5023               	movf	?___awmod,w,c
 13157  007712  2629               	addwf	??_set_C,f,c
 13158  007714  5024               	movf	?___awmod+1,w,c
 13159  007716  222A               	addwfc	??_set_C+1,f,c
 13160  007718  C029  FFF6         	movff	??_set_C,tblptrl
 13161  00771C  C02A  FFF7         	movff	??_set_C+1,tblptrh
 13162  007720                     	if	0	;tblptru may be non-zero
 13163  007720                     	endif
 13164  007720                     	if	0	;tblptru may be non-zero
 13165  007720                     	endif
 13166  007720  0008               	tblrd		*
 13167  007722  CFF5 F158          	movff	tablat,_LED_Light+27
 13168                           
 13169                           ; BSR set to: 1
 13170                           ;master/operation_CES.c: 277:     LED_Light[3][8] = LED_C[state_CE.cp[5]][(state_CE.co[5
      +                          ] + 1) % 3];
 13171  007726  0E01               	movlw	1
 13172  007728  259D               	addwf	(_state_CE+13)& (0+255),w,b
 13173  00772A  6E23               	movwf	___awmod@dividend,c
 13174  00772C  6A24               	clrf	___awmod@dividend+1,c
 13175  00772E  0E00               	movlw	0
 13176  007730  2224               	addwfc	___awmod@dividend+1,f,c
 13177  007732  0E00               	movlw	0
 13178  007734  6E26               	movwf	___awmod@divisor+1,c
 13179  007736  0E03               	movlw	3
 13180  007738  6E25               	movwf	___awmod@divisor,c
 13181  00773A  EC77  F01A         	call	___awmod	;wreg free
 13182  00773E  0101               	movlb	1	; () banked
 13183  007740  5195               	movf	(_state_CE+5)& (0+255),w,b
 13184  007742  0D03               	mullw	3
 13185  007744  0E6A               	movlw	low _LED_C
 13186  007746  6E29               	movwf	??_set_C& (0+255),c
 13187  007748  0E7A               	movlw	high _LED_C
 13188  00774A  6E2A               	movwf	(??_set_C+1)& (0+255),c
 13189  00774C  50F3               	movf	prodl,w,c
 13190  00774E  2629               	addwf	??_set_C,f,c
 13191  007750  50F4               	movf	prodh,w,c
 13192  007752  222A               	addwfc	??_set_C+1,f,c
 13193  007754  5023               	movf	?___awmod,w,c
 13194  007756  2629               	addwf	??_set_C,f,c
 13195  007758  5024               	movf	?___awmod+1,w,c
 13196  00775A  222A               	addwfc	??_set_C+1,f,c
 13197  00775C  C029  FFF6         	movff	??_set_C,tblptrl
 13198  007760  C02A  FFF7         	movff	??_set_C+1,tblptrh
 13199  007764                     	if	0	;tblptru may be non-zero
 13200  007764                     	endif
 13201  007764                     	if	0	;tblptru may be non-zero
 13202  007764                     	endif
 13203  007764  0008               	tblrd		*
 13204  007766  CFF5 F160          	movff	tablat,_LED_Light+35
 13205                           
 13206                           ; BSR set to: 1
 13207                           ;master/operation_CES.c: 278:     LED_Light[3][6] = LED_C[state_CE.cp[4]][(state_CE.co[4
      +                          ] + 2) % 3];
 13208  00776A  0E02               	movlw	2
 13209  00776C  259C               	addwf	(_state_CE+12)& (0+255),w,b
 13210  00776E  6E23               	movwf	___awmod@dividend,c
 13211  007770  6A24               	clrf	___awmod@dividend+1,c
 13212  007772  0E00               	movlw	0
 13213  007774  2224               	addwfc	___awmod@dividend+1,f,c
 13214  007776  0E00               	movlw	0
 13215  007778  6E26               	movwf	___awmod@divisor+1,c
 13216  00777A  0E03               	movlw	3
 13217  00777C  6E25               	movwf	___awmod@divisor,c
 13218  00777E  EC77  F01A         	call	___awmod	;wreg free
 13219  007782  0101               	movlb	1	; () banked
 13220  007784  5194               	movf	(_state_CE+4)& (0+255),w,b
 13221  007786  0D03               	mullw	3
 13222  007788  0E6A               	movlw	low _LED_C
 13223  00778A  6E29               	movwf	??_set_C& (0+255),c
 13224  00778C  0E7A               	movlw	high _LED_C
 13225  00778E  6E2A               	movwf	(??_set_C+1)& (0+255),c
 13226  007790  50F3               	movf	prodl,w,c
 13227  007792  2629               	addwf	??_set_C,f,c
 13228  007794  50F4               	movf	prodh,w,c
 13229  007796  222A               	addwfc	??_set_C+1,f,c
 13230  007798  5023               	movf	?___awmod,w,c
 13231  00779A  2629               	addwf	??_set_C,f,c
 13232  00779C  5024               	movf	?___awmod+1,w,c
 13233  00779E  222A               	addwfc	??_set_C+1,f,c
 13234  0077A0  C029  FFF6         	movff	??_set_C,tblptrl
 13235  0077A4  C02A  FFF7         	movff	??_set_C+1,tblptrh
 13236  0077A8                     	if	0	;tblptru may be non-zero
 13237  0077A8                     	endif
 13238  0077A8                     	if	0	;tblptru may be non-zero
 13239  0077A8                     	endif
 13240  0077A8  0008               	tblrd		*
 13241  0077AA  CFF5 F15E          	movff	tablat,_LED_Light+33
 13242                           
 13243                           ; BSR set to: 1
 13244                           ;master/operation_CES.c: 280:     LED_Light[2][2] = LED_C[state_CE.cp[0]][(state_CE.co[0
      +                          ] + 2) % 3];
 13245  0077AE  0E02               	movlw	2
 13246  0077B0  2598               	addwf	(_state_CE+8)& (0+255),w,b
 13247  0077B2  6E23               	movwf	___awmod@dividend,c
 13248  0077B4  6A24               	clrf	___awmod@dividend+1,c
 13249  0077B6  0E00               	movlw	0
 13250  0077B8  2224               	addwfc	___awmod@dividend+1,f,c
 13251  0077BA  0E00               	movlw	0
 13252  0077BC  6E26               	movwf	___awmod@divisor+1,c
 13253  0077BE  0E03               	movlw	3
 13254  0077C0  6E25               	movwf	___awmod@divisor,c
 13255  0077C2  EC77  F01A         	call	___awmod	;wreg free
 13256  0077C6  0101               	movlb	1	; () banked
 13257  0077C8  5190               	movf	_state_CE& (0+255),w,b
 13258  0077CA  0D03               	mullw	3
 13259  0077CC  0E6A               	movlw	low _LED_C
 13260  0077CE  6E29               	movwf	??_set_C& (0+255),c
 13261  0077D0  0E7A               	movlw	high _LED_C
 13262  0077D2  6E2A               	movwf	(??_set_C+1)& (0+255),c
 13263  0077D4  50F3               	movf	prodl,w,c
 13264  0077D6  2629               	addwf	??_set_C,f,c
 13265  0077D8  50F4               	movf	prodh,w,c
 13266  0077DA  222A               	addwfc	??_set_C+1,f,c
 13267  0077DC  5023               	movf	?___awmod,w,c
 13268  0077DE  2629               	addwf	??_set_C,f,c
 13269  0077E0  5024               	movf	?___awmod+1,w,c
 13270  0077E2  222A               	addwfc	??_set_C+1,f,c
 13271  0077E4  C029  FFF6         	movff	??_set_C,tblptrl
 13272  0077E8  C02A  FFF7         	movff	??_set_C+1,tblptrh
 13273  0077EC                     	if	0	;tblptru may be non-zero
 13274  0077EC                     	endif
 13275  0077EC                     	if	0	;tblptru may be non-zero
 13276  0077EC                     	endif
 13277  0077EC  0008               	tblrd		*
 13278  0077EE  CFF5 F151          	movff	tablat,_LED_Light+20
 13279                           
 13280                           ; BSR set to: 1
 13281                           ;master/operation_CES.c: 281:     LED_Light[2][0] = LED_C[state_CE.cp[3]][(state_CE.co[3
      +                          ] + 1) % 3];
 13282  0077F2  0E01               	movlw	1
 13283  0077F4  259B               	addwf	(_state_CE+11)& (0+255),w,b
 13284  0077F6  6E23               	movwf	___awmod@dividend,c
 13285  0077F8  6A24               	clrf	___awmod@dividend+1,c
 13286  0077FA  0E00               	movlw	0
 13287  0077FC  2224               	addwfc	___awmod@dividend+1,f,c
 13288  0077FE  0E00               	movlw	0
 13289  007800  6E26               	movwf	___awmod@divisor+1,c
 13290  007802  0E03               	movlw	3
 13291  007804  6E25               	movwf	___awmod@divisor,c
 13292  007806  EC77  F01A         	call	___awmod	;wreg free
 13293  00780A  0101               	movlb	1	; () banked
 13294  00780C  5193               	movf	(_state_CE+3)& (0+255),w,b
 13295  00780E  0D03               	mullw	3
 13296  007810  0E6A               	movlw	low _LED_C
 13297  007812  6E29               	movwf	??_set_C& (0+255),c
 13298  007814  0E7A               	movlw	high _LED_C
 13299  007816  6E2A               	movwf	(??_set_C+1)& (0+255),c
 13300  007818  50F3               	movf	prodl,w,c
 13301  00781A  2629               	addwf	??_set_C,f,c
 13302  00781C  50F4               	movf	prodh,w,c
 13303  00781E  222A               	addwfc	??_set_C+1,f,c
 13304  007820  5023               	movf	?___awmod,w,c
 13305  007822  2629               	addwf	??_set_C,f,c
 13306  007824  5024               	movf	?___awmod+1,w,c
 13307  007826  222A               	addwfc	??_set_C+1,f,c
 13308  007828  C029  FFF6         	movff	??_set_C,tblptrl
 13309  00782C  C02A  FFF7         	movff	??_set_C+1,tblptrh
 13310  007830                     	if	0	;tblptru may be non-zero
 13311  007830                     	endif
 13312  007830                     	if	0	;tblptru may be non-zero
 13313  007830                     	endif
 13314  007830  0008               	tblrd		*
 13315  007832  CFF5 F14F          	movff	tablat,_LED_Light+18
 13316                           
 13317                           ; BSR set to: 1
 13318                           ;master/operation_CES.c: 282:     LED_Light[2][8] = LED_C[state_CE.cp[4]][(state_CE.co[4
      +                          ] + 1) % 3];
 13319  007836  0E01               	movlw	1
 13320  007838  259C               	addwf	(_state_CE+12)& (0+255),w,b
 13321  00783A  6E23               	movwf	___awmod@dividend,c
 13322  00783C  6A24               	clrf	___awmod@dividend+1,c
 13323  00783E  0E00               	movlw	0
 13324  007840  2224               	addwfc	___awmod@dividend+1,f,c
 13325  007842  0E00               	movlw	0
 13326  007844  6E26               	movwf	___awmod@divisor+1,c
 13327  007846  0E03               	movlw	3
 13328  007848  6E25               	movwf	___awmod@divisor,c
 13329  00784A  EC77  F01A         	call	___awmod	;wreg free
 13330  00784E  0101               	movlb	1	; () banked
 13331  007850  5194               	movf	(_state_CE+4)& (0+255),w,b
 13332  007852  0D03               	mullw	3
 13333  007854  0E6A               	movlw	low _LED_C
 13334  007856  6E29               	movwf	??_set_C& (0+255),c
 13335  007858  0E7A               	movlw	high _LED_C
 13336  00785A  6E2A               	movwf	(??_set_C+1)& (0+255),c
 13337  00785C  50F3               	movf	prodl,w,c
 13338  00785E  2629               	addwf	??_set_C,f,c
 13339  007860  50F4               	movf	prodh,w,c
 13340  007862  222A               	addwfc	??_set_C+1,f,c
 13341  007864  5023               	movf	?___awmod,w,c
 13342  007866  2629               	addwf	??_set_C,f,c
 13343  007868  5024               	movf	?___awmod+1,w,c
 13344  00786A  222A               	addwfc	??_set_C+1,f,c
 13345  00786C  C029  FFF6         	movff	??_set_C,tblptrl
 13346  007870  C02A  FFF7         	movff	??_set_C+1,tblptrh
 13347  007874                     	if	0	;tblptru may be non-zero
 13348  007874                     	endif
 13349  007874                     	if	0	;tblptru may be non-zero
 13350  007874                     	endif
 13351  007874  0008               	tblrd		*
 13352  007876  CFF5 F157          	movff	tablat,_LED_Light+26
 13353                           
 13354                           ; BSR set to: 1
 13355                           ;master/operation_CES.c: 283:     LED_Light[2][6] = LED_C[state_CE.cp[7]][(state_CE.co[7
      +                          ] + 2) % 3];
 13356  00787A  0E02               	movlw	2
 13357  00787C  259F               	addwf	(_state_CE+15)& (0+255),w,b
 13358  00787E  6E23               	movwf	___awmod@dividend,c
 13359  007880  6A24               	clrf	___awmod@dividend+1,c
 13360  007882  0E00               	movlw	0
 13361  007884  2224               	addwfc	___awmod@dividend+1,f,c
 13362  007886  0E00               	movlw	0
 13363  007888  6E26               	movwf	___awmod@divisor+1,c
 13364  00788A  0E03               	movlw	3
 13365  00788C  6E25               	movwf	___awmod@divisor,c
 13366  00788E  EC77  F01A         	call	___awmod	;wreg free
 13367  007892  0101               	movlb	1	; () banked
 13368  007894  5197               	movf	(_state_CE+7)& (0+255),w,b
 13369  007896  0D03               	mullw	3
 13370  007898  0E6A               	movlw	low _LED_C
 13371  00789A  6E29               	movwf	??_set_C& (0+255),c
 13372  00789C  0E7A               	movlw	high _LED_C
 13373  00789E  6E2A               	movwf	(??_set_C+1)& (0+255),c
 13374  0078A0  50F3               	movf	prodl,w,c
 13375  0078A2  2629               	addwf	??_set_C,f,c
 13376  0078A4  50F4               	movf	prodh,w,c
 13377  0078A6  222A               	addwfc	??_set_C+1,f,c
 13378  0078A8  5023               	movf	?___awmod,w,c
 13379  0078AA  2629               	addwf	??_set_C,f,c
 13380  0078AC  5024               	movf	?___awmod+1,w,c
 13381  0078AE  222A               	addwfc	??_set_C+1,f,c
 13382  0078B0  C029  FFF6         	movff	??_set_C,tblptrl
 13383  0078B4  C02A  FFF7         	movff	??_set_C+1,tblptrh
 13384  0078B8                     	if	0	;tblptru may be non-zero
 13385  0078B8                     	endif
 13386  0078B8                     	if	0	;tblptru may be non-zero
 13387  0078B8                     	endif
 13388  0078B8  0008               	tblrd		*
 13389  0078BA  CFF5 F155          	movff	tablat,_LED_Light+24
 13390                           
 13391                           ;master/operation_CES.c: 285:     LED_Light[5][2] = LED_C[state_CE.cp[7]][state_CE.co[7]
      +                          ];
 13392  0078BE  5197               	movf	(_state_CE+7)& (0+255),w,b
 13393  0078C0  0D03               	mullw	3
 13394  0078C2  0E6A               	movlw	low _LED_C
 13395  0078C4  6E29               	movwf	??_set_C& (0+255),c
 13396  0078C6  0E7A               	movlw	high _LED_C
 13397  0078C8  6E2A               	movwf	(??_set_C+1)& (0+255),c
 13398  0078CA  50F3               	movf	prodl,w,c
 13399  0078CC  2629               	addwf	??_set_C,f,c
 13400  0078CE  50F4               	movf	prodh,w,c
 13401  0078D0  222A               	addwfc	??_set_C+1,f,c
 13402  0078D2  519F               	movf	(_state_CE+15)& (0+255),w,b
 13403  0078D4  2629               	addwf	??_set_C,f,c
 13404  0078D6  0E00               	movlw	0
 13405  0078D8  222A               	addwfc	??_set_C+1,f,c
 13406  0078DA  C029  FFF6         	movff	??_set_C,tblptrl
 13407  0078DE  C02A  FFF7         	movff	??_set_C+1,tblptrh
 13408  0078E2                     	if	0	;tblptru may be non-zero
 13409  0078E2                     	endif
 13410  0078E2                     	if	0	;tblptru may be non-zero
 13411  0078E2                     	endif
 13412  0078E2  0008               	tblrd		*
 13413  0078E4  CFF5 F16C          	movff	tablat,_LED_Light+47
 13414                           
 13415                           ;master/operation_CES.c: 286:     LED_Light[5][0] = LED_C[state_CE.cp[6]][state_CE.co[6]
      +                          ];
 13416  0078E8  5196               	movf	(_state_CE+6)& (0+255),w,b
 13417  0078EA  0D03               	mullw	3
 13418  0078EC  0E6A               	movlw	low _LED_C
 13419  0078EE  6E29               	movwf	??_set_C& (0+255),c
 13420  0078F0  0E7A               	movlw	high _LED_C
 13421  0078F2  6E2A               	movwf	(??_set_C+1)& (0+255),c
 13422  0078F4  50F3               	movf	prodl,w,c
 13423  0078F6  2629               	addwf	??_set_C,f,c
 13424  0078F8  50F4               	movf	prodh,w,c
 13425  0078FA  222A               	addwfc	??_set_C+1,f,c
 13426  0078FC  519E               	movf	(_state_CE+14)& (0+255),w,b
 13427  0078FE  2629               	addwf	??_set_C,f,c
 13428  007900  0E00               	movlw	0
 13429  007902  222A               	addwfc	??_set_C+1,f,c
 13430  007904  C029  FFF6         	movff	??_set_C,tblptrl
 13431  007908  C02A  FFF7         	movff	??_set_C+1,tblptrh
 13432  00790C                     	if	0	;tblptru may be non-zero
 13433  00790C                     	endif
 13434  00790C                     	if	0	;tblptru may be non-zero
 13435  00790C                     	endif
 13436  00790C  0008               	tblrd		*
 13437  00790E  CFF5 F16A          	movff	tablat,_LED_Light+45
 13438                           
 13439                           ;master/operation_CES.c: 287:     LED_Light[5][8] = LED_C[state_CE.cp[4]][state_CE.co[4]
      +                          ];
 13440  007912  5194               	movf	(_state_CE+4)& (0+255),w,b
 13441  007914  0D03               	mullw	3
 13442  007916  0E6A               	movlw	low _LED_C
 13443  007918  6E29               	movwf	??_set_C& (0+255),c
 13444  00791A  0E7A               	movlw	high _LED_C
 13445  00791C  6E2A               	movwf	(??_set_C+1)& (0+255),c
 13446  00791E  50F3               	movf	prodl,w,c
 13447  007920  2629               	addwf	??_set_C,f,c
 13448  007922  50F4               	movf	prodh,w,c
 13449  007924  222A               	addwfc	??_set_C+1,f,c
 13450  007926  519C               	movf	(_state_CE+12)& (0+255),w,b
 13451  007928  2629               	addwf	??_set_C,f,c
 13452  00792A  0E00               	movlw	0
 13453  00792C  222A               	addwfc	??_set_C+1,f,c
 13454  00792E  C029  FFF6         	movff	??_set_C,tblptrl
 13455  007932  C02A  FFF7         	movff	??_set_C+1,tblptrh
 13456  007936                     	if	0	;tblptru may be non-zero
 13457  007936                     	endif
 13458  007936                     	if	0	;tblptru may be non-zero
 13459  007936                     	endif
 13460  007936  0008               	tblrd		*
 13461  007938  CFF5 F172          	movff	tablat,_LED_Light+53
 13462                           
 13463                           ;master/operation_CES.c: 288:     LED_Light[5][6] = LED_C[state_CE.cp[5]][state_CE.co[5]
      +                          ];
 13464  00793C  5195               	movf	(_state_CE+5)& (0+255),w,b
 13465  00793E  0D03               	mullw	3
 13466  007940  0E6A               	movlw	low _LED_C
 13467  007942  6E29               	movwf	??_set_C& (0+255),c
 13468  007944  0E7A               	movlw	high _LED_C
 13469  007946  6E2A               	movwf	(??_set_C+1)& (0+255),c
 13470  007948  50F3               	movf	prodl,w,c
 13471  00794A  2629               	addwf	??_set_C,f,c
 13472  00794C  50F4               	movf	prodh,w,c
 13473  00794E  222A               	addwfc	??_set_C+1,f,c
 13474  007950  519D               	movf	(_state_CE+13)& (0+255),w,b
 13475  007952  2629               	addwf	??_set_C,f,c
 13476  007954  0E00               	movlw	0
 13477  007956  222A               	addwfc	??_set_C+1,f,c
 13478  007958  C029  FFF6         	movff	??_set_C,tblptrl
 13479  00795C  C02A  FFF7         	movff	??_set_C+1,tblptrh
 13480  007960                     	if	0	;tblptru may be non-zero
 13481  007960                     	endif
 13482  007960                     	if	0	;tblptru may be non-zero
 13483  007960                     	endif
 13484  007960  0008               	tblrd		*
 13485  007962  CFF5 F170          	movff	tablat,_LED_Light+51
 13486                           
 13487                           ; BSR set to: 1
 13488  007966  0012               	return		;funcret
 13489  007968                     __end_of_set_C:
 13490                           	opt callstack 0
 13491                           
 13492 ;; *************** function _command_turn_ARRAY_2_3 *****************
 13493 ;; Defined at:
 13494 ;;		line 315 in file "master/animation.c"
 13495 ;; Parameters:    Size  Location     Type
 13496 ;;  s1              2   73[COMRAM] PTR const unsigned char 
 13497 ;;		 -> STR_177(2), STR_174(2), STR_171(3), STR_167(2), 
 13498 ;;		 -> STR_163(2), STR_160(2), STR_157(3), STR_153(2), 
 13499 ;;		 -> STR_149(2), STR_146(2), STR_143(3), STR_139(2), 
 13500 ;;		 -> STR_135(2), STR_132(2), STR_129(3), STR_125(2), 
 13501 ;;		 -> STR_121(2), STR_118(2), STR_115(3), STR_111(2), 
 13502 ;;		 -> STR_107(2), STR_104(2), STR_101(3), STR_97(2), 
 13503 ;;  s2              2   75[COMRAM] PTR const unsigned char 
 13504 ;;		 -> STR_178(3), STR_175(3), STR_172(2), STR_168(3), 
 13505 ;;		 -> STR_164(3), STR_161(3), STR_158(2), STR_154(3), 
 13506 ;;		 -> STR_150(2), STR_147(2), STR_144(3), STR_140(2), 
 13507 ;;		 -> STR_136(3), STR_133(3), STR_130(2), STR_126(3), 
 13508 ;;		 -> STR_122(3), STR_119(3), STR_116(2), STR_112(3), 
 13509 ;;		 -> STR_108(2), STR_105(2), STR_102(3), STR_98(2), 
 13510 ;;  s3              2   77[COMRAM] PTR const unsigned char 
 13511 ;;		 -> STR_179(3), STR_176(3), STR_173(2), STR_169(3), 
 13512 ;;		 -> STR_165(3), STR_162(3), STR_159(2), STR_155(3), 
 13513 ;;		 -> STR_151(3), STR_148(3), STR_145(2), STR_141(3), 
 13514 ;;		 -> STR_137(3), STR_134(3), STR_131(2), STR_127(3), 
 13515 ;;		 -> STR_123(3), STR_120(3), STR_117(2), STR_113(3), 
 13516 ;;		 -> STR_109(3), STR_106(3), STR_103(2), STR_99(3), 
 13517 ;; Auto vars:     Size  Location     Type
 13518 ;;  i               2   81[COMRAM] int 
 13519 ;; Return value:  Size  Location     Type
 13520 ;;                  1    wreg      void 
 13521 ;; Registers used:
 13522 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 13523 ;; Tracked objects:
 13524 ;;		On entry : 0/0
 13525 ;;		On exit  : 0/0
 13526 ;;		Unchanged: 0/0
 13527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13528 ;;      Params:         6       0       0       0       0       0       0
 13529 ;;      Locals:         2       0       0       0       0       0       0
 13530 ;;      Temps:          2       0       0       0       0       0       0
 13531 ;;      Totals:        10       0       0       0       0       0       0
 13532 ;;Total ram usage:       10 bytes
 13533 ;; Hardware stack levels used:    1
 13534 ;; Hardware stack levels required when called:    4
 13535 ;; This function calls:
 13536 ;;		_OUT_LED_ARRAY
 13537 ;;		_SPI_special
 13538 ;;		___awmod
 13539 ;;		_command_turn_ARRAY
 13540 ;;		_convert_ROTtoLED
 13541 ;; This function is called by:
 13542 ;;		_command_turn_ARRAY_3_end
 13543 ;;		_command_turn_ARRAY_2
 13544 ;; This function uses a non-reentrant model
 13545 ;;
 13546                           
 13547                           	psect	text49
 13548  004078                     __ptext49:
 13549                           	opt callstack 0
 13550  004078                     _command_turn_ARRAY_2_3:
 13551                           	opt callstack 21
 13552                           
 13553                           ;master/animation.c: 316:     if (SPI_special(ARRAY_skip_CS) == 1)
 13554                           
 13555                           ; BSR set to: 1
 13556                           ;incstack = 0
 13557  004078  0100               	movlb	0	; () banked
 13558  00407A  51EE               	movf	_ARRAY_skip_CS& (0+255),w,b
 13559  00407C  EC96  F017         	call	_SPI_special
 13560  004080  06E8               	decf	wreg,f,c
 13561  004082  A4D8               	btfss	status,2,c
 13562  004084  D003               	goto	l1629
 13563                           
 13564                           ;master/animation.c: 317:         mode_cube_end = 0;
 13565  004086  0E00               	movlw	0
 13566  004088  0100               	movlb	0	; () banked
 13567  00408A  6FF3               	movwf	_mode_cube_end& (0+255),b
 13568  00408C                     l1629:
 13569                           
 13570                           ;master/animation.c: 318:     for (int i = 0; i < 3; i++) {
 13571  00408C  0E00               	movlw	0
 13572  00408E  6E53               	movwf	command_turn_ARRAY_2_3@i+1,c
 13573  004090  0E00               	movlw	0
 13574  004092  6E52               	movwf	command_turn_ARRAY_2_3@i,c
 13575  004094                     l7470:
 13576                           
 13577                           ;master/animation.c: 319:         if (mode_cube_end == 0)
 13578  004094  0100               	movlb	0	; () banked
 13579  004096  51F3               	movf	_mode_cube_end& (0+255),w,b
 13580  004098  B4D8               	btfsc	status,2,c
 13581  00409A  D03E               	goto	u4800
 13582                           
 13583                           ; BSR set to: 0
 13584                           ;master/animation.c: 321:         TURN_COUNT %= 12;
 13585  00409C  C0F4  F023         	movff	_TURN_COUNT,___awmod@dividend
 13586  0040A0  6A24               	clrf	___awmod@dividend+1,c
 13587  0040A2  0E00               	movlw	0
 13588  0040A4  6E26               	movwf	___awmod@divisor+1,c
 13589  0040A6  0E0C               	movlw	12
 13590  0040A8  6E25               	movwf	___awmod@divisor,c
 13591  0040AA  EC77  F01A         	call	___awmod	;wreg free
 13592  0040AE  5023               	movf	?___awmod,w,c
 13593  0040B0  0100               	movlb	0	; () banked
 13594  0040B2  6FF4               	movwf	_TURN_COUNT& (0+255),b
 13595                           
 13596                           ; BSR set to: 0
 13597                           ;master/animation.c: 322:         command_turn_ARRAY(s1);
 13598  0040B4  C04A  F01F         	movff	command_turn_ARRAY_2_3@s1,command_turn_ARRAY@s
 13599  0040B8  C04B  F020         	movff	command_turn_ARRAY_2_3@s1+1,command_turn_ARRAY@s+1
 13600  0040BC  EC5C  F02A         	call	_command_turn_ARRAY	;wreg free
 13601                           
 13602                           ;master/animation.c: 323:         command_turn_ARRAY(s2);
 13603  0040C0  C04C  F01F         	movff	command_turn_ARRAY_2_3@s2,command_turn_ARRAY@s
 13604  0040C4  C04D  F020         	movff	command_turn_ARRAY_2_3@s2+1,command_turn_ARRAY@s+1
 13605  0040C8  EC5C  F02A         	call	_command_turn_ARRAY	;wreg free
 13606                           
 13607                           ;master/animation.c: 324:         command_turn_ARRAY(s3);
 13608  0040CC  C04E  F01F         	movff	command_turn_ARRAY_2_3@s3,command_turn_ARRAY@s
 13609  0040D0  C04F  F020         	movff	command_turn_ARRAY_2_3@s3+1,command_turn_ARRAY@s+1
 13610  0040D4  EC5C  F02A         	call	_command_turn_ARRAY	;wreg free
 13611                           
 13612                           ;master/animation.c: 326:         convert_ROTtoLED();
 13613  0040D8  EC00  F01C         	call	_convert_ROTtoLED	;wreg free
 13614                           
 13615                           ;master/animation.c: 327:         OUT_LED_ARRAY(LED_ARRAY, POWER);
 13616  0040DC  0E07               	movlw	low _LED_ARRAY
 13617  0040DE  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
 13618  0040E0  0E01               	movlw	high _LED_ARRAY
 13619  0040E2  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
 13620  0040E4  C0F0  F009         	movff	_POWER,OUT_LED_ARRAY@LED_POWER
 13621  0040E8  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
 13622                           
 13623                           ;master/animation.c: 328:         _delay((unsigned long)((120)*(64000000/4000.0)));
 13624  0040EC  0E0A               	movlw	10
 13625  0040EE  6E51               	movwf	(??_command_turn_ARRAY_2_3+1)& (0+255),c
 13626  0040F0  0EBE               	movlw	190
 13627  0040F2  6E50               	movwf	??_command_turn_ARRAY_2_3& (0+255),c
 13628  0040F4  0E79               	movlw	121
 13629  0040F6                     u8267:
 13630  0040F6  2EE8               	decfsz	wreg,f,c
 13631  0040F8  D7FE               	bra	u8267
 13632  0040FA  2E50               	decfsz	??_command_turn_ARRAY_2_3& (0+255),f,c
 13633  0040FC  D7FC               	bra	u8267
 13634  0040FE  2E51               	decfsz	(??_command_turn_ARRAY_2_3+1)& (0+255),f,c
 13635  004100  D7FA               	bra	u8267
 13636  004102  F000               	nop	
 13637                           
 13638                           ;master/animation.c: 332:     }
 13639  004104  4A52               	infsnz	command_turn_ARRAY_2_3@i,f,c
 13640  004106  2A53               	incf	command_turn_ARRAY_2_3@i+1,f,c
 13641  004108  BE53               	btfsc	command_turn_ARRAY_2_3@i+1,7,c
 13642  00410A  D7C4               	goto	l7470
 13643  00410C  5053               	movf	command_turn_ARRAY_2_3@i+1,w,c
 13644  00410E  E104               	bnz	u4800
 13645  004110  0E03               	movlw	3
 13646  004112  5C52               	subwf	command_turn_ARRAY_2_3@i,w,c
 13647  004114  A0D8               	btfss	status,0,c
 13648  004116  D7BE               	goto	l7470
 13649  004118                     u4800:
 13650                           
 13651                           ;master/animation.c: 333:     if (mode_cube_end == 0)
 13652  004118  0100               	movlb	0	; () banked
 13653  00411A  51F3               	movf	_mode_cube_end& (0+255),w,b
 13654  00411C  B4D8               	btfsc	status,2,c
 13655  00411E  0012               	return	
 13656                           
 13657                           ; BSR set to: 0
 13658                           ;master/animation.c: 336:     convert_ROTtoLED();
 13659  004120  EC00  F01C         	call	_convert_ROTtoLED	;wreg free
 13660                           
 13661                           ;master/animation.c: 337:     OUT_LED_ARRAY(LED_ARRAY, POWER);
 13662  004124  0E07               	movlw	low _LED_ARRAY
 13663  004126  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
 13664  004128  0E01               	movlw	high _LED_ARRAY
 13665  00412A  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
 13666  00412C  C0F0  F009         	movff	_POWER,OUT_LED_ARRAY@LED_POWER
 13667  004130  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
 13668                           
 13669                           ;master/animation.c: 340:     _delay((unsigned long)((100)*(64000000/4000.0)));
 13670  004134  0E09               	movlw	9
 13671  004136  6E51               	movwf	(??_command_turn_ARRAY_2_3+1)& (0+255),c
 13672  004138  0E1E               	movlw	30
 13673  00413A  6E50               	movwf	??_command_turn_ARRAY_2_3& (0+255),c
 13674  00413C  0EE4               	movlw	228
 13675  00413E                     u8277:
 13676  00413E  2EE8               	decfsz	wreg,f,c
 13677  004140  D7FE               	bra	u8277
 13678  004142  2E50               	decfsz	??_command_turn_ARRAY_2_3& (0+255),f,c
 13679  004144  D7FC               	bra	u8277
 13680  004146  2E51               	decfsz	(??_command_turn_ARRAY_2_3+1)& (0+255),f,c
 13681  004148  D7FA               	bra	u8277
 13682  00414A  D000               	nop2	
 13683                           
 13684                           ;master/animation.c: 341:     TURN_COUNT = 0;
 13685  00414C  0E00               	movlw	0
 13686  00414E  0100               	movlb	0	; () banked
 13687  004150  6FF4               	movwf	_TURN_COUNT& (0+255),b
 13688                           
 13689                           ; BSR set to: 0
 13690  004152  0012               	return		;funcret
 13691  004154                     __end_of_command_turn_ARRAY_2_3:
 13692                           	opt callstack 0
 13693                           
 13694 ;; *************** function _command_turn_ARRAY_2_2 *****************
 13695 ;; Defined at:
 13696 ;;		line 275 in file "master/animation.c"
 13697 ;; Parameters:    Size  Location     Type
 13698 ;;  s               2   73[COMRAM] PTR const unsigned char 
 13699 ;;		 -> STR_198(3), STR_197(3), STR_196(3), STR_195(3), 
 13700 ;;		 -> STR_194(3), STR_193(3), STR_192(3), STR_191(3), 
 13701 ;;		 -> STR_190(3), STR_189(3), STR_188(3), STR_187(3), 
 13702 ;;		 -> STR_186(2), STR_185(2), STR_184(2), STR_183(2), 
 13703 ;;		 -> STR_182(2), STR_181(2), STR_180(5), command_turn_ARRAY_3_end@s2(3), 
 13704 ;;		 -> STR_38(3), STR_37(3), STR_36(3), STR_35(3), 
 13705 ;;		 -> STR_34(3), STR_33(3), STR_32(2), STR_31(2), 
 13706 ;;		 -> STR_30(2), STR_29(3), STR_28(3), STR_27(3), 
 13707 ;;		 -> STR_26(3), STR_25(3), STR_24(3), STR_23(2), 
 13708 ;;		 -> STR_22(2), STR_21(2), STR_20(3), STR_19(3), 
 13709 ;;		 -> STR_18(3), STR_17(3), STR_16(3), STR_15(3), 
 13710 ;;		 -> STR_14(3), STR_13(3), STR_12(3), STR_11(3), 
 13711 ;;		 -> STR_10(3), STR_9(3), STR_8(2), STR_7(2), 
 13712 ;;		 -> STR_6(2), STR_5(2), STR_4(2), STR_3(2), 
 13713 ;;		 -> STR_2(6), STR_1(5), 
 13714 ;; Auto vars:     Size  Location     Type
 13715 ;;  i               2   84[COMRAM] int 
 13716 ;;  j               2   78[COMRAM] int 
 13717 ;;  s2              3   81[COMRAM] unsigned char [3]
 13718 ;;  mouitido        1   80[COMRAM] unsigned char 
 13719 ;; Return value:  Size  Location     Type
 13720 ;;                  1    wreg      void 
 13721 ;; Registers used:
 13722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 13723 ;; Tracked objects:
 13724 ;;		On entry : 0/0
 13725 ;;		On exit  : 0/0
 13726 ;;		Unchanged: 0/0
 13727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13728 ;;      Params:         2       0       0       0       0       0       0
 13729 ;;      Locals:         8       0       0       0       0       0       0
 13730 ;;      Temps:          3       0       0       0       0       0       0
 13731 ;;      Totals:        13       0       0       0       0       0       0
 13732 ;;Total ram usage:       13 bytes
 13733 ;; Hardware stack levels used:    1
 13734 ;; Hardware stack levels required when called:    4
 13735 ;; This function calls:
 13736 ;;		_OUT_LED_ARRAY
 13737 ;;		_SPI_special
 13738 ;;		___awmod
 13739 ;;		_command_turn_ARRAY
 13740 ;;		_convert_ROTtoLED
 13741 ;; This function is called by:
 13742 ;;		_command_turn_ARRAY_3_end
 13743 ;;		_command_turn_ARRAY_2
 13744 ;; This function uses a non-reentrant model
 13745 ;;
 13746                           
 13747                           	psect	text50
 13748  004E00                     __ptext50:
 13749                           	opt callstack 0
 13750  004E00                     _command_turn_ARRAY_2_2:
 13751                           	opt callstack 21
 13752                           
 13753                           ;master/animation.c: 276:     char s2[3];;master/animation.c: 277:     s2[0] = *s;
 13754                           
 13755                           ; BSR set to: 0
 13756                           ;incstack = 0
 13757  004E00  C04A  FFF6         	movff	command_turn_ARRAY_2_2@s,tblptrl
 13758  004E04  C04B  FFF7         	movff	command_turn_ARRAY_2_2@s+1,tblptrh
 13759  004E08  6AF8               	clrf	tblptru,c
 13760  004E0A  0E05               	movlw	(high __ramtop+-1)
 13761  004E0C  64F7               	cpfsgt	tblptrh,c
 13762  004E0E  D003               	bra	u4827
 13763  004E10  0008               	tblrd		*
 13764  004E12  50F5               	movf	tablat,w,c
 13765  004E14  D005               	bra	u4820
 13766  004E16                     u4827:
 13767  004E16  CFF6 FFE9          	movff	tblptrl,fsr0l
 13768  004E1A  CFF7 FFEA          	movff	tblptrh,fsr0h
 13769  004E1E  50EF               	movf	indf0,w,c
 13770  004E20                     u4820:
 13771  004E20  6E52               	movwf	command_turn_ARRAY_2_2@s2,c
 13772                           
 13773                           ;master/animation.c: 278:     s2[2] = '\0';
 13774  004E22  0E00               	movlw	0
 13775  004E24  6E54               	movwf	command_turn_ARRAY_2_2@s2+2,c
 13776                           
 13777                           ;master/animation.c: 280:     if (SPI_special(ARRAY_skip_CS) == 1)
 13778  004E26  0100               	movlb	0	; () banked
 13779  004E28  51EE               	movf	_ARRAY_skip_CS& (0+255),w,b
 13780  004E2A  EC96  F017         	call	_SPI_special
 13781  004E2E  06E8               	decf	wreg,f,c
 13782  004E30  A4D8               	btfss	status,2,c
 13783  004E32  D003               	goto	l7514
 13784                           
 13785                           ;master/animation.c: 281:         mode_cube_end = 0;
 13786  004E34  0E00               	movlw	0
 13787  004E36  0100               	movlb	0	; () banked
 13788  004E38  6FF3               	movwf	_mode_cube_end& (0+255),b
 13789  004E3A                     l7514:
 13790                           
 13791                           ;master/animation.c: 283:     if (*s == 0)return;
 13792  004E3A  C04A  FFF6         	movff	command_turn_ARRAY_2_2@s,tblptrl
 13793  004E3E  C04B  FFF7         	movff	command_turn_ARRAY_2_2@s+1,tblptrh
 13794  004E42  6AF8               	clrf	tblptru,c
 13795  004E44  0E05               	movlw	(high __ramtop+-1)
 13796  004E46  64F7               	cpfsgt	tblptrh,c
 13797  004E48  D003               	bra	u4847
 13798  004E4A  0008               	tblrd		*
 13799  004E4C  50F5               	movf	tablat,w,c
 13800  004E4E  D005               	bra	u4840
 13801  004E50                     u4847:
 13802  004E50  CFF6 FFE9          	movff	tblptrl,fsr0l
 13803  004E54  CFF7 FFEA          	movff	tblptrh,fsr0h
 13804  004E58  50EF               	movf	indf0,w,c
 13805  004E5A                     u4840:
 13806  004E5A  0900               	iorlw	0
 13807  004E5C  B4D8               	btfsc	status,2,c
 13808  004E5E  0012               	return	
 13809                           
 13810                           ;master/animation.c: 285:     char mouitido = 1;
 13811  004E60  0E01               	movlw	1
 13812  004E62  6E51               	movwf	command_turn_ARRAY_2_2@mouitido,c
 13813                           
 13814                           ;master/animation.c: 286:     if (*(s + 1) == '2') {
 13815  004E64  0E01               	movlw	1
 13816  004E66  244A               	addwf	command_turn_ARRAY_2_2@s,w,c
 13817  004E68  6E4C               	movwf	??_command_turn_ARRAY_2_2& (0+255),c
 13818  004E6A  0E00               	movlw	0
 13819  004E6C  204B               	addwfc	command_turn_ARRAY_2_2@s+1,w,c
 13820  004E6E  6E4D               	movwf	(??_command_turn_ARRAY_2_2+1)& (0+255),c
 13821  004E70  C04C  FFF6         	movff	??_command_turn_ARRAY_2_2,tblptrl
 13822  004E74  C04D  FFF7         	movff	??_command_turn_ARRAY_2_2+1,tblptrh
 13823  004E78  6AF8               	clrf	tblptru,c
 13824  004E7A  0E05               	movlw	(high __ramtop+-1)
 13825  004E7C  64F7               	cpfsgt	tblptrh,c
 13826  004E7E  D003               	bra	u4867
 13827  004E80  0008               	tblrd		*
 13828  004E82  50F5               	movf	tablat,w,c
 13829  004E84  D005               	bra	u4860
 13830  004E86                     u4867:
 13831  004E86  CFF6 FFE9          	movff	tblptrl,fsr0l
 13832  004E8A  CFF7 FFEA          	movff	tblptrh,fsr0h
 13833  004E8E  50EF               	movf	indf0,w,c
 13834  004E90                     u4860:
 13835  004E90  0A32               	xorlw	50
 13836  004E92  A4D8               	btfss	status,2,c
 13837  004E94  D005               	goto	l7524
 13838                           
 13839                           ;master/animation.c: 287:         s2[1] = '\0';
 13840  004E96  0E00               	movlw	0
 13841  004E98  6E53               	movwf	command_turn_ARRAY_2_2@s2+1,c
 13842                           
 13843                           ;master/animation.c: 288:         mouitido = 2;
 13844  004E9A  0E02               	movlw	2
 13845  004E9C  6E51               	movwf	command_turn_ARRAY_2_2@mouitido,c
 13846                           
 13847                           ;master/animation.c: 289:     } else {
 13848  004E9E  D017               	goto	l7526
 13849  004EA0                     l7524:
 13850                           
 13851                           ;master/animation.c: 290:         s2[1] = *(s + 1);
 13852  004EA0  0E01               	movlw	1
 13853  004EA2  244A               	addwf	command_turn_ARRAY_2_2@s,w,c
 13854  004EA4  6E4C               	movwf	??_command_turn_ARRAY_2_2& (0+255),c
 13855  004EA6  0E00               	movlw	0
 13856  004EA8  204B               	addwfc	command_turn_ARRAY_2_2@s+1,w,c
 13857  004EAA  6E4D               	movwf	(??_command_turn_ARRAY_2_2+1)& (0+255),c
 13858  004EAC  C04C  FFF6         	movff	??_command_turn_ARRAY_2_2,tblptrl
 13859  004EB0  C04D  FFF7         	movff	??_command_turn_ARRAY_2_2+1,tblptrh
 13860  004EB4  6AF8               	clrf	tblptru,c
 13861  004EB6  0E05               	movlw	(high __ramtop+-1)
 13862  004EB8  64F7               	cpfsgt	tblptrh,c
 13863  004EBA  D003               	bra	u4887
 13864  004EBC  0008               	tblrd		*
 13865  004EBE  50F5               	movf	tablat,w,c
 13866  004EC0  D005               	bra	u4880
 13867  004EC2                     u4887:
 13868  004EC2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13869  004EC6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13870  004ECA  50EF               	movf	indf0,w,c
 13871  004ECC                     u4880:
 13872  004ECC  6E53               	movwf	command_turn_ARRAY_2_2@s2+1,c
 13873  004ECE                     l7526:
 13874                           
 13875                           ;master/animation.c: 292:     for (int j = 0; j < mouitido; j++) {
 13876  004ECE  0E00               	movlw	0
 13877  004ED0  6E50               	movwf	command_turn_ARRAY_2_2@j+1,c
 13878  004ED2  0E00               	movlw	0
 13879  004ED4  6E4F               	movwf	command_turn_ARRAY_2_2@j,c
 13880  004ED6  D058               	goto	l7566
 13881  004ED8                     l7528:
 13882                           
 13883                           ;master/animation.c: 293:         for (int i = 0; i < 3; i++) {
 13884  004ED8  0E00               	movlw	0
 13885  004EDA  6E56               	movwf	command_turn_ARRAY_2_2@i+1,c
 13886  004EDC  0E00               	movlw	0
 13887  004EDE  6E55               	movwf	command_turn_ARRAY_2_2@i,c
 13888  004EE0                     l7534:
 13889                           
 13890                           ;master/animation.c: 294:             if (mode_cube_end == 0)
 13891  004EE0  0100               	movlb	0	; () banked
 13892  004EE2  51F3               	movf	_mode_cube_end& (0+255),w,b
 13893  004EE4  B4D8               	btfsc	status,2,c
 13894  004EE6  D032               	goto	u4900
 13895                           
 13896                           ; BSR set to: 0
 13897                           ;master/animation.c: 296:             TURN_COUNT %= 12;
 13898  004EE8  C0F4  F023         	movff	_TURN_COUNT,___awmod@dividend
 13899  004EEC  6A24               	clrf	___awmod@dividend+1,c
 13900  004EEE  0E00               	movlw	0
 13901  004EF0  6E26               	movwf	___awmod@divisor+1,c
 13902  004EF2  0E0C               	movlw	12
 13903  004EF4  6E25               	movwf	___awmod@divisor,c
 13904  004EF6  EC77  F01A         	call	___awmod	;wreg free
 13905  004EFA  5023               	movf	?___awmod,w,c
 13906  004EFC  0100               	movlb	0	; () banked
 13907  004EFE  6FF4               	movwf	_TURN_COUNT& (0+255),b
 13908                           
 13909                           ; BSR set to: 0
 13910                           ;master/animation.c: 297:             command_turn_ARRAY(s2);
 13911  004F00  0E52               	movlw	low command_turn_ARRAY_2_2@s2
 13912  004F02  6E1F               	movwf	command_turn_ARRAY@s,c
 13913  004F04  0E00               	movlw	high command_turn_ARRAY_2_2@s2
 13914  004F06  6E20               	movwf	command_turn_ARRAY@s+1,c
 13915  004F08  EC5C  F02A         	call	_command_turn_ARRAY	;wreg free
 13916                           
 13917                           ;master/animation.c: 299:             convert_ROTtoLED();
 13918  004F0C  EC00  F01C         	call	_convert_ROTtoLED	;wreg free
 13919                           
 13920                           ;master/animation.c: 300:             OUT_LED_ARRAY(LED_ARRAY, POWER);
 13921  004F10  0E07               	movlw	low _LED_ARRAY
 13922  004F12  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
 13923  004F14  0E01               	movlw	high _LED_ARRAY
 13924  004F16  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
 13925  004F18  C0F0  F009         	movff	_POWER,OUT_LED_ARRAY@LED_POWER
 13926  004F1C  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
 13927                           
 13928                           ;master/animation.c: 301:             _delay((unsigned long)((100)*(64000000/4000.0)));
 13929  004F20  0E09               	movlw	9
 13930  004F22  6E4D               	movwf	(??_command_turn_ARRAY_2_2+1)& (0+255),c
 13931  004F24  0E1E               	movlw	30
 13932  004F26  6E4C               	movwf	??_command_turn_ARRAY_2_2& (0+255),c
 13933  004F28  0EE4               	movlw	228
 13934  004F2A                     u8287:
 13935  004F2A  2EE8               	decfsz	wreg,f,c
 13936  004F2C  D7FE               	bra	u8287
 13937  004F2E  2E4C               	decfsz	??_command_turn_ARRAY_2_2& (0+255),f,c
 13938  004F30  D7FC               	bra	u8287
 13939  004F32  2E4D               	decfsz	(??_command_turn_ARRAY_2_2+1)& (0+255),f,c
 13940  004F34  D7FA               	bra	u8287
 13941  004F36  D000               	nop2	
 13942                           
 13943                           ;master/animation.c: 302:         }
 13944  004F38  4A55               	infsnz	command_turn_ARRAY_2_2@i,f,c
 13945  004F3A  2A56               	incf	command_turn_ARRAY_2_2@i+1,f,c
 13946  004F3C  BE56               	btfsc	command_turn_ARRAY_2_2@i+1,7,c
 13947  004F3E  D7D0               	goto	l7534
 13948  004F40  5056               	movf	command_turn_ARRAY_2_2@i+1,w,c
 13949  004F42  E104               	bnz	u4900
 13950  004F44  0E03               	movlw	3
 13951  004F46  5C55               	subwf	command_turn_ARRAY_2_2@i,w,c
 13952  004F48  A0D8               	btfss	status,0,c
 13953  004F4A  D7CA               	goto	l7534
 13954  004F4C                     u4900:
 13955                           
 13956                           ;master/animation.c: 303:         if (mode_cube_end == 0)
 13957  004F4C  0100               	movlb	0	; () banked
 13958  004F4E  51F3               	movf	_mode_cube_end& (0+255),w,b
 13959  004F50  B4D8               	btfsc	status,2,c
 13960  004F52  D018               	goto	l7564
 13961                           
 13962                           ; BSR set to: 0
 13963                           ;master/animation.c: 305:         convert_ROTtoLED();
 13964  004F54  EC00  F01C         	call	_convert_ROTtoLED	;wreg free
 13965                           
 13966                           ;master/animation.c: 306:         OUT_LED_ARRAY(LED_ARRAY, POWER);
 13967  004F58  0E07               	movlw	low _LED_ARRAY
 13968  004F5A  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
 13969  004F5C  0E01               	movlw	high _LED_ARRAY
 13970  004F5E  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
 13971  004F60  C0F0  F009         	movff	_POWER,OUT_LED_ARRAY@LED_POWER
 13972  004F64  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
 13973                           
 13974                           ;master/animation.c: 309:         _delay((unsigned long)((95)*(64000000/4000.0)));
 13975  004F68  0E08               	movlw	8
 13976  004F6A  6E4D               	movwf	(??_command_turn_ARRAY_2_2+1)& (0+255),c
 13977  004F6C  0EB6               	movlw	182
 13978  004F6E  6E4C               	movwf	??_command_turn_ARRAY_2_2& (0+255),c
 13979  004F70  0E00               	movlw	0
 13980  004F72                     u8297:
 13981  004F72  2EE8               	decfsz	wreg,f,c
 13982  004F74  D7FE               	bra	u8297
 13983  004F76  2E4C               	decfsz	??_command_turn_ARRAY_2_2& (0+255),f,c
 13984  004F78  D7FC               	bra	u8297
 13985  004F7A  2E4D               	decfsz	(??_command_turn_ARRAY_2_2+1)& (0+255),f,c
 13986  004F7C  D7FA               	bra	u8297
 13987                           
 13988                           ;master/animation.c: 310:         TURN_COUNT = 0;
 13989  004F7E  0E00               	movlw	0
 13990  004F80  0100               	movlb	0	; () banked
 13991  004F82  6FF4               	movwf	_TURN_COUNT& (0+255),b
 13992  004F84                     l7564:
 13993                           
 13994                           ; BSR set to: 0
 13995  004F84  4A4F               	infsnz	command_turn_ARRAY_2_2@j,f,c
 13996  004F86  2A50               	incf	command_turn_ARRAY_2_2@j+1,f,c
 13997  004F88                     l7566:
 13998  004F88  5051               	movf	command_turn_ARRAY_2_2@mouitido,w,c
 13999  004F8A  6E4C               	movwf	??_command_turn_ARRAY_2_2& (0+255),c
 14000  004F8C  6A4D               	clrf	(??_command_turn_ARRAY_2_2+1)& (0+255),c
 14001  004F8E  504C               	movf	??_command_turn_ARRAY_2_2,w,c
 14002  004F90  5C4F               	subwf	command_turn_ARRAY_2_2@j,w,c
 14003  004F92  5050               	movf	command_turn_ARRAY_2_2@j+1,w,c
 14004  004F94  0A80               	xorlw	128
 14005  004F96  6E4E               	movwf	(??_command_turn_ARRAY_2_2+2)& (0+255),c
 14006  004F98  504D               	movf	??_command_turn_ARRAY_2_2+1,w,c
 14007  004F9A  0A80               	xorlw	128
 14008  004F9C  584E               	subwfb	(??_command_turn_ARRAY_2_2+2)& (0+255),w,c
 14009  004F9E  B0D8               	btfsc	status,0,c
 14010  004FA0  0012               	return	
 14011  004FA2  D79A               	goto	l7528
 14012  004FA4                     __end_of_command_turn_ARRAY_2_2:
 14013                           	opt callstack 0
 14014                           
 14015 ;; *************** function _command_turn_ARRAY *****************
 14016 ;; Defined at:
 14017 ;;		line 41 in file "master/operation_CES.c"
 14018 ;; Parameters:    Size  Location     Type
 14019 ;;  s               2   30[COMRAM] PTR const unsigned char 
 14020 ;;		 -> STR_198(3), STR_197(3), STR_196(3), STR_195(3), 
 14021 ;;		 -> STR_194(3), STR_193(3), STR_192(3), STR_191(3), 
 14022 ;;		 -> STR_190(3), STR_189(3), STR_188(3), STR_187(3), 
 14023 ;;		 -> STR_186(2), STR_185(2), STR_184(2), STR_183(2), 
 14024 ;;		 -> STR_182(2), STR_181(2), STR_180(5), command_turn_ARRAY_2_2@s2(3), 
 14025 ;;		 -> STR_179(3), STR_178(3), STR_177(2), STR_176(3), 
 14026 ;;		 -> STR_175(3), STR_174(2), STR_173(2), STR_172(2), 
 14027 ;;		 -> STR_171(3), STR_169(3), STR_168(3), STR_167(2), 
 14028 ;;		 -> STR_165(3), STR_164(3), STR_163(2), STR_162(3), 
 14029 ;;		 -> STR_161(3), STR_160(2), STR_159(2), STR_158(2), 
 14030 ;;		 -> STR_157(3), STR_155(3), STR_154(3), STR_153(2), 
 14031 ;;		 -> STR_151(3), STR_150(2), STR_149(2), STR_148(3), 
 14032 ;;		 -> STR_147(2), STR_146(2), STR_145(2), STR_144(3), 
 14033 ;;		 -> STR_143(3), STR_141(3), STR_140(2), STR_139(2), 
 14034 ;;		 -> STR_137(3), STR_136(3), STR_135(2), STR_134(3), 
 14035 ;;		 -> STR_133(3), STR_132(2), STR_131(2), STR_130(2), 
 14036 ;;		 -> STR_129(3), STR_127(3), STR_126(3), STR_125(2), 
 14037 ;;		 -> STR_123(3), STR_122(3), STR_121(2), STR_120(3), 
 14038 ;;		 -> STR_119(3), STR_118(2), STR_117(2), STR_116(2), 
 14039 ;;		 -> STR_115(3), STR_113(3), STR_112(3), STR_111(2), 
 14040 ;;		 -> STR_109(3), STR_108(2), STR_107(2), STR_106(3), 
 14041 ;;		 -> STR_105(2), STR_104(2), STR_103(2), STR_102(3), 
 14042 ;;		 -> STR_101(3), STR_99(3), STR_98(2), STR_97(2), 
 14043 ;;		 -> STR_38(3), STR_37(3), STR_36(3), STR_35(3), 
 14044 ;;		 -> STR_34(3), STR_33(3), STR_32(2), STR_31(2), 
 14045 ;;		 -> STR_30(2), STR_29(3), STR_28(3), STR_27(3), 
 14046 ;;		 -> STR_26(3), STR_25(3), STR_24(3), STR_23(2), 
 14047 ;;		 -> STR_22(2), STR_21(2), STR_20(3), STR_19(3), 
 14048 ;;		 -> STR_18(3), STR_17(3), STR_16(3), STR_15(3), 
 14049 ;;		 -> STR_14(3), STR_13(3), STR_12(3), STR_11(3), 
 14050 ;;		 -> STR_10(3), STR_9(3), STR_8(2), STR_7(2), 
 14051 ;;		 -> STR_6(2), STR_5(2), STR_4(2), STR_3(2), 
 14052 ;;		 -> STR_2(6), STR_1(5), 
 14053 ;; Auto vars:     Size  Location     Type
 14054 ;;  MEN_NUM         2   39[COMRAM] PTR const struct TURN_NU
 14055 ;;		 -> command_turn_ARRAY@TURN_NUM_E(16), command_turn_ARRAY@TURN_NUM_S(16), command_turn_ARRAY@TURN_NUM_M(16), command
      +_turn_ARRAY@TURN_NUM_B(16), 
 14056 ;;		 -> command_turn_ARRAY@TURN_NUM_D(16), command_turn_ARRAY@TURN_NUM_L(16), command_turn_ARRAY@TURN_NUM_F(16), command
      +_turn_ARRAY@TURN_NUM_U(16), 
 14057 ;;		 -> command_turn_ARRAY@TURN_NUM_R(16), 
 14058 ;;  MOVE_LOW        1   41[COMRAM] unsigned char 
 14059 ;;  for_count_nu    1   38[COMRAM] unsigned char 
 14060 ;;  SIDE_SURFACE    1   37[COMRAM] unsigned char 
 14061 ;;  SIDE_TURN_FL    1   36[COMRAM] unsigned char 
 14062 ;;  for_count_2     1   35[COMRAM] unsigned char 
 14063 ;;  for_count       1   34[COMRAM] unsigned char 
 14064 ;; Return value:  Size  Location     Type
 14065 ;;                  1    wreg      void 
 14066 ;; Registers used:
 14067 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14068 ;; Tracked objects:
 14069 ;;		On entry : 0/0
 14070 ;;		On exit  : 0/0
 14071 ;;		Unchanged: 0/0
 14072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14073 ;;      Params:         2       0       0       0       0       0       0
 14074 ;;      Locals:         8       0       0       0       0       0       0
 14075 ;;      Temps:          2       0       0       0       0       0       0
 14076 ;;      Totals:        12       0       0       0       0       0       0
 14077 ;;Total ram usage:       12 bytes
 14078 ;; Hardware stack levels used:    1
 14079 ;; Hardware stack levels required when called:    1
 14080 ;; This function calls:
 14081 ;;		_ARRAY_LINE_TURN
 14082 ;;		_ARRAY_SIDE_TURN
 14083 ;; This function is called by:
 14084 ;;		_main
 14085 ;;		_command_turn_ARRAY_2_2
 14086 ;;		_command_turn_ARRAY_2_3
 14087 ;; This function uses a non-reentrant model
 14088 ;;
 14089                           
 14090                           	psect	text51
 14091  0054B8                     __ptext51:
 14092                           	opt callstack 0
 14093  0054B8                     _command_turn_ARRAY:
 14094                           	opt callstack 29
 14095                           
 14096                           ;master/operation_CES.c: 79:     char MOVE_LOW = 0;
 14097                           
 14098                           ;incstack = 0
 14099  0054B8  0E00               	movlw	0
 14100  0054BA  6E2A               	movwf	command_turn_ARRAY@MOVE_LOW,c
 14101                           
 14102                           ;master/operation_CES.c: 80:     const TURN_NUM *MEN_NUM;;master/operation_CES.c: 81:   
      +                            const char for_count_LIST[4] = {1, 11, 11, 1};;master/operation_CES.c: 82:     char SI
      +                          DE_SURFACE;;master/operation_CES.c: 83:     char SIDE_TURN_FLG = 1;
 14103  0054BC  0E01               	movlw	1
 14104  0054BE  6E25               	movwf	command_turn_ARRAY@SIDE_TURN_FLG,c
 14105                           
 14106                           ;master/operation_CES.c: 84:     char for_count;;master/operation_CES.c: 85:     char fo
      +                          r_count_2;;master/operation_CES.c: 86:     SIDE_TURN_FLG = 1;
 14107  0054C0  0E01               	movlw	1
 14108  0054C2  6E25               	movwf	command_turn_ARRAY@SIDE_TURN_FLG,c
 14109                           
 14110                           ;master/operation_CES.c: 89:     if (*(s + 1) == '\'')
 14111  0054C4  0E01               	movlw	1
 14112  0054C6  241F               	addwf	command_turn_ARRAY@s,w,c
 14113  0054C8  6E21               	movwf	??_command_turn_ARRAY& (0+255),c
 14114  0054CA  0E00               	movlw	0
 14115  0054CC  2020               	addwfc	command_turn_ARRAY@s+1,w,c
 14116  0054CE  6E22               	movwf	(??_command_turn_ARRAY+1)& (0+255),c
 14117  0054D0  C021  FFF6         	movff	??_command_turn_ARRAY,tblptrl
 14118  0054D4  C022  FFF7         	movff	??_command_turn_ARRAY+1,tblptrh
 14119  0054D8  6AF8               	clrf	tblptru,c
 14120  0054DA  0E05               	movlw	(high __ramtop+-1)
 14121  0054DC  64F7               	cpfsgt	tblptrh,c
 14122  0054DE  D003               	bra	u4597
 14123  0054E0  0008               	tblrd		*
 14124  0054E2  50F5               	movf	tablat,w,c
 14125  0054E4  D005               	bra	u4590
 14126  0054E6                     u4597:
 14127  0054E6  CFF6 FFE9          	movff	tblptrl,fsr0l
 14128  0054EA  CFF7 FFEA          	movff	tblptrh,fsr0h
 14129  0054EE  50EF               	movf	indf0,w,c
 14130  0054F0                     u4590:
 14131  0054F0  0A27               	xorlw	39
 14132  0054F2  A4D8               	btfss	status,2,c
 14133  0054F4  D002               	goto	l7292
 14134                           
 14135                           ;master/operation_CES.c: 90:     {;master/operation_CES.c: 91:         for_count_num = 1
      +                          ;
 14136  0054F6  0E01               	movlw	1
 14137  0054F8  D001               	goto	L6
 14138  0054FA                     l7292:
 14139                           
 14140                           ;master/operation_CES.c: 94:     {;master/operation_CES.c: 95:         for_count_num = 0
      +                          ;
 14141  0054FA  0E00               	movlw	0
 14142  0054FC                     L6:
 14143  0054FC  6E27               	movwf	command_turn_ARRAY@for_count_num,c
 14144  0054FE  D048               	goto	l7346
 14145  005500                     l7294:
 14146                           
 14147                           ;master/operation_CES.c: 100:         MEN_NUM = &TURN_NUM_R;
 14148  005500  0E77               	movlw	low command_turn_ARRAY@TURN_NUM_R
 14149  005502  6E28               	movwf	command_turn_ARRAY@MEN_NUM,c
 14150  005504  0E7F               	movlw	high command_turn_ARRAY@TURN_NUM_R
 14151  005506  6E29               	movwf	command_turn_ARRAY@MEN_NUM+1,c
 14152                           
 14153                           ;master/operation_CES.c: 101:         MOVE_LOW = 0;
 14154  005508  0E00               	movlw	0
 14155  00550A  6E2A               	movwf	command_turn_ARRAY@MOVE_LOW,c
 14156                           
 14157                           ;master/operation_CES.c: 102:         SIDE_SURFACE = 4;
 14158  00550C  0E04               	movlw	4
 14159  00550E  D007               	goto	L7
 14160  005510                     l7300:
 14161                           
 14162                           ;master/operation_CES.c: 105:         MEN_NUM = &TURN_NUM_L;
 14163  005510  0E47               	movlw	low command_turn_ARRAY@TURN_NUM_L
 14164  005512  6E28               	movwf	command_turn_ARRAY@MEN_NUM,c
 14165  005514  0E7F               	movlw	high command_turn_ARRAY@TURN_NUM_L
 14166  005516  6E29               	movwf	command_turn_ARRAY@MEN_NUM+1,c
 14167                           
 14168                           ;master/operation_CES.c: 106:         MOVE_LOW = 2;
 14169  005518  0E02               	movlw	2
 14170  00551A  6E2A               	movwf	command_turn_ARRAY@MOVE_LOW,c
 14171                           
 14172                           ;master/operation_CES.c: 107:         SIDE_SURFACE = 2;
 14173  00551C  0E02               	movlw	2
 14174  00551E                     L7:
 14175  00551E  6E26               	movwf	command_turn_ARRAY@SIDE_SURFACE,c
 14176                           
 14177                           ;master/operation_CES.c: 108:         break;
 14178  005520  D069               	goto	l7348
 14179  005522                     l7306:
 14180                           
 14181                           ;master/operation_CES.c: 110:         SIDE_SURFACE = 0;
 14182  005522  0E00               	movlw	0
 14183  005524  6E26               	movwf	command_turn_ARRAY@SIDE_SURFACE,c
 14184                           
 14185                           ;master/operation_CES.c: 111:         MEN_NUM = &TURN_NUM_U;
 14186  005526  0E67               	movlw	low command_turn_ARRAY@TURN_NUM_U
 14187  005528  6E28               	movwf	command_turn_ARRAY@MEN_NUM,c
 14188  00552A  0E7F               	movlw	high command_turn_ARRAY@TURN_NUM_U
 14189  00552C  6E29               	movwf	command_turn_ARRAY@MEN_NUM+1,c
 14190                           
 14191                           ;master/operation_CES.c: 112:         MOVE_LOW = 0;
 14192  00552E  0E00               	movlw	0
 14193  005530  D007               	goto	L8
 14194  005532                     l7312:
 14195                           
 14196                           ;master/operation_CES.c: 115:         SIDE_SURFACE = 5;
 14197  005532  0E05               	movlw	5
 14198  005534  6E26               	movwf	command_turn_ARRAY@SIDE_SURFACE,c
 14199                           
 14200                           ;master/operation_CES.c: 116:         MEN_NUM = &TURN_NUM_D;
 14201  005536  0E37               	movlw	low command_turn_ARRAY@TURN_NUM_D
 14202  005538  6E28               	movwf	command_turn_ARRAY@MEN_NUM,c
 14203  00553A  0E7F               	movlw	high command_turn_ARRAY@TURN_NUM_D
 14204  00553C  6E29               	movwf	command_turn_ARRAY@MEN_NUM+1,c
 14205                           
 14206                           ;master/operation_CES.c: 117:         MOVE_LOW = 2;
 14207  00553E  0E02               	movlw	2
 14208  005540                     L8:
 14209  005540  6E2A               	movwf	command_turn_ARRAY@MOVE_LOW,c
 14210                           
 14211                           ;master/operation_CES.c: 118:         break;
 14212  005542  D058               	goto	l7348
 14213  005544                     l7318:
 14214                           
 14215                           ;master/operation_CES.c: 120:         SIDE_SURFACE = 1;
 14216  005544  0E01               	movlw	1
 14217  005546  6E26               	movwf	command_turn_ARRAY@SIDE_SURFACE,c
 14218                           
 14219                           ;master/operation_CES.c: 121:         MEN_NUM = &TURN_NUM_F;
 14220  005548  0E57               	movlw	low command_turn_ARRAY@TURN_NUM_F
 14221  00554A  6E28               	movwf	command_turn_ARRAY@MEN_NUM,c
 14222  00554C  0E7F               	movlw	high command_turn_ARRAY@TURN_NUM_F
 14223  00554E  D7EE               	goto	L9
 14224  005550                     l7324:
 14225                           
 14226                           ;master/operation_CES.c: 125:         MOVE_LOW = 2;
 14227  005550  0E02               	movlw	2
 14228  005552  6E2A               	movwf	command_turn_ARRAY@MOVE_LOW,c
 14229                           
 14230                           ;master/operation_CES.c: 126:         SIDE_SURFACE = 3;
 14231  005554  0E03               	movlw	3
 14232  005556  6E26               	movwf	command_turn_ARRAY@SIDE_SURFACE,c
 14233                           
 14234                           ;master/operation_CES.c: 127:         MEN_NUM = &TURN_NUM_B;
 14235  005558  0E27               	movlw	low command_turn_ARRAY@TURN_NUM_B
 14236  00555A  6E28               	movwf	command_turn_ARRAY@MEN_NUM,c
 14237  00555C  0E7F               	movlw	high command_turn_ARRAY@TURN_NUM_B
 14238  00555E  D010               	goto	L10
 14239  005560                     l7328:
 14240                           
 14241                           ;master/operation_CES.c: 132:         MOVE_LOW = 2;
 14242  005560  0E02               	movlw	2
 14243  005562  6E2A               	movwf	command_turn_ARRAY@MOVE_LOW,c
 14244                           
 14245                           ;master/operation_CES.c: 133:         MEN_NUM = &TURN_NUM_M;
 14246  005564  0E17               	movlw	low command_turn_ARRAY@TURN_NUM_M
 14247  005566  6E28               	movwf	command_turn_ARRAY@MEN_NUM,c
 14248  005568  0E7F               	movlw	high command_turn_ARRAY@TURN_NUM_M
 14249  00556A  6E29               	movwf	command_turn_ARRAY@MEN_NUM+1,c
 14250                           
 14251                           ;master/operation_CES.c: 134:         SIDE_TURN_FLG = 0;
 14252  00556C  0E00               	movlw	0
 14253  00556E  6E25               	movwf	command_turn_ARRAY@SIDE_TURN_FLG,c
 14254                           
 14255                           ;master/operation_CES.c: 135:         break;
 14256  005570  D041               	goto	l7348
 14257  005572                     l7334:
 14258                           
 14259                           ;master/operation_CES.c: 137:         MOVE_LOW = 0;
 14260  005572  0E00               	movlw	0
 14261  005574  6E2A               	movwf	command_turn_ARRAY@MOVE_LOW,c
 14262                           
 14263                           ;master/operation_CES.c: 138:         SIDE_TURN_FLG = 0;
 14264  005576  0E00               	movlw	0
 14265  005578  6E25               	movwf	command_turn_ARRAY@SIDE_TURN_FLG,c
 14266                           
 14267                           ;master/operation_CES.c: 139:         MEN_NUM = &TURN_NUM_S;
 14268  00557A  0E07               	movlw	low command_turn_ARRAY@TURN_NUM_S
 14269  00557C  6E28               	movwf	command_turn_ARRAY@MEN_NUM,c
 14270  00557E  0E7F               	movlw	high command_turn_ARRAY@TURN_NUM_S
 14271  005580                     L10:
 14272  005580  6E29               	movwf	command_turn_ARRAY@MEN_NUM+1,c
 14273                           
 14274                           ;master/operation_CES.c: 140:         break;
 14275  005582  D038               	goto	l7348
 14276  005584                     l7338:
 14277                           
 14278                           ;master/operation_CES.c: 142:         MOVE_LOW = 2;
 14279  005584  0E02               	movlw	2
 14280  005586  6E2A               	movwf	command_turn_ARRAY@MOVE_LOW,c
 14281                           
 14282                           ;master/operation_CES.c: 143:         MEN_NUM = &TURN_NUM_E;
 14283  005588  0EF7               	movlw	low command_turn_ARRAY@TURN_NUM_E
 14284  00558A  6E28               	movwf	command_turn_ARRAY@MEN_NUM,c
 14285  00558C  0E7E               	movlw	high command_turn_ARRAY@TURN_NUM_E
 14286  00558E  D7ED               	goto	L11
 14287  005590                     l7346:
 14288  005590  C01F  FFF6         	movff	command_turn_ARRAY@s,tblptrl
 14289  005594  C020  FFF7         	movff	command_turn_ARRAY@s+1,tblptrh
 14290  005598  6AF8               	clrf	tblptru,c
 14291  00559A  0E05               	movlw	(high __ramtop+-1)
 14292  00559C  64F7               	cpfsgt	tblptrh,c
 14293  00559E  D003               	bra	u4617
 14294  0055A0  0008               	tblrd		*
 14295  0055A2  50F5               	movf	tablat,w,c
 14296  0055A4  D005               	bra	u4610
 14297  0055A6                     u4617:
 14298  0055A6  CFF6 FFE9          	movff	tblptrl,fsr0l
 14299  0055AA  CFF7 FFEA          	movff	tblptrh,fsr0h
 14300  0055AE  50EF               	movf	indf0,w,c
 14301  0055B0                     u4610:
 14302  0055B0  6E21               	movwf	??_command_turn_ARRAY& (0+255),c
 14303  0055B2  6A22               	clrf	(??_command_turn_ARRAY+1)& (0+255),c
 14304                           
 14305                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14306                           ; Switch size 1, requested type "simple"
 14307                           ; Number of cases is 1, Range of values is 0 to 0
 14308                           ; switch strategies available:
 14309                           ; Name         Instructions Cycles
 14310                           ; simple_byte            4     3 (average)
 14311                           ;	Chosen strategy is simple_byte
 14312  0055B4  5022               	movf	??_command_turn_ARRAY+1,w,c
 14313  0055B6  0A00               	xorlw	0	; case 0
 14314  0055B8  A4D8               	btfss	status,2,c
 14315  0055BA  D01C               	goto	l7348
 14316                           
 14317                           ; Switch size 1, requested type "simple"
 14318                           ; Number of cases is 9, Range of values is 66 to 85
 14319                           ; switch strategies available:
 14320                           ; Name         Instructions Cycles
 14321                           ; simple_byte           28    15 (average)
 14322                           ;	Chosen strategy is simple_byte
 14323  0055BC  5021               	movf	??_command_turn_ARRAY,w,c
 14324  0055BE  0A42               	xorlw	66	; case 66
 14325  0055C0  B4D8               	btfsc	status,2,c
 14326  0055C2  D7C6               	goto	l7324
 14327  0055C4  0A06               	xorlw	6	; case 68
 14328  0055C6  B4D8               	btfsc	status,2,c
 14329  0055C8  D7B4               	goto	l7312
 14330  0055CA  0A01               	xorlw	1	; case 69
 14331  0055CC  B4D8               	btfsc	status,2,c
 14332  0055CE  D7DA               	goto	l7338
 14333  0055D0  0A03               	xorlw	3	; case 70
 14334  0055D2  B4D8               	btfsc	status,2,c
 14335  0055D4  D7B7               	goto	l7318
 14336  0055D6  0A0A               	xorlw	10	; case 76
 14337  0055D8  B4D8               	btfsc	status,2,c
 14338  0055DA  D79A               	goto	l7300
 14339  0055DC  0A01               	xorlw	1	; case 77
 14340  0055DE  B4D8               	btfsc	status,2,c
 14341  0055E0  D7BF               	goto	l7328
 14342  0055E2  0A1F               	xorlw	31	; case 82
 14343  0055E4  B4D8               	btfsc	status,2,c
 14344  0055E6  D78C               	goto	l7294
 14345  0055E8  0A01               	xorlw	1	; case 83
 14346  0055EA  B4D8               	btfsc	status,2,c
 14347  0055EC  D7C2               	goto	l7334
 14348  0055EE  0A06               	xorlw	6	; case 85
 14349  0055F0  B4D8               	btfsc	status,2,c
 14350  0055F2  D797               	goto	l7306
 14351  0055F4                     l7348:
 14352                           
 14353                           ;master/operation_CES.c: 147:     for (for_count = 0; for_count < for_count_LIST[for_cou
      +                          nt_num + MOVE_LOW]; for_count++)
 14354  0055F4  0E00               	movlw	0
 14355  0055F6  6E23               	movwf	command_turn_ARRAY@for_count,c
 14356  0055F8  D016               	goto	l7356
 14357  0055FA                     l7350:
 14358                           
 14359                           ;master/operation_CES.c: 148:     {;master/operation_CES.c: 149:         MOVE_LOW = 0;
 14360  0055FA  0E00               	movlw	0
 14361  0055FC  6E2A               	movwf	command_turn_ARRAY@MOVE_LOW,c
 14362                           
 14363                           ;master/operation_CES.c: 150:         ARRAY_LINE_TURN(MOVE_LOW, *MEN_NUM);
 14364  0055FE  C028  FFF6         	movff	command_turn_ARRAY@MEN_NUM,tblptrl
 14365  005602  C029  FFF7         	movff	command_turn_ARRAY@MEN_NUM+1,tblptrh
 14366  005606                     	if	0	;tblptru may be non-zero
 14367  005606                     	endif
 14368  005606                     	if	0	;tblptru may be non-zero
 14369  005606                     	endif
 14370  005606  EE00  F001         	lfsr	0,ARRAY_LINE_TURN@MEN_NUM_1
 14371  00560A  0E0F               	movlw	15
 14372  00560C                     u4620:
 14373  00560C  0009               	tblrd		*+
 14374  00560E  CFF5 FFEE          	movff	tablat,postinc0
 14375  005612  06E8               	decf	wreg,f,c
 14376  005614  E2FB               	bc	u4620
 14377  005616  0E10               	movlw	16
 14378  005618  5EE9               	subwf	fsr0l,f,c
 14379  00561A  6AE8               	clrf	wreg,c
 14380  00561C  5AEA               	subwfb	fsr0h,f,c
 14381  00561E  0E00               	movlw	0
 14382  005620  ECD2  F027         	call	_ARRAY_LINE_TURN
 14383                           
 14384                           ;master/operation_CES.c: 151:     }
 14385  005624  2A23               	incf	command_turn_ARRAY@for_count,f,c
 14386  005626                     l7356:
 14387  005626  0E8A               	movlw	low command_turn_ARRAY@for_count_LIST
 14388  005628  6E21               	movwf	??_command_turn_ARRAY& (0+255),c
 14389  00562A  0E7A               	movlw	high command_turn_ARRAY@for_count_LIST
 14390  00562C  6E22               	movwf	(??_command_turn_ARRAY+1)& (0+255),c
 14391  00562E  5027               	movf	command_turn_ARRAY@for_count_num,w,c
 14392  005630  2621               	addwf	??_command_turn_ARRAY,f,c
 14393  005632  0E00               	movlw	0
 14394  005634  2222               	addwfc	??_command_turn_ARRAY+1,f,c
 14395  005636  502A               	movf	command_turn_ARRAY@MOVE_LOW,w,c
 14396  005638  2621               	addwf	??_command_turn_ARRAY,f,c
 14397  00563A  0E00               	movlw	0
 14398  00563C  2222               	addwfc	??_command_turn_ARRAY+1,f,c
 14399  00563E  C021  FFF6         	movff	??_command_turn_ARRAY,tblptrl
 14400  005642  C022  FFF7         	movff	??_command_turn_ARRAY+1,tblptrh
 14401  005646                     	if	0	;tblptru may be non-zero
 14402  005646                     	endif
 14403  005646                     	if	0	;tblptru may be non-zero
 14404  005646                     	endif
 14405  005646  0009               	tblrd		*+
 14406  005648  50F5               	movf	tablat,w,c
 14407  00564A  5C23               	subwf	command_turn_ARRAY@for_count,w,c
 14408  00564C  A0D8               	btfss	status,0,c
 14409  00564E  D7D5               	goto	l7350
 14410                           
 14411                           ;master/operation_CES.c: 152:     if (SIDE_TURN_FLG == 1)
 14412  005650  0425               	decf	command_turn_ARRAY@SIDE_TURN_FLG,w,c
 14413  005652  A4D8               	btfss	status,2,c
 14414  005654  0012               	return	
 14415                           
 14416                           ;master/operation_CES.c: 153:     {;master/operation_CES.c: 155:         for (for_count_
      +                          2 = 0; for_count_2 < for_count_LIST[for_count_num]; for_count_2++)
 14417  005656  0E00               	movlw	0
 14418  005658  6E24               	movwf	command_turn_ARRAY@for_count_2,c
 14419  00565A  D004               	goto	l7366
 14420  00565C                     l7362:
 14421                           
 14422                           ;master/operation_CES.c: 156:         {;master/operation_CES.c: 157:             ARRAY_S
      +                          IDE_TURN(SIDE_SURFACE);
 14423  00565C  5026               	movf	command_turn_ARRAY@SIDE_SURFACE,w,c
 14424  00565E  EC9A  F024         	call	_ARRAY_SIDE_TURN
 14425                           
 14426                           ;master/operation_CES.c: 158:         }
 14427  005662  2A24               	incf	command_turn_ARRAY@for_count_2,f,c
 14428  005664                     l7366:
 14429  005664  0E8A               	movlw	low command_turn_ARRAY@for_count_LIST
 14430  005666  2427               	addwf	command_turn_ARRAY@for_count_num,w,c
 14431  005668  6EF6               	movwf	tblptrl,c
 14432  00566A  6AF7               	clrf	tblptrh,c
 14433  00566C  0E7A               	movlw	high command_turn_ARRAY@for_count_LIST
 14434  00566E  22F7               	addwfc	tblptrh,f,c
 14435  005670                     	if	0	;There are less than 3 active tblptr bytes
 14436  005670                     	endif
 14437  005670  0009               	tblrd		*+
 14438  005672  50F5               	movf	tablat,w,c
 14439  005674  5C24               	subwf	command_turn_ARRAY@for_count_2,w,c
 14440  005676  B0D8               	btfsc	status,0,c
 14441  005678  0012               	return	
 14442  00567A  D7F0               	goto	l7362
 14443  00567C                     __end_of_command_turn_ARRAY:
 14444                           	opt callstack 0
 14445                           
 14446 ;; *************** function _ARRAY_SIDE_TURN *****************
 14447 ;; Defined at:
 14448 ;;		line 179 in file "master/operation_CES.c"
 14449 ;; Parameters:    Size  Location     Type
 14450 ;;  surface         1    wreg     const unsigned char 
 14451 ;; Auto vars:     Size  Location     Type
 14452 ;;  surface         1    9[COMRAM] const unsigned char 
 14453 ;;  i               1   10[COMRAM] unsigned char 
 14454 ;;  temp            1    8[COMRAM] unsigned char 
 14455 ;; Return value:  Size  Location     Type
 14456 ;;                  1    wreg      void 
 14457 ;; Registers used:
 14458 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 14459 ;; Tracked objects:
 14460 ;;		On entry : 0/0
 14461 ;;		On exit  : 0/0
 14462 ;;		Unchanged: 0/0
 14463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14464 ;;      Params:         0       0       0       0       0       0       0
 14465 ;;      Locals:         3       0       0       0       0       0       0
 14466 ;;      Temps:          8       0       0       0       0       0       0
 14467 ;;      Totals:        11       0       0       0       0       0       0
 14468 ;;Total ram usage:       11 bytes
 14469 ;; Hardware stack levels used:    1
 14470 ;; This function calls:
 14471 ;;		Nothing
 14472 ;; This function is called by:
 14473 ;;		_command_turn_ARRAY
 14474 ;; This function uses a non-reentrant model
 14475 ;;
 14476                           
 14477                           	psect	text52
 14478  004934                     __ptext52:
 14479                           	opt callstack 0
 14480  004934                     _ARRAY_SIDE_TURN:
 14481                           	opt callstack 29
 14482                           
 14483                           ;incstack = 0
 14484                           ;ARRAY_SIDE_TURN@surface stored from wreg
 14485  004934  6E0A               	movwf	ARRAY_SIDE_TURN@surface,c
 14486                           
 14487                           ;master/operation_CES.c: 179: void ARRAY_SIDE_TURN(const char surface);master/operation_
      +                          CES.c: 180: {;master/operation_CES.c: 181:     const char side_NUM[8] = {0, 1, 2, 5, 8, 
      +                          7, 6, 3};;master/operation_CES.c: 182:     char temp, i;;master/operation_CES.c: 183:   
      +                            if (TURN_COUNT != 2 && TURN_COUNT != 5 && TURN_COUNT != 8 && TURN_COUNT != 11)
 14488  004936  0E02               	movlw	2
 14489  004938  0100               	movlb	0	; () banked
 14490  00493A  19F4               	xorwf	_TURN_COUNT& (0+255),w,b
 14491  00493C  B4D8               	btfsc	status,2,c
 14492  00493E  D07F               	goto	l7160
 14493                           
 14494                           ; BSR set to: 0
 14495  004940  0E05               	movlw	5
 14496  004942  19F4               	xorwf	_TURN_COUNT& (0+255),w,b
 14497  004944  B4D8               	btfsc	status,2,c
 14498  004946  D07B               	goto	l7160
 14499                           
 14500                           ; BSR set to: 0
 14501  004948  0E08               	movlw	8
 14502  00494A  19F4               	xorwf	_TURN_COUNT& (0+255),w,b
 14503  00494C  B4D8               	btfsc	status,2,c
 14504  00494E  D077               	goto	l7160
 14505                           
 14506                           ; BSR set to: 0
 14507  004950  0E0B               	movlw	11
 14508  004952  19F4               	xorwf	_TURN_COUNT& (0+255),w,b
 14509  004954  B4D8               	btfsc	status,2,c
 14510  004956  D073               	goto	l7160
 14511                           
 14512                           ; BSR set to: 0
 14513                           ;master/operation_CES.c: 184:     {;master/operation_CES.c: 185:         temp = LED_Ligh
      +                          t[surface][side_NUM[0]];
 14514  004958  0E82               	movlw	low ARRAY_SIDE_TURN@side_NUM
 14515  00495A  6EF6               	movwf	tblptrl,c
 14516  00495C                     	if	1	;There is more than 1 active tblptr byte
 14517  00495C  0E7A               	movlw	high ARRAY_SIDE_TURN@side_NUM
 14518  00495E  6EF7               	movwf	tblptrh,c
 14519  004960                     	endif
 14520  004960                     	if	0	;There are less than 3 active tblptr bytes
 14521  004960                     	endif
 14522  004960  0008               	tblrd		*
 14523  004962  CFF5 F001          	movff	tablat,??_ARRAY_SIDE_TURN
 14524  004966  500A               	movf	ARRAY_SIDE_TURN@surface,w,c
 14525  004968  0D09               	mullw	9
 14526  00496A  0E3D               	movlw	low _LED_Light
 14527  00496C  6E02               	movwf	(??_ARRAY_SIDE_TURN+1)& (0+255),c
 14528  00496E  0E01               	movlw	high _LED_Light
 14529  004970  6E03               	movwf	(??_ARRAY_SIDE_TURN+2)& (0+255),c
 14530  004972  50F3               	movf	prodl,w,c
 14531  004974  2602               	addwf	??_ARRAY_SIDE_TURN+1,f,c
 14532  004976  50F4               	movf	prodh,w,c
 14533  004978  2203               	addwfc	??_ARRAY_SIDE_TURN+2,f,c
 14534  00497A  5001               	movf	??_ARRAY_SIDE_TURN,w,c
 14535  00497C  2402               	addwf	??_ARRAY_SIDE_TURN+1,w,c
 14536  00497E  6ED9               	movwf	fsr2l,c
 14537  004980  0E00               	movlw	0
 14538  004982  2003               	addwfc	??_ARRAY_SIDE_TURN+2,w,c
 14539  004984  6EDA               	movwf	fsr2h,c
 14540  004986  50DF               	movf	indf2,w,c
 14541  004988  6E09               	movwf	ARRAY_SIDE_TURN@temp,c
 14542                           
 14543                           ; BSR set to: 0
 14544                           ;master/operation_CES.c: 186:         for (i = 0; i < 7; i++)
 14545  00498A  0E00               	movlw	0
 14546  00498C  6E0B               	movwf	ARRAY_SIDE_TURN@i,c
 14547  00498E                     l7152:
 14548                           
 14549                           ;master/operation_CES.c: 187:         {;master/operation_CES.c: 188:             LED_Lig
      +                          ht[surface][side_NUM[i]] = LED_Light[surface][side_NUM[i + 1]];
 14550  00498E  500B               	movf	ARRAY_SIDE_TURN@i,w,c
 14551  004990  6E01               	movwf	??_ARRAY_SIDE_TURN& (0+255),c
 14552  004992  6A02               	clrf	(??_ARRAY_SIDE_TURN+1)& (0+255),c
 14553  004994  0E01               	movlw	1
 14554  004996  2601               	addwf	??_ARRAY_SIDE_TURN,f,c
 14555  004998  0E00               	movlw	0
 14556  00499A  2202               	addwfc	??_ARRAY_SIDE_TURN+1,f,c
 14557  00499C  0E82               	movlw	low ARRAY_SIDE_TURN@side_NUM
 14558  00499E  2401               	addwf	??_ARRAY_SIDE_TURN,w,c
 14559  0049A0  6EF6               	movwf	tblptrl,c
 14560  0049A2  0E7A               	movlw	high ARRAY_SIDE_TURN@side_NUM
 14561  0049A4  2002               	addwfc	??_ARRAY_SIDE_TURN+1,w,c
 14562  0049A6  6EF7               	movwf	tblptrh,c
 14563  0049A8                     	if	0	;There are less than 3 active tblptr bytes
 14564  0049A8                     	endif
 14565  0049A8  0008               	tblrd		*
 14566  0049AA  CFF5 F003          	movff	tablat,??_ARRAY_SIDE_TURN+2
 14567  0049AE  500A               	movf	ARRAY_SIDE_TURN@surface,w,c
 14568  0049B0  0D09               	mullw	9
 14569  0049B2  0E3D               	movlw	low _LED_Light
 14570  0049B4  6E04               	movwf	(??_ARRAY_SIDE_TURN+3)& (0+255),c
 14571  0049B6  0E01               	movlw	high _LED_Light
 14572  0049B8  6E05               	movwf	(??_ARRAY_SIDE_TURN+4)& (0+255),c
 14573  0049BA  50F3               	movf	prodl,w,c
 14574  0049BC  2604               	addwf	??_ARRAY_SIDE_TURN+3,f,c
 14575  0049BE  50F4               	movf	prodh,w,c
 14576  0049C0  2205               	addwfc	??_ARRAY_SIDE_TURN+4,f,c
 14577  0049C2  5003               	movf	??_ARRAY_SIDE_TURN+2,w,c
 14578  0049C4  2404               	addwf	??_ARRAY_SIDE_TURN+3,w,c
 14579  0049C6  6ED9               	movwf	fsr2l,c
 14580  0049C8  0E00               	movlw	0
 14581  0049CA  2005               	addwfc	??_ARRAY_SIDE_TURN+4,w,c
 14582  0049CC  6EDA               	movwf	fsr2h,c
 14583  0049CE  0E82               	movlw	low ARRAY_SIDE_TURN@side_NUM
 14584  0049D0  240B               	addwf	ARRAY_SIDE_TURN@i,w,c
 14585  0049D2  6EF6               	movwf	tblptrl,c
 14586  0049D4  6AF7               	clrf	tblptrh,c
 14587  0049D6  0E7A               	movlw	high ARRAY_SIDE_TURN@side_NUM
 14588  0049D8  22F7               	addwfc	tblptrh,f,c
 14589  0049DA                     	if	0	;There are less than 3 active tblptr bytes
 14590  0049DA                     	endif
 14591  0049DA  0008               	tblrd		*
 14592  0049DC  CFF5 F006          	movff	tablat,??_ARRAY_SIDE_TURN+5
 14593  0049E0  500A               	movf	ARRAY_SIDE_TURN@surface,w,c
 14594  0049E2  0D09               	mullw	9
 14595  0049E4  0E3D               	movlw	low _LED_Light
 14596  0049E6  6E07               	movwf	(??_ARRAY_SIDE_TURN+6)& (0+255),c
 14597  0049E8  0E01               	movlw	high _LED_Light
 14598  0049EA  6E08               	movwf	(??_ARRAY_SIDE_TURN+7)& (0+255),c
 14599  0049EC  50F3               	movf	prodl,w,c
 14600  0049EE  2607               	addwf	??_ARRAY_SIDE_TURN+6,f,c
 14601  0049F0  50F4               	movf	prodh,w,c
 14602  0049F2  2208               	addwfc	??_ARRAY_SIDE_TURN+7,f,c
 14603  0049F4  5006               	movf	??_ARRAY_SIDE_TURN+5,w,c
 14604  0049F6  2407               	addwf	??_ARRAY_SIDE_TURN+6,w,c
 14605  0049F8  6EE1               	movwf	fsr1l,c
 14606  0049FA  0E00               	movlw	0
 14607  0049FC  2008               	addwfc	??_ARRAY_SIDE_TURN+7,w,c
 14608  0049FE  6EE2               	movwf	fsr1h,c
 14609  004A00  CFDF FFE7          	movff	indf2,indf1
 14610                           
 14611                           ;master/operation_CES.c: 189:         }
 14612  004A04  2A0B               	incf	ARRAY_SIDE_TURN@i,f,c
 14613  004A06  0E06               	movlw	6
 14614  004A08  640B               	cpfsgt	ARRAY_SIDE_TURN@i,c
 14615  004A0A  D7C1               	goto	l7152
 14616                           
 14617                           ;master/operation_CES.c: 190:         LED_Light[surface][side_NUM[7]] = temp;
 14618  004A0C  0E89               	movlw	low (ARRAY_SIDE_TURN@side_NUM+7)
 14619  004A0E  6EF6               	movwf	tblptrl,c
 14620  004A10  0E7A               	movlw	high (ARRAY_SIDE_TURN@side_NUM+7)
 14621  004A12  6EF7               	movwf	tblptrh,c
 14622  004A14                     	if	0	;tblptru may be non-zero
 14623  004A14                     	endif
 14624  004A14                     	if	0	;tblptru may be non-zero
 14625  004A14                     	endif
 14626  004A14  0008               	tblrd		*
 14627  004A16  CFF5 F001          	movff	tablat,??_ARRAY_SIDE_TURN
 14628  004A1A  500A               	movf	ARRAY_SIDE_TURN@surface,w,c
 14629  004A1C  0D09               	mullw	9
 14630  004A1E  0E3D               	movlw	low _LED_Light
 14631  004A20  6E02               	movwf	(??_ARRAY_SIDE_TURN+1)& (0+255),c
 14632  004A22  0E01               	movlw	high _LED_Light
 14633  004A24  6E03               	movwf	(??_ARRAY_SIDE_TURN+2)& (0+255),c
 14634  004A26  50F3               	movf	prodl,w,c
 14635  004A28  2602               	addwf	??_ARRAY_SIDE_TURN+1,f,c
 14636  004A2A  50F4               	movf	prodh,w,c
 14637  004A2C  2203               	addwfc	??_ARRAY_SIDE_TURN+2,f,c
 14638  004A2E  5001               	movf	??_ARRAY_SIDE_TURN,w,c
 14639  004A30  2402               	addwf	??_ARRAY_SIDE_TURN+1,w,c
 14640  004A32  6ED9               	movwf	fsr2l,c
 14641  004A34  0E00               	movlw	0
 14642  004A36  2003               	addwfc	??_ARRAY_SIDE_TURN+2,w,c
 14643  004A38  6EDA               	movwf	fsr2h,c
 14644  004A3A  C009  FFDF         	movff	ARRAY_SIDE_TURN@temp,indf2
 14645  004A3E                     l7160:
 14646                           
 14647                           ;master/operation_CES.c: 192:     TURN_COUNT++;
 14648  004A3E  0100               	movlb	0	; () banked
 14649  004A40  2BF4               	incf	_TURN_COUNT& (0+255),f,b
 14650                           
 14651                           ; BSR set to: 0
 14652                           ;master/operation_CES.c: 193:     if (TURN_COUNT == 12)
 14653  004A42  0E0C               	movlw	12
 14654  004A44  19F4               	xorwf	_TURN_COUNT& (0+255),w,b
 14655  004A46  A4D8               	btfss	status,2,c
 14656  004A48  0012               	return	
 14657                           
 14658                           ; BSR set to: 0
 14659                           ;master/operation_CES.c: 194:     {;master/operation_CES.c: 195:         TURN_COUNT = 0;
 14660  004A4A  0E00               	movlw	0
 14661  004A4C  6FF4               	movwf	_TURN_COUNT& (0+255),b
 14662                           
 14663                           ; BSR set to: 0
 14664  004A4E  0012               	return		;funcret
 14665  004A50                     __end_of_ARRAY_SIDE_TURN:
 14666                           	opt callstack 0
 14667                           
 14668 ;; *************** function _ARRAY_LINE_TURN *****************
 14669 ;; Defined at:
 14670 ;;		line 162 in file "master/operation_CES.c"
 14671 ;; Parameters:    Size  Location     Type
 14672 ;;  MOVE_LOW        1    wreg     const unsigned char 
 14673 ;;  MEN_NUM_1      16    0[COMRAM] const struct TURN_NUM2
 14674 ;; Auto vars:     Size  Location     Type
 14675 ;;  MOVE_LOW        1    0[COMRAM] const unsigned char 
 14676 ;;  i               1   29[COMRAM] unsigned char 
 14677 ;;  j               1   28[COMRAM] unsigned char 
 14678 ;;  SURFASE         1   27[COMRAM] unsigned char 
 14679 ;;  temp            1   26[COMRAM] unsigned char 
 14680 ;; Return value:  Size  Location     Type
 14681 ;;                  1    wreg      void 
 14682 ;; Registers used:
 14683 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14684 ;; Tracked objects:
 14685 ;;		On entry : 0/0
 14686 ;;		On exit  : 0/0
 14687 ;;		Unchanged: 0/0
 14688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14689 ;;      Params:        16       0       0       0       0       0       0
 14690 ;;      Locals:         4       0       0       0       0       0       0
 14691 ;;      Temps:         10       0       0       0       0       0       0
 14692 ;;      Totals:        30       0       0       0       0       0       0
 14693 ;;Total ram usage:       30 bytes
 14694 ;; Hardware stack levels used:    1
 14695 ;; This function calls:
 14696 ;;		Nothing
 14697 ;; This function is called by:
 14698 ;;		_command_turn_ARRAY
 14699 ;; This function uses a non-reentrant model
 14700 ;;
 14701                           
 14702                           	psect	text53
 14703  004FA4                     __ptext53:
 14704                           	opt callstack 0
 14705  004FA4                     _ARRAY_LINE_TURN:
 14706                           	opt callstack 29
 14707                           
 14708                           ;master/operation_CES.c: 162: void ARRAY_LINE_TURN(const char MOVE_LOW, const TURN_NUM M
      +                          EN_NUM_1);master/operation_CES.c: 163: {;master/operation_CES.c: 164:     char temp, i, 
      +                          j;;master/operation_CES.c: 165:     char SURFASE;;master/operation_CES.c: 166:     temp 
      +                          = LED_Light[MEN_NUM_1.MEN_SURFASE[0]][MEN_NUM_1.POINT_NUM[0]];
 14709                           
 14710                           ; BSR set to: 0
 14711                           ;incstack = 0
 14712  004FA4  5001               	movf	ARRAY_LINE_TURN@MEN_NUM_1,w,c
 14713  004FA6  0D09               	mullw	9
 14714  004FA8  0E3D               	movlw	low _LED_Light
 14715  004FAA  6E11               	movwf	??_ARRAY_LINE_TURN& (0+255),c
 14716  004FAC  0E01               	movlw	high _LED_Light
 14717  004FAE  6E12               	movwf	(??_ARRAY_LINE_TURN+1)& (0+255),c
 14718  004FB0  50F3               	movf	prodl,w,c
 14719  004FB2  2611               	addwf	??_ARRAY_LINE_TURN,f,c
 14720  004FB4  50F4               	movf	prodh,w,c
 14721  004FB6  2212               	addwfc	??_ARRAY_LINE_TURN+1,f,c
 14722  004FB8  5005               	movf	ARRAY_LINE_TURN@MEN_NUM_1+4,w,c
 14723  004FBA  2411               	addwf	??_ARRAY_LINE_TURN,w,c
 14724  004FBC  6ED9               	movwf	fsr2l,c
 14725  004FBE  0E00               	movlw	0
 14726  004FC0  2012               	addwfc	??_ARRAY_LINE_TURN+1,w,c
 14727  004FC2  6EDA               	movwf	fsr2h,c
 14728  004FC4  50DF               	movf	indf2,w,c
 14729  004FC6  6E1B               	movwf	ARRAY_LINE_TURN@temp,c
 14730                           
 14731                           ;master/operation_CES.c: 167:     for (i = 0; i < 4; i++)
 14732  004FC8  0E00               	movlw	0
 14733  004FCA  6E1E               	movwf	ARRAY_LINE_TURN@i,c
 14734  004FCC                     l7114:
 14735                           
 14736                           ;master/operation_CES.c: 168:     {;master/operation_CES.c: 169:         SURFASE = MEN_N
      +                          UM_1.MEN_SURFASE[i];
 14737  004FCC  0E01               	movlw	low ARRAY_LINE_TURN@MEN_NUM_1
 14738  004FCE  241E               	addwf	ARRAY_LINE_TURN@i,w,c
 14739  004FD0  6ED9               	movwf	fsr2l,c
 14740  004FD2  6ADA               	clrf	fsr2h,c
 14741  004FD4  0E00               	movlw	high ARRAY_LINE_TURN@MEN_NUM_1
 14742  004FD6  22DA               	addwfc	fsr2h,f,c
 14743  004FD8  50DF               	movf	indf2,w,c
 14744  004FDA  6E1C               	movwf	ARRAY_LINE_TURN@SURFASE,c
 14745                           
 14746                           ;master/operation_CES.c: 170:         for (j = 0; j < 2; j++)
 14747  004FDC  0E00               	movlw	0
 14748  004FDE  6E1D               	movwf	ARRAY_LINE_TURN@j,c
 14749  004FE0                     l7122:
 14750                           
 14751                           ;master/operation_CES.c: 171:         {;master/operation_CES.c: 172:             LED_Lig
      +                          ht[SURFASE][MEN_NUM_1.POINT_NUM[j + i * 3]] = LED_Light[SURFASE][MEN_NUM_1.POINT_NUM[j +
      +                           1 + i * 3]];
 14752  004FE0  501E               	movf	ARRAY_LINE_TURN@i,w,c
 14753  004FE2  0D03               	mullw	3
 14754  004FE4  0E01               	movlw	low ARRAY_LINE_TURN@MEN_NUM_1
 14755  004FE6  6E11               	movwf	??_ARRAY_LINE_TURN& (0+255),c
 14756  004FE8  0E00               	movlw	high ARRAY_LINE_TURN@MEN_NUM_1
 14757  004FEA  6E12               	movwf	(??_ARRAY_LINE_TURN+1)& (0+255),c
 14758  004FEC  50F3               	movf	prodl,w,c
 14759  004FEE  2611               	addwf	??_ARRAY_LINE_TURN,f,c
 14760  004FF0  50F4               	movf	prodh,w,c
 14761  004FF2  2212               	addwfc	??_ARRAY_LINE_TURN+1,f,c
 14762  004FF4  501D               	movf	ARRAY_LINE_TURN@j,w,c
 14763  004FF6  2611               	addwf	??_ARRAY_LINE_TURN,f,c
 14764  004FF8  0E00               	movlw	0
 14765  004FFA  2212               	addwfc	??_ARRAY_LINE_TURN+1,f,c
 14766  004FFC  0E05               	movlw	5
 14767  004FFE  2411               	addwf	??_ARRAY_LINE_TURN,w,c
 14768  005000  6ED9               	movwf	fsr2l,c
 14769  005002  0E00               	movlw	0
 14770  005004  2012               	addwfc	??_ARRAY_LINE_TURN+1,w,c
 14771  005006  6EDA               	movwf	fsr2h,c
 14772  005008  50DF               	movf	indf2,w,c
 14773  00500A  6E13               	movwf	(??_ARRAY_LINE_TURN+2)& (0+255),c
 14774  00500C  501C               	movf	ARRAY_LINE_TURN@SURFASE,w,c
 14775  00500E  0D09               	mullw	9
 14776  005010  0E3D               	movlw	low _LED_Light
 14777  005012  6E14               	movwf	(??_ARRAY_LINE_TURN+3)& (0+255),c
 14778  005014  0E01               	movlw	high _LED_Light
 14779  005016  6E15               	movwf	(??_ARRAY_LINE_TURN+4)& (0+255),c
 14780  005018  50F3               	movf	prodl,w,c
 14781  00501A  2614               	addwf	??_ARRAY_LINE_TURN+3,f,c
 14782  00501C  50F4               	movf	prodh,w,c
 14783  00501E  2215               	addwfc	??_ARRAY_LINE_TURN+4,f,c
 14784  005020  5013               	movf	??_ARRAY_LINE_TURN+2,w,c
 14785  005022  2414               	addwf	??_ARRAY_LINE_TURN+3,w,c
 14786  005024  6ED9               	movwf	fsr2l,c
 14787  005026  0E00               	movlw	0
 14788  005028  2015               	addwfc	??_ARRAY_LINE_TURN+4,w,c
 14789  00502A  6EDA               	movwf	fsr2h,c
 14790  00502C  501E               	movf	ARRAY_LINE_TURN@i,w,c
 14791  00502E  0D03               	mullw	3
 14792  005030  0E01               	movlw	low ARRAY_LINE_TURN@MEN_NUM_1
 14793  005032  6E16               	movwf	(??_ARRAY_LINE_TURN+5)& (0+255),c
 14794  005034  0E00               	movlw	high ARRAY_LINE_TURN@MEN_NUM_1
 14795  005036  6E17               	movwf	(??_ARRAY_LINE_TURN+6)& (0+255),c
 14796  005038  50F3               	movf	prodl,w,c
 14797  00503A  2616               	addwf	??_ARRAY_LINE_TURN+5,f,c
 14798  00503C  50F4               	movf	prodh,w,c
 14799  00503E  2217               	addwfc	??_ARRAY_LINE_TURN+6,f,c
 14800  005040  501D               	movf	ARRAY_LINE_TURN@j,w,c
 14801  005042  2616               	addwf	??_ARRAY_LINE_TURN+5,f,c
 14802  005044  0E00               	movlw	0
 14803  005046  2217               	addwfc	??_ARRAY_LINE_TURN+6,f,c
 14804  005048  0E04               	movlw	4
 14805  00504A  2416               	addwf	??_ARRAY_LINE_TURN+5,w,c
 14806  00504C  6EE1               	movwf	fsr1l,c
 14807  00504E  0E00               	movlw	0
 14808  005050  2017               	addwfc	??_ARRAY_LINE_TURN+6,w,c
 14809  005052  6EE2               	movwf	fsr1h,c
 14810  005054  50E7               	movf	indf1,w,c
 14811  005056  6E18               	movwf	(??_ARRAY_LINE_TURN+7)& (0+255),c
 14812  005058  501C               	movf	ARRAY_LINE_TURN@SURFASE,w,c
 14813  00505A  0D09               	mullw	9
 14814  00505C  0E3D               	movlw	low _LED_Light
 14815  00505E  6E19               	movwf	(??_ARRAY_LINE_TURN+8)& (0+255),c
 14816  005060  0E01               	movlw	high _LED_Light
 14817  005062  6E1A               	movwf	(??_ARRAY_LINE_TURN+9)& (0+255),c
 14818  005064  50F3               	movf	prodl,w,c
 14819  005066  2619               	addwf	??_ARRAY_LINE_TURN+8,f,c
 14820  005068  50F4               	movf	prodh,w,c
 14821  00506A  221A               	addwfc	??_ARRAY_LINE_TURN+9,f,c
 14822  00506C  5018               	movf	??_ARRAY_LINE_TURN+7,w,c
 14823  00506E  2419               	addwf	??_ARRAY_LINE_TURN+8,w,c
 14824  005070  6EE1               	movwf	fsr1l,c
 14825  005072  0E00               	movlw	0
 14826  005074  201A               	addwfc	??_ARRAY_LINE_TURN+9,w,c
 14827  005076  6EE2               	movwf	fsr1h,c
 14828  005078  CFDF FFE7          	movff	indf2,indf1
 14829                           
 14830                           ;master/operation_CES.c: 173:         }
 14831  00507C  2A1D               	incf	ARRAY_LINE_TURN@j,f,c
 14832  00507E  0E01               	movlw	1
 14833  005080  641D               	cpfsgt	ARRAY_LINE_TURN@j,c
 14834  005082  D7AE               	goto	l7122
 14835                           
 14836                           ;master/operation_CES.c: 174:         LED_Light[SURFASE][MEN_NUM_1.POINT_NUM[2 + i * 3]]
      +                           = LED_Light[MEN_NUM_1.MEN_SURFASE[i + 1]][MEN_NUM_1.POINT_NUM[(i + 1) * 3 + 0]];
 14837  005084  501E               	movf	ARRAY_LINE_TURN@i,w,c
 14838  005086  0D03               	mullw	3
 14839  005088  0E07               	movlw	7
 14840  00508A  26F3               	addwf	prodl,f,c
 14841  00508C  0E00               	movlw	0
 14842  00508E  22F4               	addwfc	prodh,f,c
 14843  005090  0E01               	movlw	low ARRAY_LINE_TURN@MEN_NUM_1
 14844  005092  24F3               	addwf	prodl,w,c
 14845  005094  6ED9               	movwf	fsr2l,c
 14846  005096  0E00               	movlw	high ARRAY_LINE_TURN@MEN_NUM_1
 14847  005098  20F4               	addwfc	prodh,w,c
 14848  00509A  6EDA               	movwf	fsr2h,c
 14849  00509C  50DF               	movf	indf2,w,c
 14850  00509E  6E11               	movwf	??_ARRAY_LINE_TURN& (0+255),c
 14851  0050A0  501E               	movf	ARRAY_LINE_TURN@i,w,c
 14852  0050A2  6E12               	movwf	(??_ARRAY_LINE_TURN+1)& (0+255),c
 14853  0050A4  6A13               	clrf	(??_ARRAY_LINE_TURN+2)& (0+255),c
 14854  0050A6  0E01               	movlw	1
 14855  0050A8  2612               	addwf	??_ARRAY_LINE_TURN+1,f,c
 14856  0050AA  0E00               	movlw	0
 14857  0050AC  2213               	addwfc	??_ARRAY_LINE_TURN+2,f,c
 14858  0050AE  0E01               	movlw	low ARRAY_LINE_TURN@MEN_NUM_1
 14859  0050B0  2412               	addwf	??_ARRAY_LINE_TURN+1,w,c
 14860  0050B2  6ED9               	movwf	fsr2l,c
 14861  0050B4  0E00               	movlw	high ARRAY_LINE_TURN@MEN_NUM_1
 14862  0050B6  2013               	addwfc	??_ARRAY_LINE_TURN+2,w,c
 14863  0050B8  6EDA               	movwf	fsr2h,c
 14864  0050BA  50DF               	movf	indf2,w,c
 14865  0050BC  6E14               	movwf	(??_ARRAY_LINE_TURN+3)& (0+255),c
 14866  0050BE  5014               	movf	??_ARRAY_LINE_TURN+3,w,c
 14867  0050C0  0D09               	mullw	9
 14868  0050C2  0E3D               	movlw	low _LED_Light
 14869  0050C4  6E15               	movwf	(??_ARRAY_LINE_TURN+4)& (0+255),c
 14870  0050C6  0E01               	movlw	high _LED_Light
 14871  0050C8  6E16               	movwf	(??_ARRAY_LINE_TURN+5)& (0+255),c
 14872  0050CA  50F3               	movf	prodl,w,c
 14873  0050CC  2615               	addwf	??_ARRAY_LINE_TURN+4,f,c
 14874  0050CE  50F4               	movf	prodh,w,c
 14875  0050D0  2216               	addwfc	??_ARRAY_LINE_TURN+5,f,c
 14876  0050D2  5011               	movf	??_ARRAY_LINE_TURN,w,c
 14877  0050D4  2415               	addwf	??_ARRAY_LINE_TURN+4,w,c
 14878  0050D6  6ED9               	movwf	fsr2l,c
 14879  0050D8  0E00               	movlw	0
 14880  0050DA  2016               	addwfc	??_ARRAY_LINE_TURN+5,w,c
 14881  0050DC  6EDA               	movwf	fsr2h,c
 14882  0050DE  501E               	movf	ARRAY_LINE_TURN@i,w,c
 14883  0050E0  0D03               	mullw	3
 14884  0050E2  0E06               	movlw	6
 14885  0050E4  26F3               	addwf	prodl,f,c
 14886  0050E6  0E00               	movlw	0
 14887  0050E8  22F4               	addwfc	prodh,f,c
 14888  0050EA  0E01               	movlw	low ARRAY_LINE_TURN@MEN_NUM_1
 14889  0050EC  24F3               	addwf	prodl,w,c
 14890  0050EE  6EE1               	movwf	fsr1l,c
 14891  0050F0  0E00               	movlw	high ARRAY_LINE_TURN@MEN_NUM_1
 14892  0050F2  20F4               	addwfc	prodh,w,c
 14893  0050F4  6EE2               	movwf	fsr1h,c
 14894  0050F6  50E7               	movf	indf1,w,c
 14895  0050F8  6E17               	movwf	(??_ARRAY_LINE_TURN+6)& (0+255),c
 14896  0050FA  501C               	movf	ARRAY_LINE_TURN@SURFASE,w,c
 14897  0050FC  0D09               	mullw	9
 14898  0050FE  0E3D               	movlw	low _LED_Light
 14899  005100  6E18               	movwf	(??_ARRAY_LINE_TURN+7)& (0+255),c
 14900  005102  0E01               	movlw	high _LED_Light
 14901  005104  6E19               	movwf	(??_ARRAY_LINE_TURN+8)& (0+255),c
 14902  005106  50F3               	movf	prodl,w,c
 14903  005108  2618               	addwf	??_ARRAY_LINE_TURN+7,f,c
 14904  00510A  50F4               	movf	prodh,w,c
 14905  00510C  2219               	addwfc	??_ARRAY_LINE_TURN+8,f,c
 14906  00510E  5017               	movf	??_ARRAY_LINE_TURN+6,w,c
 14907  005110  2418               	addwf	??_ARRAY_LINE_TURN+7,w,c
 14908  005112  6EE1               	movwf	fsr1l,c
 14909  005114  0E00               	movlw	0
 14910  005116  2019               	addwfc	??_ARRAY_LINE_TURN+8,w,c
 14911  005118  6EE2               	movwf	fsr1h,c
 14912  00511A  CFDF FFE7          	movff	indf2,indf1
 14913                           
 14914                           ;master/operation_CES.c: 175:     }
 14915  00511E  2A1E               	incf	ARRAY_LINE_TURN@i,f,c
 14916  005120  0E03               	movlw	3
 14917  005122  641E               	cpfsgt	ARRAY_LINE_TURN@i,c
 14918  005124  D753               	goto	l7114
 14919                           
 14920                           ;master/operation_CES.c: 176:     LED_Light[MEN_NUM_1.MEN_SURFASE[3]][MEN_NUM_1.POINT_NU
      +                          M[11]] = temp;
 14921  005126  5004               	movf	ARRAY_LINE_TURN@MEN_NUM_1+3,w,c
 14922  005128  0D09               	mullw	9
 14923  00512A  0E3D               	movlw	low _LED_Light
 14924  00512C  6E11               	movwf	??_ARRAY_LINE_TURN& (0+255),c
 14925  00512E  0E01               	movlw	high _LED_Light
 14926  005130  6E12               	movwf	(??_ARRAY_LINE_TURN+1)& (0+255),c
 14927  005132  50F3               	movf	prodl,w,c
 14928  005134  2611               	addwf	??_ARRAY_LINE_TURN,f,c
 14929  005136  50F4               	movf	prodh,w,c
 14930  005138  2212               	addwfc	??_ARRAY_LINE_TURN+1,f,c
 14931  00513A  5010               	movf	ARRAY_LINE_TURN@MEN_NUM_1+15,w,c
 14932  00513C  2411               	addwf	??_ARRAY_LINE_TURN,w,c
 14933  00513E  6ED9               	movwf	fsr2l,c
 14934  005140  0E00               	movlw	0
 14935  005142  2012               	addwfc	??_ARRAY_LINE_TURN+1,w,c
 14936  005144  6EDA               	movwf	fsr2h,c
 14937  005146  C01B  FFDF         	movff	ARRAY_LINE_TURN@temp,indf2
 14938  00514A  0012               	return		;funcret
 14939  00514C                     __end_of_ARRAY_LINE_TURN:
 14940                           	opt callstack 0
 14941                           
 14942 ;; *************** function _animation_3 *****************
 14943 ;; Defined at:
 14944 ;;		line 38 in file "master/animation.c"
 14945 ;; Parameters:    Size  Location     Type
 14946 ;;  color           1    wreg     unsigned char 
 14947 ;;  CS              1   73[COMRAM] unsigned char 
 14948 ;; Auto vars:     Size  Location     Type
 14949 ;;  color           1   74[COMRAM] unsigned char 
 14950 ;;  POWER_change    1   77[COMRAM] unsigned char 
 14951 ;;  flag            1   76[COMRAM] unsigned char 
 14952 ;;  animation_co    1   75[COMRAM] unsigned char 
 14953 ;; Return value:  Size  Location     Type
 14954 ;;                  1    wreg      unsigned char 
 14955 ;; Registers used:
 14956 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 14957 ;; Tracked objects:
 14958 ;;		On entry : 0/0
 14959 ;;		On exit  : 0/0
 14960 ;;		Unchanged: 0/0
 14961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14962 ;;      Params:         1       0       0       0       0       0       0
 14963 ;;      Locals:         4       0       0       0       0       0       0
 14964 ;;      Temps:          0       0       0       0       0       0       0
 14965 ;;      Totals:         5       0       0       0       0       0       0
 14966 ;;Total ram usage:        5 bytes
 14967 ;; Hardware stack levels used:    1
 14968 ;; Hardware stack levels required when called:    4
 14969 ;; This function calls:
 14970 ;;		_OUT_LED_ARRAY
 14971 ;;		_SPI_RET_2
 14972 ;;		_SPI_special
 14973 ;;		_do1
 14974 ;;		_re1
 14975 ;;		_set_all_LED_ARRAY
 14976 ;; This function is called by:
 14977 ;;		_main
 14978 ;;		_Special_input
 14979 ;; This function uses a non-reentrant model
 14980 ;;
 14981                           
 14982                           	psect	text54
 14983  00355E                     __ptext54:
 14984                           	opt callstack 0
 14985  00355E                     _animation_3:
 14986                           	opt callstack 26
 14987                           
 14988                           ;incstack = 0
 14989                           ;animation_3@color stored from wreg
 14990  00355E  6E4B               	movwf	animation_3@color,c
 14991                           
 14992                           ;master/animation.c: 40:     unsigned char POWER_change = POWER;
 14993  003560  C0F0  F04E         	movff	_POWER,animation_3@POWER_change
 14994                           
 14995                           ;master/animation.c: 41:     char flag = 0, animation_count_2 = 0;
 14996  003564  0E00               	movlw	0
 14997  003566  6E4D               	movwf	animation_3@flag,c
 14998  003568  0E00               	movlw	0
 14999  00356A  6E4C               	movwf	animation_3@animation_count_2,c
 15000                           
 15001                           ;master/animation.c: 42:     set_all_LED_ARRAY(color);
 15002  00356C  504B               	movf	animation_3@color,w,c
 15003  00356E  EC42  F01A         	call	_set_all_LED_ARRAY
 15004  003572                     l9582:
 15005                           
 15006                           ;master/animation.c: 44:         OUT_LED_ARRAY(LED_ARRAY, POWER_change);
 15007  003572  0E07               	movlw	low _LED_ARRAY
 15008  003574  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
 15009  003576  0E01               	movlw	high _LED_ARRAY
 15010  003578  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
 15011  00357A  C04E  F009         	movff	animation_3@POWER_change,OUT_LED_ARRAY@LED_POWER
 15012  00357E  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
 15013                           
 15014                           ;master/animation.c: 47:         if (POWER_change >= 200) {
 15015  003582  0EC7               	movlw	199
 15016  003584  644E               	cpfsgt	animation_3@POWER_change,c
 15017  003586  D002               	goto	l9588
 15018                           
 15019                           ;master/animation.c: 48:             flag = 1;
 15020  003588  0E01               	movlw	1
 15021  00358A  D005               	goto	L12
 15022  00358C                     l9588:
 15023  00358C  0E1F               	movlw	31
 15024  00358E  604E               	cpfslt	animation_3@POWER_change,c
 15025  003590  D003               	goto	l9594
 15026                           
 15027                           ;master/animation.c: 50:             animation_count_2++;
 15028  003592  2A4C               	incf	animation_3@animation_count_2,f,c
 15029                           
 15030                           ;master/animation.c: 51:             flag = 0;
 15031  003594  0E00               	movlw	0
 15032  003596                     L12:
 15033  003596  6E4D               	movwf	animation_3@flag,c
 15034  003598                     l9594:
 15035                           
 15036                           ;master/animation.c: 54:         if (flag == 0) {
 15037  003598  504D               	movf	animation_3@flag,w,c
 15038  00359A  A4D8               	btfss	status,2,c
 15039  00359C  D005               	goto	l9600
 15040                           
 15041                           ;master/animation.c: 55:             POWER_change += 4;
 15042  00359E  0E04               	movlw	4
 15043  0035A0  264E               	addwf	animation_3@POWER_change,f,c
 15044                           
 15045                           ;master/animation.c: 56:             do1();
 15046  0035A2  EC02  F018         	call	_do1	;wreg free
 15047                           
 15048                           ;master/animation.c: 57:         } else {
 15049  0035A6  D004               	goto	l9604
 15050  0035A8                     l9600:
 15051                           
 15052                           ;master/animation.c: 58:             POWER_change -= 3;
 15053  0035A8  0E03               	movlw	3
 15054  0035AA  5E4E               	subwf	animation_3@POWER_change,f,c
 15055                           
 15056                           ;master/animation.c: 59:             re1();
 15057  0035AC  EC7F  F019         	call	_re1	;wreg free
 15058  0035B0                     l9604:
 15059                           
 15060                           ;master/animation.c: 62:         if (animation_count_2 > 3)
 15061  0035B0  0E03               	movlw	3
 15062  0035B2  644C               	cpfsgt	animation_3@animation_count_2,c
 15063  0035B4  D001               	goto	l9608
 15064  0035B6  D00A               	goto	l9616
 15065  0035B8                     l9608:
 15066                           
 15067                           ;master/animation.c: 64:         if (SPI_special(CS) == 1) {
 15068  0035B8  504A               	movf	animation_3@CS,w,c
 15069  0035BA  EC96  F017         	call	_SPI_special
 15070  0035BE  06E8               	decf	wreg,f,c
 15071  0035C0  A4D8               	btfss	status,2,c
 15072  0035C2  D7D7               	goto	l9582
 15073                           
 15074                           ;master/animation.c: 65:             SPI_RET_2();
 15075  0035C4  EC6D  F014         	call	_SPI_RET_2	;wreg free
 15076                           
 15077                           ;master/animation.c: 67:             return 1;
 15078  0035C8  0E01               	movlw	1
 15079  0035CA  0012               	return	
 15080  0035CC                     l9616:
 15081                           
 15082                           ;master/animation.c: 70:     return 0;
 15083  0035CC  0E00               	movlw	0
 15084  0035CE  0012               	return		;funcret
 15085  0035D0                     __end_of_animation_3:
 15086                           	opt callstack 0
 15087                           
 15088 ;; *************** function _set_all_LED_ARRAY *****************
 15089 ;; Defined at:
 15090 ;;		line 97 in file "master/animation.c"
 15091 ;; Parameters:    Size  Location     Type
 15092 ;;  color           1    wreg     unsigned char 
 15093 ;; Auto vars:     Size  Location     Type
 15094 ;;  color           1    8[COMRAM] unsigned char 
 15095 ;;  j               2   11[COMRAM] unsigned int 
 15096 ;;  i               2    9[COMRAM] unsigned int 
 15097 ;; Return value:  Size  Location     Type
 15098 ;;                  1    wreg      void 
 15099 ;; Registers used:
 15100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15101 ;; Tracked objects:
 15102 ;;		On entry : 0/0
 15103 ;;		On exit  : 0/0
 15104 ;;		Unchanged: 0/0
 15105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15106 ;;      Params:         0       0       0       0       0       0       0
 15107 ;;      Locals:         5       0       0       0       0       0       0
 15108 ;;      Temps:          2       0       0       0       0       0       0
 15109 ;;      Totals:         7       0       0       0       0       0       0
 15110 ;;Total ram usage:        7 bytes
 15111 ;; Hardware stack levels used:    1
 15112 ;; Hardware stack levels required when called:    1
 15113 ;; This function calls:
 15114 ;;		___wmul
 15115 ;; This function is called by:
 15116 ;;		_main
 15117 ;;		_Special_input
 15118 ;;		_animation_2
 15119 ;;		_animation_3
 15120 ;; This function uses a non-reentrant model
 15121 ;;
 15122                           
 15123                           	psect	text55
 15124  003484                     __ptext55:
 15125                           	opt callstack 0
 15126  003484                     _set_all_LED_ARRAY:
 15127                           	opt callstack 29
 15128                           
 15129                           ;incstack = 0
 15130                           ;set_all_LED_ARRAY@color stored from wreg
 15131  003484  6E09               	movwf	set_all_LED_ARRAY@color,c
 15132                           
 15133                           ;master/animation.c: 98:     for (unsigned int i = 0; i < 6; i++) {
 15134  003486  0E00               	movlw	0
 15135  003488  6E0B               	movwf	set_all_LED_ARRAY@i+1,c
 15136  00348A  0E00               	movlw	0
 15137  00348C  6E0A               	movwf	set_all_LED_ARRAY@i,c
 15138  00348E                     l9006:
 15139                           
 15140                           ;master/animation.c: 99:         for (unsigned int j = 0; j < 9; j++) {
 15141  00348E  0E00               	movlw	0
 15142  003490  6E0D               	movwf	set_all_LED_ARRAY@j+1,c
 15143  003492  0E00               	movlw	0
 15144  003494  6E0C               	movwf	set_all_LED_ARRAY@j,c
 15145  003496                     l9012:
 15146                           
 15147                           ;master/animation.c: 100:             LED_ARRAY[i][j] = color;
 15148  003496  C00A  F001         	movff	set_all_LED_ARRAY@i,___wmul@multiplier
 15149  00349A  C00B  F002         	movff	set_all_LED_ARRAY@i+1,___wmul@multiplier+1
 15150  00349E  0E00               	movlw	0
 15151  0034A0  6E04               	movwf	___wmul@multiplicand+1,c
 15152  0034A2  0E09               	movlw	9
 15153  0034A4  6E03               	movwf	___wmul@multiplicand,c
 15154  0034A6  ECFB  F014         	call	___wmul	;wreg free
 15155  0034AA  0E07               	movlw	low _LED_ARRAY
 15156  0034AC  6E07               	movwf	??_set_all_LED_ARRAY& (0+255),c
 15157  0034AE  0E01               	movlw	high _LED_ARRAY
 15158  0034B0  6E08               	movwf	(??_set_all_LED_ARRAY+1)& (0+255),c
 15159  0034B2  5001               	movf	?___wmul,w,c
 15160  0034B4  2607               	addwf	??_set_all_LED_ARRAY,f,c
 15161  0034B6  5002               	movf	?___wmul+1,w,c
 15162  0034B8  2208               	addwfc	??_set_all_LED_ARRAY+1,f,c
 15163  0034BA  500C               	movf	set_all_LED_ARRAY@j,w,c
 15164  0034BC  2407               	addwf	??_set_all_LED_ARRAY,w,c
 15165  0034BE  6ED9               	movwf	fsr2l,c
 15166  0034C0  500D               	movf	set_all_LED_ARRAY@j+1,w,c
 15167  0034C2  2008               	addwfc	??_set_all_LED_ARRAY+1,w,c
 15168  0034C4  6EDA               	movwf	fsr2h,c
 15169  0034C6  C009  FFDF         	movff	set_all_LED_ARRAY@color,indf2
 15170                           
 15171                           ;master/animation.c: 101:         }
 15172  0034CA  4A0C               	infsnz	set_all_LED_ARRAY@j,f,c
 15173  0034CC  2A0D               	incf	set_all_LED_ARRAY@j+1,f,c
 15174  0034CE  500D               	movf	set_all_LED_ARRAY@j+1,w,c
 15175  0034D0  E104               	bnz	u6850
 15176  0034D2  0E09               	movlw	9
 15177  0034D4  5C0C               	subwf	set_all_LED_ARRAY@j,w,c
 15178  0034D6  A0D8               	btfss	status,0,c
 15179  0034D8  D7DE               	goto	l9012
 15180  0034DA                     u6850:
 15181                           
 15182                           ;master/animation.c: 102:     }
 15183  0034DA  4A0A               	infsnz	set_all_LED_ARRAY@i,f,c
 15184  0034DC  2A0B               	incf	set_all_LED_ARRAY@i+1,f,c
 15185  0034DE  500B               	movf	set_all_LED_ARRAY@i+1,w,c
 15186  0034E0  E105               	bnz	u6860
 15187  0034E2  0E06               	movlw	6
 15188  0034E4  5C0A               	subwf	set_all_LED_ARRAY@i,w,c
 15189  0034E6  B0D8               	btfsc	status,0,c
 15190  0034E8  0012               	return	
 15191  0034EA  D7D1               	goto	l9006
 15192  0034EC                     u6860:
 15193  0034EC  0012               	return		;funcret
 15194  0034EE                     __end_of_set_all_LED_ARRAY:
 15195                           	opt callstack 0
 15196                           
 15197 ;; *************** function _animation_1 *****************
 15198 ;; Defined at:
 15199 ;;		line 3 in file "master/animation.c"
 15200 ;; Parameters:    Size  Location     Type
 15201 ;;  CS              1    wreg     const unsigned char 
 15202 ;; Auto vars:     Size  Location     Type
 15203 ;;  CS              1   75[COMRAM] const unsigned char 
 15204 ;;  j               1   78[COMRAM] unsigned char 
 15205 ;;  i               1   76[COMRAM] unsigned char 
 15206 ;;  animation_co    1   77[COMRAM] unsigned char 
 15207 ;; Return value:  Size  Location     Type
 15208 ;;                  1    wreg      unsigned char 
 15209 ;; Registers used:
 15210 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 15211 ;; Tracked objects:
 15212 ;;		On entry : 0/0
 15213 ;;		On exit  : 0/0
 15214 ;;		Unchanged: 0/0
 15215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15216 ;;      Params:         0       0       0       0       0       0       0
 15217 ;;      Locals:         4       0       0       0       0       0       0
 15218 ;;      Temps:          2       0       0       0       0       0       0
 15219 ;;      Totals:         6       0       0       0       0       0       0
 15220 ;;Total ram usage:        6 bytes
 15221 ;; Hardware stack levels used:    1
 15222 ;; Hardware stack levels required when called:    4
 15223 ;; This function calls:
 15224 ;;		_OUT_LED_ARRAY
 15225 ;;		_SPI_special
 15226 ;;		___awmod
 15227 ;;		_convert_ROTtoLED
 15228 ;;		_do1
 15229 ;;		_do2
 15230 ;;		_mi1
 15231 ;;		_ra1
 15232 ;;		_re1
 15233 ;;		_si1
 15234 ;;		_so1
 15235 ;; This function is called by:
 15236 ;;		_Special_input
 15237 ;; This function uses a non-reentrant model
 15238 ;;
 15239                           
 15240                           	psect	text56
 15241  004154                     __ptext56:
 15242                           	opt callstack 0
 15243  004154                     _animation_1:
 15244                           	opt callstack 25
 15245                           
 15246                           ;incstack = 0
 15247                           ;animation_1@CS stored from wreg
 15248  004154  6E4C               	movwf	animation_1@CS,c
 15249                           
 15250                           ;master/animation.c: 4:     char animation_count;;master/animation.c: 5:     for (animat
      +                          ion_count = 0; animation_count < 50; animation_count++) {
 15251  004156  0E00               	movlw	0
 15252  004158  6E4E               	movwf	animation_1@animation_count,c
 15253  00415A                     l9626:
 15254                           
 15255                           ;master/animation.c: 6:         for (char i = 0; i < 6; i++) {
 15256  00415A  0E00               	movlw	0
 15257  00415C  6E4D               	movwf	animation_1@i,c
 15258  00415E                     l9632:
 15259                           
 15260                           ;master/animation.c: 7:             for (char j = 0; j < 9; j++)
 15261  00415E  0E00               	movlw	0
 15262  004160  6E4F               	movwf	animation_1@j,c
 15263  004162                     l9638:
 15264                           
 15265                           ;master/animation.c: 8:                 LED_Light[i][j] = (j + animation_count) % 5 + 1;
 15266  004162  504D               	movf	animation_1@i,w,c
 15267  004164  0D09               	mullw	9
 15268  004166  0E3D               	movlw	low _LED_Light
 15269  004168  6E4A               	movwf	??_animation_1& (0+255),c
 15270  00416A  0E01               	movlw	high _LED_Light
 15271  00416C  6E4B               	movwf	(??_animation_1+1)& (0+255),c
 15272  00416E  50F3               	movf	prodl,w,c
 15273  004170  264A               	addwf	??_animation_1,f,c
 15274  004172  50F4               	movf	prodh,w,c
 15275  004174  224B               	addwfc	??_animation_1+1,f,c
 15276  004176  504F               	movf	animation_1@j,w,c
 15277  004178  244A               	addwf	??_animation_1,w,c
 15278  00417A  6ED9               	movwf	fsr2l,c
 15279  00417C  0E00               	movlw	0
 15280  00417E  204B               	addwfc	??_animation_1+1,w,c
 15281  004180  6EDA               	movwf	fsr2h,c
 15282  004182  504F               	movf	animation_1@j,w,c
 15283  004184  244E               	addwf	animation_1@animation_count,w,c
 15284  004186  6E23               	movwf	___awmod@dividend,c
 15285  004188  6A24               	clrf	___awmod@dividend+1,c
 15286  00418A  3624               	rlcf	___awmod@dividend+1,f,c
 15287  00418C  0E00               	movlw	0
 15288  00418E  6E26               	movwf	___awmod@divisor+1,c
 15289  004190  0E05               	movlw	5
 15290  004192  6E25               	movwf	___awmod@divisor,c
 15291  004194  EC77  F01A         	call	___awmod	;wreg free
 15292  004198  2823               	incf	?___awmod,w,c
 15293  00419A  6EDF               	movwf	indf2,c
 15294  00419C  2A4F               	incf	animation_1@j,f,c
 15295  00419E  0E08               	movlw	8
 15296  0041A0  644F               	cpfsgt	animation_1@j,c
 15297  0041A2  D7DF               	goto	l9638
 15298                           
 15299                           ;master/animation.c: 9:         }
 15300  0041A4  2A4D               	incf	animation_1@i,f,c
 15301  0041A6  0E05               	movlw	5
 15302  0041A8  644D               	cpfsgt	animation_1@i,c
 15303  0041AA  D7D9               	goto	l9632
 15304                           
 15305                           ;master/animation.c: 10:         convert_ROTtoLED();
 15306  0041AC  EC00  F01C         	call	_convert_ROTtoLED	;wreg free
 15307                           
 15308                           ;master/animation.c: 11:         (*SOUND_NOTE[animation_count % 7])();
 15309  0041B0  C04E  F023         	movff	animation_1@animation_count,___awmod@dividend
 15310  0041B4  6A24               	clrf	___awmod@dividend+1,c
 15311  0041B6  0E00               	movlw	0
 15312  0041B8  6E26               	movwf	___awmod@divisor+1,c
 15313  0041BA  0E07               	movlw	7
 15314  0041BC  6E25               	movwf	___awmod@divisor,c
 15315  0041BE  EC77  F01A         	call	___awmod	;wreg free
 15316  0041C2  90D8               	bcf	status,0,c
 15317  0041C4  3623               	rlcf	?___awmod,f,c
 15318  0041C6  3624               	rlcf	?___awmod+1,f,c
 15319  0041C8  0E81               	movlw	low _SOUND_NOTE
 15320  0041CA  2423               	addwf	?___awmod,w,c
 15321  0041CC  6ED9               	movwf	fsr2l,c
 15322  0041CE  0E01               	movlw	high _SOUND_NOTE
 15323  0041D0  2024               	addwfc	?___awmod+1,w,c
 15324  0041D2  6EDA               	movwf	fsr2h,c
 15325  0041D4  D801               	call	u7558
 15326  0041D6  D00A               	goto	u7559
 15327  0041D8                     u7558:
 15328  0041D8  0005               	push	
 15329  0041DA  6EFA               	movwf	pclath,c
 15330  0041DC  50DE               	movf	postinc2,w,c
 15331  0041DE  6EFD               	movwf	tosl,c
 15332  0041E0  50DE               	movf	postinc2,w,c
 15333  0041E2  6EFE               	movwf	tosh,c
 15334  0041E4  50F8               	movf	tblptru,w,c
 15335  0041E6  6EFF               	movwf	tosu,c
 15336  0041E8  50FA               	movf	pclath,w,c
 15337  0041EA  0012               	return		;indir
 15338  0041EC                     u7559:
 15339                           
 15340                           ;master/animation.c: 12:         OUT_LED_ARRAY(LED_ARRAY, POWER);
 15341  0041EC  0E07               	movlw	low _LED_ARRAY
 15342  0041EE  6E07               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,c
 15343  0041F0  0E01               	movlw	high _LED_ARRAY
 15344  0041F2  6E08               	movwf	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,c
 15345  0041F4  C0F0  F009         	movff	_POWER,OUT_LED_ARRAY@LED_POWER
 15346  0041F8  EC1F  F021         	call	_OUT_LED_ARRAY	;wreg free
 15347                           
 15348                           ;master/animation.c: 13:         _delay((unsigned long)((10)*(64000000/4000.0)));
 15349  0041FC  0ED0               	movlw	208
 15350  0041FE  6E4A               	movwf	??_animation_1& (0+255),c
 15351  004200  0ECA               	movlw	202
 15352  004202                     u8307:
 15353  004202  2EE8               	decfsz	wreg,f,c
 15354  004204  D7FE               	bra	u8307
 15355  004206  2E4A               	decfsz	??_animation_1& (0+255),f,c
 15356  004208  D7FC               	bra	u8307
 15357                           
 15358                           ;master/animation.c: 15:         if (SPI_special(CS) == 1)
 15359  00420A  504C               	movf	animation_1@CS,w,c
 15360  00420C  EC96  F017         	call	_SPI_special
 15361  004210  06E8               	decf	wreg,f,c
 15362  004212  A4D8               	btfss	status,2,c
 15363  004214  D002               	goto	l9662
 15364                           
 15365                           ;master/animation.c: 16:             return 1;
 15366  004216  0E01               	movlw	1
 15367  004218  0012               	return	
 15368  00421A                     l9662:
 15369                           
 15370                           ;master/animation.c: 17:     }
 15371  00421A  2A4E               	incf	animation_1@animation_count,f,c
 15372  00421C  0E31               	movlw	49
 15373  00421E  644E               	cpfsgt	animation_1@animation_count,c
 15374  004220  D79C               	goto	l9626
 15375                           
 15376                           ;master/animation.c: 18:     _delay((unsigned long)((200)*(64000000/4000.0)));
 15377  004222  0E11               	movlw	17
 15378  004224  6E4B               	movwf	(??_animation_1+1)& (0+255),c
 15379  004226  0E3C               	movlw	60
 15380  004228  6E4A               	movwf	??_animation_1& (0+255),c
 15381  00422A  0ECB               	movlw	203
 15382  00422C                     u8317:
 15383  00422C  2EE8               	decfsz	wreg,f,c
 15384  00422E  D7FE               	bra	u8317
 15385  004230  2E4A               	decfsz	??_animation_1& (0+255),f,c
 15386  004232  D7FC               	bra	u8317
 15387  004234  2E4B               	decfsz	(??_animation_1+1)& (0+255),f,c
 15388  004236  D7FA               	bra	u8317
 15389  004238  F000               	nop	
 15390                           
 15391                           ;master/animation.c: 19:     return 0;
 15392  00423A  0E00               	movlw	0
 15393  00423C  0012               	return		;funcret
 15394  00423E                     __end_of_animation_1:
 15395                           	opt callstack 0
 15396                           
 15397 ;; *************** function _do2 *****************
 15398 ;; Defined at:
 15399 ;;		line 109 in file "master/sound.c"
 15400 ;; Parameters:    Size  Location     Type
 15401 ;;		None
 15402 ;; Auto vars:     Size  Location     Type
 15403 ;;  i               4    1[COMRAM] long 
 15404 ;; Return value:  Size  Location     Type
 15405 ;;                  1    wreg      void 
 15406 ;; Registers used:
 15407 ;;		wreg, status,2, status,0
 15408 ;; Tracked objects:
 15409 ;;		On entry : 0/0
 15410 ;;		On exit  : 0/0
 15411 ;;		Unchanged: 0/0
 15412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15413 ;;      Params:         0       0       0       0       0       0       0
 15414 ;;      Locals:         4       0       0       0       0       0       0
 15415 ;;      Temps:          1       0       0       0       0       0       0
 15416 ;;      Totals:         5       0       0       0       0       0       0
 15417 ;;Total ram usage:        5 bytes
 15418 ;; Hardware stack levels used:    1
 15419 ;; This function calls:
 15420 ;;		Nothing
 15421 ;; This function is called by:
 15422 ;;		_animation_1
 15423 ;;		_animation_2
 15424 ;; This function uses a non-reentrant model
 15425 ;;
 15426                           
 15427                           	psect	text57
 15428  0033BE                     __ptext57:
 15429                           	opt callstack 0
 15430  0033BE                     _do2:
 15431                           	opt callstack 29
 15432                           
 15433                           ;master/sound.c: 111:     if (sound_flag == 0)
 15434                           
 15435                           ;incstack = 0
 15436  0033BE  0101               	movlb	1	; () banked
 15437  0033C0  518F               	movf	_sound_flag& (0+255),w,b
 15438  0033C2  B4D8               	btfsc	status,2,c
 15439  0033C4  0012               	return	
 15440                           
 15441                           ; BSR set to: 1
 15442                           ;master/sound.c: 113:     for (long i = 1; i < 30; i++)
 15443  0033C6  0E01               	movlw	1
 15444  0033C8  6E02               	movwf	do2@i,c
 15445  0033CA  0E00               	movlw	0
 15446  0033CC  6E03               	movwf	do2@i+1,c
 15447  0033CE  0E00               	movlw	0
 15448  0033D0  6E04               	movwf	do2@i+2,c
 15449  0033D2  0E00               	movlw	0
 15450  0033D4  6E05               	movwf	do2@i+3,c
 15451  0033D6                     l1412:
 15452                           
 15453                           ;master/sound.c: 114:     {;master/sound.c: 115:         LATBbits.LATB3 = 1;
 15454  0033D6  868A               	bsf	3978,3,c	;volatile
 15455                           
 15456                           ;master/sound.c: 116:         _delay((unsigned long)((956)*(64000000/4000000.0)));
 15457  0033D8  0E14               	movlw	20
 15458  0033DA  6E01               	movwf	??_do2& (0+255),c
 15459  0033DC  0EDC               	movlw	220
 15460  0033DE                     u8327:
 15461  0033DE  2EE8               	decfsz	wreg,f,c
 15462  0033E0  D7FE               	bra	u8327
 15463  0033E2  2E01               	decfsz	??_do2& (0+255),f,c
 15464  0033E4  D7FC               	bra	u8327
 15465  0033E6  D000               	nop2	
 15466                           
 15467                           ;master/sound.c: 117:         LATBbits.LATB3 = 0;
 15468  0033E8  968A               	bcf	3978,3,c	;volatile
 15469                           
 15470                           ;master/sound.c: 118:         _delay((unsigned long)((956)*(64000000/4000000.0)));
 15471  0033EA  0E14               	movlw	20
 15472  0033EC  6E01               	movwf	??_do2& (0+255),c
 15473  0033EE  0EDC               	movlw	220
 15474  0033F0                     u8337:
 15475  0033F0  2EE8               	decfsz	wreg,f,c
 15476  0033F2  D7FE               	bra	u8337
 15477  0033F4  2E01               	decfsz	??_do2& (0+255),f,c
 15478  0033F6  D7FC               	bra	u8337
 15479  0033F8  D000               	nop2	
 15480                           
 15481                           ;master/sound.c: 119:     }
 15482  0033FA  0E01               	movlw	1
 15483  0033FC  2602               	addwf	do2@i,f,c
 15484  0033FE  0E00               	movlw	0
 15485  003400  2203               	addwfc	do2@i+1,f,c
 15486  003402  2204               	addwfc	do2@i+2,f,c
 15487  003404  2205               	addwfc	do2@i+3,f,c
 15488  003406  BE05               	btfsc	do2@i+3,7,c
 15489  003408  D7E6               	goto	l1412
 15490  00340A  5005               	movf	do2@i+3,w,c
 15491  00340C  1004               	iorwf	do2@i+2,w,c
 15492  00340E  1003               	iorwf	do2@i+1,w,c
 15493  003410  E105               	bnz	u7170
 15494  003412  0E1E               	movlw	30
 15495  003414  5C02               	subwf	do2@i,w,c
 15496  003416  B0D8               	btfsc	status,0,c
 15497  003418  0012               	return	
 15498  00341A  D7DD               	goto	l1412
 15499  00341C                     u7170:
 15500  00341C  0012               	return		;funcret
 15501  00341E                     __end_of_do2:
 15502                           	opt callstack 0
 15503                           
 15504 ;; *************** function _si1 *****************
 15505 ;; Defined at:
 15506 ;;		line 96 in file "master/sound.c"
 15507 ;; Parameters:    Size  Location     Type
 15508 ;;		None
 15509 ;; Auto vars:     Size  Location     Type
 15510 ;;  i               4    0[COMRAM] long 
 15511 ;; Return value:  Size  Location     Type
 15512 ;;                  1    wreg      void 
 15513 ;; Registers used:
 15514 ;;		wreg, status,2, status,0
 15515 ;; Tracked objects:
 15516 ;;		On entry : 0/0
 15517 ;;		On exit  : 0/0
 15518 ;;		Unchanged: 0/0
 15519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15520 ;;      Params:         0       0       0       0       0       0       0
 15521 ;;      Locals:         4       0       0       0       0       0       0
 15522 ;;      Temps:          0       0       0       0       0       0       0
 15523 ;;      Totals:         4       0       0       0       0       0       0
 15524 ;;Total ram usage:        4 bytes
 15525 ;; Hardware stack levels used:    1
 15526 ;; This function calls:
 15527 ;;		Nothing
 15528 ;; This function is called by:
 15529 ;;		_animation_1
 15530 ;;		_animation_2
 15531 ;; This function uses a non-reentrant model
 15532 ;;
 15533                           
 15534                           	psect	text58
 15535  003242                     __ptext58:
 15536                           	opt callstack 0
 15537  003242                     _si1:
 15538                           	opt callstack 29
 15539                           
 15540                           ;master/sound.c: 98:     if (sound_flag == 0)
 15541                           
 15542                           ;incstack = 0
 15543  003242  0101               	movlb	1	; () banked
 15544  003244  518F               	movf	_sound_flag& (0+255),w,b
 15545  003246  B4D8               	btfsc	status,2,c
 15546  003248  0012               	return	
 15547                           
 15548                           ; BSR set to: 1
 15549                           ;master/sound.c: 100:     for (long i = 1; i < 30; i++)
 15550  00324A  0E01               	movlw	1
 15551  00324C  6E01               	movwf	si1@i,c
 15552  00324E  0E00               	movlw	0
 15553  003250  6E02               	movwf	si1@i+1,c
 15554  003252  0E00               	movlw	0
 15555  003254  6E03               	movwf	si1@i+2,c
 15556  003256  0E00               	movlw	0
 15557  003258  6E04               	movwf	si1@i+3,c
 15558  00325A                     l1406:
 15559                           
 15560                           ;master/sound.c: 101:     {;master/sound.c: 102:         LATBbits.LATB3 = 1;
 15561  00325A  868A               	bsf	3978,3,c	;volatile
 15562                           
 15563                           ;master/sound.c: 103:         _delay((unsigned long)((100)*(64000000/4000000.0)));
 15564  00325C  0EE4               	movlw	228
 15565  00325E                     u8347:
 15566  00325E  D000               	nop2	
 15567  003260  D000               	nop2	
 15568  003262  2EE8               	decfsz	wreg,f,c
 15569  003264  D7FC               	bra	u8347
 15570  003266  D000               	nop2	
 15571  003268  D000               	nop2	
 15572                           
 15573                           ;master/sound.c: 104:         LATBbits.LATB3 = 0;
 15574  00326A  968A               	bcf	3978,3,c	;volatile
 15575                           
 15576                           ;master/sound.c: 105:         _delay((unsigned long)((100)*(64000000/4000000.0)));
 15577  00326C  0EE4               	movlw	228
 15578  00326E                     u8357:
 15579  00326E  D000               	nop2	
 15580  003270  D000               	nop2	
 15581  003272  2EE8               	decfsz	wreg,f,c
 15582  003274  D7FC               	bra	u8357
 15583  003276  D000               	nop2	
 15584  003278  D000               	nop2	
 15585                           
 15586                           ;master/sound.c: 106:     }
 15587  00327A  0E01               	movlw	1
 15588  00327C  2601               	addwf	si1@i,f,c
 15589  00327E  0E00               	movlw	0
 15590  003280  2202               	addwfc	si1@i+1,f,c
 15591  003282  2203               	addwfc	si1@i+2,f,c
 15592  003284  2204               	addwfc	si1@i+3,f,c
 15593  003286  BE04               	btfsc	si1@i+3,7,c
 15594  003288  D7E8               	goto	l1406
 15595  00328A  5004               	movf	si1@i+3,w,c
 15596  00328C  1003               	iorwf	si1@i+2,w,c
 15597  00328E  1002               	iorwf	si1@i+1,w,c
 15598  003290  E105               	bnz	u7150
 15599  003292  0E1E               	movlw	30
 15600  003294  5C01               	subwf	si1@i,w,c
 15601  003296  B0D8               	btfsc	status,0,c
 15602  003298  0012               	return	
 15603  00329A  D7DF               	goto	l1406
 15604  00329C                     u7150:
 15605  00329C  0012               	return		;funcret
 15606  00329E                     __end_of_si1:
 15607                           	opt callstack 0
 15608                           
 15609 ;; *************** function _ra1 *****************
 15610 ;; Defined at:
 15611 ;;		line 83 in file "master/sound.c"
 15612 ;; Parameters:    Size  Location     Type
 15613 ;;		None
 15614 ;; Auto vars:     Size  Location     Type
 15615 ;;  i               4    1[COMRAM] long 
 15616 ;; Return value:  Size  Location     Type
 15617 ;;                  1    wreg      void 
 15618 ;; Registers used:
 15619 ;;		wreg, status,2, status,0
 15620 ;; Tracked objects:
 15621 ;;		On entry : 0/0
 15622 ;;		On exit  : 0/0
 15623 ;;		Unchanged: 0/0
 15624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15625 ;;      Params:         0       0       0       0       0       0       0
 15626 ;;      Locals:         4       0       0       0       0       0       0
 15627 ;;      Temps:          1       0       0       0       0       0       0
 15628 ;;      Totals:         5       0       0       0       0       0       0
 15629 ;;Total ram usage:        5 bytes
 15630 ;; Hardware stack levels used:    1
 15631 ;; This function calls:
 15632 ;;		Nothing
 15633 ;; This function is called by:
 15634 ;;		_animation_1
 15635 ;;		_animation_2
 15636 ;; This function uses a non-reentrant model
 15637 ;;
 15638                           
 15639                           	psect	text59
 15640  00335E                     __ptext59:
 15641                           	opt callstack 0
 15642  00335E                     _ra1:
 15643                           	opt callstack 29
 15644                           
 15645                           ;master/sound.c: 85:     if (sound_flag == 0)
 15646                           
 15647                           ;incstack = 0
 15648  00335E  0101               	movlb	1	; () banked
 15649  003360  518F               	movf	_sound_flag& (0+255),w,b
 15650  003362  B4D8               	btfsc	status,2,c
 15651  003364  0012               	return	
 15652                           
 15653                           ; BSR set to: 1
 15654                           ;master/sound.c: 87:     for (long i = 1; i < 30; i++)
 15655  003366  0E01               	movlw	1
 15656  003368  6E02               	movwf	ra1@i,c
 15657  00336A  0E00               	movlw	0
 15658  00336C  6E03               	movwf	ra1@i+1,c
 15659  00336E  0E00               	movlw	0
 15660  003370  6E04               	movwf	ra1@i+2,c
 15661  003372  0E00               	movlw	0
 15662  003374  6E05               	movwf	ra1@i+3,c
 15663  003376                     l1400:
 15664                           
 15665                           ;master/sound.c: 88:     {;master/sound.c: 89:         LATBbits.LATB3 = 1;
 15666  003376  868A               	bsf	3978,3,c	;volatile
 15667                           
 15668                           ;master/sound.c: 90:         _delay((unsigned long)((200)*(64000000/4000000.0)));
 15669  003378  0E05               	movlw	5
 15670  00337A  6E01               	movwf	??_ra1& (0+255),c
 15671  00337C  0E26               	movlw	38
 15672  00337E                     u8367:
 15673  00337E  2EE8               	decfsz	wreg,f,c
 15674  003380  D7FE               	bra	u8367
 15675  003382  2E01               	decfsz	??_ra1& (0+255),f,c
 15676  003384  D7FC               	bra	u8367
 15677  003386  D000               	nop2	
 15678                           
 15679                           ;master/sound.c: 91:         LATBbits.LATB3 = 0;
 15680  003388  968A               	bcf	3978,3,c	;volatile
 15681                           
 15682                           ;master/sound.c: 92:         _delay((unsigned long)((200)*(64000000/4000000.0)));
 15683  00338A  0E05               	movlw	5
 15684  00338C  6E01               	movwf	??_ra1& (0+255),c
 15685  00338E  0E26               	movlw	38
 15686  003390                     u8377:
 15687  003390  2EE8               	decfsz	wreg,f,c
 15688  003392  D7FE               	bra	u8377
 15689  003394  2E01               	decfsz	??_ra1& (0+255),f,c
 15690  003396  D7FC               	bra	u8377
 15691  003398  D000               	nop2	
 15692                           
 15693                           ;master/sound.c: 93:     }
 15694  00339A  0E01               	movlw	1
 15695  00339C  2602               	addwf	ra1@i,f,c
 15696  00339E  0E00               	movlw	0
 15697  0033A0  2203               	addwfc	ra1@i+1,f,c
 15698  0033A2  2204               	addwfc	ra1@i+2,f,c
 15699  0033A4  2205               	addwfc	ra1@i+3,f,c
 15700  0033A6  BE05               	btfsc	ra1@i+3,7,c
 15701  0033A8  D7E6               	goto	l1400
 15702  0033AA  5005               	movf	ra1@i+3,w,c
 15703  0033AC  1004               	iorwf	ra1@i+2,w,c
 15704  0033AE  1003               	iorwf	ra1@i+1,w,c
 15705  0033B0  E105               	bnz	u7130
 15706  0033B2  0E1E               	movlw	30
 15707  0033B4  5C02               	subwf	ra1@i,w,c
 15708  0033B6  B0D8               	btfsc	status,0,c
 15709  0033B8  0012               	return	
 15710  0033BA  D7DD               	goto	l1400
 15711  0033BC                     u7130:
 15712  0033BC  0012               	return		;funcret
 15713  0033BE                     __end_of_ra1:
 15714                           	opt callstack 0
 15715                           
 15716 ;; *************** function _mi1 *****************
 15717 ;; Defined at:
 15718 ;;		line 44 in file "master/sound.c"
 15719 ;; Parameters:    Size  Location     Type
 15720 ;;		None
 15721 ;; Auto vars:     Size  Location     Type
 15722 ;;  i               4    0[COMRAM] long 
 15723 ;; Return value:  Size  Location     Type
 15724 ;;                  1    wreg      void 
 15725 ;; Registers used:
 15726 ;;		wreg, status,2, status,0
 15727 ;; Tracked objects:
 15728 ;;		On entry : 0/0
 15729 ;;		On exit  : 0/0
 15730 ;;		Unchanged: 0/0
 15731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15732 ;;      Params:         0       0       0       0       0       0       0
 15733 ;;      Locals:         4       0       0       0       0       0       0
 15734 ;;      Temps:          0       0       0       0       0       0       0
 15735 ;;      Totals:         4       0       0       0       0       0       0
 15736 ;;Total ram usage:        4 bytes
 15737 ;; Hardware stack levels used:    1
 15738 ;; This function calls:
 15739 ;;		Nothing
 15740 ;; This function is called by:
 15741 ;;		_animation_1
 15742 ;;		_animation_2
 15743 ;; This function uses a non-reentrant model
 15744 ;;
 15745                           
 15746                           	psect	text60
 15747  0030EA                     __ptext60:
 15748                           	opt callstack 0
 15749  0030EA                     _mi1:
 15750                           	opt callstack 29
 15751                           
 15752                           ;master/sound.c: 46:     if (sound_flag == 0)
 15753                           
 15754                           ;incstack = 0
 15755  0030EA  0101               	movlb	1	; () banked
 15756  0030EC  518F               	movf	_sound_flag& (0+255),w,b
 15757  0030EE  B4D8               	btfsc	status,2,c
 15758  0030F0  0012               	return	
 15759                           
 15760                           ; BSR set to: 1
 15761                           ;master/sound.c: 48:     for (long i = 1; i < 30; i++)
 15762  0030F2  0E01               	movlw	1
 15763  0030F4  6E01               	movwf	mi1@i,c
 15764  0030F6  0E00               	movlw	0
 15765  0030F8  6E02               	movwf	mi1@i+1,c
 15766  0030FA  0E00               	movlw	0
 15767  0030FC  6E03               	movwf	mi1@i+2,c
 15768  0030FE  0E00               	movlw	0
 15769  003100  6E04               	movwf	mi1@i+3,c
 15770  003102                     l1383:
 15771                           
 15772                           ;master/sound.c: 49:     {;master/sound.c: 50:         LATBbits.LATB3 = 1;
 15773  003102  868A               	bsf	3978,3,c	;volatile
 15774                           
 15775                           ;master/sound.c: 51:         _delay((unsigned long)((22)*(64000000/4000000.0)));
 15776  003104  0E75               	movlw	117
 15777  003106                     u8387:
 15778  003106  2EE8               	decfsz	wreg,f,c
 15779  003108  D7FE               	bra	u8387
 15780  00310A  F000               	nop	
 15781                           
 15782                           ;master/sound.c: 52:         LATBbits.LATB3 = 0;
 15783  00310C  968A               	bcf	3978,3,c	;volatile
 15784                           
 15785                           ;master/sound.c: 53:         _delay((unsigned long)((22)*(64000000/4000000.0)));
 15786  00310E  0E75               	movlw	117
 15787  003110                     u8397:
 15788  003110  2EE8               	decfsz	wreg,f,c
 15789  003112  D7FE               	bra	u8397
 15790  003114  F000               	nop	
 15791                           
 15792                           ;master/sound.c: 54:     }
 15793  003116  0E01               	movlw	1
 15794  003118  2601               	addwf	mi1@i,f,c
 15795  00311A  0E00               	movlw	0
 15796  00311C  2202               	addwfc	mi1@i+1,f,c
 15797  00311E  2203               	addwfc	mi1@i+2,f,c
 15798  003120  2204               	addwfc	mi1@i+3,f,c
 15799  003122  BE04               	btfsc	mi1@i+3,7,c
 15800  003124  D7EE               	goto	l1383
 15801  003126  5004               	movf	mi1@i+3,w,c
 15802  003128  1003               	iorwf	mi1@i+2,w,c
 15803  00312A  1002               	iorwf	mi1@i+1,w,c
 15804  00312C  E105               	bnz	u7090
 15805  00312E  0E1E               	movlw	30
 15806  003130  5C01               	subwf	mi1@i,w,c
 15807  003132  B0D8               	btfsc	status,0,c
 15808  003134  0012               	return	
 15809  003136  D7E5               	goto	l1383
 15810  003138                     u7090:
 15811  003138  0012               	return		;funcret
 15812  00313A                     __end_of_mi1:
 15813                           	opt callstack 0
 15814                           
 15815 ;; *************** function _re1 *****************
 15816 ;; Defined at:
 15817 ;;		line 30 in file "master/sound.c"
 15818 ;; Parameters:    Size  Location     Type
 15819 ;;		None
 15820 ;; Auto vars:     Size  Location     Type
 15821 ;;  i               4    0[COMRAM] long 
 15822 ;; Return value:  Size  Location     Type
 15823 ;;                  1    wreg      void 
 15824 ;; Registers used:
 15825 ;;		wreg, status,2, status,0
 15826 ;; Tracked objects:
 15827 ;;		On entry : 0/0
 15828 ;;		On exit  : 0/0
 15829 ;;		Unchanged: 0/0
 15830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15831 ;;      Params:         0       0       0       0       0       0       0
 15832 ;;      Locals:         4       0       0       0       0       0       0
 15833 ;;      Temps:          0       0       0       0       0       0       0
 15834 ;;      Totals:         4       0       0       0       0       0       0
 15835 ;;Total ram usage:        4 bytes
 15836 ;; Hardware stack levels used:    1
 15837 ;; This function calls:
 15838 ;;		Nothing
 15839 ;; This function is called by:
 15840 ;;		_main
 15841 ;;		_animation_3
 15842 ;;		_animation_1
 15843 ;;		_animation_2
 15844 ;; This function uses a non-reentrant model
 15845 ;;
 15846                           
 15847                           	psect	text61
 15848  0032FE                     __ptext61:
 15849                           	opt callstack 0
 15850  0032FE                     _re1:
 15851                           	opt callstack 30
 15852                           
 15853                           ;master/sound.c: 32:     if (sound_flag == 0)
 15854                           
 15855                           ;incstack = 0
 15856  0032FE  0101               	movlb	1	; () banked
 15857  003300  518F               	movf	_sound_flag& (0+255),w,b
 15858  003302  B4D8               	btfsc	status,2,c
 15859  003304  0012               	return	
 15860                           
 15861                           ; BSR set to: 1
 15862                           ;master/sound.c: 35:     for (long i = 1; i < 30; i++)
 15863  003306  0E01               	movlw	1
 15864  003308  6E01               	movwf	re1@i,c
 15865  00330A  0E00               	movlw	0
 15866  00330C  6E02               	movwf	re1@i+1,c
 15867  00330E  0E00               	movlw	0
 15868  003310  6E03               	movwf	re1@i+2,c
 15869  003312  0E00               	movlw	0
 15870  003314  6E04               	movwf	re1@i+3,c
 15871  003316                     l1377:
 15872                           
 15873                           ;master/sound.c: 36:     {;master/sound.c: 37:         LATBbits.LATB3 = 1;
 15874  003316  868A               	bsf	3978,3,c	;volatile
 15875                           
 15876                           ;master/sound.c: 38:         _delay((unsigned long)((80)*(64000000/4000000.0)));
 15877  003318  0EB6               	movlw	182
 15878  00331A                     u8407:
 15879  00331A  D000               	nop2	
 15880  00331C  D000               	nop2	
 15881  00331E  2EE8               	decfsz	wreg,f,c
 15882  003320  D7FC               	bra	u8407
 15883  003322  D000               	nop2	
 15884  003324  D000               	nop2	
 15885  003326  D000               	nop2	
 15886                           
 15887                           ;master/sound.c: 39:         LATBbits.LATB3 = 0;
 15888  003328  968A               	bcf	3978,3,c	;volatile
 15889                           
 15890                           ;master/sound.c: 40:         _delay((unsigned long)((80)*(64000000/4000000.0)));
 15891  00332A  0EB6               	movlw	182
 15892  00332C                     u8417:
 15893  00332C  D000               	nop2	
 15894  00332E  D000               	nop2	
 15895  003330  2EE8               	decfsz	wreg,f,c
 15896  003332  D7FC               	bra	u8417
 15897  003334  D000               	nop2	
 15898  003336  D000               	nop2	
 15899  003338  D000               	nop2	
 15900                           
 15901                           ;master/sound.c: 41:     }
 15902  00333A  0E01               	movlw	1
 15903  00333C  2601               	addwf	re1@i,f,c
 15904  00333E  0E00               	movlw	0
 15905  003340  2202               	addwfc	re1@i+1,f,c
 15906  003342  2203               	addwfc	re1@i+2,f,c
 15907  003344  2204               	addwfc	re1@i+3,f,c
 15908  003346  BE04               	btfsc	re1@i+3,7,c
 15909  003348  D7E6               	goto	l1377
 15910  00334A  5004               	movf	re1@i+3,w,c
 15911  00334C  1003               	iorwf	re1@i+2,w,c
 15912  00334E  1002               	iorwf	re1@i+1,w,c
 15913  003350  E105               	bnz	u6880
 15914  003352  0E1E               	movlw	30
 15915  003354  5C01               	subwf	re1@i,w,c
 15916  003356  B0D8               	btfsc	status,0,c
 15917  003358  0012               	return	
 15918  00335A  D7DD               	goto	l1377
 15919  00335C                     u6880:
 15920  00335C  0012               	return		;funcret
 15921  00335E                     __end_of_re1:
 15922                           	opt callstack 0
 15923                           
 15924 ;; *************** function _do1 *****************
 15925 ;; Defined at:
 15926 ;;		line 4 in file "master/sound.c"
 15927 ;; Parameters:    Size  Location     Type
 15928 ;;		None
 15929 ;; Auto vars:     Size  Location     Type
 15930 ;;  i               4    0[COMRAM] long 
 15931 ;; Return value:  Size  Location     Type
 15932 ;;                  1    wreg      void 
 15933 ;; Registers used:
 15934 ;;		wreg, status,2, status,0
 15935 ;; Tracked objects:
 15936 ;;		On entry : 0/0
 15937 ;;		On exit  : 0/0
 15938 ;;		Unchanged: 0/0
 15939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15940 ;;      Params:         0       0       0       0       0       0       0
 15941 ;;      Locals:         4       0       0       0       0       0       0
 15942 ;;      Temps:          0       0       0       0       0       0       0
 15943 ;;      Totals:         4       0       0       0       0       0       0
 15944 ;;Total ram usage:        4 bytes
 15945 ;; Hardware stack levels used:    1
 15946 ;; This function calls:
 15947 ;;		Nothing
 15948 ;; This function is called by:
 15949 ;;		_animation_3
 15950 ;;		_animation_1
 15951 ;;		_animation_2
 15952 ;; This function uses a non-reentrant model
 15953 ;;
 15954                           
 15955                           	psect	text62
 15956  003004                     __ptext62:
 15957                           	opt callstack 0
 15958  003004                     _do1:
 15959                           	opt callstack 29
 15960                           
 15961                           ;master/sound.c: 6:     if (sound_flag == 0)
 15962                           
 15963                           ;incstack = 0
 15964  003004  0101               	movlb	1	; () banked
 15965  003006  518F               	movf	_sound_flag& (0+255),w,b
 15966  003008  B4D8               	btfsc	status,2,c
 15967  00300A  0012               	return	
 15968                           
 15969                           ; BSR set to: 1
 15970                           ;master/sound.c: 9:     for (long i = 1; i < 15; i++)
 15971  00300C  0E01               	movlw	1
 15972  00300E  6E01               	movwf	do1@i,c
 15973  003010  0E00               	movlw	0
 15974  003012  6E02               	movwf	do1@i+1,c
 15975  003014  0E00               	movlw	0
 15976  003016  6E03               	movwf	do1@i+2,c
 15977  003018  0E00               	movlw	0
 15978  00301A  6E04               	movwf	do1@i+3,c
 15979  00301C                     l1371:
 15980                           
 15981                           ;master/sound.c: 10:     {;master/sound.c: 11:         LATBbits.LATB3 = 1;
 15982  00301C  868A               	bsf	3978,3,c	;volatile
 15983                           
 15984                           ;master/sound.c: 12:         _delay((unsigned long)((21)*(64000000/4000000.0)));
 15985  00301E  0E70               	movlw	112
 15986  003020                     u8427:
 15987  003020  2EE8               	decfsz	wreg,f,c
 15988  003022  D7FE               	bra	u8427
 15989                           
 15990                           ;master/sound.c: 13:         LATBbits.LATB3 = 0;
 15991  003024  968A               	bcf	3978,3,c	;volatile
 15992                           
 15993                           ;master/sound.c: 14:         _delay((unsigned long)((21)*(64000000/4000000.0)));
 15994  003026  0E70               	movlw	112
 15995  003028                     u8437:
 15996  003028  2EE8               	decfsz	wreg,f,c
 15997  00302A  D7FE               	bra	u8437
 15998                           
 15999                           ;master/sound.c: 15:     }
 16000  00302C  0E01               	movlw	1
 16001  00302E  2601               	addwf	do1@i,f,c
 16002  003030  0E00               	movlw	0
 16003  003032  2202               	addwfc	do1@i+1,f,c
 16004  003034  2203               	addwfc	do1@i+2,f,c
 16005  003036  2204               	addwfc	do1@i+3,f,c
 16006  003038  BE04               	btfsc	do1@i+3,7,c
 16007  00303A  D7F0               	goto	l1371
 16008  00303C  5004               	movf	do1@i+3,w,c
 16009  00303E  1003               	iorwf	do1@i+2,w,c
 16010  003040  1002               	iorwf	do1@i+1,w,c
 16011  003042  E105               	bnz	u7070
 16012  003044  0E0F               	movlw	15
 16013  003046  5C01               	subwf	do1@i,w,c
 16014  003048  B0D8               	btfsc	status,0,c
 16015  00304A  0012               	return	
 16016  00304C  D7E7               	goto	l1371
 16017  00304E                     u7070:
 16018  00304E  0012               	return		;funcret
 16019  003050                     __end_of_do1:
 16020                           	opt callstack 0
 16021                           
 16022 ;; *************** function _so1 *****************
 16023 ;; Defined at:
 16024 ;;		line 70 in file "master/sound.c"
 16025 ;; Parameters:    Size  Location     Type
 16026 ;;		None
 16027 ;; Auto vars:     Size  Location     Type
 16028 ;;  i               4    1[COMRAM] long 
 16029 ;; Return value:  Size  Location     Type
 16030 ;;                  1    wreg      void 
 16031 ;; Registers used:
 16032 ;;		wreg, status,2, status,0
 16033 ;; Tracked objects:
 16034 ;;		On entry : 0/0
 16035 ;;		On exit  : 0/0
 16036 ;;		Unchanged: 0/0
 16037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16038 ;;      Params:         0       0       0       0       0       0       0
 16039 ;;      Locals:         4       0       0       0       0       0       0
 16040 ;;      Temps:          1       0       0       0       0       0       0
 16041 ;;      Totals:         5       0       0       0       0       0       0
 16042 ;;Total ram usage:        5 bytes
 16043 ;; Hardware stack levels used:    1
 16044 ;; This function calls:
 16045 ;;		Nothing
 16046 ;; This function is called by:
 16047 ;;		_animation_1
 16048 ;;		_animation_2
 16049 ;; This function uses a non-reentrant model
 16050 ;;
 16051                           
 16052                           	psect	text63
 16053  00329E                     __ptext63:
 16054                           	opt callstack 0
 16055  00329E                     _so1:
 16056                           	opt callstack 29
 16057                           
 16058                           ;master/sound.c: 72:     if (sound_flag == 0)
 16059                           
 16060                           ;incstack = 0
 16061  00329E  0101               	movlb	1	; () banked
 16062  0032A0  518F               	movf	_sound_flag& (0+255),w,b
 16063  0032A2  B4D8               	btfsc	status,2,c
 16064  0032A4  0012               	return	
 16065                           
 16066                           ; BSR set to: 1
 16067                           ;master/sound.c: 74:     for (long i = 1; i < 30; i++)
 16068  0032A6  0E01               	movlw	1
 16069  0032A8  6E02               	movwf	so1@i,c
 16070  0032AA  0E00               	movlw	0
 16071  0032AC  6E03               	movwf	so1@i+1,c
 16072  0032AE  0E00               	movlw	0
 16073  0032B0  6E04               	movwf	so1@i+2,c
 16074  0032B2  0E00               	movlw	0
 16075  0032B4  6E05               	movwf	so1@i+3,c
 16076  0032B6                     l1394:
 16077                           
 16078                           ;master/sound.c: 75:     {;master/sound.c: 76:         LATBbits.LATB3 = 1;
 16079  0032B6  868A               	bsf	3978,3,c	;volatile
 16080                           
 16081                           ;master/sound.c: 77:         _delay((unsigned long)((300)*(64000000/4000000.0)));
 16082  0032B8  0E07               	movlw	7
 16083  0032BA  6E01               	movwf	??_so1& (0+255),c
 16084  0032BC  0E3A               	movlw	58
 16085  0032BE                     u8447:
 16086  0032BE  2EE8               	decfsz	wreg,f,c
 16087  0032C0  D7FE               	bra	u8447
 16088  0032C2  2E01               	decfsz	??_so1& (0+255),f,c
 16089  0032C4  D7FC               	bra	u8447
 16090  0032C6  D000               	nop2	
 16091                           
 16092                           ;master/sound.c: 78:         LATBbits.LATB3 = 0;
 16093  0032C8  968A               	bcf	3978,3,c	;volatile
 16094                           
 16095                           ;master/sound.c: 79:         _delay((unsigned long)((300)*(64000000/4000000.0)));
 16096  0032CA  0E07               	movlw	7
 16097  0032CC  6E01               	movwf	??_so1& (0+255),c
 16098  0032CE  0E3A               	movlw	58
 16099  0032D0                     u8457:
 16100  0032D0  2EE8               	decfsz	wreg,f,c
 16101  0032D2  D7FE               	bra	u8457
 16102  0032D4  2E01               	decfsz	??_so1& (0+255),f,c
 16103  0032D6  D7FC               	bra	u8457
 16104  0032D8  D000               	nop2	
 16105                           
 16106                           ;master/sound.c: 80:     }
 16107  0032DA  0E01               	movlw	1
 16108  0032DC  2602               	addwf	so1@i,f,c
 16109  0032DE  0E00               	movlw	0
 16110  0032E0  2203               	addwfc	so1@i+1,f,c
 16111  0032E2  2204               	addwfc	so1@i+2,f,c
 16112  0032E4  2205               	addwfc	so1@i+3,f,c
 16113  0032E6  BE05               	btfsc	so1@i+3,7,c
 16114  0032E8  D7E6               	goto	l1394
 16115  0032EA  5005               	movf	so1@i+3,w,c
 16116  0032EC  1004               	iorwf	so1@i+2,w,c
 16117  0032EE  1003               	iorwf	so1@i+1,w,c
 16118  0032F0  E105               	bnz	u7110
 16119  0032F2  0E1E               	movlw	30
 16120  0032F4  5C02               	subwf	so1@i,w,c
 16121  0032F6  B0D8               	btfsc	status,0,c
 16122  0032F8  0012               	return	
 16123  0032FA  D7DD               	goto	l1394
 16124  0032FC                     u7110:
 16125  0032FC  0012               	return		;funcret
 16126  0032FE                     __end_of_so1:
 16127                           	opt callstack 0
 16128                           
 16129 ;; *************** function _convert_ROTtoLED *****************
 16130 ;; Defined at:
 16131 ;;		line 118 in file "master/animation.c"
 16132 ;; Parameters:    Size  Location     Type
 16133 ;;		None
 16134 ;; Auto vars:     Size  Location     Type
 16135 ;;  j               2   12[COMRAM] unsigned int 
 16136 ;;  i               2   10[COMRAM] unsigned int 
 16137 ;; Return value:  Size  Location     Type
 16138 ;;                  1    wreg      void 
 16139 ;; Registers used:
 16140 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16141 ;; Tracked objects:
 16142 ;;		On entry : 0/0
 16143 ;;		On exit  : 0/0
 16144 ;;		Unchanged: 0/0
 16145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16146 ;;      Params:         0       0       0       0       0       0       0
 16147 ;;      Locals:         4       0       0       0       0       0       0
 16148 ;;      Temps:          4       0       0       0       0       0       0
 16149 ;;      Totals:         8       0       0       0       0       0       0
 16150 ;;Total ram usage:        8 bytes
 16151 ;; Hardware stack levels used:    1
 16152 ;; Hardware stack levels required when called:    1
 16153 ;; This function calls:
 16154 ;;		___wmul
 16155 ;; This function is called by:
 16156 ;;		_main
 16157 ;;		_Special_input
 16158 ;;		_animation_1
 16159 ;;		_animation_4
 16160 ;;		_command_turn_ARRAY_3_end
 16161 ;;		_command_turn_ARRAY_2_2
 16162 ;;		_command_turn_ARRAY_2_3
 16163 ;; This function uses a non-reentrant model
 16164 ;;
 16165                           
 16166                           	psect	text64
 16167  003800                     __ptext64:
 16168                           	opt callstack 0
 16169  003800                     _convert_ROTtoLED:
 16170                           	opt callstack 29
 16171                           
 16172                           ;master/animation.c: 119:     for (unsigned int i = 0; i < 6; i++) {
 16173                           
 16174                           ;incstack = 0
 16175  003800  0E00               	movlw	0
 16176  003802  6E0C               	movwf	convert_ROTtoLED@i+1,c
 16177  003804  0E00               	movlw	0
 16178  003806  6E0B               	movwf	convert_ROTtoLED@i,c
 16179  003808                     l7234:
 16180                           
 16181                           ;master/animation.c: 120:         for (unsigned int j = 0; j < 9; j++) {
 16182  003808  0E00               	movlw	0
 16183  00380A  6E0E               	movwf	convert_ROTtoLED@j+1,c
 16184  00380C  0E00               	movlw	0
 16185  00380E  6E0D               	movwf	convert_ROTtoLED@j,c
 16186  003810                     l7240:
 16187                           
 16188                           ;master/animation.c: 121:             LED_ARRAY[i][j] = (unsigned char) LED_Light[i][j];
 16189  003810  C00B  F001         	movff	convert_ROTtoLED@i,___wmul@multiplier
 16190  003814  C00C  F002         	movff	convert_ROTtoLED@i+1,___wmul@multiplier+1
 16191  003818  0E00               	movlw	0
 16192  00381A  6E04               	movwf	___wmul@multiplicand+1,c
 16193  00381C  0E09               	movlw	9
 16194  00381E  6E03               	movwf	___wmul@multiplicand,c
 16195  003820  ECFB  F014         	call	___wmul	;wreg free
 16196  003824  0E3D               	movlw	low _LED_Light
 16197  003826  6E07               	movwf	??_convert_ROTtoLED& (0+255),c
 16198  003828  0E01               	movlw	high _LED_Light
 16199  00382A  6E08               	movwf	(??_convert_ROTtoLED+1)& (0+255),c
 16200  00382C  5001               	movf	?___wmul,w,c
 16201  00382E  2607               	addwf	??_convert_ROTtoLED,f,c
 16202  003830  5002               	movf	?___wmul+1,w,c
 16203  003832  2208               	addwfc	??_convert_ROTtoLED+1,f,c
 16204  003834  500D               	movf	convert_ROTtoLED@j,w,c
 16205  003836  2407               	addwf	??_convert_ROTtoLED,w,c
 16206  003838  6ED9               	movwf	fsr2l,c
 16207  00383A  500E               	movf	convert_ROTtoLED@j+1,w,c
 16208  00383C  2008               	addwfc	??_convert_ROTtoLED+1,w,c
 16209  00383E  6EDA               	movwf	fsr2h,c
 16210  003840  C00B  F001         	movff	convert_ROTtoLED@i,___wmul@multiplier
 16211  003844  C00C  F002         	movff	convert_ROTtoLED@i+1,___wmul@multiplier+1
 16212  003848  0E00               	movlw	0
 16213  00384A  6E04               	movwf	___wmul@multiplicand+1,c
 16214  00384C  0E09               	movlw	9
 16215  00384E  6E03               	movwf	___wmul@multiplicand,c
 16216  003850  ECFB  F014         	call	___wmul	;wreg free
 16217  003854  0E07               	movlw	low _LED_ARRAY
 16218  003856  6E09               	movwf	(??_convert_ROTtoLED+2)& (0+255),c
 16219  003858  0E01               	movlw	high _LED_ARRAY
 16220  00385A  6E0A               	movwf	(??_convert_ROTtoLED+3)& (0+255),c
 16221  00385C  5001               	movf	?___wmul,w,c
 16222  00385E  2609               	addwf	??_convert_ROTtoLED+2,f,c
 16223  003860  5002               	movf	?___wmul+1,w,c
 16224  003862  220A               	addwfc	??_convert_ROTtoLED+3,f,c
 16225  003864  500D               	movf	convert_ROTtoLED@j,w,c
 16226  003866  2409               	addwf	??_convert_ROTtoLED+2,w,c
 16227  003868  6EE1               	movwf	fsr1l,c
 16228  00386A  500E               	movf	convert_ROTtoLED@j+1,w,c
 16229  00386C  200A               	addwfc	??_convert_ROTtoLED+3,w,c
 16230  00386E  6EE2               	movwf	fsr1h,c
 16231  003870  CFDF FFE7          	movff	indf2,indf1
 16232                           
 16233                           ;master/animation.c: 122:         }
 16234  003874  4A0D               	infsnz	convert_ROTtoLED@j,f,c
 16235  003876  2A0E               	incf	convert_ROTtoLED@j+1,f,c
 16236  003878  500E               	movf	convert_ROTtoLED@j+1,w,c
 16237  00387A  E104               	bnz	u4530
 16238  00387C  0E09               	movlw	9
 16239  00387E  5C0D               	subwf	convert_ROTtoLED@j,w,c
 16240  003880  A0D8               	btfss	status,0,c
 16241  003882  D7C6               	goto	l7240
 16242  003884                     u4530:
 16243                           
 16244                           ;master/animation.c: 123:     }
 16245  003884  4A0B               	infsnz	convert_ROTtoLED@i,f,c
 16246  003886  2A0C               	incf	convert_ROTtoLED@i+1,f,c
 16247  003888  500C               	movf	convert_ROTtoLED@i+1,w,c
 16248  00388A  E105               	bnz	u4540
 16249  00388C  0E06               	movlw	6
 16250  00388E  5C0B               	subwf	convert_ROTtoLED@i,w,c
 16251  003890  B0D8               	btfsc	status,0,c
 16252  003892  0012               	return	
 16253  003894  D7B9               	goto	l7234
 16254  003896                     u4540:
 16255  003896  0012               	return		;funcret
 16256  003898                     __end_of_convert_ROTtoLED:
 16257                           	opt callstack 0
 16258                           
 16259 ;; *************** function _SPI_special *****************
 16260 ;; Defined at:
 16261 ;;		line 5 in file "master/CES_SPI_support.c"
 16262 ;; Parameters:    Size  Location     Type
 16263 ;;  CS              1    wreg     const unsigned char 
 16264 ;; Auto vars:     Size  Location     Type
 16265 ;;  CS              1   26[COMRAM] const unsigned char 
 16266 ;; Return value:  Size  Location     Type
 16267 ;;                  1    wreg      unsigned char 
 16268 ;; Registers used:
 16269 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16270 ;; Tracked objects:
 16271 ;;		On entry : 0/0
 16272 ;;		On exit  : 0/0
 16273 ;;		Unchanged: 0/0
 16274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16275 ;;      Params:         0       0       0       0       0       0       0
 16276 ;;      Locals:         1       0       0       0       0       0       0
 16277 ;;      Temps:          0       0       0       0       0       0       0
 16278 ;;      Totals:         1       0       0       0       0       0       0
 16279 ;;Total ram usage:        1 bytes
 16280 ;; Hardware stack levels used:    1
 16281 ;; Hardware stack levels required when called:    3
 16282 ;; This function calls:
 16283 ;;		_SPI_D2S
 16284 ;;		_SPI_RET_2
 16285 ;;		_SPI_readM_2
 16286 ;;		_fa1
 16287 ;; This function is called by:
 16288 ;;		_Special_input
 16289 ;;		_animation_1
 16290 ;;		_animation_2
 16291 ;;		_animation_3
 16292 ;;		_command_turn_ARRAY_2_2
 16293 ;;		_command_turn_ARRAY_2_3
 16294 ;; This function uses a non-reentrant model
 16295 ;;
 16296                           
 16297                           	psect	text65
 16298  002F2C                     __ptext65:
 16299                           	opt callstack 0
 16300  002F2C                     _SPI_special:
 16301                           	opt callstack 26
 16302                           
 16303                           ;incstack = 0
 16304                           ;SPI_special@CS stored from wreg
 16305  002F2C  6E1B               	movwf	SPI_special@CS,c
 16306                           
 16307                           ;master/CES_SPI_support.c: 6:     if (SPI_D2S(CS, SPI_readM_2(CS)) == 100) {
 16308  002F2E  501B               	movf	SPI_special@CS,w,c
 16309  002F30  EC48  F01E         	call	_SPI_readM_2
 16310  002F34  6E12               	movwf	SPI_D2S@SPI_DATA,c
 16311  002F36  501B               	movf	SPI_special@CS,w,c
 16312  002F38  ECD6  F032         	call	_SPI_D2S
 16313  002F3C  0A64               	xorlw	100
 16314  002F3E  A4D8               	btfss	status,2,c
 16315  002F40  D016               	goto	l7224
 16316                           
 16317                           ;master/CES_SPI_support.c: 7:         fa1();
 16318  002F42  ECC8  F018         	call	_fa1	;wreg free
 16319                           
 16320                           ;master/CES_SPI_support.c: 8:         fa1();
 16321  002F46  ECC8  F018         	call	_fa1	;wreg free
 16322                           
 16323                           ;master/CES_SPI_support.c: 9:         fa1();
 16324  002F4A  ECC8  F018         	call	_fa1	;wreg free
 16325                           
 16326                           ;master/CES_SPI_support.c: 10:         fa1();
 16327  002F4E  ECC8  F018         	call	_fa1	;wreg free
 16328                           
 16329                           ;master/CES_SPI_support.c: 11:         fa1();
 16330  002F52  ECC8  F018         	call	_fa1	;wreg free
 16331                           
 16332                           ;master/CES_SPI_support.c: 12:         fa1();
 16333  002F56  ECC8  F018         	call	_fa1	;wreg free
 16334                           
 16335                           ;master/CES_SPI_support.c: 13:         fa1();
 16336  002F5A  ECC8  F018         	call	_fa1	;wreg free
 16337                           
 16338                           ;master/CES_SPI_support.c: 14:         fa1();
 16339  002F5E  ECC8  F018         	call	_fa1	;wreg free
 16340                           
 16341                           ;master/CES_SPI_support.c: 15:         fa1();
 16342  002F62  ECC8  F018         	call	_fa1	;wreg free
 16343                           
 16344                           ;master/CES_SPI_support.c: 16:         SPI_RET_2();
 16345  002F66  EC6D  F014         	call	_SPI_RET_2	;wreg free
 16346                           
 16347                           ;master/CES_SPI_support.c: 17:         return 1;
 16348  002F6A  0E01               	movlw	1
 16349  002F6C  0012               	return	
 16350  002F6E                     l7224:
 16351                           
 16352                           ;master/CES_SPI_support.c: 19:     return 0;
 16353  002F6E  0E00               	movlw	0
 16354  002F70  0012               	return		;funcret
 16355  002F72                     __end_of_SPI_special:
 16356                           	opt callstack 0
 16357                           
 16358 ;; *************** function _fa1 *****************
 16359 ;; Defined at:
 16360 ;;		line 57 in file "master/sound.c"
 16361 ;; Parameters:    Size  Location     Type
 16362 ;;		None
 16363 ;; Auto vars:     Size  Location     Type
 16364 ;;  i               4    1[COMRAM] long 
 16365 ;; Return value:  Size  Location     Type
 16366 ;;                  1    wreg      void 
 16367 ;; Registers used:
 16368 ;;		wreg, status,2, status,0
 16369 ;; Tracked objects:
 16370 ;;		On entry : 0/0
 16371 ;;		On exit  : 0/0
 16372 ;;		Unchanged: 0/0
 16373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16374 ;;      Params:         0       0       0       0       0       0       0
 16375 ;;      Locals:         4       0       0       0       0       0       0
 16376 ;;      Temps:          1       0       0       0       0       0       0
 16377 ;;      Totals:         5       0       0       0       0       0       0
 16378 ;;Total ram usage:        5 bytes
 16379 ;; Hardware stack levels used:    1
 16380 ;; This function calls:
 16381 ;;		Nothing
 16382 ;; This function is called by:
 16383 ;;		_SPI_special
 16384 ;;		_main
 16385 ;; This function uses a non-reentrant model
 16386 ;;
 16387                           
 16388                           	psect	text66
 16389  003190                     __ptext66:
 16390                           	opt callstack 0
 16391  003190                     _fa1:
 16392                           	opt callstack 30
 16393                           
 16394                           ;master/sound.c: 61:     for (long i = 1; i < 30; i++)
 16395                           
 16396                           ;incstack = 0
 16397  003190  0E01               	movlw	1
 16398  003192  6E02               	movwf	fa1@i,c
 16399  003194  0E00               	movlw	0
 16400  003196  6E03               	movwf	fa1@i+1,c
 16401  003198  0E00               	movlw	0
 16402  00319A  6E04               	movwf	fa1@i+2,c
 16403  00319C  0E00               	movlw	0
 16404  00319E  6E05               	movwf	fa1@i+3,c
 16405  0031A0                     l1387:
 16406                           
 16407                           ;master/sound.c: 62:     {;master/sound.c: 63:         LATBbits.LATB3 = 1;
 16408  0031A0  868A               	bsf	3978,3,c	;volatile
 16409                           
 16410                           ;master/sound.c: 64:         _delay((unsigned long)((500)*(64000000/4000000.0)));
 16411  0031A2  0E0B               	movlw	11
 16412  0031A4  6E01               	movwf	??_fa1& (0+255),c
 16413  0031A6  0E62               	movlw	98
 16414  0031A8                     u8467:
 16415  0031A8  2EE8               	decfsz	wreg,f,c
 16416  0031AA  D7FE               	bra	u8467
 16417  0031AC  2E01               	decfsz	??_fa1& (0+255),f,c
 16418  0031AE  D7FC               	bra	u8467
 16419  0031B0  D000               	nop2	
 16420                           
 16421                           ;master/sound.c: 65:         LATBbits.LATB3 = 0;
 16422  0031B2  968A               	bcf	3978,3,c	;volatile
 16423                           
 16424                           ;master/sound.c: 66:         _delay((unsigned long)((500)*(64000000/4000000.0)));
 16425  0031B4  0E0B               	movlw	11
 16426  0031B6  6E01               	movwf	??_fa1& (0+255),c
 16427  0031B8  0E62               	movlw	98
 16428  0031BA                     u8477:
 16429  0031BA  2EE8               	decfsz	wreg,f,c
 16430  0031BC  D7FE               	bra	u8477
 16431  0031BE  2E01               	decfsz	??_fa1& (0+255),f,c
 16432  0031C0  D7FC               	bra	u8477
 16433  0031C2  D000               	nop2	
 16434                           
 16435                           ;master/sound.c: 67:     }
 16436  0031C4  0E01               	movlw	1
 16437  0031C6  2602               	addwf	fa1@i,f,c
 16438  0031C8  0E00               	movlw	0
 16439  0031CA  2203               	addwfc	fa1@i+1,f,c
 16440  0031CC  2204               	addwfc	fa1@i+2,f,c
 16441  0031CE  2205               	addwfc	fa1@i+3,f,c
 16442  0031D0  BE05               	btfsc	fa1@i+3,7,c
 16443  0031D2  D7E6               	goto	l1387
 16444  0031D4  5005               	movf	fa1@i+3,w,c
 16445  0031D6  1004               	iorwf	fa1@i+2,w,c
 16446  0031D8  1003               	iorwf	fa1@i+1,w,c
 16447  0031DA  E105               	bnz	u4340
 16448  0031DC  0E1E               	movlw	30
 16449  0031DE  5C02               	subwf	fa1@i,w,c
 16450  0031E0  B0D8               	btfsc	status,0,c
 16451  0031E2  0012               	return	
 16452  0031E4  D7DD               	goto	l1387
 16453  0031E6                     u4340:
 16454  0031E6  0012               	return		;funcret
 16455  0031E8                     __end_of_fa1:
 16456                           	opt callstack 0
 16457                           
 16458 ;; *************** function _SPI_D2S *****************
 16459 ;; Defined at:
 16460 ;;		line 27 in file "master/CES_SPI_support.c"
 16461 ;; Parameters:    Size  Location     Type
 16462 ;;  SPI_CS          1    wreg     const unsigned char 
 16463 ;;  SPI_DATA        1   17[COMRAM] const unsigned char 
 16464 ;; Auto vars:     Size  Location     Type
 16465 ;;  SPI_CS          1   20[COMRAM] const unsigned char 
 16466 ;;  str_SPI         3   23[COMRAM] unsigned char [3]
 16467 ;;  i               2   21[COMRAM] int 
 16468 ;; Return value:  Size  Location     Type
 16469 ;;                  1    wreg      char 
 16470 ;; Registers used:
 16471 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16472 ;; Tracked objects:
 16473 ;;		On entry : 0/0
 16474 ;;		On exit  : 0/0
 16475 ;;		Unchanged: 0/0
 16476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16477 ;;      Params:         1       0       0       0       0       0       0
 16478 ;;      Locals:         6       0       0       0       0       0       0
 16479 ;;      Temps:          2       0       0       0       0       0       0
 16480 ;;      Totals:         9       0       0       0       0       0       0
 16481 ;;Total ram usage:        9 bytes
 16482 ;; Hardware stack levels used:    1
 16483 ;; Hardware stack levels required when called:    1
 16484 ;; This function calls:
 16485 ;;		_SPI0_D2S0
 16486 ;;		_SPI1_D2S0
 16487 ;;		_SPI2_D2S0
 16488 ;;		_SPI3_D2S0
 16489 ;;		_SPI4_D2S0
 16490 ;;		_SPI5_D2S0
 16491 ;;		___wmul
 16492 ;;		_str_cmp_const
 16493 ;; This function is called by:
 16494 ;;		_SPI_special
 16495 ;;		_main
 16496 ;; This function uses a non-reentrant model
 16497 ;;
 16498                           
 16499                           	psect	text67
 16500  0065AC                     __ptext67:
 16501                           	opt callstack 0
 16502  0065AC                     _SPI_D2S:
 16503                           	opt callstack 27
 16504                           
 16505                           ;incstack = 0
 16506                           ;SPI_D2S@SPI_CS stored from wreg
 16507  0065AC  6E15               	movwf	SPI_D2S@SPI_CS,c
 16508                           
 16509                           ;master/CES_SPI_support.c: 28:     char str_SPI[3] = {'\0', '\0', '\0'};
 16510  0065AE  0E00               	movlw	0
 16511  0065B0  6E18               	movwf	SPI_D2S@str_SPI,c
 16512  0065B2  0E00               	movlw	0
 16513  0065B4  6E19               	movwf	SPI_D2S@str_SPI+1,c
 16514  0065B6  0E00               	movlw	0
 16515  0065B8  6E1A               	movwf	SPI_D2S@str_SPI+2,c
 16516                           
 16517                           ;master/CES_SPI_support.c: 29:     int i;;master/CES_SPI_support.c: 30:     if (SPI_DATA
      +                           == 9) {
 16518  0065BA  0E09               	movlw	9
 16519  0065BC  1812               	xorwf	SPI_D2S@SPI_DATA,w,c
 16520  0065BE  A4D8               	btfss	status,2,c
 16521  0065C0  D004               	goto	l6882
 16522                           
 16523                           ;master/CES_SPI_support.c: 32:         str_SPI[0] = '@';
 16524  0065C2  0E40               	movlw	64
 16525  0065C4  6E18               	movwf	SPI_D2S@str_SPI,c
 16526                           
 16527                           ;master/CES_SPI_support.c: 33:         return 100;
 16528  0065C6  0E64               	movlw	100
 16529  0065C8  0012               	return	
 16530  0065CA                     l6882:
 16531  0065CA  5012               	movf	SPI_D2S@SPI_DATA,w,c
 16532  0065CC  A4D8               	btfss	status,2,c
 16533  0065CE  D004               	goto	l6892
 16534                           
 16535                           ;master/CES_SPI_support.c: 35:         str_SPI[0] = '@';
 16536  0065D0  0E40               	movlw	64
 16537  0065D2  6E18               	movwf	SPI_D2S@str_SPI,c
 16538                           
 16539                           ;master/CES_SPI_support.c: 36:         return 0;
 16540  0065D4  0E00               	movlw	0
 16541  0065D6  0012               	return	
 16542  0065D8                     l6892:
 16543                           
 16544                           ;master/CES_SPI_support.c: 38:         if (SPI_DATA <= 13 && SPI_DATA >= 10) {
 16545  0065D8  0E0E               	movlw	14
 16546  0065DA  6012               	cpfslt	SPI_D2S@SPI_DATA,c
 16547  0065DC  D0B7               	goto	l6974
 16548  0065DE  0E09               	movlw	9
 16549  0065E0  6412               	cpfsgt	SPI_D2S@SPI_DATA,c
 16550  0065E2  D0B4               	goto	l6974
 16551  0065E4  D098               	goto	l6972
 16552  0065E6                     l6898:
 16553                           
 16554                           ;master/CES_SPI_support.c: 43:                             str_SPI[0] = 'M';
 16555  0065E6  0E4D               	movlw	77
 16556  0065E8  D03A               	goto	L24
 16557  0065EA                     l6900:
 16558                           
 16559                           ;master/CES_SPI_support.c: 47:                             str_SPI[0] = 'S';
 16560  0065EA  0E53               	movlw	83
 16561  0065EC  D01C               	goto	L22
 16562  0065EE                     L13:
 16563  0065EE  6E19               	movwf	SPI_D2S@str_SPI+1,c
 16564                           
 16565                           ;master/CES_SPI_support.c: 49:                             break;
 16566  0065F0  D119               	goto	l7010
 16567  0065F2                     l6902:
 16568                           
 16569                           ;master/CES_SPI_support.c: 51:                             str_SPI[0] = 'M';
 16570  0065F2  0E4D               	movlw	77
 16571  0065F4  D018               	goto	L22
 16572  0065F6                     l6904:
 16573                           
 16574                           ;master/CES_SPI_support.c: 55:                             str_SPI[1] = '\'';
 16575  0065F6  0E27               	movlw	39
 16576  0065F8  D076               	goto	L23
 16577  0065FA                     l6908:
 16578  0065FA  5012               	movf	SPI_D2S@SPI_DATA,w,c
 16579  0065FC  6E13               	movwf	??_SPI_D2S& (0+255),c
 16580  0065FE  6A14               	clrf	(??_SPI_D2S+1)& (0+255),c
 16581                           
 16582                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16583                           ; Switch size 1, requested type "simple"
 16584                           ; Number of cases is 1, Range of values is 0 to 0
 16585                           ; switch strategies available:
 16586                           ; Name         Instructions Cycles
 16587                           ; simple_byte            4     3 (average)
 16588                           ;	Chosen strategy is simple_byte
 16589  006600  5014               	movf	??_SPI_D2S+1,w,c
 16590  006602  0A00               	xorlw	0	; case 0
 16591  006604  A4D8               	btfss	status,2,c
 16592  006606  D10E               	goto	l7010
 16593                           
 16594                           ; Switch size 1, requested type "simple"
 16595                           ; Number of cases is 4, Range of values is 10 to 13
 16596                           ; switch strategies available:
 16597                           ; Name         Instructions Cycles
 16598                           ; simple_byte           13     7 (average)
 16599                           ;	Chosen strategy is simple_byte
 16600  006608  5013               	movf	??_SPI_D2S,w,c
 16601  00660A  0A0A               	xorlw	10	; case 10
 16602  00660C  B4D8               	btfsc	status,2,c
 16603  00660E  D7EB               	goto	l6898
 16604  006610  0A01               	xorlw	1	; case 11
 16605  006612  B4D8               	btfsc	status,2,c
 16606  006614  D7EA               	goto	l6900
 16607  006616  0A07               	xorlw	7	; case 12
 16608  006618  B4D8               	btfsc	status,2,c
 16609  00661A  D7EB               	goto	l6902
 16610  00661C  0A01               	xorlw	1	; case 13
 16611  00661E  B4D8               	btfsc	status,2,c
 16612  006620  D7EA               	goto	l6904
 16613  006622  D100               	goto	l7010
 16614  006624                     l6912:
 16615                           
 16616                           ;master/CES_SPI_support.c: 67:                             str_SPI[0] = 'E';
 16617  006624  0E45               	movlw	69
 16618  006626                     L22:
 16619  006626  6E18               	movwf	SPI_D2S@str_SPI,c
 16620                           
 16621                           ;master/CES_SPI_support.c: 68:                             str_SPI[1] = '\0';
 16622  006628  0E00               	movlw	0
 16623  00662A  D7E1               	goto	L13
 16624  00662C                     l6916:
 16625                           
 16626                           ;master/CES_SPI_support.c: 75:                             str_SPI[1] = '\'';
 16627  00662C  0E27               	movlw	39
 16628  00662E  D01B               	goto	L16
 16629  006630                     L15:
 16630  006630  6E18               	movwf	SPI_D2S@str_SPI,c
 16631                           
 16632                           ;master/CES_SPI_support.c: 77:                             break;
 16633  006632  D0F8               	goto	l7010
 16634  006634                     l6920:
 16635  006634  5012               	movf	SPI_D2S@SPI_DATA,w,c
 16636  006636  6E13               	movwf	??_SPI_D2S& (0+255),c
 16637  006638  6A14               	clrf	(??_SPI_D2S+1)& (0+255),c
 16638                           
 16639                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16640                           ; Switch size 1, requested type "simple"
 16641                           ; Number of cases is 1, Range of values is 0 to 0
 16642                           ; switch strategies available:
 16643                           ; Name         Instructions Cycles
 16644                           ; simple_byte            4     3 (average)
 16645                           ;	Chosen strategy is simple_byte
 16646  00663A  5014               	movf	??_SPI_D2S+1,w,c
 16647  00663C  0A00               	xorlw	0	; case 0
 16648  00663E  A4D8               	btfss	status,2,c
 16649  006640  D0F1               	goto	l7010
 16650                           
 16651                           ; Switch size 1, requested type "simple"
 16652                           ; Number of cases is 4, Range of values is 10 to 13
 16653                           ; switch strategies available:
 16654                           ; Name         Instructions Cycles
 16655                           ; simple_byte           13     7 (average)
 16656                           ;	Chosen strategy is simple_byte
 16657  006642  5013               	movf	??_SPI_D2S,w,c
 16658  006644  0A0A               	xorlw	10	; case 10
 16659  006646  B4D8               	btfsc	status,2,c
 16660  006648  D7CE               	goto	l6898
 16661  00664A  0A01               	xorlw	1	; case 11
 16662  00664C  B4D8               	btfsc	status,2,c
 16663  00664E  D7EA               	goto	l6912
 16664  006650  0A07               	xorlw	7	; case 12
 16665  006652  B4D8               	btfsc	status,2,c
 16666  006654  D7CE               	goto	l6902
 16667  006656  D042               	goto	L18
 16668  006658                     l6924:
 16669                           
 16670                           ;master/CES_SPI_support.c: 87:                             str_SPI[0] = 'E';
 16671  006658  0E45               	movlw	69
 16672  00665A  D001               	goto	L24
 16673  00665C                     l6926:
 16674                           
 16675                           ;master/CES_SPI_support.c: 91:                             str_SPI[0] = 'S';
 16676  00665C  0E53               	movlw	83
 16677  00665E                     L24:
 16678  00665E  6E18               	movwf	SPI_D2S@str_SPI,c
 16679                           
 16680                           ;master/CES_SPI_support.c: 92:                             str_SPI[1] = '\'';
 16681  006660  0E27               	movlw	39
 16682  006662  D7C5               	goto	L13
 16683  006664                     l6928:
 16684                           
 16685                           ;master/CES_SPI_support.c: 95:                             str_SPI[1] = '\0';
 16686  006664  0E00               	movlw	0
 16687  006666                     L16:
 16688  006666  6E19               	movwf	SPI_D2S@str_SPI+1,c
 16689                           
 16690                           ;master/CES_SPI_support.c: 96:                             str_SPI[0] = 'E';
 16691  006668  0E45               	movlw	69
 16692  00666A  D7E2               	goto	L15
 16693  00666C                     l6932:
 16694  00666C  5012               	movf	SPI_D2S@SPI_DATA,w,c
 16695  00666E  6E13               	movwf	??_SPI_D2S& (0+255),c
 16696  006670  6A14               	clrf	(??_SPI_D2S+1)& (0+255),c
 16697                           
 16698                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16699                           ; Switch size 1, requested type "simple"
 16700                           ; Number of cases is 1, Range of values is 0 to 0
 16701                           ; switch strategies available:
 16702                           ; Name         Instructions Cycles
 16703                           ; simple_byte            4     3 (average)
 16704                           ;	Chosen strategy is simple_byte
 16705  006672  5014               	movf	??_SPI_D2S+1,w,c
 16706  006674  0A00               	xorlw	0	; case 0
 16707  006676  A4D8               	btfss	status,2,c
 16708  006678  D0D5               	goto	l7010
 16709                           
 16710                           ; Switch size 1, requested type "simple"
 16711                           ; Number of cases is 4, Range of values is 10 to 13
 16712                           ; switch strategies available:
 16713                           ; Name         Instructions Cycles
 16714                           ; simple_byte           13     7 (average)
 16715                           ;	Chosen strategy is simple_byte
 16716  00667A  5013               	movf	??_SPI_D2S,w,c
 16717  00667C  0A0A               	xorlw	10	; case 10
 16718  00667E  B4D8               	btfsc	status,2,c
 16719  006680  D7B4               	goto	l6900
 16720  006682  0A01               	xorlw	1	; case 11
 16721  006684  B4D8               	btfsc	status,2,c
 16722  006686  D7E8               	goto	l6924
 16723  006688  0A07               	xorlw	7	; case 12
 16724  00668A  B4D8               	btfsc	status,2,c
 16725  00668C  D7E7               	goto	l6926
 16726  00668E  0A01               	xorlw	1	; case 13
 16727  006690  B4D8               	btfsc	status,2,c
 16728  006692  D7E8               	goto	l6928
 16729  006694  D0C7               	goto	l7010
 16730  006696                     l6944:
 16731  006696  5012               	movf	SPI_D2S@SPI_DATA,w,c
 16732  006698  6E13               	movwf	??_SPI_D2S& (0+255),c
 16733  00669A  6A14               	clrf	(??_SPI_D2S+1)& (0+255),c
 16734                           
 16735                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16736                           ; Switch size 1, requested type "simple"
 16737                           ; Number of cases is 1, Range of values is 0 to 0
 16738                           ; switch strategies available:
 16739                           ; Name         Instructions Cycles
 16740                           ; simple_byte            4     3 (average)
 16741                           ;	Chosen strategy is simple_byte
 16742  00669C  5014               	movf	??_SPI_D2S+1,w,c
 16743  00669E  0A00               	xorlw	0	; case 0
 16744  0066A0  A4D8               	btfss	status,2,c
 16745  0066A2  D0C0               	goto	l7010
 16746                           
 16747                           ; Switch size 1, requested type "simple"
 16748                           ; Number of cases is 4, Range of values is 10 to 13
 16749                           ; switch strategies available:
 16750                           ; Name         Instructions Cycles
 16751                           ; simple_byte           13     7 (average)
 16752                           ;	Chosen strategy is simple_byte
 16753  0066A4  5013               	movf	??_SPI_D2S,w,c
 16754  0066A6  0A0A               	xorlw	10	; case 10
 16755  0066A8  B4D8               	btfsc	status,2,c
 16756  0066AA  D7A3               	goto	l6902
 16757  0066AC  0A01               	xorlw	1	; case 11
 16758  0066AE  B4D8               	btfsc	status,2,c
 16759  0066B0  D7B9               	goto	l6912
 16760  0066B2  0A07               	xorlw	7	; case 12
 16761  0066B4  B4D8               	btfsc	status,2,c
 16762  0066B6  D797               	goto	l6898
 16763  0066B8  D011               	goto	L18
 16764  0066BA                     l6956:
 16765  0066BA  5012               	movf	SPI_D2S@SPI_DATA,w,c
 16766  0066BC  6E13               	movwf	??_SPI_D2S& (0+255),c
 16767  0066BE  6A14               	clrf	(??_SPI_D2S+1)& (0+255),c
 16768                           
 16769                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16770                           ; Switch size 1, requested type "simple"
 16771                           ; Number of cases is 1, Range of values is 0 to 0
 16772                           ; switch strategies available:
 16773                           ; Name         Instructions Cycles
 16774                           ; simple_byte            4     3 (average)
 16775                           ;	Chosen strategy is simple_byte
 16776  0066C0  5014               	movf	??_SPI_D2S+1,w,c
 16777  0066C2  0A00               	xorlw	0	; case 0
 16778  0066C4  A4D8               	btfss	status,2,c
 16779  0066C6  D0AE               	goto	l7010
 16780                           
 16781                           ; Switch size 1, requested type "simple"
 16782                           ; Number of cases is 4, Range of values is 10 to 13
 16783                           ; switch strategies available:
 16784                           ; Name         Instructions Cycles
 16785                           ; simple_byte           13     7 (average)
 16786                           ;	Chosen strategy is simple_byte
 16787  0066C8  5013               	movf	??_SPI_D2S,w,c
 16788  0066CA  0A0A               	xorlw	10	; case 10
 16789  0066CC  B4D8               	btfsc	status,2,c
 16790  0066CE  D7C6               	goto	l6926
 16791  0066D0  0A01               	xorlw	1	; case 11
 16792  0066D2  B4D8               	btfsc	status,2,c
 16793  0066D4  D7A7               	goto	l6912
 16794  0066D6  0A07               	xorlw	7	; case 12
 16795  0066D8  B4D8               	btfsc	status,2,c
 16796  0066DA  D787               	goto	l6900
 16797  0066DC                     L18:
 16798  0066DC  0A01               	xorlw	1	; case 13
 16799  0066DE  B4D8               	btfsc	status,2,c
 16800  0066E0  D7A5               	goto	l6916
 16801  0066E2  D0A0               	goto	l7010
 16802  0066E4                     l6964:
 16803                           
 16804                           ;master/CES_SPI_support.c: 157:                             str_SPI[1] = '\0';
 16805  0066E4  0E00               	movlw	0
 16806  0066E6                     L23:
 16807  0066E6  6E19               	movwf	SPI_D2S@str_SPI+1,c
 16808                           
 16809                           ;master/CES_SPI_support.c: 158:                             str_SPI[0] = 'S';
 16810  0066E8  0E53               	movlw	83
 16811  0066EA  D7A2               	goto	L15
 16812  0066EC                     l6968:
 16813  0066EC  5012               	movf	SPI_D2S@SPI_DATA,w,c
 16814  0066EE  6E13               	movwf	??_SPI_D2S& (0+255),c
 16815  0066F0  6A14               	clrf	(??_SPI_D2S+1)& (0+255),c
 16816                           
 16817                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16818                           ; Switch size 1, requested type "simple"
 16819                           ; Number of cases is 1, Range of values is 0 to 0
 16820                           ; switch strategies available:
 16821                           ; Name         Instructions Cycles
 16822                           ; simple_byte            4     3 (average)
 16823                           ;	Chosen strategy is simple_byte
 16824  0066F2  5014               	movf	??_SPI_D2S+1,w,c
 16825  0066F4  0A00               	xorlw	0	; case 0
 16826  0066F6  A4D8               	btfss	status,2,c
 16827  0066F8  D095               	goto	l7010
 16828                           
 16829                           ; Switch size 1, requested type "simple"
 16830                           ; Number of cases is 4, Range of values is 10 to 13
 16831                           ; switch strategies available:
 16832                           ; Name         Instructions Cycles
 16833                           ; simple_byte           13     7 (average)
 16834                           ;	Chosen strategy is simple_byte
 16835  0066FA  5013               	movf	??_SPI_D2S,w,c
 16836  0066FC  0A0A               	xorlw	10	; case 10
 16837  0066FE  B4D8               	btfsc	status,2,c
 16838  006700  D772               	goto	l6898
 16839  006702  0A01               	xorlw	1	; case 11
 16840  006704  B4D8               	btfsc	status,2,c
 16841  006706  D7AA               	goto	l6926
 16842  006708  0A07               	xorlw	7	; case 12
 16843  00670A  B4D8               	btfsc	status,2,c
 16844  00670C  D772               	goto	l6902
 16845  00670E  0A01               	xorlw	1	; case 13
 16846  006710  B4D8               	btfsc	status,2,c
 16847  006712  D7E8               	goto	l6964
 16848  006714  D087               	goto	l7010
 16849  006716                     l6972:
 16850  006716  5015               	movf	SPI_D2S@SPI_CS,w,c
 16851  006718  6E13               	movwf	??_SPI_D2S& (0+255),c
 16852  00671A  6A14               	clrf	(??_SPI_D2S+1)& (0+255),c
 16853                           
 16854                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16855                           ; Switch size 1, requested type "simple"
 16856                           ; Number of cases is 1, Range of values is 0 to 0
 16857                           ; switch strategies available:
 16858                           ; Name         Instructions Cycles
 16859                           ; simple_byte            4     3 (average)
 16860                           ;	Chosen strategy is simple_byte
 16861  00671C  5014               	movf	??_SPI_D2S+1,w,c
 16862  00671E  0A00               	xorlw	0	; case 0
 16863  006720  A4D8               	btfss	status,2,c
 16864  006722  D080               	goto	l7010
 16865                           
 16866                           ; Switch size 1, requested type "simple"
 16867                           ; Number of cases is 6, Range of values is 0 to 5
 16868                           ; switch strategies available:
 16869                           ; Name         Instructions Cycles
 16870                           ; simple_byte           19    10 (average)
 16871                           ;	Chosen strategy is simple_byte
 16872  006724  5013               	movf	??_SPI_D2S,w,c
 16873  006726  0A00               	xorlw	0	; case 0
 16874  006728  B4D8               	btfsc	status,2,c
 16875  00672A  D767               	goto	l6908
 16876  00672C  0A01               	xorlw	1	; case 1
 16877  00672E  B4D8               	btfsc	status,2,c
 16878  006730  D781               	goto	l6920
 16879  006732  0A03               	xorlw	3	; case 2
 16880  006734  B4D8               	btfsc	status,2,c
 16881  006736  D79A               	goto	l6932
 16882  006738  0A01               	xorlw	1	; case 3
 16883  00673A  B4D8               	btfsc	status,2,c
 16884  00673C  D7AC               	goto	l6944
 16885  00673E  0A07               	xorlw	7	; case 4
 16886  006740  B4D8               	btfsc	status,2,c
 16887  006742  D7BB               	goto	l6956
 16888  006744  0A01               	xorlw	1	; case 5
 16889  006746  B4D8               	btfsc	status,2,c
 16890  006748  D7D1               	goto	l6968
 16891  00674A  D06C               	goto	l7010
 16892  00674C                     l6974:
 16893                           
 16894                           ;master/CES_SPI_support.c: 164:             if (SPI_DATA > 4) {
 16895  00674C  0E04               	movlw	4
 16896  00674E  6412               	cpfsgt	SPI_D2S@SPI_DATA,c
 16897  006750  D002               	goto	l6978
 16898                           
 16899                           ;master/CES_SPI_support.c: 165:                 str_SPI[1] = '\0';
 16900  006752  0E00               	movlw	0
 16901  006754  D001               	goto	L19
 16902  006756                     l6978:
 16903                           
 16904                           ;master/CES_SPI_support.c: 167:                 str_SPI[1] = '\'';
 16905  006756  0E27               	movlw	39
 16906  006758                     L19:
 16907  006758  6E19               	movwf	SPI_D2S@str_SPI+1,c
 16908                           
 16909                           ;master/CES_SPI_support.c: 169:             if (SPI_CS == 2) {
 16910  00675A  0E02               	movlw	2
 16911  00675C  1815               	xorwf	SPI_D2S@SPI_CS,w,c
 16912  00675E  A4D8               	btfss	status,2,c
 16913  006760  D046               	goto	l7008
 16914                           
 16915                           ;master/CES_SPI_support.c: 170:                 if (SPI_DATA > 4) {
 16916  006762  0E04               	movlw	4
 16917  006764  6412               	cpfsgt	SPI_D2S@SPI_DATA,c
 16918  006766  D002               	goto	l6986
 16919                           
 16920                           ;master/CES_SPI_support.c: 171:                     str_SPI[1] = '\'';
 16921  006768  0E27               	movlw	39
 16922  00676A  D001               	goto	L20
 16923  00676C                     l6986:
 16924                           
 16925                           ;master/CES_SPI_support.c: 173:                     str_SPI[1] = '\0';
 16926  00676C  0E00               	movlw	0
 16927  00676E                     L20:
 16928  00676E  6E19               	movwf	SPI_D2S@str_SPI+1,c
 16929  006770  D03E               	goto	l7008
 16930  006772                     l6988:
 16931                           
 16932                           ;master/CES_SPI_support.c: 178:                     str_SPI[0] = SPI0_D2S0(1 + (SPI_DATA
      +                           - 1) % 4);
 16933  006772  C012  F013         	movff	SPI_D2S@SPI_DATA,??_SPI_D2S
 16934  006776  0EFF               	movlw	255
 16935  006778  2613               	addwf	??_SPI_D2S,f,c
 16936  00677A  0E03               	movlw	3
 16937  00677C  1613               	andwf	??_SPI_D2S,f,c
 16938  00677E  2813               	incf	??_SPI_D2S,w,c
 16939  006780  EC8E  F016         	call	_SPI0_D2S0
 16940  006784  D755               	goto	L15
 16941  006786                     l6990:
 16942                           
 16943                           ;master/CES_SPI_support.c: 181:                     str_SPI[0] = SPI1_D2S0(1 + (SPI_DATA
      +                           - 1) % 4);
 16944  006786  C012  F013         	movff	SPI_D2S@SPI_DATA,??_SPI_D2S
 16945  00678A  0EFF               	movlw	255
 16946  00678C  2613               	addwf	??_SPI_D2S,f,c
 16947  00678E  0E03               	movlw	3
 16948  006790  1613               	andwf	??_SPI_D2S,f,c
 16949  006792  2813               	incf	??_SPI_D2S,w,c
 16950  006794  ECAF  F016         	call	_SPI1_D2S0
 16951  006798  D74B               	goto	L15
 16952  00679A                     l6992:
 16953                           
 16954                           ;master/CES_SPI_support.c: 184:                     str_SPI[0] = SPI2_D2S0(1 + (SPI_DATA
      +                           - 1) % 4);
 16955  00679A  C012  F013         	movff	SPI_D2S@SPI_DATA,??_SPI_D2S
 16956  00679E  0EFF               	movlw	255
 16957  0067A0  2613               	addwf	??_SPI_D2S,f,c
 16958  0067A2  0E03               	movlw	3
 16959  0067A4  1613               	andwf	??_SPI_D2S,f,c
 16960  0067A6  2813               	incf	??_SPI_D2S,w,c
 16961  0067A8  ECD0  F016         	call	_SPI2_D2S0
 16962  0067AC  D741               	goto	L15
 16963  0067AE                     l6994:
 16964                           
 16965                           ;master/CES_SPI_support.c: 187:                     str_SPI[0] = SPI3_D2S0(1 + (SPI_DATA
      +                           - 1) % 4);
 16966  0067AE  C012  F013         	movff	SPI_D2S@SPI_DATA,??_SPI_D2S
 16967  0067B2  0EFF               	movlw	255
 16968  0067B4  2613               	addwf	??_SPI_D2S,f,c
 16969  0067B6  0E03               	movlw	3
 16970  0067B8  1613               	andwf	??_SPI_D2S,f,c
 16971  0067BA  2813               	incf	??_SPI_D2S,w,c
 16972  0067BC  ECF1  F016         	call	_SPI3_D2S0
 16973  0067C0  D737               	goto	L15
 16974  0067C2                     l6996:
 16975                           
 16976                           ;master/CES_SPI_support.c: 190:                     str_SPI[0] = SPI4_D2S0(1 + (SPI_DATA
      +                           - 1) % 4);
 16977  0067C2  C012  F013         	movff	SPI_D2S@SPI_DATA,??_SPI_D2S
 16978  0067C6  0EFF               	movlw	255
 16979  0067C8  2613               	addwf	??_SPI_D2S,f,c
 16980  0067CA  0E03               	movlw	3
 16981  0067CC  1613               	andwf	??_SPI_D2S,f,c
 16982  0067CE  2813               	incf	??_SPI_D2S,w,c
 16983  0067D0  EC12  F017         	call	_SPI4_D2S0
 16984  0067D4  D72D               	goto	L15
 16985  0067D6                     l6998:
 16986                           
 16987                           ;master/CES_SPI_support.c: 193:                     str_SPI[0] = SPI5_D2S0(1 + (SPI_DATA
      +                           - 1) % 4);
 16988  0067D6  C012  F013         	movff	SPI_D2S@SPI_DATA,??_SPI_D2S
 16989  0067DA  0EFF               	movlw	255
 16990  0067DC  2613               	addwf	??_SPI_D2S,f,c
 16991  0067DE  0E03               	movlw	3
 16992  0067E0  1613               	andwf	??_SPI_D2S,f,c
 16993  0067E2  2813               	incf	??_SPI_D2S,w,c
 16994  0067E4  EC33  F017         	call	_SPI5_D2S0
 16995  0067E8  D723               	goto	L15
 16996  0067EA                     l7000:
 16997                           
 16998                           ;master/CES_SPI_support.c: 196:                     return -2;
 16999  0067EA  0EFE               	movlw	254
 17000  0067EC  0012               	return	
 17001  0067EE                     l7008:
 17002  0067EE  5015               	movf	SPI_D2S@SPI_CS,w,c
 17003  0067F0  6E13               	movwf	??_SPI_D2S& (0+255),c
 17004  0067F2  6A14               	clrf	(??_SPI_D2S+1)& (0+255),c
 17005                           
 17006                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17007                           ; Switch size 1, requested type "simple"
 17008                           ; Number of cases is 1, Range of values is 0 to 0
 17009                           ; switch strategies available:
 17010                           ; Name         Instructions Cycles
 17011                           ; simple_byte            4     3 (average)
 17012                           ;	Chosen strategy is simple_byte
 17013  0067F4  5014               	movf	??_SPI_D2S+1,w,c
 17014  0067F6  0A00               	xorlw	0	; case 0
 17015  0067F8  A4D8               	btfss	status,2,c
 17016  0067FA  D7F7               	goto	l7000
 17017                           
 17018                           ; Switch size 1, requested type "simple"
 17019                           ; Number of cases is 6, Range of values is 0 to 5
 17020                           ; switch strategies available:
 17021                           ; Name         Instructions Cycles
 17022                           ; simple_byte           19    10 (average)
 17023                           ;	Chosen strategy is simple_byte
 17024  0067FC  5013               	movf	??_SPI_D2S,w,c
 17025  0067FE  0A00               	xorlw	0	; case 0
 17026  006800  B4D8               	btfsc	status,2,c
 17027  006802  D7B7               	goto	l6988
 17028  006804  0A01               	xorlw	1	; case 1
 17029  006806  B4D8               	btfsc	status,2,c
 17030  006808  D7BE               	goto	l6990
 17031  00680A  0A03               	xorlw	3	; case 2
 17032  00680C  B4D8               	btfsc	status,2,c
 17033  00680E  D7C5               	goto	l6992
 17034  006810  0A01               	xorlw	1	; case 3
 17035  006812  B4D8               	btfsc	status,2,c
 17036  006814  D7CC               	goto	l6994
 17037  006816  0A07               	xorlw	7	; case 4
 17038  006818  B4D8               	btfsc	status,2,c
 17039  00681A  D7D3               	goto	l6996
 17040  00681C  0A01               	xorlw	1	; case 5
 17041  00681E  B4D8               	btfsc	status,2,c
 17042  006820  D7DA               	goto	l6998
 17043  006822  D7E3               	goto	l7000
 17044  006824                     l7010:
 17045                           
 17046                           ;master/CES_SPI_support.c: 200:         if (str_SPI[0] == '@') {
 17047  006824  0E40               	movlw	64
 17048  006826  1818               	xorwf	SPI_D2S@str_SPI,w,c
 17049  006828  B4D8               	btfsc	status,2,c
 17050  00682A  D7DF               	goto	l7000
 17051                           
 17052                           ;master/CES_SPI_support.c: 203:         for (i = 0; i < (2 + 12 * 3); i++) {
 17053  00682C  0E00               	movlw	0
 17054  00682E  6E17               	movwf	SPI_D2S@i+1,c
 17055  006830  0E00               	movlw	0
 17056  006832  6E16               	movwf	SPI_D2S@i,c
 17057  006834                     l7022:
 17058                           
 17059                           ;master/CES_SPI_support.c: 204:             if (str_cmp_const(str_SPI, CE_LIST[i].name) 
      +                          == 0) {
 17060  006834  0E18               	movlw	low SPI_D2S@str_SPI
 17061  006836  6E07               	movwf	str_cmp_const@p1,c
 17062  006838  0E00               	movlw	high SPI_D2S@str_SPI
 17063  00683A  6E08               	movwf	str_cmp_const@p1+1,c
 17064  00683C  C016  F001         	movff	SPI_D2S@i,___wmul@multiplier
 17065  006840  C017  F002         	movff	SPI_D2S@i+1,___wmul@multiplier+1
 17066  006844  0E00               	movlw	0
 17067  006846  6E04               	movwf	___wmul@multiplicand+1,c
 17068  006848  0E05               	movlw	5
 17069  00684A  6E03               	movwf	___wmul@multiplicand,c
 17070  00684C  ECFB  F014         	call	___wmul	;wreg free
 17071  006850  0E02               	movlw	2
 17072  006852  2601               	addwf	?___wmul,f,c
 17073  006854  0E00               	movlw	0
 17074  006856  2202               	addwfc	?___wmul+1,f,c
 17075  006858  0E91               	movlw	low _CE_LIST
 17076  00685A  2401               	addwf	?___wmul,w,c
 17077  00685C  6EF6               	movwf	tblptrl,c
 17078  00685E  0E7A               	movlw	high _CE_LIST
 17079  006860  2002               	addwfc	?___wmul+1,w,c
 17080  006862  6EF7               	movwf	tblptrh,c
 17081  006864                     	if	0	;There are less than 3 active tblptr bytes
 17082  006864                     	endif
 17083  006864  0009               	tblrd		*+
 17084  006866  CFF5 F009          	movff	tablat,str_cmp_const@p2
 17085  00686A  000A               	tblrd		*-
 17086  00686C  CFF5 F00A          	movff	tablat,str_cmp_const@p2+1
 17087  006870  EC96  F01D         	call	_str_cmp_const	;wreg free
 17088  006874  0900               	iorlw	0
 17089  006876  A4D8               	btfss	status,2,c
 17090  006878  D002               	goto	l7028
 17091                           
 17092                           ;master/CES_SPI_support.c: 205:                 return i;
 17093  00687A  5016               	movf	SPI_D2S@i,w,c
 17094  00687C  0012               	return	
 17095  00687E                     l7028:
 17096                           
 17097                           ;master/CES_SPI_support.c: 207:         }
 17098  00687E  4A16               	infsnz	SPI_D2S@i,f,c
 17099  006880  2A17               	incf	SPI_D2S@i+1,f,c
 17100  006882  BE17               	btfsc	SPI_D2S@i+1,7,c
 17101  006884  D7D7               	goto	l7022
 17102  006886  5017               	movf	SPI_D2S@i+1,w,c
 17103  006888  E1B0               	bnz	l7000
 17104  00688A  0E26               	movlw	38
 17105  00688C  5C16               	subwf	SPI_D2S@i,w,c
 17106  00688E  B0D8               	btfsc	status,0,c
 17107  006890  D7AC               	goto	l7000
 17108  006892  D7D0               	goto	l7022
 17109  006894                     __end_of_SPI_D2S:
 17110                           	opt callstack 0
 17111                           
 17112 ;; *************** function _str_cmp_const *****************
 17113 ;; Defined at:
 17114 ;;		line 232 in file "master/operation_CES.c"
 17115 ;; Parameters:    Size  Location     Type
 17116 ;;  p1              2    6[COMRAM] PTR const unsigned char 
 17117 ;;		 -> STR_198(3), STR_197(3), STR_196(3), STR_195(3), 
 17118 ;;		 -> STR_194(3), STR_193(3), STR_192(3), STR_191(3), 
 17119 ;;		 -> STR_190(3), STR_189(3), STR_188(3), STR_187(3), 
 17120 ;;		 -> STR_186(2), STR_185(2), STR_184(2), STR_183(2), 
 17121 ;;		 -> STR_182(2), STR_181(2), STR_180(5), command_turn_ARRAY_3_end@s2(3), 
 17122 ;;		 -> STR_95(2), STR_94(2), STR_93(3), STR_92(3), 
 17123 ;;		 -> STR_91(3), STR_90(2), STR_89(2), STR_88(3), 
 17124 ;;		 -> STR_87(2), STR_86(3), STR_85(3), STR_84(2), 
 17125 ;;		 -> STR_83(2), STR_82(3), STR_81(2), STR_80(2), 
 17126 ;;		 -> make_step_8@step8(21), make_step_7@step7(42), STR_79(2), STR_78(3), 
 17127 ;;		 -> STR_77(2), STR_76(2), make_step_7@start7(60), STR_75(2), 
 17128 ;;		 -> STR_74(2), STR_73(2), all_yellow@step6(21), yellow_cross@step5(18), 
 17129 ;;		 -> STR_72(2), STR_71(2), STR_70(2), STR_69(2), 
 17130 ;;		 -> STR_68(2), STR_67(2), STR_66(2), STR_65(3), 
 17131 ;;		 -> STR_64(3), STR_63(2), STR_62(2), STR_61(2), 
 17132 ;;		 -> STR_60(2), make_second_flower_perfect@command_drop_left(24), make_second_flower_perfect@command_drop_right(24), 
      +STR_59(2), 
 17133 ;;		 -> STR_58(2), STR_57(3), STR_56(3), STR_55(3), 
 17134 ;;		 -> STR_54(3), STR_53(2), STR_52(2), make_white_yellow_flower@command(54), 
 17135 ;;		 -> STR_51(2), STR_50(2), STR_49(3), STR_48(2), 
 17136 ;;		 -> STR_47(2), STR_46(2), STR_45(2), STR_44(2), 
 17137 ;;		 -> STR_43(2), STR_42(2), STR_41(2), STR_40(2), 
 17138 ;;		 -> STR_39(2), made_cube@start8(42), STR_38(3), STR_37(3), 
 17139 ;;		 -> STR_36(3), STR_35(3), STR_34(3), STR_33(3), 
 17140 ;;		 -> STR_32(2), STR_31(2), STR_30(2), STR_29(3), 
 17141 ;;		 -> STR_28(3), STR_27(3), STR_26(3), STR_25(3), 
 17142 ;;		 -> STR_24(3), STR_23(2), STR_22(2), STR_21(2), 
 17143 ;;		 -> STR_20(3), STR_19(3), STR_18(3), STR_17(3), 
 17144 ;;		 -> STR_16(3), STR_15(3), STR_14(3), STR_13(3), 
 17145 ;;		 -> STR_12(3), STR_11(3), STR_10(3), STR_9(3), 
 17146 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(2), 
 17147 ;;		 -> STR_4(2), STR_3(2), STR_2(6), STR_1(5), 
 17148 ;;		 -> SPI_D2S@str_SPI(3), 
 17149 ;;  p2              2    8[COMRAM] PTR unsigned char 
 17150 ;;		 -> STR_198(3), STR_197(3), STR_196(3), STR_195(3), 
 17151 ;;		 -> STR_194(3), STR_193(3), STR_192(3), STR_191(3), 
 17152 ;;		 -> STR_190(3), STR_189(3), STR_188(3), STR_187(3), 
 17153 ;;		 -> STR_186(2), STR_185(2), STR_184(2), STR_183(2), 
 17154 ;;		 -> STR_182(2), STR_181(2), STR_180(5), STR_170(3), 
 17155 ;;		 -> STR_166(2), STR_156(3), STR_152(2), STR_142(3), 
 17156 ;;		 -> STR_138(2), STR_128(3), STR_124(2), STR_114(3), 
 17157 ;;		 -> STR_110(2), STR_100(3), STR_96(2), STR_38(3), 
 17158 ;;		 -> STR_37(3), STR_36(3), STR_35(3), STR_34(3), 
 17159 ;;		 -> STR_33(3), STR_32(2), STR_31(2), STR_30(2), 
 17160 ;;		 -> STR_29(3), STR_28(3), STR_27(3), STR_26(3), 
 17161 ;;		 -> STR_25(3), STR_24(3), STR_23(2), STR_22(2), 
 17162 ;;		 -> STR_21(2), STR_20(3), STR_19(3), STR_18(3), 
 17163 ;;		 -> STR_17(3), STR_16(3), STR_15(3), STR_14(3), 
 17164 ;;		 -> STR_13(3), STR_12(3), STR_11(3), STR_10(3), 
 17165 ;;		 -> STR_9(3), STR_8(2), STR_7(2), STR_6(2), 
 17166 ;;		 -> STR_5(2), STR_4(2), STR_3(2), STR_2(6), 
 17167 ;;		 -> STR_1(5), 
 17168 ;; Auto vars:     Size  Location     Type
 17169 ;;  i               2   15[COMRAM] int 
 17170 ;; Return value:  Size  Location     Type
 17171 ;;                  1    wreg      unsigned char 
 17172 ;; Registers used:
 17173 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 17174 ;; Tracked objects:
 17175 ;;		On entry : 0/0
 17176 ;;		On exit  : 0/0
 17177 ;;		Unchanged: 0/0
 17178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17179 ;;      Params:         4       0       0       0       0       0       0
 17180 ;;      Locals:         2       0       0       0       0       0       0
 17181 ;;      Temps:          5       0       0       0       0       0       0
 17182 ;;      Totals:        11       0       0       0       0       0       0
 17183 ;;Total ram usage:       11 bytes
 17184 ;; Hardware stack levels used:    1
 17185 ;; This function calls:
 17186 ;;		Nothing
 17187 ;; This function is called by:
 17188 ;;		_SPI_D2S
 17189 ;;		_command_turn_CE
 17190 ;;		_command_turn_ARRAY_3_end
 17191 ;;		_command_turn_ARRAY_2
 17192 ;; This function uses a non-reentrant model
 17193 ;;
 17194                           
 17195                           	psect	text68
 17196  003B2C                     __ptext68:
 17197                           	opt callstack 0
 17198  003B2C                     _str_cmp_const:
 17199                           	opt callstack 29
 17200                           
 17201                           ;master/operation_CES.c: 232: char str_cmp_const(const char p1[], char *p2);master/opera
      +                          tion_CES.c: 233: {;master/operation_CES.c: 234:     int i = 0;
 17202                           
 17203                           ;incstack = 0
 17204  003B2C  0E00               	movlw	0
 17205  003B2E  6E11               	movwf	str_cmp_const@i+1,c
 17206  003B30  0E00               	movlw	0
 17207  003B32  6E10               	movwf	str_cmp_const@i,c
 17208                           
 17209                           ;master/operation_CES.c: 235:     while (p1[i] != '\0')
 17210  003B34  D02A               	goto	l6836
 17211  003B36                     l6828:
 17212                           
 17213                           ;master/operation_CES.c: 236:     {;master/operation_CES.c: 237:         if (p1[i] != *(
      +                          p2 + i))
 17214  003B36  5010               	movf	str_cmp_const@i,w,c
 17215  003B38  2409               	addwf	str_cmp_const@p2,w,c
 17216  003B3A  6E0B               	movwf	??_str_cmp_const& (0+255),c
 17217  003B3C  5011               	movf	str_cmp_const@i+1,w,c
 17218  003B3E  200A               	addwfc	str_cmp_const@p2+1,w,c
 17219  003B40  6E0C               	movwf	(??_str_cmp_const+1)& (0+255),c
 17220  003B42  C00B  FFF6         	movff	??_str_cmp_const,tblptrl
 17221  003B46  C00C  FFF7         	movff	??_str_cmp_const+1,tblptrh
 17222  003B4A                     	if	0	;tblptru may be non-zero
 17223  003B4A                     	endif
 17224  003B4A                     	if	0	;tblptru may be non-zero
 17225  003B4A                     	endif
 17226  003B4A  0008               	tblrd		*
 17227  003B4C  CFF5 F00D          	movff	tablat,??_str_cmp_const+2
 17228  003B50  5010               	movf	str_cmp_const@i,w,c
 17229  003B52  2407               	addwf	str_cmp_const@p1,w,c
 17230  003B54  6E0E               	movwf	(??_str_cmp_const+3)& (0+255),c
 17231  003B56  5011               	movf	str_cmp_const@i+1,w,c
 17232  003B58  2008               	addwfc	str_cmp_const@p1+1,w,c
 17233  003B5A  6E0F               	movwf	(??_str_cmp_const+4)& (0+255),c
 17234  003B5C  C00E  FFF6         	movff	??_str_cmp_const+3,tblptrl
 17235  003B60  C00F  FFF7         	movff	??_str_cmp_const+4,tblptrh
 17236  003B64  6AF8               	clrf	tblptru,c
 17237  003B66  0E05               	movlw	(high __ramtop+-1)
 17238  003B68  64F7               	cpfsgt	tblptrh,c
 17239  003B6A  D003               	bra	u4187
 17240  003B6C  0008               	tblrd		*
 17241  003B6E  50F5               	movf	tablat,w,c
 17242  003B70  D005               	bra	u4185
 17243  003B72                     u4187:
 17244  003B72  CFF6 FFE9          	movff	tblptrl,fsr0l
 17245  003B76  CFF7 FFEA          	movff	tblptrh,fsr0h
 17246  003B7A  50EF               	movf	indf0,w,c
 17247  003B7C                     u4185:
 17248  003B7C  180D               	xorwf	??_str_cmp_const+2,w,c
 17249  003B7E  B4D8               	btfsc	status,2,c
 17250  003B80  D002               	goto	l6834
 17251  003B82                     u4180:
 17252                           
 17253                           ;master/operation_CES.c: 238:             return -1;
 17254  003B82  0EFF               	movlw	255
 17255  003B84  0012               	return	
 17256  003B86                     l6834:
 17257                           
 17258                           ;master/operation_CES.c: 239:         i++;
 17259  003B86  4A10               	infsnz	str_cmp_const@i,f,c
 17260  003B88  2A11               	incf	str_cmp_const@i+1,f,c
 17261  003B8A                     l6836:
 17262                           
 17263                           ;master/operation_CES.c: 235:     while (p1[i] != '\0')
 17264  003B8A  5010               	movf	str_cmp_const@i,w,c
 17265  003B8C  2407               	addwf	str_cmp_const@p1,w,c
 17266  003B8E  6E0B               	movwf	??_str_cmp_const& (0+255),c
 17267  003B90  5011               	movf	str_cmp_const@i+1,w,c
 17268  003B92  2008               	addwfc	str_cmp_const@p1+1,w,c
 17269  003B94  6E0C               	movwf	(??_str_cmp_const+1)& (0+255),c
 17270  003B96  C00B  FFF6         	movff	??_str_cmp_const,tblptrl
 17271  003B9A  C00C  FFF7         	movff	??_str_cmp_const+1,tblptrh
 17272  003B9E  6AF8               	clrf	tblptru,c
 17273  003BA0  0E05               	movlw	(high __ramtop+-1)
 17274  003BA2  64F7               	cpfsgt	tblptrh,c
 17275  003BA4  D003               	bra	u4197
 17276  003BA6  0008               	tblrd		*
 17277  003BA8  50F5               	movf	tablat,w,c
 17278  003BAA  D005               	bra	u4190
 17279  003BAC                     u4197:
 17280  003BAC  CFF6 FFE9          	movff	tblptrl,fsr0l
 17281  003BB0  CFF7 FFEA          	movff	tblptrh,fsr0h
 17282  003BB4  50EF               	movf	indf0,w,c
 17283  003BB6                     u4190:
 17284  003BB6  0900               	iorlw	0
 17285  003BB8  A4D8               	btfss	status,2,c
 17286  003BBA  D7BD               	goto	l6828
 17287                           
 17288                           ;master/operation_CES.c: 241:     if (*(p2 + i) == '\0')
 17289  003BBC  5010               	movf	str_cmp_const@i,w,c
 17290  003BBE  2409               	addwf	str_cmp_const@p2,w,c
 17291  003BC0  6E0B               	movwf	??_str_cmp_const& (0+255),c
 17292  003BC2  5011               	movf	str_cmp_const@i+1,w,c
 17293  003BC4  200A               	addwfc	str_cmp_const@p2+1,w,c
 17294  003BC6  6E0C               	movwf	(??_str_cmp_const+1)& (0+255),c
 17295  003BC8  C00B  FFF6         	movff	??_str_cmp_const,tblptrl
 17296  003BCC  C00C  FFF7         	movff	??_str_cmp_const+1,tblptrh
 17297  003BD0                     	if	0	;tblptru may be non-zero
 17298  003BD0                     	endif
 17299  003BD0                     	if	0	;tblptru may be non-zero
 17300  003BD0                     	endif
 17301  003BD0  0008               	tblrd		*
 17302  003BD2  50F5               	movf	tablat,w,c
 17303  003BD4  0900               	iorlw	0
 17304  003BD6  A4D8               	btfss	status,2,c
 17305  003BD8  D7D4               	goto	u4180
 17306                           
 17307                           ;master/operation_CES.c: 242:         return 0;
 17308  003BDA  0E00               	movlw	0
 17309  003BDC  0012               	return		;funcret
 17310  003BDE                     __end_of_str_cmp_const:
 17311                           	opt callstack 0
 17312                           
 17313 ;; *************** function _SPI5_D2S0 *****************
 17314 ;; Defined at:
 17315 ;;		line 287 in file "master/CES_SPI_support.c"
 17316 ;; Parameters:    Size  Location     Type
 17317 ;;  SPI_DATA        1    wreg     const unsigned char 
 17318 ;; Auto vars:     Size  Location     Type
 17319 ;;  SPI_DATA        1    2[COMRAM] const unsigned char 
 17320 ;; Return value:  Size  Location     Type
 17321 ;;                  1    wreg      unsigned char 
 17322 ;; Registers used:
 17323 ;;		wreg, status,2, status,0
 17324 ;; Tracked objects:
 17325 ;;		On entry : 0/0
 17326 ;;		On exit  : 0/0
 17327 ;;		Unchanged: 0/0
 17328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17329 ;;      Params:         0       0       0       0       0       0       0
 17330 ;;      Locals:         1       0       0       0       0       0       0
 17331 ;;      Temps:          2       0       0       0       0       0       0
 17332 ;;      Totals:         3       0       0       0       0       0       0
 17333 ;;Total ram usage:        3 bytes
 17334 ;; Hardware stack levels used:    1
 17335 ;; This function calls:
 17336 ;;		Nothing
 17337 ;; This function is called by:
 17338 ;;		_SPI_D2S
 17339 ;; This function uses a non-reentrant model
 17340 ;;
 17341                           
 17342                           	psect	text69
 17343  002E66                     __ptext69:
 17344                           	opt callstack 0
 17345  002E66                     _SPI5_D2S0:
 17346                           	opt callstack 27
 17347                           
 17348                           ;incstack = 0
 17349                           ;SPI5_D2S0@SPI_DATA stored from wreg
 17350  002E66  6E03               	movwf	SPI5_D2S0@SPI_DATA,c
 17351                           
 17352                           ;master/CES_SPI_support.c: 288:     switch (SPI_DATA) {
 17353  002E68  D00A               	goto	l6820
 17354  002E6A                     l6798:
 17355                           
 17356                           ;master/CES_SPI_support.c: 290:             return 'F';
 17357  002E6A  0E46               	movlw	70
 17358  002E6C  0012               	return	
 17359  002E6E                     l6802:
 17360                           
 17361                           ;master/CES_SPI_support.c: 292:             return 'R';
 17362  002E6E  0E52               	movlw	82
 17363  002E70  0012               	return	
 17364  002E72                     l6806:
 17365                           
 17366                           ;master/CES_SPI_support.c: 294:             return 'B';
 17367  002E72  0E42               	movlw	66
 17368  002E74  0012               	return	
 17369  002E76                     l6810:
 17370                           
 17371                           ;master/CES_SPI_support.c: 296:             return 'L';
 17372  002E76  0E4C               	movlw	76
 17373  002E78  0012               	return	
 17374  002E7A                     l6814:
 17375                           
 17376                           ;master/CES_SPI_support.c: 298:             return '@';
 17377  002E7A  0E40               	movlw	64
 17378  002E7C  0012               	return	
 17379  002E7E                     l6820:
 17380  002E7E  5003               	movf	SPI5_D2S0@SPI_DATA,w,c
 17381  002E80  6E01               	movwf	??_SPI5_D2S0& (0+255),c
 17382  002E82  6A02               	clrf	(??_SPI5_D2S0+1)& (0+255),c
 17383                           
 17384                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17385                           ; Switch size 1, requested type "simple"
 17386                           ; Number of cases is 1, Range of values is 0 to 0
 17387                           ; switch strategies available:
 17388                           ; Name         Instructions Cycles
 17389                           ; simple_byte            4     3 (average)
 17390                           ;	Chosen strategy is simple_byte
 17391  002E84  5002               	movf	??_SPI5_D2S0+1,w,c
 17392  002E86  0A00               	xorlw	0	; case 0
 17393  002E88  A4D8               	btfss	status,2,c
 17394  002E8A  D7F7               	goto	l6814
 17395                           
 17396                           ; Switch size 1, requested type "simple"
 17397                           ; Number of cases is 4, Range of values is 1 to 4
 17398                           ; switch strategies available:
 17399                           ; Name         Instructions Cycles
 17400                           ; simple_byte           13     7 (average)
 17401                           ;	Chosen strategy is simple_byte
 17402  002E8C  5001               	movf	??_SPI5_D2S0,w,c
 17403  002E8E  0A01               	xorlw	1	; case 1
 17404  002E90  B4D8               	btfsc	status,2,c
 17405  002E92  D7EB               	goto	l6798
 17406  002E94  0A03               	xorlw	3	; case 2
 17407  002E96  B4D8               	btfsc	status,2,c
 17408  002E98  D7EA               	goto	l6802
 17409  002E9A  0A01               	xorlw	1	; case 3
 17410  002E9C  B4D8               	btfsc	status,2,c
 17411  002E9E  D7E9               	goto	l6806
 17412  002EA0  0A07               	xorlw	7	; case 4
 17413  002EA2  B4D8               	btfsc	status,2,c
 17414  002EA4  D7E8               	goto	l6810
 17415  002EA6  D7E9               	goto	l6814
 17416  002EA8                     __end_of_SPI5_D2S0:
 17417                           	opt callstack 0
 17418                           
 17419 ;; *************** function _SPI4_D2S0 *****************
 17420 ;; Defined at:
 17421 ;;		line 272 in file "master/CES_SPI_support.c"
 17422 ;; Parameters:    Size  Location     Type
 17423 ;;  SPI_DATA        1    wreg     const unsigned char 
 17424 ;; Auto vars:     Size  Location     Type
 17425 ;;  SPI_DATA        1    2[COMRAM] const unsigned char 
 17426 ;; Return value:  Size  Location     Type
 17427 ;;                  1    wreg      unsigned char 
 17428 ;; Registers used:
 17429 ;;		wreg, status,2, status,0
 17430 ;; Tracked objects:
 17431 ;;		On entry : 0/0
 17432 ;;		On exit  : 0/0
 17433 ;;		Unchanged: 0/0
 17434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17435 ;;      Params:         0       0       0       0       0       0       0
 17436 ;;      Locals:         1       0       0       0       0       0       0
 17437 ;;      Temps:          2       0       0       0       0       0       0
 17438 ;;      Totals:         3       0       0       0       0       0       0
 17439 ;;Total ram usage:        3 bytes
 17440 ;; Hardware stack levels used:    1
 17441 ;; This function calls:
 17442 ;;		Nothing
 17443 ;; This function is called by:
 17444 ;;		_SPI_D2S
 17445 ;; This function uses a non-reentrant model
 17446 ;;
 17447                           
 17448                           	psect	text70
 17449  002E24                     __ptext70:
 17450                           	opt callstack 0
 17451  002E24                     _SPI4_D2S0:
 17452                           	opt callstack 27
 17453                           
 17454                           ;incstack = 0
 17455                           ;SPI4_D2S0@SPI_DATA stored from wreg
 17456  002E24  6E03               	movwf	SPI4_D2S0@SPI_DATA,c
 17457                           
 17458                           ;master/CES_SPI_support.c: 273:     switch (SPI_DATA) {
 17459  002E26  D00A               	goto	l6790
 17460  002E28                     l6768:
 17461                           
 17462                           ;master/CES_SPI_support.c: 275:             return 'U';
 17463  002E28  0E55               	movlw	85
 17464  002E2A  0012               	return	
 17465  002E2C                     l6772:
 17466                           
 17467                           ;master/CES_SPI_support.c: 277:             return 'B';
 17468  002E2C  0E42               	movlw	66
 17469  002E2E  0012               	return	
 17470  002E30                     l6776:
 17471                           
 17472                           ;master/CES_SPI_support.c: 279:             return 'D';
 17473  002E30  0E44               	movlw	68
 17474  002E32  0012               	return	
 17475  002E34                     l6780:
 17476                           
 17477                           ;master/CES_SPI_support.c: 281:             return 'F';
 17478  002E34  0E46               	movlw	70
 17479  002E36  0012               	return	
 17480  002E38                     l6784:
 17481                           
 17482                           ;master/CES_SPI_support.c: 283:             return '@';
 17483  002E38  0E40               	movlw	64
 17484  002E3A  0012               	return	
 17485  002E3C                     l6790:
 17486  002E3C  5003               	movf	SPI4_D2S0@SPI_DATA,w,c
 17487  002E3E  6E01               	movwf	??_SPI4_D2S0& (0+255),c
 17488  002E40  6A02               	clrf	(??_SPI4_D2S0+1)& (0+255),c
 17489                           
 17490                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17491                           ; Switch size 1, requested type "simple"
 17492                           ; Number of cases is 1, Range of values is 0 to 0
 17493                           ; switch strategies available:
 17494                           ; Name         Instructions Cycles
 17495                           ; simple_byte            4     3 (average)
 17496                           ;	Chosen strategy is simple_byte
 17497  002E42  5002               	movf	??_SPI4_D2S0+1,w,c
 17498  002E44  0A00               	xorlw	0	; case 0
 17499  002E46  A4D8               	btfss	status,2,c
 17500  002E48  D7F7               	goto	l6784
 17501                           
 17502                           ; Switch size 1, requested type "simple"
 17503                           ; Number of cases is 4, Range of values is 1 to 4
 17504                           ; switch strategies available:
 17505                           ; Name         Instructions Cycles
 17506                           ; simple_byte           13     7 (average)
 17507                           ;	Chosen strategy is simple_byte
 17508  002E4A  5001               	movf	??_SPI4_D2S0,w,c
 17509  002E4C  0A01               	xorlw	1	; case 1
 17510  002E4E  B4D8               	btfsc	status,2,c
 17511  002E50  D7EB               	goto	l6768
 17512  002E52  0A03               	xorlw	3	; case 2
 17513  002E54  B4D8               	btfsc	status,2,c
 17514  002E56  D7EA               	goto	l6772
 17515  002E58  0A01               	xorlw	1	; case 3
 17516  002E5A  B4D8               	btfsc	status,2,c
 17517  002E5C  D7E9               	goto	l6776
 17518  002E5E  0A07               	xorlw	7	; case 4
 17519  002E60  B4D8               	btfsc	status,2,c
 17520  002E62  D7E8               	goto	l6780
 17521  002E64  D7E9               	goto	l6784
 17522  002E66                     __end_of_SPI4_D2S0:
 17523                           	opt callstack 0
 17524                           
 17525 ;; *************** function _SPI3_D2S0 *****************
 17526 ;; Defined at:
 17527 ;;		line 257 in file "master/CES_SPI_support.c"
 17528 ;; Parameters:    Size  Location     Type
 17529 ;;  SPI_DATA        1    wreg     const unsigned char 
 17530 ;; Auto vars:     Size  Location     Type
 17531 ;;  SPI_DATA        1    2[COMRAM] const unsigned char 
 17532 ;; Return value:  Size  Location     Type
 17533 ;;                  1    wreg      unsigned char 
 17534 ;; Registers used:
 17535 ;;		wreg, status,2, status,0
 17536 ;; Tracked objects:
 17537 ;;		On entry : 0/0
 17538 ;;		On exit  : 0/0
 17539 ;;		Unchanged: 0/0
 17540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17541 ;;      Params:         0       0       0       0       0       0       0
 17542 ;;      Locals:         1       0       0       0       0       0       0
 17543 ;;      Temps:          2       0       0       0       0       0       0
 17544 ;;      Totals:         3       0       0       0       0       0       0
 17545 ;;Total ram usage:        3 bytes
 17546 ;; Hardware stack levels used:    1
 17547 ;; This function calls:
 17548 ;;		Nothing
 17549 ;; This function is called by:
 17550 ;;		_SPI_D2S
 17551 ;; This function uses a non-reentrant model
 17552 ;;
 17553                           
 17554                           	psect	text71
 17555  002DE2                     __ptext71:
 17556                           	opt callstack 0
 17557  002DE2                     _SPI3_D2S0:
 17558                           	opt callstack 27
 17559                           
 17560                           ;incstack = 0
 17561                           ;SPI3_D2S0@SPI_DATA stored from wreg
 17562  002DE2  6E03               	movwf	SPI3_D2S0@SPI_DATA,c
 17563                           
 17564                           ;master/CES_SPI_support.c: 258:     switch (SPI_DATA) {
 17565  002DE4  D00A               	goto	l6760
 17566  002DE6                     l6738:
 17567                           
 17568                           ;master/CES_SPI_support.c: 260:             return 'U';
 17569  002DE6  0E55               	movlw	85
 17570  002DE8  0012               	return	
 17571  002DEA                     l6742:
 17572                           
 17573                           ;master/CES_SPI_support.c: 262:             return 'L';
 17574  002DEA  0E4C               	movlw	76
 17575  002DEC  0012               	return	
 17576  002DEE                     l6746:
 17577                           
 17578                           ;master/CES_SPI_support.c: 264:             return 'D';
 17579  002DEE  0E44               	movlw	68
 17580  002DF0  0012               	return	
 17581  002DF2                     l6750:
 17582                           
 17583                           ;master/CES_SPI_support.c: 266:             return 'R';
 17584  002DF2  0E52               	movlw	82
 17585  002DF4  0012               	return	
 17586  002DF6                     l6754:
 17587                           
 17588                           ;master/CES_SPI_support.c: 268:             return '@';
 17589  002DF6  0E40               	movlw	64
 17590  002DF8  0012               	return	
 17591  002DFA                     l6760:
 17592  002DFA  5003               	movf	SPI3_D2S0@SPI_DATA,w,c
 17593  002DFC  6E01               	movwf	??_SPI3_D2S0& (0+255),c
 17594  002DFE  6A02               	clrf	(??_SPI3_D2S0+1)& (0+255),c
 17595                           
 17596                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17597                           ; Switch size 1, requested type "simple"
 17598                           ; Number of cases is 1, Range of values is 0 to 0
 17599                           ; switch strategies available:
 17600                           ; Name         Instructions Cycles
 17601                           ; simple_byte            4     3 (average)
 17602                           ;	Chosen strategy is simple_byte
 17603  002E00  5002               	movf	??_SPI3_D2S0+1,w,c
 17604  002E02  0A00               	xorlw	0	; case 0
 17605  002E04  A4D8               	btfss	status,2,c
 17606  002E06  D7F7               	goto	l6754
 17607                           
 17608                           ; Switch size 1, requested type "simple"
 17609                           ; Number of cases is 4, Range of values is 1 to 4
 17610                           ; switch strategies available:
 17611                           ; Name         Instructions Cycles
 17612                           ; simple_byte           13     7 (average)
 17613                           ;	Chosen strategy is simple_byte
 17614  002E08  5001               	movf	??_SPI3_D2S0,w,c
 17615  002E0A  0A01               	xorlw	1	; case 1
 17616  002E0C  B4D8               	btfsc	status,2,c
 17617  002E0E  D7EB               	goto	l6738
 17618  002E10  0A03               	xorlw	3	; case 2
 17619  002E12  B4D8               	btfsc	status,2,c
 17620  002E14  D7EA               	goto	l6742
 17621  002E16  0A01               	xorlw	1	; case 3
 17622  002E18  B4D8               	btfsc	status,2,c
 17623  002E1A  D7E9               	goto	l6746
 17624  002E1C  0A07               	xorlw	7	; case 4
 17625  002E1E  B4D8               	btfsc	status,2,c
 17626  002E20  D7E8               	goto	l6750
 17627  002E22  D7E9               	goto	l6754
 17628  002E24                     __end_of_SPI3_D2S0:
 17629                           	opt callstack 0
 17630                           
 17631 ;; *************** function _SPI2_D2S0 *****************
 17632 ;; Defined at:
 17633 ;;		line 242 in file "master/CES_SPI_support.c"
 17634 ;; Parameters:    Size  Location     Type
 17635 ;;  SPI_DATA        1    wreg     const unsigned char 
 17636 ;; Auto vars:     Size  Location     Type
 17637 ;;  SPI_DATA        1    2[COMRAM] const unsigned char 
 17638 ;; Return value:  Size  Location     Type
 17639 ;;                  1    wreg      unsigned char 
 17640 ;; Registers used:
 17641 ;;		wreg, status,2, status,0
 17642 ;; Tracked objects:
 17643 ;;		On entry : 0/0
 17644 ;;		On exit  : 0/0
 17645 ;;		Unchanged: 0/0
 17646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17647 ;;      Params:         0       0       0       0       0       0       0
 17648 ;;      Locals:         1       0       0       0       0       0       0
 17649 ;;      Temps:          2       0       0       0       0       0       0
 17650 ;;      Totals:         3       0       0       0       0       0       0
 17651 ;;Total ram usage:        3 bytes
 17652 ;; Hardware stack levels used:    1
 17653 ;; This function calls:
 17654 ;;		Nothing
 17655 ;; This function is called by:
 17656 ;;		_SPI_D2S
 17657 ;; This function uses a non-reentrant model
 17658 ;;
 17659                           
 17660                           	psect	text72
 17661  002DA0                     __ptext72:
 17662                           	opt callstack 0
 17663  002DA0                     _SPI2_D2S0:
 17664                           	opt callstack 27
 17665                           
 17666                           ;incstack = 0
 17667                           ;SPI2_D2S0@SPI_DATA stored from wreg
 17668  002DA0  6E03               	movwf	SPI2_D2S0@SPI_DATA,c
 17669                           
 17670                           ;master/CES_SPI_support.c: 243:     switch (SPI_DATA) {
 17671  002DA2  D00A               	goto	l6730
 17672  002DA4                     l6708:
 17673                           
 17674                           ;master/CES_SPI_support.c: 245:             return 'U';
 17675  002DA4  0E55               	movlw	85
 17676  002DA6  0012               	return	
 17677  002DA8                     l6712:
 17678                           
 17679                           ;master/CES_SPI_support.c: 247:             return 'B';
 17680  002DA8  0E42               	movlw	66
 17681  002DAA  0012               	return	
 17682  002DAC                     l6716:
 17683                           
 17684                           ;master/CES_SPI_support.c: 249:             return 'D';
 17685  002DAC  0E44               	movlw	68
 17686  002DAE  0012               	return	
 17687  002DB0                     l6720:
 17688                           
 17689                           ;master/CES_SPI_support.c: 251:             return 'F';
 17690  002DB0  0E46               	movlw	70
 17691  002DB2  0012               	return	
 17692  002DB4                     l6724:
 17693                           
 17694                           ;master/CES_SPI_support.c: 253:             return '@';
 17695  002DB4  0E40               	movlw	64
 17696  002DB6  0012               	return	
 17697  002DB8                     l6730:
 17698  002DB8  5003               	movf	SPI2_D2S0@SPI_DATA,w,c
 17699  002DBA  6E01               	movwf	??_SPI2_D2S0& (0+255),c
 17700  002DBC  6A02               	clrf	(??_SPI2_D2S0+1)& (0+255),c
 17701                           
 17702                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17703                           ; Switch size 1, requested type "simple"
 17704                           ; Number of cases is 1, Range of values is 0 to 0
 17705                           ; switch strategies available:
 17706                           ; Name         Instructions Cycles
 17707                           ; simple_byte            4     3 (average)
 17708                           ;	Chosen strategy is simple_byte
 17709  002DBE  5002               	movf	??_SPI2_D2S0+1,w,c
 17710  002DC0  0A00               	xorlw	0	; case 0
 17711  002DC2  A4D8               	btfss	status,2,c
 17712  002DC4  D7F7               	goto	l6724
 17713                           
 17714                           ; Switch size 1, requested type "simple"
 17715                           ; Number of cases is 4, Range of values is 1 to 4
 17716                           ; switch strategies available:
 17717                           ; Name         Instructions Cycles
 17718                           ; simple_byte           13     7 (average)
 17719                           ;	Chosen strategy is simple_byte
 17720  002DC6  5001               	movf	??_SPI2_D2S0,w,c
 17721  002DC8  0A01               	xorlw	1	; case 1
 17722  002DCA  B4D8               	btfsc	status,2,c
 17723  002DCC  D7EB               	goto	l6708
 17724  002DCE  0A03               	xorlw	3	; case 2
 17725  002DD0  B4D8               	btfsc	status,2,c
 17726  002DD2  D7EA               	goto	l6712
 17727  002DD4  0A01               	xorlw	1	; case 3
 17728  002DD6  B4D8               	btfsc	status,2,c
 17729  002DD8  D7E9               	goto	l6716
 17730  002DDA  0A07               	xorlw	7	; case 4
 17731  002DDC  B4D8               	btfsc	status,2,c
 17732  002DDE  D7E8               	goto	l6720
 17733  002DE0  D7E9               	goto	l6724
 17734  002DE2                     __end_of_SPI2_D2S0:
 17735                           	opt callstack 0
 17736                           
 17737 ;; *************** function _SPI1_D2S0 *****************
 17738 ;; Defined at:
 17739 ;;		line 227 in file "master/CES_SPI_support.c"
 17740 ;; Parameters:    Size  Location     Type
 17741 ;;  SPI_DATA        1    wreg     const unsigned char 
 17742 ;; Auto vars:     Size  Location     Type
 17743 ;;  SPI_DATA        1    2[COMRAM] const unsigned char 
 17744 ;; Return value:  Size  Location     Type
 17745 ;;                  1    wreg      unsigned char 
 17746 ;; Registers used:
 17747 ;;		wreg, status,2, status,0
 17748 ;; Tracked objects:
 17749 ;;		On entry : 0/0
 17750 ;;		On exit  : 0/0
 17751 ;;		Unchanged: 0/0
 17752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17753 ;;      Params:         0       0       0       0       0       0       0
 17754 ;;      Locals:         1       0       0       0       0       0       0
 17755 ;;      Temps:          2       0       0       0       0       0       0
 17756 ;;      Totals:         3       0       0       0       0       0       0
 17757 ;;Total ram usage:        3 bytes
 17758 ;; Hardware stack levels used:    1
 17759 ;; This function calls:
 17760 ;;		Nothing
 17761 ;; This function is called by:
 17762 ;;		_SPI_D2S
 17763 ;; This function uses a non-reentrant model
 17764 ;;
 17765                           
 17766                           	psect	text73
 17767  002D5E                     __ptext73:
 17768                           	opt callstack 0
 17769  002D5E                     _SPI1_D2S0:
 17770                           	opt callstack 27
 17771                           
 17772                           ;incstack = 0
 17773                           ;SPI1_D2S0@SPI_DATA stored from wreg
 17774  002D5E  6E03               	movwf	SPI1_D2S0@SPI_DATA,c
 17775                           
 17776                           ;master/CES_SPI_support.c: 228:     switch (SPI_DATA) {
 17777  002D60  D00A               	goto	l6700
 17778  002D62                     l6678:
 17779                           
 17780                           ;master/CES_SPI_support.c: 230:             return 'U';
 17781  002D62  0E55               	movlw	85
 17782  002D64  0012               	return	
 17783  002D66                     l6682:
 17784                           
 17785                           ;master/CES_SPI_support.c: 232:             return 'R';
 17786  002D66  0E52               	movlw	82
 17787  002D68  0012               	return	
 17788  002D6A                     l6686:
 17789                           
 17790                           ;master/CES_SPI_support.c: 234:             return 'D';
 17791  002D6A  0E44               	movlw	68
 17792  002D6C  0012               	return	
 17793  002D6E                     l6690:
 17794                           
 17795                           ;master/CES_SPI_support.c: 236:             return 'L';
 17796  002D6E  0E4C               	movlw	76
 17797  002D70  0012               	return	
 17798  002D72                     l6694:
 17799                           
 17800                           ;master/CES_SPI_support.c: 238:             return '@';
 17801  002D72  0E40               	movlw	64
 17802  002D74  0012               	return	
 17803  002D76                     l6700:
 17804  002D76  5003               	movf	SPI1_D2S0@SPI_DATA,w,c
 17805  002D78  6E01               	movwf	??_SPI1_D2S0& (0+255),c
 17806  002D7A  6A02               	clrf	(??_SPI1_D2S0+1)& (0+255),c
 17807                           
 17808                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17809                           ; Switch size 1, requested type "simple"
 17810                           ; Number of cases is 1, Range of values is 0 to 0
 17811                           ; switch strategies available:
 17812                           ; Name         Instructions Cycles
 17813                           ; simple_byte            4     3 (average)
 17814                           ;	Chosen strategy is simple_byte
 17815  002D7C  5002               	movf	??_SPI1_D2S0+1,w,c
 17816  002D7E  0A00               	xorlw	0	; case 0
 17817  002D80  A4D8               	btfss	status,2,c
 17818  002D82  D7F7               	goto	l6694
 17819                           
 17820                           ; Switch size 1, requested type "simple"
 17821                           ; Number of cases is 4, Range of values is 1 to 4
 17822                           ; switch strategies available:
 17823                           ; Name         Instructions Cycles
 17824                           ; simple_byte           13     7 (average)
 17825                           ;	Chosen strategy is simple_byte
 17826  002D84  5001               	movf	??_SPI1_D2S0,w,c
 17827  002D86  0A01               	xorlw	1	; case 1
 17828  002D88  B4D8               	btfsc	status,2,c
 17829  002D8A  D7EB               	goto	l6678
 17830  002D8C  0A03               	xorlw	3	; case 2
 17831  002D8E  B4D8               	btfsc	status,2,c
 17832  002D90  D7EA               	goto	l6682
 17833  002D92  0A01               	xorlw	1	; case 3
 17834  002D94  B4D8               	btfsc	status,2,c
 17835  002D96  D7E9               	goto	l6686
 17836  002D98  0A07               	xorlw	7	; case 4
 17837  002D9A  B4D8               	btfsc	status,2,c
 17838  002D9C  D7E8               	goto	l6690
 17839  002D9E  D7E9               	goto	l6694
 17840  002DA0                     __end_of_SPI1_D2S0:
 17841                           	opt callstack 0
 17842                           
 17843 ;; *************** function _SPI0_D2S0 *****************
 17844 ;; Defined at:
 17845 ;;		line 212 in file "master/CES_SPI_support.c"
 17846 ;; Parameters:    Size  Location     Type
 17847 ;;  SPI_DATA        1    wreg     const unsigned char 
 17848 ;; Auto vars:     Size  Location     Type
 17849 ;;  SPI_DATA        1    2[COMRAM] const unsigned char 
 17850 ;; Return value:  Size  Location     Type
 17851 ;;                  1    wreg      unsigned char 
 17852 ;; Registers used:
 17853 ;;		wreg, status,2, status,0
 17854 ;; Tracked objects:
 17855 ;;		On entry : 0/0
 17856 ;;		On exit  : 0/0
 17857 ;;		Unchanged: 0/0
 17858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17859 ;;      Params:         0       0       0       0       0       0       0
 17860 ;;      Locals:         1       0       0       0       0       0       0
 17861 ;;      Temps:          2       0       0       0       0       0       0
 17862 ;;      Totals:         3       0       0       0       0       0       0
 17863 ;;Total ram usage:        3 bytes
 17864 ;; Hardware stack levels used:    1
 17865 ;; This function calls:
 17866 ;;		Nothing
 17867 ;; This function is called by:
 17868 ;;		_SPI_D2S
 17869 ;; This function uses a non-reentrant model
 17870 ;;
 17871                           
 17872                           	psect	text74
 17873  002D1C                     __ptext74:
 17874                           	opt callstack 0
 17875  002D1C                     _SPI0_D2S0:
 17876                           	opt callstack 27
 17877                           
 17878                           ;incstack = 0
 17879                           ;SPI0_D2S0@SPI_DATA stored from wreg
 17880  002D1C  6E03               	movwf	SPI0_D2S0@SPI_DATA,c
 17881                           
 17882                           ;master/CES_SPI_support.c: 213:     switch (SPI_DATA) {
 17883  002D1E  D00A               	goto	l6670
 17884  002D20                     l6648:
 17885                           
 17886                           ;master/CES_SPI_support.c: 215:             return 'B';
 17887  002D20  0E42               	movlw	66
 17888  002D22  0012               	return	
 17889  002D24                     l6652:
 17890                           
 17891                           ;master/CES_SPI_support.c: 217:             return 'R';
 17892  002D24  0E52               	movlw	82
 17893  002D26  0012               	return	
 17894  002D28                     l6656:
 17895                           
 17896                           ;master/CES_SPI_support.c: 219:             return 'F';
 17897  002D28  0E46               	movlw	70
 17898  002D2A  0012               	return	
 17899  002D2C                     l6660:
 17900                           
 17901                           ;master/CES_SPI_support.c: 221:             return 'L';
 17902  002D2C  0E4C               	movlw	76
 17903  002D2E  0012               	return	
 17904  002D30                     l6664:
 17905                           
 17906                           ;master/CES_SPI_support.c: 223:             return '@';
 17907  002D30  0E40               	movlw	64
 17908  002D32  0012               	return	
 17909  002D34                     l6670:
 17910  002D34  5003               	movf	SPI0_D2S0@SPI_DATA,w,c
 17911  002D36  6E01               	movwf	??_SPI0_D2S0& (0+255),c
 17912  002D38  6A02               	clrf	(??_SPI0_D2S0+1)& (0+255),c
 17913                           
 17914                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17915                           ; Switch size 1, requested type "simple"
 17916                           ; Number of cases is 1, Range of values is 0 to 0
 17917                           ; switch strategies available:
 17918                           ; Name         Instructions Cycles
 17919                           ; simple_byte            4     3 (average)
 17920                           ;	Chosen strategy is simple_byte
 17921  002D3A  5002               	movf	??_SPI0_D2S0+1,w,c
 17922  002D3C  0A00               	xorlw	0	; case 0
 17923  002D3E  A4D8               	btfss	status,2,c
 17924  002D40  D7F7               	goto	l6664
 17925                           
 17926                           ; Switch size 1, requested type "simple"
 17927                           ; Number of cases is 4, Range of values is 1 to 4
 17928                           ; switch strategies available:
 17929                           ; Name         Instructions Cycles
 17930                           ; simple_byte           13     7 (average)
 17931                           ;	Chosen strategy is simple_byte
 17932  002D42  5001               	movf	??_SPI0_D2S0,w,c
 17933  002D44  0A01               	xorlw	1	; case 1
 17934  002D46  B4D8               	btfsc	status,2,c
 17935  002D48  D7EB               	goto	l6648
 17936  002D4A  0A03               	xorlw	3	; case 2
 17937  002D4C  B4D8               	btfsc	status,2,c
 17938  002D4E  D7EA               	goto	l6652
 17939  002D50  0A01               	xorlw	1	; case 3
 17940  002D52  B4D8               	btfsc	status,2,c
 17941  002D54  D7E9               	goto	l6656
 17942  002D56  0A07               	xorlw	7	; case 4
 17943  002D58  B4D8               	btfsc	status,2,c
 17944  002D5A  D7E8               	goto	l6660
 17945  002D5C  D7E9               	goto	l6664
 17946  002D5E                     __end_of_SPI0_D2S0:
 17947                           	opt callstack 0
 17948                           
 17949 ;; *************** function _OUT_LED_ARRAY *****************
 17950 ;; Defined at:
 17951 ;;		line 110 in file "master/SerialLED_PIC18F25K22.c"
 17952 ;; Parameters:    Size  Location     Type
 17953 ;;  LED_COLOR_AR    2    6[COMRAM] PTR unsigned char [9]
 17954 ;;		 -> LED_ARRAY(54), 
 17955 ;;  LED_POWER       1    8[COMRAM] unsigned char 
 17956 ;; Auto vars:     Size  Location     Type
 17957 ;;  i               2   71[COMRAM] unsigned int 
 17958 ;;  i               2   67[COMRAM] unsigned int 
 17959 ;;  j               2   69[COMRAM] unsigned int 
 17960 ;;  LED_COLOR_AR   54   13[COMRAM] unsigned char [54]
 17961 ;; Return value:  Size  Location     Type
 17962 ;;                  1    wreg      void 
 17963 ;; Registers used:
 17964 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 17965 ;; Tracked objects:
 17966 ;;		On entry : 0/0
 17967 ;;		On exit  : 0/0
 17968 ;;		Unchanged: 0/0
 17969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17970 ;;      Params:         3       0       0       0       0       0       0
 17971 ;;      Locals:        60       0       0       0       0       0       0
 17972 ;;      Temps:          4       0       0       0       0       0       0
 17973 ;;      Totals:        67       0       0       0       0       0       0
 17974 ;;Total ram usage:       67 bytes
 17975 ;; Hardware stack levels used:    1
 17976 ;; Hardware stack levels required when called:    3
 17977 ;; This function calls:
 17978 ;;		_LED_RET
 17979 ;;		_OUT_BLUE
 17980 ;;		_OUT_GREEN
 17981 ;;		_OUT_NONE
 17982 ;;		_OUT_ORANGE
 17983 ;;		_OUT_RED
 17984 ;;		_OUT_WHITE
 17985 ;;		_OUT_YELLOW
 17986 ;;		___wmul
 17987 ;; This function is called by:
 17988 ;;		_main
 17989 ;;		_Special_input
 17990 ;;		_animation_1
 17991 ;;		_animation_2
 17992 ;;		_animation_3
 17993 ;;		_animation_4
 17994 ;;		_command_turn_ARRAY_3_end
 17995 ;;		_command_turn_ARRAY_2_2
 17996 ;;		_command_turn_ARRAY_2_3
 17997 ;; This function uses a non-reentrant model
 17998 ;;
 17999                           
 18000                           	psect	text75
 18001  00423E                     __ptext75:
 18002                           	opt callstack 0
 18003  00423E                     _OUT_LED_ARRAY:
 18004                           	opt callstack 26
 18005                           
 18006                           ;master/SerialLED_PIC18F25K22.c: 111:     unsigned char LED_COLOR_ARRAY[54];;master/Seri
      +                          alLED_PIC18F25K22.c: 112:     for(unsigned int j=0;j<6;j++){
 18007                           
 18008                           ;incstack = 0
 18009  00423E  0E00               	movlw	0
 18010  004240  6E47               	movwf	OUT_LED_ARRAY@j+1,c
 18011  004242  0E00               	movlw	0
 18012  004244  6E46               	movwf	OUT_LED_ARRAY@j,c
 18013  004246                     l7256:
 18014                           
 18015                           ;master/SerialLED_PIC18F25K22.c: 113:         for(unsigned int i=0;i<9;i++){
 18016  004246  0E00               	movlw	0
 18017  004248  6E49               	movwf	OUT_LED_ARRAY@i+1,c
 18018  00424A  0E00               	movlw	0
 18019  00424C  6E48               	movwf	OUT_LED_ARRAY@i,c
 18020  00424E                     l7262:
 18021                           
 18022                           ;master/SerialLED_PIC18F25K22.c: 114:             LED_COLOR_ARRAY[j*9 +i]=LED_COLOR_ARRA
      +                          Y_2D[j][i];
 18023  00424E  C046  F001         	movff	OUT_LED_ARRAY@j,___wmul@multiplier
 18024  004252  C047  F002         	movff	OUT_LED_ARRAY@j+1,___wmul@multiplier+1
 18025  004256  0E00               	movlw	0
 18026  004258  6E04               	movwf	___wmul@multiplicand+1,c
 18027  00425A  0E09               	movlw	9
 18028  00425C  6E03               	movwf	___wmul@multiplicand,c
 18029  00425E  ECFB  F014         	call	___wmul	;wreg free
 18030  004262  C007  F00A         	movff	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D,??_OUT_LED_ARRAY
 18031  004266  C008  F00B         	movff	OUT_LED_ARRAY@LED_COLOR_ARRAY_2D+1,??_OUT_LED_ARRAY+1
 18032  00426A  5001               	movf	?___wmul,w,c
 18033  00426C  260A               	addwf	??_OUT_LED_ARRAY,f,c
 18034  00426E  5002               	movf	?___wmul+1,w,c
 18035  004270  220B               	addwfc	??_OUT_LED_ARRAY+1,f,c
 18036  004272  5048               	movf	OUT_LED_ARRAY@i,w,c
 18037  004274  240A               	addwf	??_OUT_LED_ARRAY,w,c
 18038  004276  6ED9               	movwf	fsr2l,c
 18039  004278  5049               	movf	OUT_LED_ARRAY@i+1,w,c
 18040  00427A  200B               	addwfc	??_OUT_LED_ARRAY+1,w,c
 18041  00427C  6EDA               	movwf	fsr2h,c
 18042  00427E  C046  F001         	movff	OUT_LED_ARRAY@j,___wmul@multiplier
 18043  004282  C047  F002         	movff	OUT_LED_ARRAY@j+1,___wmul@multiplier+1
 18044  004286  0E00               	movlw	0
 18045  004288  6E04               	movwf	___wmul@multiplicand+1,c
 18046  00428A  0E09               	movlw	9
 18047  00428C  6E03               	movwf	___wmul@multiplicand,c
 18048  00428E  ECFB  F014         	call	___wmul	;wreg free
 18049  004292  0E0E               	movlw	low OUT_LED_ARRAY@LED_COLOR_ARRAY
 18050  004294  6E0C               	movwf	(??_OUT_LED_ARRAY+2)& (0+255),c
 18051  004296  0E00               	movlw	high OUT_LED_ARRAY@LED_COLOR_ARRAY
 18052  004298  6E0D               	movwf	(??_OUT_LED_ARRAY+3)& (0+255),c
 18053  00429A  5001               	movf	?___wmul,w,c
 18054  00429C  260C               	addwf	??_OUT_LED_ARRAY+2,f,c
 18055  00429E  5002               	movf	?___wmul+1,w,c
 18056  0042A0  220D               	addwfc	??_OUT_LED_ARRAY+3,f,c
 18057  0042A2  5048               	movf	OUT_LED_ARRAY@i,w,c
 18058  0042A4  240C               	addwf	??_OUT_LED_ARRAY+2,w,c
 18059  0042A6  6EE1               	movwf	fsr1l,c
 18060  0042A8  5049               	movf	OUT_LED_ARRAY@i+1,w,c
 18061  0042AA  200D               	addwfc	??_OUT_LED_ARRAY+3,w,c
 18062  0042AC  6EE2               	movwf	fsr1h,c
 18063  0042AE  CFDF FFE7          	movff	indf2,indf1
 18064                           
 18065                           ;master/SerialLED_PIC18F25K22.c: 115:         }
 18066  0042B2  4A48               	infsnz	OUT_LED_ARRAY@i,f,c
 18067  0042B4  2A49               	incf	OUT_LED_ARRAY@i+1,f,c
 18068  0042B6  5049               	movf	OUT_LED_ARRAY@i+1,w,c
 18069  0042B8  E104               	bnz	u4550
 18070  0042BA  0E09               	movlw	9
 18071  0042BC  5C48               	subwf	OUT_LED_ARRAY@i,w,c
 18072  0042BE  A0D8               	btfss	status,0,c
 18073  0042C0  D7C6               	goto	l7262
 18074  0042C2                     u4550:
 18075                           
 18076                           ;master/SerialLED_PIC18F25K22.c: 116:     }
 18077  0042C2  4A46               	infsnz	OUT_LED_ARRAY@j,f,c
 18078  0042C4  2A47               	incf	OUT_LED_ARRAY@j+1,f,c
 18079  0042C6  5047               	movf	OUT_LED_ARRAY@j+1,w,c
 18080  0042C8  E104               	bnz	u4560
 18081  0042CA  0E06               	movlw	6
 18082  0042CC  5C46               	subwf	OUT_LED_ARRAY@j,w,c
 18083  0042CE  A0D8               	btfss	status,0,c
 18084  0042D0  D7BA               	goto	l7256
 18085  0042D2                     u4560:
 18086                           
 18087                           ;master/SerialLED_PIC18F25K22.c: 117:     for (unsigned int i = 0; i < 54; i++) {
 18088  0042D2  0E00               	movlw	0
 18089  0042D4  6E45               	movwf	OUT_LED_ARRAY@i_1494+1,c
 18090  0042D6  0E00               	movlw	0
 18091  0042D8  6E44               	movwf	OUT_LED_ARRAY@i_1494,c
 18092  0042DA                     l7278:
 18093                           
 18094                           ;master/SerialLED_PIC18F25K22.c: 118:         (*LED_COLOR[LED_COLOR_ARRAY[i]])(LED_POWER
      +                          );
 18095  0042DA  0E0E               	movlw	low OUT_LED_ARRAY@LED_COLOR_ARRAY
 18096  0042DC  2444               	addwf	OUT_LED_ARRAY@i_1494,w,c
 18097  0042DE  6ED9               	movwf	fsr2l,c
 18098  0042E0  0E00               	movlw	high OUT_LED_ARRAY@LED_COLOR_ARRAY
 18099  0042E2  2045               	addwfc	OUT_LED_ARRAY@i_1494+1,w,c
 18100  0042E4  6EDA               	movwf	fsr2h,c
 18101  0042E6  50DF               	movf	indf2,w,c
 18102  0042E8  6E0A               	movwf	??_OUT_LED_ARRAY& (0+255),c
 18103  0042EA  500A               	movf	??_OUT_LED_ARRAY,w,c
 18104  0042EC  0D02               	mullw	2
 18105  0042EE  0E73               	movlw	low _LED_COLOR
 18106  0042F0  24F3               	addwf	prodl,w,c
 18107  0042F2  6ED9               	movwf	fsr2l,c
 18108  0042F4  0E01               	movlw	high _LED_COLOR
 18109  0042F6  20F4               	addwfc	prodh,w,c
 18110  0042F8  6EDA               	movwf	fsr2h,c
 18111  0042FA  D801               	call	u4578
 18112  0042FC  D00B               	goto	u4579
 18113  0042FE                     u4578:
 18114  0042FE  0005               	push	
 18115  004300  6EFA               	movwf	pclath,c
 18116  004302  50DE               	movf	postinc2,w,c
 18117  004304  6EFD               	movwf	tosl,c
 18118  004306  50DE               	movf	postinc2,w,c
 18119  004308  6EFE               	movwf	tosh,c
 18120  00430A  50F8               	movf	tblptru,w,c
 18121  00430C  6EFF               	movwf	tosu,c
 18122  00430E  50FA               	movf	pclath,w,c
 18123  004310  5009               	movf	OUT_LED_ARRAY@LED_POWER,w,c
 18124  004312  0012               	return		;indir
 18125  004314                     u4579:
 18126                           
 18127                           ;master/SerialLED_PIC18F25K22.c: 119:     }
 18128  004314  4A44               	infsnz	OUT_LED_ARRAY@i_1494,f,c
 18129  004316  2A45               	incf	OUT_LED_ARRAY@i_1494+1,f,c
 18130  004318  5045               	movf	OUT_LED_ARRAY@i_1494+1,w,c
 18131  00431A  E104               	bnz	u4580
 18132  00431C  0E36               	movlw	54
 18133  00431E  5C44               	subwf	OUT_LED_ARRAY@i_1494,w,c
 18134  004320  A0D8               	btfss	status,0,c
 18135  004322  D7DB               	goto	l7278
 18136  004324                     u4580:
 18137                           
 18138                           ;master/SerialLED_PIC18F25K22.c: 120:     LED_RET();
 18139  004324  ECA2  F014         	call	_LED_RET
 18140  004328  0012               	return		;funcret
 18141  00432A                     __end_of_OUT_LED_ARRAY:
 18142                           	opt callstack 0
 18143                           
 18144 ;; *************** function ___wmul *****************
 18145 ;; Defined at:
 18146 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 18147 ;; Parameters:    Size  Location     Type
 18148 ;;  multiplier      2    0[COMRAM] unsigned int 
 18149 ;;  multiplicand    2    2[COMRAM] unsigned int 
 18150 ;; Auto vars:     Size  Location     Type
 18151 ;;  product         2    4[COMRAM] unsigned int 
 18152 ;; Return value:  Size  Location     Type
 18153 ;;                  2    0[COMRAM] unsigned int 
 18154 ;; Registers used:
 18155 ;;		wreg, status,2, status,0, prodl, prodh
 18156 ;; Tracked objects:
 18157 ;;		On entry : 0/0
 18158 ;;		On exit  : 0/0
 18159 ;;		Unchanged: 0/0
 18160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18161 ;;      Params:         4       0       0       0       0       0       0
 18162 ;;      Locals:         2       0       0       0       0       0       0
 18163 ;;      Temps:          0       0       0       0       0       0       0
 18164 ;;      Totals:         6       0       0       0       0       0       0
 18165 ;;Total ram usage:        6 bytes
 18166 ;; Hardware stack levels used:    1
 18167 ;; This function calls:
 18168 ;;		Nothing
 18169 ;; This function is called by:
 18170 ;;		_SPI_D2S
 18171 ;;		_command_turn_CE
 18172 ;;		_OUT_LED_ARRAY
 18173 ;;		_set_all_LED_ARRAY
 18174 ;;		_convert_ROTtoLED
 18175 ;; This function uses a non-reentrant model
 18176 ;;
 18177                           
 18178                           	psect	text76
 18179  0029F6                     __ptext76:
 18180                           	opt callstack 0
 18181  0029F6                     ___wmul:
 18182                           	opt callstack 29
 18183                           
 18184                           ;incstack = 0
 18185  0029F6  5001               	movf	___wmul@multiplier,w,c
 18186  0029F8  0203               	mulwf	___wmul@multiplicand,c
 18187  0029FA  CFF3 F005          	movff	prodl,___wmul@product
 18188  0029FE  CFF4 F006          	movff	prodh,___wmul@product+1
 18189  002A02  5001               	movf	___wmul@multiplier,w,c
 18190  002A04  0204               	mulwf	___wmul@multiplicand+1,c
 18191  002A06  50F3               	movf	prodl,w,c
 18192  002A08  2606               	addwf	___wmul@product+1,f,c
 18193  002A0A  5002               	movf	___wmul@multiplier+1,w,c
 18194  002A0C  0203               	mulwf	___wmul@multiplicand,c
 18195  002A0E  50F3               	movf	prodl,w,c
 18196  002A10  2606               	addwf	___wmul@product+1,f,c
 18197  002A12  C005  F001         	movff	___wmul@product,?___wmul
 18198  002A16  C006  F002         	movff	___wmul@product+1,?___wmul+1
 18199  002A1A  0012               	return		;funcret
 18200  002A1C                     __end_of___wmul:
 18201                           	opt callstack 0
 18202                           
 18203 ;; *************** function _OUT_NONE *****************
 18204 ;; Defined at:
 18205 ;;		line 12 in file "master/SerialLED_PIC18F25K22.c"
 18206 ;; Parameters:    Size  Location     Type
 18207 ;;  LED_POWER       1    wreg     unsigned char 
 18208 ;; Auto vars:     Size  Location     Type
 18209 ;;  LED_POWER       1    0[COMRAM] unsigned char 
 18210 ;; Return value:  Size  Location     Type
 18211 ;;                  1    wreg      void 
 18212 ;; Registers used:
 18213 ;;		wreg, status,2, status,0, cstack
 18214 ;; Tracked objects:
 18215 ;;		On entry : 0/0
 18216 ;;		On exit  : 0/0
 18217 ;;		Unchanged: 0/0
 18218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18219 ;;      Params:         0       0       0       0       0       0       0
 18220 ;;      Locals:         0       0       0       0       0       0       0
 18221 ;;      Temps:          0       0       0       0       0       0       0
 18222 ;;      Totals:         0       0       0       0       0       0       0
 18223 ;;Total ram usage:        0 bytes
 18224 ;; Hardware stack levels used:    1
 18225 ;; Hardware stack levels required when called:    2
 18226 ;; This function calls:
 18227 ;;		_OUT_CHECK
 18228 ;; This function is called by:
 18229 ;;		_OUT_LED_ARRAY
 18230 ;; This function uses a non-reentrant model
 18231 ;;
 18232                           
 18233                           	psect	text77
 18234  002828                     __ptext77:
 18235                           	opt callstack 0
 18236  002828                     _OUT_NONE:
 18237                           	opt callstack 26
 18238                           
 18239                           ;master/SerialLED_PIC18F25K22.c: 13:     OUT_CHECK(0);
 18240                           
 18241                           ;incstack = 0
 18242  002828  0E00               	movlw	0
 18243  00282A  ECC5  F015         	call	_OUT_CHECK
 18244                           
 18245                           ;master/SerialLED_PIC18F25K22.c: 14:     OUT_CHECK(0);
 18246  00282E  0E00               	movlw	0
 18247  002830  ECC5  F015         	call	_OUT_CHECK
 18248                           
 18249                           ;master/SerialLED_PIC18F25K22.c: 15:     OUT_CHECK(0);
 18250  002834  0E00               	movlw	0
 18251  002836  ECC5  F015         	call	_OUT_CHECK
 18252  00283A  0012               	return		;funcret
 18253  00283C                     __end_of_OUT_NONE:
 18254                           	opt callstack 0
 18255                           
 18256 ;; *************** function _OUT_ORANGE *****************
 18257 ;; Defined at:
 18258 ;;		line 50 in file "master/SerialLED_PIC18F25K22.c"
 18259 ;; Parameters:    Size  Location     Type
 18260 ;;  LED_POWER       1    wreg     unsigned char 
 18261 ;; Auto vars:     Size  Location     Type
 18262 ;;  LED_POWER       1    3[COMRAM] unsigned char 
 18263 ;; Return value:  Size  Location     Type
 18264 ;;                  1    wreg      void 
 18265 ;; Registers used:
 18266 ;;		wreg, status,2, status,0, cstack
 18267 ;; Tracked objects:
 18268 ;;		On entry : 0/0
 18269 ;;		On exit  : 0/0
 18270 ;;		Unchanged: 0/0
 18271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18272 ;;      Params:         0       0       0       0       0       0       0
 18273 ;;      Locals:         1       0       0       0       0       0       0
 18274 ;;      Temps:          0       0       0       0       0       0       0
 18275 ;;      Totals:         1       0       0       0       0       0       0
 18276 ;;Total ram usage:        1 bytes
 18277 ;; Hardware stack levels used:    1
 18278 ;; Hardware stack levels required when called:    2
 18279 ;; This function calls:
 18280 ;;		_OUT_CHECK
 18281 ;; This function is called by:
 18282 ;;		_OUT_LED_ARRAY
 18283 ;; This function uses a non-reentrant model
 18284 ;;
 18285                           
 18286                           	psect	text78
 18287  0028AA                     __ptext78:
 18288                           	opt callstack 0
 18289  0028AA                     _OUT_ORANGE:
 18290                           	opt callstack 26
 18291                           
 18292                           ;incstack = 0
 18293                           ;OUT_ORANGE@LED_POWER stored from wreg
 18294  0028AA  6E04               	movwf	OUT_ORANGE@LED_POWER,c
 18295                           
 18296                           ;master/SerialLED_PIC18F25K22.c: 51:     OUT_CHECK(LED_POWER);
 18297  0028AC  5004               	movf	OUT_ORANGE@LED_POWER,w,c
 18298  0028AE  ECC5  F015         	call	_OUT_CHECK
 18299                           
 18300                           ;master/SerialLED_PIC18F25K22.c: 52:     OUT_CHECK(LED_POWER>>1);
 18301  0028B2  90D8               	bcf	status,0,c
 18302  0028B4  3004               	rrcf	OUT_ORANGE@LED_POWER,w,c
 18303  0028B6  ECC5  F015         	call	_OUT_CHECK
 18304                           
 18305                           ;master/SerialLED_PIC18F25K22.c: 53:     OUT_CHECK(0);
 18306  0028BA  0E00               	movlw	0
 18307  0028BC  ECC5  F015         	call	_OUT_CHECK
 18308  0028C0  0012               	return		;funcret
 18309  0028C2                     __end_of_OUT_ORANGE:
 18310                           	opt callstack 0
 18311                           
 18312 ;; *************** function _OUT_BLUE *****************
 18313 ;; Defined at:
 18314 ;;		line 31 in file "master/SerialLED_PIC18F25K22.c"
 18315 ;; Parameters:    Size  Location     Type
 18316 ;;  LED_POWER       1    wreg     unsigned char 
 18317 ;; Auto vars:     Size  Location     Type
 18318 ;;  LED_POWER       1    3[COMRAM] unsigned char 
 18319 ;; Return value:  Size  Location     Type
 18320 ;;                  1    wreg      void 
 18321 ;; Registers used:
 18322 ;;		wreg, status,2, status,0, cstack
 18323 ;; Tracked objects:
 18324 ;;		On entry : 0/0
 18325 ;;		On exit  : 0/0
 18326 ;;		Unchanged: 0/0
 18327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18328 ;;      Params:         0       0       0       0       0       0       0
 18329 ;;      Locals:         1       0       0       0       0       0       0
 18330 ;;      Temps:          0       0       0       0       0       0       0
 18331 ;;      Totals:         1       0       0       0       0       0       0
 18332 ;;Total ram usage:        1 bytes
 18333 ;; Hardware stack levels used:    1
 18334 ;; Hardware stack levels required when called:    2
 18335 ;; This function calls:
 18336 ;;		_OUT_CHECK
 18337 ;; This function is called by:
 18338 ;;		_OUT_LED_ARRAY
 18339 ;; This function uses a non-reentrant model
 18340 ;;
 18341                           
 18342                           	psect	text79
 18343  002894                     __ptext79:
 18344                           	opt callstack 0
 18345  002894                     _OUT_BLUE:
 18346                           	opt callstack 26
 18347                           
 18348                           ;incstack = 0
 18349                           ;OUT_BLUE@LED_POWER stored from wreg
 18350  002894  6E04               	movwf	OUT_BLUE@LED_POWER,c
 18351                           
 18352                           ;master/SerialLED_PIC18F25K22.c: 32:     OUT_CHECK(0);
 18353  002896  0E00               	movlw	0
 18354  002898  ECC5  F015         	call	_OUT_CHECK
 18355                           
 18356                           ;master/SerialLED_PIC18F25K22.c: 33:     OUT_CHECK(0);
 18357  00289C  0E00               	movlw	0
 18358  00289E  ECC5  F015         	call	_OUT_CHECK
 18359                           
 18360                           ;master/SerialLED_PIC18F25K22.c: 34:     OUT_CHECK(LED_POWER);
 18361  0028A2  5004               	movf	OUT_BLUE@LED_POWER,w,c
 18362  0028A4  ECC5  F015         	call	_OUT_CHECK
 18363  0028A8  0012               	return		;funcret
 18364  0028AA                     __end_of_OUT_BLUE:
 18365                           	opt callstack 0
 18366                           
 18367 ;; *************** function _OUT_RED *****************
 18368 ;; Defined at:
 18369 ;;		line 18 in file "master/SerialLED_PIC18F25K22.c"
 18370 ;; Parameters:    Size  Location     Type
 18371 ;;  LED_POWER       1    wreg     unsigned char 
 18372 ;; Auto vars:     Size  Location     Type
 18373 ;;  LED_POWER       1    3[COMRAM] unsigned char 
 18374 ;; Return value:  Size  Location     Type
 18375 ;;                  1    wreg      void 
 18376 ;; Registers used:
 18377 ;;		wreg, status,2, status,0, cstack
 18378 ;; Tracked objects:
 18379 ;;		On entry : 0/0
 18380 ;;		On exit  : 0/0
 18381 ;;		Unchanged: 0/0
 18382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18383 ;;      Params:         0       0       0       0       0       0       0
 18384 ;;      Locals:         1       0       0       0       0       0       0
 18385 ;;      Temps:          0       0       0       0       0       0       0
 18386 ;;      Totals:         1       0       0       0       0       0       0
 18387 ;;Total ram usage:        1 bytes
 18388 ;; Hardware stack levels used:    1
 18389 ;; Hardware stack levels required when called:    2
 18390 ;; This function calls:
 18391 ;;		_OUT_CHECK
 18392 ;; This function is called by:
 18393 ;;		_OUT_LED_ARRAY
 18394 ;; This function uses a non-reentrant model
 18395 ;;
 18396                           
 18397                           	psect	text80
 18398  00287E                     __ptext80:
 18399                           	opt callstack 0
 18400  00287E                     _OUT_RED:
 18401                           	opt callstack 26
 18402                           
 18403                           ;incstack = 0
 18404                           ;OUT_RED@LED_POWER stored from wreg
 18405  00287E  6E04               	movwf	OUT_RED@LED_POWER,c
 18406                           
 18407                           ;master/SerialLED_PIC18F25K22.c: 20:     OUT_CHECK(LED_POWER);
 18408  002880  5004               	movf	OUT_RED@LED_POWER,w,c
 18409  002882  ECC5  F015         	call	_OUT_CHECK
 18410                           
 18411                           ;master/SerialLED_PIC18F25K22.c: 21:     OUT_CHECK(0);
 18412  002886  0E00               	movlw	0
 18413  002888  ECC5  F015         	call	_OUT_CHECK
 18414                           
 18415                           ;master/SerialLED_PIC18F25K22.c: 22:     OUT_CHECK(0);
 18416  00288C  0E00               	movlw	0
 18417  00288E  ECC5  F015         	call	_OUT_CHECK
 18418  002892  0012               	return		;funcret
 18419  002894                     __end_of_OUT_RED:
 18420                           	opt callstack 0
 18421                           
 18422 ;; *************** function _OUT_GREEN *****************
 18423 ;; Defined at:
 18424 ;;		line 25 in file "master/SerialLED_PIC18F25K22.c"
 18425 ;; Parameters:    Size  Location     Type
 18426 ;;  LED_POWER       1    wreg     unsigned char 
 18427 ;; Auto vars:     Size  Location     Type
 18428 ;;  LED_POWER       1    3[COMRAM] unsigned char 
 18429 ;; Return value:  Size  Location     Type
 18430 ;;                  1    wreg      void 
 18431 ;; Registers used:
 18432 ;;		wreg, status,2, status,0, cstack
 18433 ;; Tracked objects:
 18434 ;;		On entry : 0/0
 18435 ;;		On exit  : 0/0
 18436 ;;		Unchanged: 0/0
 18437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18438 ;;      Params:         0       0       0       0       0       0       0
 18439 ;;      Locals:         1       0       0       0       0       0       0
 18440 ;;      Temps:          0       0       0       0       0       0       0
 18441 ;;      Totals:         1       0       0       0       0       0       0
 18442 ;;Total ram usage:        1 bytes
 18443 ;; Hardware stack levels used:    1
 18444 ;; Hardware stack levels required when called:    2
 18445 ;; This function calls:
 18446 ;;		_OUT_CHECK
 18447 ;; This function is called by:
 18448 ;;		_OUT_LED_ARRAY
 18449 ;; This function uses a non-reentrant model
 18450 ;;
 18451                           
 18452                           	psect	text81
 18453  002868                     __ptext81:
 18454                           	opt callstack 0
 18455  002868                     _OUT_GREEN:
 18456                           	opt callstack 26
 18457                           
 18458                           ;incstack = 0
 18459                           ;OUT_GREEN@LED_POWER stored from wreg
 18460  002868  6E04               	movwf	OUT_GREEN@LED_POWER,c
 18461                           
 18462                           ;master/SerialLED_PIC18F25K22.c: 26:     OUT_CHECK(0);
 18463  00286A  0E00               	movlw	0
 18464  00286C  ECC5  F015         	call	_OUT_CHECK
 18465                           
 18466                           ;master/SerialLED_PIC18F25K22.c: 27:     OUT_CHECK(LED_POWER);
 18467  002870  5004               	movf	OUT_GREEN@LED_POWER,w,c
 18468  002872  ECC5  F015         	call	_OUT_CHECK
 18469                           
 18470                           ;master/SerialLED_PIC18F25K22.c: 28:     OUT_CHECK(0);
 18471  002876  0E00               	movlw	0
 18472  002878  ECC5  F015         	call	_OUT_CHECK
 18473  00287C  0012               	return		;funcret
 18474  00287E                     __end_of_OUT_GREEN:
 18475                           	opt callstack 0
 18476                           
 18477 ;; *************** function _OUT_WHITE *****************
 18478 ;; Defined at:
 18479 ;;		line 37 in file "master/SerialLED_PIC18F25K22.c"
 18480 ;; Parameters:    Size  Location     Type
 18481 ;;  LED_POWER       1    wreg     unsigned char 
 18482 ;; Auto vars:     Size  Location     Type
 18483 ;;  LED_POWER       1    3[COMRAM] unsigned char 
 18484 ;; Return value:  Size  Location     Type
 18485 ;;                  1    wreg      void 
 18486 ;; Registers used:
 18487 ;;		wreg, status,2, status,0, cstack
 18488 ;; Tracked objects:
 18489 ;;		On entry : 0/0
 18490 ;;		On exit  : 0/0
 18491 ;;		Unchanged: 0/0
 18492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18493 ;;      Params:         0       0       0       0       0       0       0
 18494 ;;      Locals:         1       0       0       0       0       0       0
 18495 ;;      Temps:          0       0       0       0       0       0       0
 18496 ;;      Totals:         1       0       0       0       0       0       0
 18497 ;;Total ram usage:        1 bytes
 18498 ;; Hardware stack levels used:    1
 18499 ;; Hardware stack levels required when called:    2
 18500 ;; This function calls:
 18501 ;;		_OUT_CHECK
 18502 ;; This function is called by:
 18503 ;;		_OUT_LED_ARRAY
 18504 ;; This function uses a non-reentrant model
 18505 ;;
 18506                           
 18507                           	psect	text82
 18508  002928                     __ptext82:
 18509                           	opt callstack 0
 18510  002928                     _OUT_WHITE:
 18511                           	opt callstack 26
 18512                           
 18513                           ;incstack = 0
 18514                           ;OUT_WHITE@LED_POWER stored from wreg
 18515  002928  6E04               	movwf	OUT_WHITE@LED_POWER,c
 18516                           
 18517                           ;master/SerialLED_PIC18F25K22.c: 38:     OUT_CHECK(LED_POWER>>1);
 18518  00292A  90D8               	bcf	status,0,c
 18519  00292C  3004               	rrcf	OUT_WHITE@LED_POWER,w,c
 18520  00292E  ECC5  F015         	call	_OUT_CHECK
 18521                           
 18522                           ;master/SerialLED_PIC18F25K22.c: 39:     OUT_CHECK(LED_POWER>>1);
 18523  002932  90D8               	bcf	status,0,c
 18524  002934  3004               	rrcf	OUT_WHITE@LED_POWER,w,c
 18525  002936  ECC5  F015         	call	_OUT_CHECK
 18526                           
 18527                           ;master/SerialLED_PIC18F25K22.c: 40:     OUT_CHECK(LED_POWER>>1);
 18528  00293A  90D8               	bcf	status,0,c
 18529  00293C  3004               	rrcf	OUT_WHITE@LED_POWER,w,c
 18530  00293E  ECC5  F015         	call	_OUT_CHECK
 18531  002942  0012               	return		;funcret
 18532  002944                     __end_of_OUT_WHITE:
 18533                           	opt callstack 0
 18534                           
 18535 ;; *************** function _OUT_YELLOW *****************
 18536 ;; Defined at:
 18537 ;;		line 44 in file "master/SerialLED_PIC18F25K22.c"
 18538 ;; Parameters:    Size  Location     Type
 18539 ;;  LED_POWER       1    wreg     unsigned char 
 18540 ;; Auto vars:     Size  Location     Type
 18541 ;;  LED_POWER       1    3[COMRAM] unsigned char 
 18542 ;; Return value:  Size  Location     Type
 18543 ;;                  1    wreg      void 
 18544 ;; Registers used:
 18545 ;;		wreg, status,2, status,0, cstack
 18546 ;; Tracked objects:
 18547 ;;		On entry : 0/0
 18548 ;;		On exit  : 0/0
 18549 ;;		Unchanged: 0/0
 18550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18551 ;;      Params:         0       0       0       0       0       0       0
 18552 ;;      Locals:         1       0       0       0       0       0       0
 18553 ;;      Temps:          0       0       0       0       0       0       0
 18554 ;;      Totals:         1       0       0       0       0       0       0
 18555 ;;Total ram usage:        1 bytes
 18556 ;; Hardware stack levels used:    1
 18557 ;; Hardware stack levels required when called:    2
 18558 ;; This function calls:
 18559 ;;		_OUT_CHECK
 18560 ;; This function is called by:
 18561 ;;		_OUT_LED_ARRAY
 18562 ;; This function uses a non-reentrant model
 18563 ;;
 18564                           
 18565                           	psect	text83
 18566  0028F4                     __ptext83:
 18567                           	opt callstack 0
 18568  0028F4                     _OUT_YELLOW:
 18569                           	opt callstack 26
 18570                           
 18571                           ;incstack = 0
 18572                           ;OUT_YELLOW@LED_POWER stored from wreg
 18573  0028F4  6E04               	movwf	OUT_YELLOW@LED_POWER,c
 18574                           
 18575                           ;master/SerialLED_PIC18F25K22.c: 45:     OUT_CHECK(LED_POWER>>1);
 18576  0028F6  90D8               	bcf	status,0,c
 18577  0028F8  3004               	rrcf	OUT_YELLOW@LED_POWER,w,c
 18578  0028FA  ECC5  F015         	call	_OUT_CHECK
 18579                           
 18580                           ;master/SerialLED_PIC18F25K22.c: 46:     OUT_CHECK(LED_POWER>>1);
 18581  0028FE  90D8               	bcf	status,0,c
 18582  002900  3004               	rrcf	OUT_YELLOW@LED_POWER,w,c
 18583  002902  ECC5  F015         	call	_OUT_CHECK
 18584                           
 18585                           ;master/SerialLED_PIC18F25K22.c: 47:     OUT_CHECK(0);
 18586  002906  0E00               	movlw	0
 18587  002908  ECC5  F015         	call	_OUT_CHECK
 18588  00290C  0012               	return		;funcret
 18589  00290E                     __end_of_OUT_YELLOW:
 18590                           	opt callstack 0
 18591                           
 18592 ;; *************** function _OUT_CHECK *****************
 18593 ;; Defined at:
 18594 ;;		line 123 in file "master/SerialLED_PIC18F25K22.c"
 18595 ;; Parameters:    Size  Location     Type
 18596 ;;  LED_POWER       1    wreg     unsigned char 
 18597 ;; Auto vars:     Size  Location     Type
 18598 ;;  LED_POWER       1    0[COMRAM] unsigned char 
 18599 ;;  i               2    1[COMRAM] int 
 18600 ;; Return value:  Size  Location     Type
 18601 ;;                  1    wreg      void 
 18602 ;; Registers used:
 18603 ;;		wreg, status,2, status,0, cstack
 18604 ;; Tracked objects:
 18605 ;;		On entry : 0/0
 18606 ;;		On exit  : 0/0
 18607 ;;		Unchanged: 0/0
 18608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18609 ;;      Params:         0       0       0       0       0       0       0
 18610 ;;      Locals:         3       0       0       0       0       0       0
 18611 ;;      Temps:          0       0       0       0       0       0       0
 18612 ;;      Totals:         3       0       0       0       0       0       0
 18613 ;;Total ram usage:        3 bytes
 18614 ;; Hardware stack levels used:    1
 18615 ;; Hardware stack levels required when called:    1
 18616 ;; This function calls:
 18617 ;;		_OUT_HIGH
 18618 ;;		_OUT_LOW
 18619 ;; This function is called by:
 18620 ;;		_OUT_NONE
 18621 ;;		_OUT_RED
 18622 ;;		_OUT_GREEN
 18623 ;;		_OUT_BLUE
 18624 ;;		_OUT_WHITE
 18625 ;;		_OUT_YELLOW
 18626 ;;		_OUT_ORANGE
 18627 ;; This function uses a non-reentrant model
 18628 ;;
 18629                           
 18630                           	psect	text84
 18631  002B8A                     __ptext84:
 18632                           	opt callstack 0
 18633  002B8A                     _OUT_CHECK:
 18634                           	opt callstack 26
 18635                           
 18636                           ;incstack = 0
 18637                           ;OUT_CHECK@LED_POWER stored from wreg
 18638  002B8A  6E01               	movwf	OUT_CHECK@LED_POWER,c
 18639                           
 18640                           ;master/SerialLED_PIC18F25K22.c: 124:     for (int i = 0; i < 8; i++) {
 18641  002B8C  0E00               	movlw	0
 18642  002B8E  6E03               	movwf	OUT_CHECK@i+1,c
 18643  002B90  0E00               	movlw	0
 18644  002B92  6E02               	movwf	OUT_CHECK@i,c
 18645  002B94                     l842:
 18646                           
 18647                           ;master/SerialLED_PIC18F25K22.c: 125:         if ((LED_POWER & 0x80) == 0x80) {
 18648  002B94  AE01               	btfss	OUT_CHECK@LED_POWER,7,c
 18649  002B96  D003               	goto	l6856
 18650                           
 18651                           ;master/SerialLED_PIC18F25K22.c: 126:             OUT_HIGH();
 18652  002B98  ECB3  F014         	call	_OUT_HIGH	;wreg free
 18653                           
 18654                           ;master/SerialLED_PIC18F25K22.c: 127:         } else {
 18655  002B9C  D002               	goto	l6858
 18656  002B9E                     l6856:
 18657                           
 18658                           ;master/SerialLED_PIC18F25K22.c: 128:             OUT_LOW();
 18659  002B9E  ECC5  F014         	call	_OUT_LOW	;wreg free
 18660  002BA2                     l6858:
 18661                           
 18662                           ;master/SerialLED_PIC18F25K22.c: 130:         LED_POWER <<= 1;
 18663  002BA2  90D8               	bcf	status,0,c
 18664  002BA4  3601               	rlcf	OUT_CHECK@LED_POWER,f,c
 18665                           
 18666                           ;master/SerialLED_PIC18F25K22.c: 131:     }
 18667  002BA6  4A02               	infsnz	OUT_CHECK@i,f,c
 18668  002BA8  2A03               	incf	OUT_CHECK@i+1,f,c
 18669  002BAA  BE03               	btfsc	OUT_CHECK@i+1,7,c
 18670  002BAC  D7F3               	goto	l842
 18671  002BAE  5003               	movf	OUT_CHECK@i+1,w,c
 18672  002BB0  E105               	bnz	u4230
 18673  002BB2  0E08               	movlw	8
 18674  002BB4  5C02               	subwf	OUT_CHECK@i,w,c
 18675  002BB6  B0D8               	btfsc	status,0,c
 18676  002BB8  0012               	return	
 18677  002BBA  D7EC               	goto	l842
 18678  002BBC                     u4230:
 18679  002BBC  0012               	return		;funcret
 18680  002BBE                     __end_of_OUT_CHECK:
 18681                           	opt callstack 0
 18682                           
 18683 ;; *************** function _OUT_LOW *****************
 18684 ;; Defined at:
 18685 ;;		line 80 in file "master/SerialLED_PIC18F25K22.c"
 18686 ;; Parameters:    Size  Location     Type
 18687 ;;		None
 18688 ;; Auto vars:     Size  Location     Type
 18689 ;;		None
 18690 ;; Return value:  Size  Location     Type
 18691 ;;                  1    wreg      void 
 18692 ;; Registers used:
 18693 ;;		None
 18694 ;; Tracked objects:
 18695 ;;		On entry : 0/0
 18696 ;;		On exit  : 0/0
 18697 ;;		Unchanged: 0/0
 18698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18699 ;;      Params:         0       0       0       0       0       0       0
 18700 ;;      Locals:         0       0       0       0       0       0       0
 18701 ;;      Temps:          0       0       0       0       0       0       0
 18702 ;;      Totals:         0       0       0       0       0       0       0
 18703 ;;Total ram usage:        0 bytes
 18704 ;; Hardware stack levels used:    1
 18705 ;; This function calls:
 18706 ;;		Nothing
 18707 ;; This function is called by:
 18708 ;;		_OUT_CHECK
 18709 ;; This function uses a non-reentrant model
 18710 ;;
 18711                           
 18712                           	psect	text85
 18713  00298A                     __ptext85:
 18714                           	opt callstack 0
 18715  00298A                     _OUT_LOW:
 18716                           	opt callstack 26
 18717                           
 18718                           ;master/SerialLED_PIC18F25K22.c: 81:     PORTBbits.RB1 = 1;
 18719                           
 18720                           ;incstack = 0
 18721  00298A  8281               	bsf	3969,1,c	;volatile
 18722  00298C  F000               	nop		;# 
 18723  00298E  F000               	nop		;# 
 18724  002990  F000               	nop		;# 
 18725  002992  F000               	nop		;# 
 18726  002994  F000               	nop		;# 
 18727  002996  F000               	nop		;# 
 18728                           
 18729                           ;master/SerialLED_PIC18F25K22.c: 88:     PORTBbits.RB1 = 0;
 18730  002998  9281               	bcf	3969,1,c	;volatile
 18731  00299A  F000               	nop		;# 
 18732  00299C  F000               	nop		;# 
 18733  00299E  F000               	nop		;# 
 18734  0029A0  F000               	nop		;# 
 18735  0029A2  F000               	nop		;# 
 18736  0029A4  F000               	nop		;# 
 18737  0029A6  F000               	nop		;# 
 18738  0029A8  F000               	nop		;# 
 18739  0029AA  F000               	nop		;# 
 18740  0029AC  0012               	return		;funcret
 18741  0029AE                     __end_of_OUT_LOW:
 18742                           	opt callstack 0
 18743                           
 18744 ;; *************** function _OUT_HIGH *****************
 18745 ;; Defined at:
 18746 ;;		line 56 in file "master/SerialLED_PIC18F25K22.c"
 18747 ;; Parameters:    Size  Location     Type
 18748 ;;		None
 18749 ;; Auto vars:     Size  Location     Type
 18750 ;;		None
 18751 ;; Return value:  Size  Location     Type
 18752 ;;                  1    wreg      void 
 18753 ;; Registers used:
 18754 ;;		None
 18755 ;; Tracked objects:
 18756 ;;		On entry : 0/0
 18757 ;;		On exit  : 0/0
 18758 ;;		Unchanged: 0/0
 18759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18760 ;;      Params:         0       0       0       0       0       0       0
 18761 ;;      Locals:         0       0       0       0       0       0       0
 18762 ;;      Temps:          0       0       0       0       0       0       0
 18763 ;;      Totals:         0       0       0       0       0       0       0
 18764 ;;Total ram usage:        0 bytes
 18765 ;; Hardware stack levels used:    1
 18766 ;; This function calls:
 18767 ;;		Nothing
 18768 ;; This function is called by:
 18769 ;;		_OUT_CHECK
 18770 ;; This function uses a non-reentrant model
 18771 ;;
 18772                           
 18773                           	psect	text86
 18774  002966                     __ptext86:
 18775                           	opt callstack 0
 18776  002966                     _OUT_HIGH:
 18777                           	opt callstack 26
 18778                           
 18779                           ;master/SerialLED_PIC18F25K22.c: 57:     PORTBbits.RB1 = 1;
 18780                           
 18781                           ;incstack = 0
 18782  002966  8281               	bsf	3969,1,c	;volatile
 18783  002968  F000               	nop		;# 
 18784  00296A  F000               	nop		;# 
 18785  00296C  F000               	nop		;# 
 18786  00296E  F000               	nop		;# 
 18787  002970  F000               	nop		;# 
 18788  002972  F000               	nop		;# 
 18789  002974  F000               	nop		;# 
 18790  002976  F000               	nop		;# 
 18791  002978  F000               	nop		;# 
 18792  00297A  F000               	nop		;# 
 18793  00297C  F000               	nop		;# 
 18794  00297E  F000               	nop		;# 
 18795  002980  F000               	nop		;# 
 18796                           
 18797                           ;master/SerialLED_PIC18F25K22.c: 71:     PORTBbits.RB1 = 0;
 18798  002982  9281               	bcf	3969,1,c	;volatile
 18799  002984  F000               	nop		;# 
 18800  002986  F000               	nop		;# 
 18801  002988  0012               	return		;funcret
 18802  00298A                     __end_of_OUT_HIGH:
 18803                           	opt callstack 0
 18804                           
 18805 ;; *************** function _LED_RET *****************
 18806 ;; Defined at:
 18807 ;;		line 104 in file "master/SerialLED_PIC18F25K22.c"
 18808 ;; Parameters:    Size  Location     Type
 18809 ;;		None
 18810 ;; Auto vars:     Size  Location     Type
 18811 ;;  i               2    0[COMRAM] int 
 18812 ;; Return value:  Size  Location     Type
 18813 ;;                  1    wreg      void 
 18814 ;; Registers used:
 18815 ;;		wreg, status,2, status,0
 18816 ;; Tracked objects:
 18817 ;;		On entry : 0/0
 18818 ;;		On exit  : 0/0
 18819 ;;		Unchanged: 0/0
 18820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18821 ;;      Params:         0       0       0       0       0       0       0
 18822 ;;      Locals:         2       0       0       0       0       0       0
 18823 ;;      Temps:          0       0       0       0       0       0       0
 18824 ;;      Totals:         2       0       0       0       0       0       0
 18825 ;;Total ram usage:        2 bytes
 18826 ;; Hardware stack levels used:    1
 18827 ;; This function calls:
 18828 ;;		Nothing
 18829 ;; This function is called by:
 18830 ;;		_main
 18831 ;;		_OUT_LED_ARRAY
 18832 ;; This function uses a non-reentrant model
 18833 ;;
 18834                           
 18835                           	psect	text87
 18836  002944                     __ptext87:
 18837                           	opt callstack 0
 18838  002944                     _LED_RET:
 18839                           	opt callstack 28
 18840                           
 18841                           ;master/SerialLED_PIC18F25K22.c: 105:     PORTBbits.RB1 = 0;
 18842                           
 18843                           ;incstack = 0
 18844  002944  9281               	bcf	3969,1,c	;volatile
 18845                           
 18846                           ;master/SerialLED_PIC18F25K22.c: 106:     for (int i = 0; i < 10000; i++)
 18847  002946  0E00               	movlw	0
 18848  002948  6E02               	movwf	LED_RET@i+1,c
 18849  00294A  0E00               	movlw	0
 18850  00294C  6E01               	movwf	LED_RET@i,c
 18851  00294E                     l828:
 18852  00294E  F000               	nop		;# 
 18853  002950  4A01               	infsnz	LED_RET@i,f,c
 18854  002952  2A02               	incf	LED_RET@i+1,f,c
 18855  002954  BE02               	btfsc	LED_RET@i+1,7,c
 18856  002956  D7FB               	goto	l828
 18857  002958  0E10               	movlw	16
 18858  00295A  5C01               	subwf	LED_RET@i,w,c
 18859  00295C  0E27               	movlw	39
 18860  00295E  5802               	subwfb	LED_RET@i+1,w,c
 18861  002960  B0D8               	btfsc	status,0,c
 18862  002962  0012               	return	
 18863  002964  D7F4               	goto	l828
 18864  002966                     __end_of_LED_RET:
 18865                           	opt callstack 0
 18866                           
 18867 ;; *************** function _EEROM_R_SAVE *****************
 18868 ;; Defined at:
 18869 ;;		line 55 in file "master/EEROM_WR.c"
 18870 ;; Parameters:    Size  Location     Type
 18871 ;;		None
 18872 ;; Auto vars:     Size  Location     Type
 18873 ;;  i               2   58[COMRAM] int 
 18874 ;;  i               2   56[COMRAM] int 
 18875 ;;  i               2   54[COMRAM] int 
 18876 ;;  i               2   52[COMRAM] int 
 18877 ;;  i               2   50[COMRAM] int 
 18878 ;;  READ_ADDRESS    1   60[COMRAM] unsigned char 
 18879 ;; Return value:  Size  Location     Type
 18880 ;;                  1    wreg      void 
 18881 ;; Registers used:
 18882 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18883 ;; Tracked objects:
 18884 ;;		On entry : 0/0
 18885 ;;		On exit  : 0/0
 18886 ;;		Unchanged: 0/0
 18887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18888 ;;      Params:         0       0       0       0       0       0       0
 18889 ;;      Locals:        11       0       0       0       0       0       0
 18890 ;;      Temps:          0       0       0       0       0       0       0
 18891 ;;      Totals:        11       0       0       0       0       0       0
 18892 ;;Total ram usage:       11 bytes
 18893 ;; Hardware stack levels used:    1
 18894 ;; Hardware stack levels required when called:    1
 18895 ;; This function calls:
 18896 ;;		_DATAEE_ReadByte
 18897 ;;		_over_write_CE
 18898 ;; This function is called by:
 18899 ;;		_Special_input
 18900 ;; This function uses a non-reentrant model
 18901 ;;
 18902                           
 18903                           	psect	text88
 18904  004CB8                     __ptext88:
 18905                           	opt callstack 0
 18906  004CB8                     _EEROM_R_SAVE:
 18907                           	opt callstack 28
 18908                           
 18909                           ;master/EEROM_WR.c: 57:  char READ_ADDRESS;;master/EEROM_WR.c: 58:  if (DATAEE_ReadByte(
      +                          1) == 0xFF)
 18910                           
 18911                           ;incstack = 0
 18912  004CB8  0E01               	movlw	1
 18913  004CBA  EC0A  F014         	call	_DATAEE_ReadByte
 18914  004CBE  0AFF               	xorlw	255
 18915  004CC0  A4D8               	btfss	status,2,c
 18916  004CC2  D013               	goto	l9428
 18917                           
 18918                           ;master/EEROM_WR.c: 59:  {;master/EEROM_WR.c: 60:   over_write_CE(deff_CE);
 18919  004CC4  0EE9               	movlw	low _deff_CE
 18920  004CC6  6EF6               	movwf	tblptrl,c
 18921  004CC8                     	if	1	;There is more than 1 active tblptr byte
 18922  004CC8  0E7D               	movlw	high _deff_CE
 18923  004CCA  6EF7               	movwf	tblptrh,c
 18924  004CCC                     	endif
 18925  004CCC                     	if	0	;There are less than 3 active tblptr bytes
 18926  004CCC                     	endif
 18927  004CCC  EE00  F001         	lfsr	0,over_write_CE@write_CE
 18928  004CD0  0E2D               	movlw	45
 18929  004CD2                     u7360:
 18930  004CD2  0009               	tblrd		*+
 18931  004CD4  CFF5 FFEE          	movff	tablat,postinc0
 18932  004CD8  06E8               	decf	wreg,f,c
 18933  004CDA  E2FB               	bc	u7360
 18934  004CDC  0E2E               	movlw	46
 18935  004CDE  5EE9               	subwf	fsr0l,f,c
 18936  004CE0  6AE8               	clrf	wreg,c
 18937  004CE2  5AEA               	subwfb	fsr0h,f,c
 18938  004CE4  EC85  F023         	call	_over_write_CE	;wreg free
 18939  004CE8  0012               	return	
 18940  004CEA                     l9428:
 18941                           
 18942                           ;master/EEROM_WR.c: 63:  READ_ADDRESS = 49;
 18943  004CEA  0E31               	movlw	49
 18944  004CEC  6E3D               	movwf	EEROM_R_SAVE@READ_ADDRESS,c
 18945                           
 18946                           ;master/EEROM_WR.c: 65:  for (int i = 0; i < 8; i++)
 18947  004CEE  0E00               	movlw	0
 18948  004CF0  6E34               	movwf	EEROM_R_SAVE@i+1,c
 18949  004CF2  0E00               	movlw	0
 18950  004CF4  6E33               	movwf	EEROM_R_SAVE@i,c
 18951  004CF6                     l9434:
 18952                           
 18953                           ;master/EEROM_WR.c: 66:  {;master/EEROM_WR.c: 67:   save_CE.cp[i] = (unsigned char)DATAE
      +                          E_ReadByte(READ_ADDRESS);
 18954  004CF6  0E00               	movlw	low _save_CE
 18955  004CF8  2433               	addwf	EEROM_R_SAVE@i,w,c
 18956  004CFA  6ED9               	movwf	fsr2l,c
 18957  004CFC  0E02               	movlw	high _save_CE
 18958  004CFE  2034               	addwfc	EEROM_R_SAVE@i+1,w,c
 18959  004D00  6EDA               	movwf	fsr2h,c
 18960  004D02  503D               	movf	EEROM_R_SAVE@READ_ADDRESS,w,c
 18961  004D04  EC0A  F014         	call	_DATAEE_ReadByte
 18962  004D08  6EDF               	movwf	indf2,c
 18963                           
 18964                           ;master/EEROM_WR.c: 68:   READ_ADDRESS++;
 18965  004D0A  2A3D               	incf	EEROM_R_SAVE@READ_ADDRESS,f,c
 18966                           
 18967                           ;master/EEROM_WR.c: 69:  }
 18968  004D0C  4A33               	infsnz	EEROM_R_SAVE@i,f,c
 18969  004D0E  2A34               	incf	EEROM_R_SAVE@i+1,f,c
 18970  004D10  BE34               	btfsc	EEROM_R_SAVE@i+1,7,c
 18971  004D12  D7F1               	goto	l9434
 18972  004D14  5034               	movf	EEROM_R_SAVE@i+1,w,c
 18973  004D16  E104               	bnz	u7370
 18974  004D18  0E08               	movlw	8
 18975  004D1A  5C33               	subwf	EEROM_R_SAVE@i,w,c
 18976  004D1C  A0D8               	btfss	status,0,c
 18977  004D1E  D7EB               	goto	l9434
 18978  004D20                     u7370:
 18979                           
 18980                           ;master/EEROM_WR.c: 70:  for (int i = 0; i < 8; i++)
 18981  004D20  0E00               	movlw	0
 18982  004D22  6E36               	movwf	EEROM_R_SAVE@i_283+1,c
 18983  004D24  0E00               	movlw	0
 18984  004D26  6E35               	movwf	EEROM_R_SAVE@i_283,c
 18985  004D28                     l9448:
 18986                           
 18987                           ;master/EEROM_WR.c: 71:  {;master/EEROM_WR.c: 72:   save_CE.co[i] = (unsigned char)DATAE
      +                          E_ReadByte(READ_ADDRESS);
 18988  004D28  0E08               	movlw	low (_save_CE+8)
 18989  004D2A  2435               	addwf	EEROM_R_SAVE@i_283,w,c
 18990  004D2C  6ED9               	movwf	fsr2l,c
 18991  004D2E  0E02               	movlw	high (_save_CE+8)
 18992  004D30  2036               	addwfc	EEROM_R_SAVE@i_283+1,w,c
 18993  004D32  6EDA               	movwf	fsr2h,c
 18994  004D34  503D               	movf	EEROM_R_SAVE@READ_ADDRESS,w,c
 18995  004D36  EC0A  F014         	call	_DATAEE_ReadByte
 18996  004D3A  6EDF               	movwf	indf2,c
 18997                           
 18998                           ;master/EEROM_WR.c: 73:   READ_ADDRESS++;
 18999  004D3C  2A3D               	incf	EEROM_R_SAVE@READ_ADDRESS,f,c
 19000                           
 19001                           ;master/EEROM_WR.c: 74:  }
 19002  004D3E  4A35               	infsnz	EEROM_R_SAVE@i_283,f,c
 19003  004D40  2A36               	incf	EEROM_R_SAVE@i_283+1,f,c
 19004  004D42  BE36               	btfsc	EEROM_R_SAVE@i_283+1,7,c
 19005  004D44  D7F1               	goto	l9448
 19006  004D46  5036               	movf	EEROM_R_SAVE@i_283+1,w,c
 19007  004D48  E104               	bnz	u7380
 19008  004D4A  0E08               	movlw	8
 19009  004D4C  5C35               	subwf	EEROM_R_SAVE@i_283,w,c
 19010  004D4E  A0D8               	btfss	status,0,c
 19011  004D50  D7EB               	goto	l9448
 19012  004D52                     u7380:
 19013                           
 19014                           ;master/EEROM_WR.c: 75:  for (int i = 0; i < 12; i++)
 19015  004D52  0E00               	movlw	0
 19016  004D54  6E38               	movwf	EEROM_R_SAVE@i_284+1,c
 19017  004D56  0E00               	movlw	0
 19018  004D58  6E37               	movwf	EEROM_R_SAVE@i_284,c
 19019  004D5A                     l9462:
 19020                           
 19021                           ;master/EEROM_WR.c: 76:  {;master/EEROM_WR.c: 77:   save_CE.ep[i] = (unsigned char)DATAE
      +                          E_ReadByte(READ_ADDRESS);
 19022  004D5A  0E10               	movlw	low (_save_CE+16)
 19023  004D5C  2437               	addwf	EEROM_R_SAVE@i_284,w,c
 19024  004D5E  6ED9               	movwf	fsr2l,c
 19025  004D60  0E02               	movlw	high (_save_CE+16)
 19026  004D62  2038               	addwfc	EEROM_R_SAVE@i_284+1,w,c
 19027  004D64  6EDA               	movwf	fsr2h,c
 19028  004D66  503D               	movf	EEROM_R_SAVE@READ_ADDRESS,w,c
 19029  004D68  EC0A  F014         	call	_DATAEE_ReadByte
 19030  004D6C  6EDF               	movwf	indf2,c
 19031                           
 19032                           ;master/EEROM_WR.c: 78:   READ_ADDRESS++;
 19033  004D6E  2A3D               	incf	EEROM_R_SAVE@READ_ADDRESS,f,c
 19034                           
 19035                           ;master/EEROM_WR.c: 79:  }
 19036  004D70  4A37               	infsnz	EEROM_R_SAVE@i_284,f,c
 19037  004D72  2A38               	incf	EEROM_R_SAVE@i_284+1,f,c
 19038  004D74  BE38               	btfsc	EEROM_R_SAVE@i_284+1,7,c
 19039  004D76  D7F1               	goto	l9462
 19040  004D78  5038               	movf	EEROM_R_SAVE@i_284+1,w,c
 19041  004D7A  E104               	bnz	u7390
 19042  004D7C  0E0C               	movlw	12
 19043  004D7E  5C37               	subwf	EEROM_R_SAVE@i_284,w,c
 19044  004D80  A0D8               	btfss	status,0,c
 19045  004D82  D7EB               	goto	l9462
 19046  004D84                     u7390:
 19047                           
 19048                           ;master/EEROM_WR.c: 80:  for (int i = 0; i < 12; i++)
 19049  004D84  0E00               	movlw	0
 19050  004D86  6E3A               	movwf	EEROM_R_SAVE@i_285+1,c
 19051  004D88  0E00               	movlw	0
 19052  004D8A  6E39               	movwf	EEROM_R_SAVE@i_285,c
 19053  004D8C                     l9476:
 19054                           
 19055                           ;master/EEROM_WR.c: 81:  {;master/EEROM_WR.c: 82:   save_CE.eo[i] = (unsigned char)DATAE
      +                          E_ReadByte(READ_ADDRESS);
 19056  004D8C  0E1C               	movlw	low (_save_CE+28)
 19057  004D8E  2439               	addwf	EEROM_R_SAVE@i_285,w,c
 19058  004D90  6ED9               	movwf	fsr2l,c
 19059  004D92  0E02               	movlw	high (_save_CE+28)
 19060  004D94  203A               	addwfc	EEROM_R_SAVE@i_285+1,w,c
 19061  004D96  6EDA               	movwf	fsr2h,c
 19062  004D98  503D               	movf	EEROM_R_SAVE@READ_ADDRESS,w,c
 19063  004D9A  EC0A  F014         	call	_DATAEE_ReadByte
 19064  004D9E  6EDF               	movwf	indf2,c
 19065                           
 19066                           ;master/EEROM_WR.c: 83:   READ_ADDRESS++;
 19067  004DA0  2A3D               	incf	EEROM_R_SAVE@READ_ADDRESS,f,c
 19068                           
 19069                           ;master/EEROM_WR.c: 84:  }
 19070  004DA2  4A39               	infsnz	EEROM_R_SAVE@i_285,f,c
 19071  004DA4  2A3A               	incf	EEROM_R_SAVE@i_285+1,f,c
 19072  004DA6  BE3A               	btfsc	EEROM_R_SAVE@i_285+1,7,c
 19073  004DA8  D7F1               	goto	l9476
 19074  004DAA  503A               	movf	EEROM_R_SAVE@i_285+1,w,c
 19075  004DAC  E104               	bnz	u7400
 19076  004DAE  0E0C               	movlw	12
 19077  004DB0  5C39               	subwf	EEROM_R_SAVE@i_285,w,c
 19078  004DB2  A0D8               	btfss	status,0,c
 19079  004DB4  D7EB               	goto	l9476
 19080  004DB6                     u7400:
 19081                           
 19082                           ;master/EEROM_WR.c: 85:  for (int i = 0; i < 6; i++)
 19083  004DB6  0E00               	movlw	0
 19084  004DB8  6E3C               	movwf	EEROM_R_SAVE@i_286+1,c
 19085  004DBA  0E00               	movlw	0
 19086  004DBC  6E3B               	movwf	EEROM_R_SAVE@i_286,c
 19087  004DBE                     l9490:
 19088                           
 19089                           ;master/EEROM_WR.c: 86:  {;master/EEROM_WR.c: 87:   save_CE.sp[i] = (unsigned char)DATAE
      +                          E_ReadByte(READ_ADDRESS);
 19090  004DBE  0E28               	movlw	low (_save_CE+40)
 19091  004DC0  243B               	addwf	EEROM_R_SAVE@i_286,w,c
 19092  004DC2  6ED9               	movwf	fsr2l,c
 19093  004DC4  0E02               	movlw	high (_save_CE+40)
 19094  004DC6  203C               	addwfc	EEROM_R_SAVE@i_286+1,w,c
 19095  004DC8  6EDA               	movwf	fsr2h,c
 19096  004DCA  503D               	movf	EEROM_R_SAVE@READ_ADDRESS,w,c
 19097  004DCC  EC0A  F014         	call	_DATAEE_ReadByte
 19098  004DD0  6EDF               	movwf	indf2,c
 19099                           
 19100                           ;master/EEROM_WR.c: 88:   READ_ADDRESS++;
 19101  004DD2  2A3D               	incf	EEROM_R_SAVE@READ_ADDRESS,f,c
 19102                           
 19103                           ;master/EEROM_WR.c: 89:  }
 19104  004DD4  4A3B               	infsnz	EEROM_R_SAVE@i_286,f,c
 19105  004DD6  2A3C               	incf	EEROM_R_SAVE@i_286+1,f,c
 19106  004DD8  BE3C               	btfsc	EEROM_R_SAVE@i_286+1,7,c
 19107  004DDA  D7F1               	goto	l9490
 19108  004DDC  503C               	movf	EEROM_R_SAVE@i_286+1,w,c
 19109  004DDE  E104               	bnz	u7410
 19110  004DE0  0E06               	movlw	6
 19111  004DE2  5C3B               	subwf	EEROM_R_SAVE@i_286,w,c
 19112  004DE4  A0D8               	btfss	status,0,c
 19113  004DE6  D7EB               	goto	l9490
 19114  004DE8                     u7410:
 19115                           
 19116                           ;master/EEROM_WR.c: 90:       over_write_CE(save_CE);
 19117  004DE8  EE22  F000         	lfsr	2,_save_CE
 19118  004DEC  EE00  F001         	lfsr	0,over_write_CE@write_CE
 19119  004DF0  0E2D               	movlw	45
 19120  004DF2                     u7421:
 19121  004DF2  CFDB FFEB          	movff	plusw2,plusw0
 19122  004DF6  06E8               	decf	wreg,f,c
 19123  004DF8  E2FC               	bc	u7421
 19124  004DFA  EC85  F023         	call	_over_write_CE	;wreg free
 19125  004DFE  0012               	return		;funcret
 19126  004E00                     __end_of_EEROM_R_SAVE:
 19127                           	opt callstack 0
 19128                           
 19129 ;; *************** function _EEROM_GAME_ON *****************
 19130 ;; Defined at:
 19131 ;;		line 118 in file "master/EEROM_WR.c"
 19132 ;; Parameters:    Size  Location     Type
 19133 ;;		None
 19134 ;; Auto vars:     Size  Location     Type
 19135 ;;		None
 19136 ;; Return value:  Size  Location     Type
 19137 ;;                  1    wreg      void 
 19138 ;; Registers used:
 19139 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 19140 ;; Tracked objects:
 19141 ;;		On entry : 0/0
 19142 ;;		On exit  : 0/0
 19143 ;;		Unchanged: 0/0
 19144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19145 ;;      Params:         0       0       0       0       0       0       0
 19146 ;;      Locals:         0       0       0       0       0       0       0
 19147 ;;      Temps:          0       0       0       0       0       0       0
 19148 ;;      Totals:         0       0       0       0       0       0       0
 19149 ;;Total ram usage:        0 bytes
 19150 ;; Hardware stack levels used:    1
 19151 ;; Hardware stack levels required when called:    2
 19152 ;; This function calls:
 19153 ;;		_DATAEE_WriteByte
 19154 ;;		_EEROM_W_SAVE
 19155 ;; This function is called by:
 19156 ;;		_Special_input
 19157 ;; This function uses a non-reentrant model
 19158 ;;
 19159                           
 19160                           	psect	text89
 19161  002852                     __ptext89:
 19162                           	opt callstack 0
 19163  002852                     _EEROM_GAME_ON:
 19164                           	opt callstack 27
 19165                           
 19166                           ;master/EEROM_WR.c: 120:  game_flag = 1;
 19167                           
 19168                           ;incstack = 0
 19169  002852  0E01               	movlw	1
 19170  002854  0100               	movlb	0	; () banked
 19171  002856  6FF5               	movwf	_game_flag& (0+255),b
 19172                           
 19173                           ; BSR set to: 0
 19174                           ;master/EEROM_WR.c: 121:  DATAEE_WriteByte(2, 1);
 19175  002858  0E01               	movlw	1
 19176  00285A  6E01               	movwf	DATAEE_WriteByte@bData,c
 19177  00285C  0E02               	movlw	2
 19178  00285E  ECF9  F015         	call	_DATAEE_WriteByte
 19179                           
 19180                           ;master/EEROM_WR.c: 122:  EEROM_W_SAVE();
 19181  002862  EC0E  F02D         	call	_EEROM_W_SAVE	;wreg free
 19182  002866  0012               	return		;funcret
 19183  002868                     __end_of_EEROM_GAME_ON:
 19184                           	opt callstack 0
 19185                           
 19186 ;; *************** function _Create_Shoretest_command_Most_deep *****************
 19187 ;; Defined at:
 19188 ;;		line 18 in file "master/IDA_CES.c"
 19189 ;; Parameters:    Size  Location     Type
 19190 ;;		None
 19191 ;; Auto vars:     Size  Location     Type
 19192 ;;  search_flag     1   51[COMRAM] unsigned char 
 19193 ;;  check_depth     1   50[COMRAM] unsigned char 
 19194 ;; Return value:  Size  Location     Type
 19195 ;;                  1    wreg      unsigned char 
 19196 ;; Registers used:
 19197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19198 ;; Tracked objects:
 19199 ;;		On entry : 0/0
 19200 ;;		On exit  : 0/0
 19201 ;;		Unchanged: 0/0
 19202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19203 ;;      Params:         0       0       0       0       0       0       0
 19204 ;;      Locals:         2       0       0       0       0       0       0
 19205 ;;      Temps:          0       0       0       0       0       0       0
 19206 ;;      Totals:         2       0       0       0       0       0       0
 19207 ;;Total ram usage:        2 bytes
 19208 ;; Hardware stack levels used:    1
 19209 ;; Hardware stack levels required when called:    2
 19210 ;; This function calls:
 19211 ;;		_Create_shortest_command_depp_N1
 19212 ;;		_branch_off
 19213 ;;		_depth_add
 19214 ;; This function is called by:
 19215 ;;		_Special_input
 19216 ;; This function uses a non-reentrant model
 19217 ;;
 19218                           
 19219                           	psect	text90
 19220  002A6C                     __ptext90:
 19221                           	opt callstack 0
 19222  002A6C                     _Create_Shoretest_command_Most_deep:
 19223                           	opt callstack 27
 19224                           
 19225                           ;master/IDA_CES.c: 20:  char check_depth;;master/IDA_CES.c: 21:  char search_flag;;maste
      +                          r/IDA_CES.c: 22:  check_depth = shortest_depth;
 19226                           
 19227                           ;incstack = 0
 19228  002A6C  C106  F033         	movff	_shortest_depth,Create_Shoretest_command_Most_deep@check_depth
 19229                           
 19230                           ;master/IDA_CES.c: 23:  depth_add();
 19231  002A70  ECF4  F018         	call	_depth_add	;wreg free
 19232                           
 19233                           ;master/IDA_CES.c: 25:  search_flag = 1;
 19234  002A74  0E01               	movlw	1
 19235  002A76  6E34               	movwf	Create_Shoretest_command_Most_deep@search_flag,c
 19236                           
 19237                           ;master/IDA_CES.c: 26:  while (search_flag == 1)
 19238  002A78  D005               	goto	l9692
 19239  002A7A                     l9688:
 19240                           
 19241                           ;master/IDA_CES.c: 27:  {;master/IDA_CES.c: 28:   search_flag = Create_shortest_command_
      +                          depp_N1(check_depth);
 19242  002A7A  5033               	movf	Create_Shoretest_command_Most_deep@check_depth,w,c
 19243  002A7C  EC6D  F016         	call	_Create_shortest_command_depp_N1
 19244  002A80  6E34               	movwf	Create_Shoretest_command_Most_deep@search_flag,c
 19245                           
 19246                           ;master/IDA_CES.c: 30:   check_depth--;
 19247  002A82  0633               	decf	Create_Shoretest_command_Most_deep@check_depth,f,c
 19248  002A84                     l9692:
 19249                           
 19250                           ;master/IDA_CES.c: 26:  while (search_flag == 1)
 19251  002A84  0434               	decf	Create_Shoretest_command_Most_deep@search_flag,w,c
 19252  002A86  B4D8               	btfsc	status,2,c
 19253  002A88  D7F8               	goto	l9688
 19254  002A8A                     u7590:
 19255                           
 19256                           ;master/IDA_CES.c: 32:  while (branch_off() == 1)
 19257  002A8A  EC09  F02E         	call	_branch_off	;wreg free
 19258  002A8E  06E8               	decf	wreg,f,c
 19259  002A90  B4D8               	btfsc	status,2,c
 19260  002A92  D7FB               	goto	u7590
 19261                           
 19262                           ;master/IDA_CES.c: 34:  return search_flag;
 19263  002A94  5034               	movf	Create_Shoretest_command_Most_deep@search_flag,w,c
 19264  002A96  0012               	return		;funcret
 19265  002A98                     __end_of_Create_Shoretest_command_Most_deep:
 19266                           	opt callstack 0
 19267                           
 19268 ;; *************** function _depth_add *****************
 19269 ;; Defined at:
 19270 ;;		line 115 in file "master/IDA_CES.c"
 19271 ;; Parameters:    Size  Location     Type
 19272 ;;		None
 19273 ;; Auto vars:     Size  Location     Type
 19274 ;;  check_depth     1    2[COMRAM] unsigned char 
 19275 ;;  NEXT_FLAG       1    1[COMRAM] unsigned char 
 19276 ;; Return value:  Size  Location     Type
 19277 ;;                  1    wreg      unsigned char 
 19278 ;; Registers used:
 19279 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19280 ;; Tracked objects:
 19281 ;;		On entry : 0/0
 19282 ;;		On exit  : 0/0
 19283 ;;		Unchanged: 0/0
 19284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19285 ;;      Params:         0       0       0       0       0       0       0
 19286 ;;      Locals:         2       0       0       0       0       0       0
 19287 ;;      Temps:          1       0       0       0       0       0       0
 19288 ;;      Totals:         3       0       0       0       0       0       0
 19289 ;;Total ram usage:        3 bytes
 19290 ;; Hardware stack levels used:    1
 19291 ;; This function calls:
 19292 ;;		Nothing
 19293 ;; This function is called by:
 19294 ;;		_Create_Shoretest_command_Most_deep
 19295 ;; This function uses a non-reentrant model
 19296 ;;
 19297                           
 19298                           	psect	text91
 19299  0031E8                     __ptext91:
 19300                           	opt callstack 0
 19301  0031E8                     _depth_add:
 19302                           	opt callstack 28
 19303                           
 19304                           ;master/IDA_CES.c: 117:  if (shortest_command[shortest_depth] >= 18)
 19305                           
 19306                           ;incstack = 0
 19307  0031E8  0E03               	movlw	low _shortest_command
 19308  0031EA  0101               	movlb	1	; () banked
 19309  0031EC  2506               	addwf	_shortest_depth& (0+255),w,b
 19310  0031EE  6ED9               	movwf	fsr2l,c
 19311  0031F0  6ADA               	clrf	fsr2h,c
 19312  0031F2  0E01               	movlw	high _shortest_command
 19313  0031F4  22DA               	addwfc	fsr2h,f,c
 19314  0031F6  0E11               	movlw	17
 19315  0031F8  64DF               	cpfsgt	indf2,c
 19316  0031FA  0012               	return	
 19317                           
 19318                           ; BSR set to: 1
 19319                           ;master/IDA_CES.c: 118:  {;master/IDA_CES.c: 119:   char NEXT_FLAG = 1;
 19320  0031FC  0E01               	movlw	1
 19321  0031FE  6E02               	movwf	depth_add@NEXT_FLAG,c
 19322                           
 19323                           ;master/IDA_CES.c: 120:   char check_depth;;master/IDA_CES.c: 121:   for (check_depth = 
      +                          0; check_depth < shortest_depth; check_depth++)
 19324  003200  0E00               	movlw	0
 19325  003202  6E03               	movwf	depth_add@check_depth,c
 19326  003204  D00D               	goto	l9322
 19327  003206                     l9316:
 19328                           
 19329                           ; BSR set to: 1
 19330                           ;master/IDA_CES.c: 122:   {;master/IDA_CES.c: 123:    if (shortest_command[check_depth] 
      +                          != 18)
 19331  003206  0E03               	movlw	low _shortest_command
 19332  003208  2403               	addwf	depth_add@check_depth,w,c
 19333  00320A  6ED9               	movwf	fsr2l,c
 19334  00320C  6ADA               	clrf	fsr2h,c
 19335  00320E  0E01               	movlw	high _shortest_command
 19336  003210  22DA               	addwfc	fsr2h,f,c
 19337  003212  0E12               	movlw	18
 19338  003214  18DE               	xorwf	postinc2,w,c
 19339  003216  B4D8               	btfsc	status,2,c
 19340  003218  D002               	goto	l9320
 19341                           
 19342                           ; BSR set to: 1
 19343                           ;master/IDA_CES.c: 124:    {;master/IDA_CES.c: 125:     NEXT_FLAG = 0;
 19344  00321A  0E00               	movlw	0
 19345  00321C  6E02               	movwf	depth_add@NEXT_FLAG,c
 19346  00321E                     l9320:
 19347                           
 19348                           ; BSR set to: 1
 19349                           ;master/IDA_CES.c: 127:   }
 19350  00321E  2A03               	incf	depth_add@check_depth,f,c
 19351  003220                     l9322:
 19352                           
 19353                           ; BSR set to: 1
 19354  003220  5106               	movf	_shortest_depth& (0+255),w,b
 19355  003222  5C03               	subwf	depth_add@check_depth,w,c
 19356  003224  A0D8               	btfss	status,0,c
 19357  003226  D7EF               	goto	l9316
 19358                           
 19359                           ; BSR set to: 1
 19360                           ;master/IDA_CES.c: 128:   if (NEXT_FLAG)
 19361  003228  5002               	movf	depth_add@NEXT_FLAG,w,c
 19362  00322A  B4D8               	btfsc	status,2,c
 19363  00322C  0012               	return	
 19364                           
 19365                           ; BSR set to: 1
 19366                           ;master/IDA_CES.c: 129:   {;master/IDA_CES.c: 130:    shortest_depth++;
 19367  00322E  2B06               	incf	_shortest_depth& (0+255),f,b
 19368                           
 19369                           ; BSR set to: 1
 19370                           ;master/IDA_CES.c: 131:    shortest_command[shortest_depth] = 1;
 19371  003230  0E03               	movlw	low _shortest_command
 19372  003232  2506               	addwf	_shortest_depth& (0+255),w,b
 19373  003234  6ED9               	movwf	fsr2l,c
 19374  003236  6ADA               	clrf	fsr2h,c
 19375  003238  0E01               	movlw	high _shortest_command
 19376  00323A  22DA               	addwfc	fsr2h,f,c
 19377  00323C  0E01               	movlw	1
 19378  00323E  6EDF               	movwf	indf2,c
 19379                           
 19380                           ; BSR set to: 1
 19381  003240  0012               	return		;funcret
 19382  003242                     __end_of_depth_add:
 19383                           	opt callstack 0
 19384                           
 19385 ;; *************** function _branch_off *****************
 19386 ;; Defined at:
 19387 ;;		line 37 in file "master/IDA_CES.c"
 19388 ;; Parameters:    Size  Location     Type
 19389 ;;		None
 19390 ;; Auto vars:     Size  Location     Type
 19391 ;;  i               1   48[COMRAM] char 
 19392 ;;  check_depth     1   49[COMRAM] unsigned char 
 19393 ;;  b               1   47[COMRAM] unsigned char 
 19394 ;;  d               1   46[COMRAM] unsigned char 
 19395 ;;  c               1   45[COMRAM] unsigned char 
 19396 ;;  return_num      1   44[COMRAM] unsigned char 
 19397 ;;  a               1   43[COMRAM] unsigned char 
 19398 ;; Return value:  Size  Location     Type
 19399 ;;                  1    wreg      unsigned char 
 19400 ;; Registers used:
 19401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19402 ;; Tracked objects:
 19403 ;;		On entry : 0/0
 19404 ;;		On exit  : 0/0
 19405 ;;		Unchanged: 0/0
 19406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19407 ;;      Params:         0       0       0       0       0       0       0
 19408 ;;      Locals:         7       0       0       0       0       0       0
 19409 ;;      Temps:          3       0       0       0       0       0       0
 19410 ;;      Totals:        10       0       0       0       0       0       0
 19411 ;;Total ram usage:       10 bytes
 19412 ;; Hardware stack levels used:    1
 19413 ;; Hardware stack levels required when called:    1
 19414 ;; This function calls:
 19415 ;;		___awmod
 19416 ;; This function is called by:
 19417 ;;		_Create_Shoretest_command_Most_deep
 19418 ;; This function uses a non-reentrant model
 19419 ;;
 19420                           
 19421                           	psect	text92
 19422  005C12                     __ptext92:
 19423                           	opt callstack 0
 19424  005C12                     _branch_off:
 19425                           	opt callstack 27
 19426                           
 19427                           ;master/IDA_CES.c: 39:  char return_num = 0;
 19428                           
 19429                           ; BSR set to: 1
 19430                           ;incstack = 0
 19431  005C12  0E00               	movlw	0
 19432  005C14  6E2D               	movwf	branch_off@return_num,c
 19433                           
 19434                           ;master/IDA_CES.c: 40:  char a, b, c = 1, d = 0;
 19435  005C16  0E01               	movlw	1
 19436  005C18  6E2E               	movwf	branch_off@c,c
 19437  005C1A  0E00               	movlw	0
 19438  005C1C  6E2F               	movwf	branch_off@d,c
 19439                           
 19440                           ;master/IDA_CES.c: 43:  if (shortest_depth == 0)
 19441  005C1E  0101               	movlb	1	; () banked
 19442  005C20  5106               	movf	_shortest_depth& (0+255),w,b
 19443  005C22  A4D8               	btfss	status,2,c
 19444  005C24  D002               	goto	l9352
 19445                           
 19446                           ; BSR set to: 1
 19447                           ;master/IDA_CES.c: 44:   return 0;
 19448  005C26  0E00               	movlw	0
 19449  005C28  0012               	return	
 19450  005C2A                     l9352:
 19451                           
 19452                           ; BSR set to: 1
 19453                           ;master/IDA_CES.c: 45:  check_depth = 0;
 19454  005C2A  0E00               	movlw	0
 19455  005C2C  6E32               	movwf	branch_off@check_depth,c
 19456                           
 19457                           ;master/IDA_CES.c: 46:  while (check_depth < shortest_depth)
 19458  005C2E  D0EC               	goto	l9416
 19459  005C30                     l9354:
 19460                           
 19461                           ; BSR set to: 1
 19462                           ;master/IDA_CES.c: 47:  {;master/IDA_CES.c: 48:   if (check_depth >= 1)
 19463  005C30  5032               	movf	branch_off@check_depth,w,c
 19464  005C32  B4D8               	btfsc	status,2,c
 19465  005C34  D044               	goto	l9360
 19466                           
 19467                           ; BSR set to: 1
 19468                           ;master/IDA_CES.c: 49:   {;master/IDA_CES.c: 50:    c = (18 + shortest_command[check_dep
      +                          th] - shortest_command[check_depth - 1]) % 3;
 19469  005C36  0E03               	movlw	low _shortest_command
 19470  005C38  2432               	addwf	branch_off@check_depth,w,c
 19471  005C3A  6ED9               	movwf	fsr2l,c
 19472  005C3C  6ADA               	clrf	fsr2h,c
 19473  005C3E  0E01               	movlw	high _shortest_command
 19474  005C40  22DA               	addwfc	fsr2h,f,c
 19475  005C42  50DF               	movf	indf2,w,c
 19476  005C44  6E29               	movwf	??_branch_off& (0+255),c
 19477  005C46  6A2A               	clrf	(??_branch_off+1)& (0+255),c
 19478  005C48  0E02               	movlw	low (_shortest_command+65535)
 19479  005C4A  2432               	addwf	branch_off@check_depth,w,c
 19480  005C4C  6ED9               	movwf	fsr2l,c
 19481  005C4E  6ADA               	clrf	fsr2h,c
 19482  005C50  0E01               	movlw	high (_shortest_command+65535)
 19483  005C52  22DA               	addwfc	fsr2h,f,c
 19484  005C54  50DF               	movf	indf2,w,c
 19485  005C56  6E2B               	movwf	(??_branch_off+2)& (0+255),c
 19486  005C58  502B               	movf	??_branch_off+2,w,c
 19487  005C5A  5E29               	subwf	??_branch_off,f,c
 19488  005C5C  0E00               	movlw	0
 19489  005C5E  5A2A               	subwfb	??_branch_off+1,f,c
 19490  005C60  0E12               	movlw	18
 19491  005C62  2429               	addwf	??_branch_off,w,c
 19492  005C64  6E23               	movwf	___awmod@dividend,c
 19493  005C66  0E00               	movlw	0
 19494  005C68  202A               	addwfc	??_branch_off+1,w,c
 19495  005C6A  6E24               	movwf	___awmod@dividend+1,c
 19496  005C6C  0E00               	movlw	0
 19497  005C6E  6E26               	movwf	___awmod@divisor+1,c
 19498  005C70  0E03               	movlw	3
 19499  005C72  6E25               	movwf	___awmod@divisor,c
 19500  005C74  EC77  F01A         	call	___awmod	;wreg free
 19501  005C78  5023               	movf	?___awmod,w,c
 19502  005C7A  6E2E               	movwf	branch_off@c,c
 19503                           
 19504                           ;master/IDA_CES.c: 51:    d = CE_IDA_LIST[shortest_command[check_depth - 1]].name[0];
 19505  005C7C  0E02               	movlw	low (_shortest_command+65535)
 19506  005C7E  2432               	addwf	branch_off@check_depth,w,c
 19507  005C80  6ED9               	movwf	fsr2l,c
 19508  005C82  6ADA               	clrf	fsr2h,c
 19509  005C84  0E01               	movlw	high (_shortest_command+65535)
 19510  005C86  22DA               	addwfc	fsr2h,f,c
 19511  005C88  50DF               	movf	indf2,w,c
 19512  005C8A  6E29               	movwf	??_branch_off& (0+255),c
 19513  005C8C  5029               	movf	??_branch_off,w,c
 19514  005C8E  0D05               	mullw	5
 19515  005C90  0E02               	movlw	2
 19516  005C92  26F3               	addwf	prodl,f,c
 19517  005C94  0E00               	movlw	0
 19518  005C96  22F4               	addwfc	prodh,f,c
 19519  005C98  0E69               	movlw	low _CE_IDA_LIST
 19520  005C9A  24F3               	addwf	prodl,w,c
 19521  005C9C  6EF6               	movwf	tblptrl,c
 19522  005C9E  0E79               	movlw	high _CE_IDA_LIST
 19523  005CA0  20F4               	addwfc	prodh,w,c
 19524  005CA2  6EF7               	movwf	tblptrh,c
 19525  005CA4                     	if	0	;There are less than 3 active tblptr bytes
 19526  005CA4                     	endif
 19527  005CA4  0009               	tblrd		*+
 19528  005CA6  CFF5 F02A          	movff	tablat,??_branch_off+1
 19529  005CAA  0009               	tblrd		*+
 19530  005CAC  CFF5 F02B          	movff	tablat,??_branch_off+2
 19531  005CB0  C02A  FFF6         	movff	??_branch_off+1,tblptrl
 19532  005CB4  C02B  FFF7         	movff	??_branch_off+2,tblptrh
 19533  005CB8                     	if	0	;tblptru may be non-zero
 19534  005CB8                     	endif
 19535  005CB8                     	if	0	;tblptru may be non-zero
 19536  005CB8                     	endif
 19537  005CB8  0008               	tblrd		*
 19538  005CBA  CFF5 F02F          	movff	tablat,branch_off@d
 19539  005CBE                     l9360:
 19540                           
 19541                           ;master/IDA_CES.c: 54:   a = CE_IDA_LIST[shortest_command[check_depth]].name[0];
 19542  005CBE  0E03               	movlw	low _shortest_command
 19543  005CC0  2432               	addwf	branch_off@check_depth,w,c
 19544  005CC2  6ED9               	movwf	fsr2l,c
 19545  005CC4  6ADA               	clrf	fsr2h,c
 19546  005CC6  0E01               	movlw	high _shortest_command
 19547  005CC8  22DA               	addwfc	fsr2h,f,c
 19548  005CCA  50DF               	movf	indf2,w,c
 19549  005CCC  6E29               	movwf	??_branch_off& (0+255),c
 19550  005CCE  5029               	movf	??_branch_off,w,c
 19551  005CD0  0D05               	mullw	5
 19552  005CD2  0E02               	movlw	2
 19553  005CD4  26F3               	addwf	prodl,f,c
 19554  005CD6  0E00               	movlw	0
 19555  005CD8  22F4               	addwfc	prodh,f,c
 19556  005CDA  0E69               	movlw	low _CE_IDA_LIST
 19557  005CDC  24F3               	addwf	prodl,w,c
 19558  005CDE  6EF6               	movwf	tblptrl,c
 19559  005CE0  0E79               	movlw	high _CE_IDA_LIST
 19560  005CE2  20F4               	addwfc	prodh,w,c
 19561  005CE4  6EF7               	movwf	tblptrh,c
 19562  005CE6                     	if	0	;There are less than 3 active tblptr bytes
 19563  005CE6                     	endif
 19564  005CE6  0009               	tblrd		*+
 19565  005CE8  CFF5 F02A          	movff	tablat,??_branch_off+1
 19566  005CEC  0009               	tblrd		*+
 19567  005CEE  CFF5 F02B          	movff	tablat,??_branch_off+2
 19568  005CF2  C02A  FFF6         	movff	??_branch_off+1,tblptrl
 19569  005CF6  C02B  FFF7         	movff	??_branch_off+2,tblptrh
 19570  005CFA                     	if	0	;tblptru may be non-zero
 19571  005CFA                     	endif
 19572  005CFA                     	if	0	;tblptru may be non-zero
 19573  005CFA                     	endif
 19574  005CFA  0008               	tblrd		*
 19575  005CFC  CFF5 F02C          	movff	tablat,branch_off@a
 19576                           
 19577                           ;master/IDA_CES.c: 55:   b = CE_IDA_LIST[shortest_command[check_depth + 1]].name[0];
 19578  005D00  0E04               	movlw	low (_shortest_command+1)
 19579  005D02  2432               	addwf	branch_off@check_depth,w,c
 19580  005D04  6ED9               	movwf	fsr2l,c
 19581  005D06  6ADA               	clrf	fsr2h,c
 19582  005D08  0E01               	movlw	high (_shortest_command+1)
 19583  005D0A  22DA               	addwfc	fsr2h,f,c
 19584  005D0C  50DF               	movf	indf2,w,c
 19585  005D0E  6E29               	movwf	??_branch_off& (0+255),c
 19586  005D10  5029               	movf	??_branch_off,w,c
 19587  005D12  0D05               	mullw	5
 19588  005D14  0E02               	movlw	2
 19589  005D16  26F3               	addwf	prodl,f,c
 19590  005D18  0E00               	movlw	0
 19591  005D1A  22F4               	addwfc	prodh,f,c
 19592  005D1C  0E69               	movlw	low _CE_IDA_LIST
 19593  005D1E  24F3               	addwf	prodl,w,c
 19594  005D20  6EF6               	movwf	tblptrl,c
 19595  005D22  0E79               	movlw	high _CE_IDA_LIST
 19596  005D24  20F4               	addwfc	prodh,w,c
 19597  005D26  6EF7               	movwf	tblptrh,c
 19598  005D28                     	if	0	;There are less than 3 active tblptr bytes
 19599  005D28                     	endif
 19600  005D28  0009               	tblrd		*+
 19601  005D2A  CFF5 F02A          	movff	tablat,??_branch_off+1
 19602  005D2E  0009               	tblrd		*+
 19603  005D30  CFF5 F02B          	movff	tablat,??_branch_off+2
 19604  005D34  C02A  FFF6         	movff	??_branch_off+1,tblptrl
 19605  005D38  C02B  FFF7         	movff	??_branch_off+2,tblptrh
 19606  005D3C                     	if	0	;tblptru may be non-zero
 19607  005D3C                     	endif
 19608  005D3C                     	if	0	;tblptru may be non-zero
 19609  005D3C                     	endif
 19610  005D3C  0008               	tblrd		*
 19611  005D3E  CFF5 F030          	movff	tablat,branch_off@b
 19612                           
 19613                           ;master/IDA_CES.c: 56:   if ((a == b) || (c == 0 && d == b))
 19614  005D42  5030               	movf	branch_off@b,w,c
 19615  005D44  182C               	xorwf	branch_off@a,w,c
 19616  005D46  B4D8               	btfsc	status,2,c
 19617  005D48  D007               	goto	u7270
 19618  005D4A  502E               	movf	branch_off@c,w,c
 19619  005D4C  A4D8               	btfss	status,2,c
 19620  005D4E  D05B               	goto	l9414
 19621  005D50  5030               	movf	branch_off@b,w,c
 19622  005D52  182F               	xorwf	branch_off@d,w,c
 19623  005D54  A4D8               	btfss	status,2,c
 19624  005D56  D057               	goto	l9414
 19625  005D58                     u7270:
 19626                           
 19627                           ;master/IDA_CES.c: 59:   {;master/IDA_CES.c: 60:    return_num = 1;
 19628  005D58  0E01               	movlw	1
 19629  005D5A  6E2D               	movwf	branch_off@return_num,c
 19630                           
 19631                           ;master/IDA_CES.c: 75:    if (shortest_command[check_depth + 1] == 18)
 19632  005D5C  0E04               	movlw	low (_shortest_command+1)
 19633  005D5E  2432               	addwf	branch_off@check_depth,w,c
 19634  005D60  6ED9               	movwf	fsr2l,c
 19635  005D62  6ADA               	clrf	fsr2h,c
 19636  005D64  0E01               	movlw	high (_shortest_command+1)
 19637  005D66  22DA               	addwfc	fsr2h,f,c
 19638  005D68  0E12               	movlw	18
 19639  005D6A  18DE               	xorwf	postinc2,w,c
 19640  005D6C  A4D8               	btfss	status,2,c
 19641  005D6E  D031               	goto	l9404
 19642                           
 19643                           ;master/IDA_CES.c: 76:    {;master/IDA_CES.c: 79:     signed char i;;master/IDA_CES.c: 8
      +                          0:     for (i = check_depth; i >= 0; i--)
 19644  005D70  C032  F031         	movff	branch_off@check_depth,branch_off@i
 19645  005D74                     l9376:
 19646  005D74  BE31               	btfsc	branch_off@i,7,c
 19647  005D76  D00C               	goto	l9388
 19648                           
 19649                           ;master/IDA_CES.c: 81:     {;master/IDA_CES.c: 82:      if (shortest_command[i] != 18)
 19650  005D78  0E03               	movlw	low _shortest_command
 19651  005D7A  2431               	addwf	branch_off@i,w,c
 19652  005D7C  6ED9               	movwf	fsr2l,c
 19653  005D7E  6ADA               	clrf	fsr2h,c
 19654  005D80  0E01               	movlw	high _shortest_command
 19655  005D82  22DA               	addwfc	fsr2h,f,c
 19656  005D84  0E12               	movlw	18
 19657  005D86  18DE               	xorwf	postinc2,w,c
 19658  005D88  A4D8               	btfss	status,2,c
 19659  005D8A  D002               	goto	l9388
 19660                           
 19661                           ;master/IDA_CES.c: 86:     }
 19662  005D8C  0631               	decf	branch_off@i,f,c
 19663  005D8E  D7F2               	goto	l9376
 19664  005D90                     l9388:
 19665                           
 19666                           ;master/IDA_CES.c: 88:     if (i == -1)
 19667  005D90  2831               	incf	branch_off@i,w,c
 19668  005D92  A4D8               	btfss	status,2,c
 19669  005D94  D005               	goto	l9394
 19670                           
 19671                           ;master/IDA_CES.c: 89:     {;master/IDA_CES.c: 90:      shortest_depth++;
 19672  005D96  0101               	movlb	1	; () banked
 19673  005D98  2B06               	incf	_shortest_depth& (0+255),f,b
 19674                           
 19675                           ; BSR set to: 1
 19676                           ;master/IDA_CES.c: 91:      shortest_command[0] = 1;
 19677  005D9A  0E01               	movlw	1
 19678  005D9C  6F03               	movwf	_shortest_command& (0+255),b
 19679                           
 19680                           ;master/IDA_CES.c: 92:     }
 19681  005D9E  D007               	goto	l9396
 19682  005DA0                     l9394:
 19683                           
 19684                           ;master/IDA_CES.c: 94:     {;master/IDA_CES.c: 95:      shortest_command[i]++;
 19685  005DA0  0E03               	movlw	low _shortest_command
 19686  005DA2  2431               	addwf	branch_off@i,w,c
 19687  005DA4  6ED9               	movwf	fsr2l,c
 19688  005DA6  6ADA               	clrf	fsr2h,c
 19689  005DA8  0E01               	movlw	high _shortest_command
 19690  005DAA  22DA               	addwfc	fsr2h,f,c
 19691  005DAC  2ADF               	incf	indf2,f,c
 19692  005DAE                     l9396:
 19693                           
 19694                           ;master/IDA_CES.c: 97:     for (check_depth = i + 1; check_depth <= shortest_depth; chec
      +                          k_depth++)
 19695  005DAE  2831               	incf	branch_off@i,w,c
 19696  005DB0  6E32               	movwf	branch_off@check_depth,c
 19697  005DB2  D009               	goto	l9402
 19698  005DB4                     l9398:
 19699                           
 19700                           ; BSR set to: 1
 19701                           ;master/IDA_CES.c: 98:      shortest_command[check_depth] = 1;
 19702  005DB4  0E03               	movlw	low _shortest_command
 19703  005DB6  2432               	addwf	branch_off@check_depth,w,c
 19704  005DB8  6ED9               	movwf	fsr2l,c
 19705  005DBA  6ADA               	clrf	fsr2h,c
 19706  005DBC  0E01               	movlw	high _shortest_command
 19707  005DBE  22DA               	addwfc	fsr2h,f,c
 19708  005DC0  0E01               	movlw	1
 19709  005DC2  6EDF               	movwf	indf2,c
 19710                           
 19711                           ; BSR set to: 1
 19712  005DC4  2A32               	incf	branch_off@check_depth,f,c
 19713  005DC6                     l9402:
 19714  005DC6  5032               	movf	branch_off@check_depth,w,c
 19715  005DC8  0101               	movlb	1	; () banked
 19716  005DCA  5D06               	subwf	_shortest_depth& (0+255),w,b
 19717  005DCC  A0D8               	btfss	status,0,c
 19718  005DCE  D021               	goto	u7340
 19719  005DD0  D7F1               	goto	l9398
 19720  005DD2                     l9404:
 19721                           
 19722                           ;master/IDA_CES.c: 101:    {;master/IDA_CES.c: 102:     shortest_command[check_depth + 1
      +                          ]++;
 19723  005DD2  0E04               	movlw	low (_shortest_command+1)
 19724  005DD4  2432               	addwf	branch_off@check_depth,w,c
 19725  005DD6  6ED9               	movwf	fsr2l,c
 19726  005DD8  6ADA               	clrf	fsr2h,c
 19727  005DDA  0E01               	movlw	high (_shortest_command+1)
 19728  005DDC  22DA               	addwfc	fsr2h,f,c
 19729  005DDE  2ADF               	incf	indf2,f,c
 19730                           
 19731                           ;master/IDA_CES.c: 104:     for (check_depth = check_depth + 2; check_depth <= shortest_
      +                          depth; check_depth++)
 19732  005DE0  5032               	movf	branch_off@check_depth,w,c
 19733  005DE2  0F02               	addlw	2
 19734  005DE4  6E32               	movwf	branch_off@check_depth,c
 19735  005DE6  D009               	goto	l9412
 19736  005DE8                     l9408:
 19737                           
 19738                           ; BSR set to: 1
 19739                           ;master/IDA_CES.c: 105:      shortest_command[check_depth] = 1;
 19740  005DE8  0E03               	movlw	low _shortest_command
 19741  005DEA  2432               	addwf	branch_off@check_depth,w,c
 19742  005DEC  6ED9               	movwf	fsr2l,c
 19743  005DEE  6ADA               	clrf	fsr2h,c
 19744  005DF0  0E01               	movlw	high _shortest_command
 19745  005DF2  22DA               	addwfc	fsr2h,f,c
 19746  005DF4  0E01               	movlw	1
 19747  005DF6  6EDF               	movwf	indf2,c
 19748                           
 19749                           ; BSR set to: 1
 19750  005DF8  2A32               	incf	branch_off@check_depth,f,c
 19751  005DFA                     l9412:
 19752  005DFA  5032               	movf	branch_off@check_depth,w,c
 19753  005DFC  0101               	movlb	1	; () banked
 19754  005DFE  5D06               	subwf	_shortest_depth& (0+255),w,b
 19755  005E00  A0D8               	btfss	status,0,c
 19756  005E02  D007               	goto	u7340
 19757  005E04  D7F1               	goto	l9408
 19758  005E06                     l9414:
 19759                           
 19760                           ;master/IDA_CES.c: 110:   check_depth++;
 19761  005E06  2A32               	incf	branch_off@check_depth,f,c
 19762  005E08                     l9416:
 19763                           
 19764                           ;master/IDA_CES.c: 46:  while (check_depth < shortest_depth)
 19765  005E08  0101               	movlb	1	; () banked
 19766  005E0A  5106               	movf	_shortest_depth& (0+255),w,b
 19767  005E0C  5C32               	subwf	branch_off@check_depth,w,c
 19768  005E0E  A0D8               	btfss	status,0,c
 19769  005E10  D70F               	goto	l9354
 19770  005E12                     u7340:
 19771                           
 19772                           ; BSR set to: 1
 19773                           ;master/IDA_CES.c: 112:  return return_num;
 19774  005E12  502D               	movf	branch_off@return_num,w,c
 19775                           
 19776                           ; BSR set to: 1
 19777  005E14  0012               	return		;funcret
 19778  005E16                     __end_of_branch_off:
 19779                           	opt callstack 0
 19780                           
 19781 ;; *************** function ___awmod *****************
 19782 ;; Defined at:
 19783 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
 19784 ;; Parameters:    Size  Location     Type
 19785 ;;  dividend        2   34[COMRAM] int 
 19786 ;;  divisor         2   36[COMRAM] int 
 19787 ;; Auto vars:     Size  Location     Type
 19788 ;;  sign            1   39[COMRAM] unsigned char 
 19789 ;;  counter         1   38[COMRAM] unsigned char 
 19790 ;; Return value:  Size  Location     Type
 19791 ;;                  2   34[COMRAM] int 
 19792 ;; Registers used:
 19793 ;;		wreg, status,2, status,0
 19794 ;; Tracked objects:
 19795 ;;		On entry : 0/0
 19796 ;;		On exit  : 0/0
 19797 ;;		Unchanged: 0/0
 19798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19799 ;;      Params:         4       0       0       0       0       0       0
 19800 ;;      Locals:         2       0       0       0       0       0       0
 19801 ;;      Temps:          0       0       0       0       0       0       0
 19802 ;;      Totals:         6       0       0       0       0       0       0
 19803 ;;Total ram usage:        6 bytes
 19804 ;; Hardware stack levels used:    1
 19805 ;; This function calls:
 19806 ;;		Nothing
 19807 ;; This function is called by:
 19808 ;;		_turn_CE
 19809 ;;		_set_C
 19810 ;;		_animation_1
 19811 ;;		_animation_2
 19812 ;;		_shuffle_state_CE
 19813 ;;		_command_turn_ARRAY_2_2
 19814 ;;		_command_turn_ARRAY_2_3
 19815 ;;		_branch_off
 19816 ;; This function uses a non-reentrant model
 19817 ;;
 19818                           
 19819                           	psect	text93
 19820  0034EE                     __ptext93:
 19821                           	opt callstack 0
 19822  0034EE                     ___awmod:
 19823                           	opt callstack 28
 19824                           
 19825                           ; BSR set to: 1
 19826                           ;incstack = 0
 19827  0034EE  0E00               	movlw	0
 19828  0034F0  6E28               	movwf	___awmod@sign,c
 19829  0034F2  AE24               	btfss	___awmod@dividend+1,7,c
 19830  0034F4  D006               	goto	l7188
 19831  0034F6  6C23               	negf	___awmod@dividend,c
 19832  0034F8  1E24               	comf	___awmod@dividend+1,f,c
 19833  0034FA  B0D8               	btfsc	status,0,c
 19834  0034FC  2A24               	incf	___awmod@dividend+1,f,c
 19835  0034FE  0E01               	movlw	1
 19836  003500  6E28               	movwf	___awmod@sign,c
 19837  003502                     l7188:
 19838  003502  AE26               	btfss	___awmod@divisor+1,7,c
 19839  003504  D004               	goto	l7192
 19840  003506  6C25               	negf	___awmod@divisor,c
 19841  003508  1E26               	comf	___awmod@divisor+1,f,c
 19842  00350A  B0D8               	btfsc	status,0,c
 19843  00350C  2A26               	incf	___awmod@divisor+1,f,c
 19844  00350E                     l7192:
 19845  00350E  5025               	movf	___awmod@divisor,w,c
 19846  003510  1026               	iorwf	___awmod@divisor+1,w,c
 19847  003512  B4D8               	btfsc	status,2,c
 19848  003514  D018               	goto	l7208
 19849  003516  0E01               	movlw	1
 19850  003518  6E27               	movwf	___awmod@counter,c
 19851  00351A  D004               	goto	l7198
 19852  00351C                     l7196:
 19853  00351C  90D8               	bcf	status,0,c
 19854  00351E  3625               	rlcf	___awmod@divisor,f,c
 19855  003520  3626               	rlcf	___awmod@divisor+1,f,c
 19856  003522  2A27               	incf	___awmod@counter,f,c
 19857  003524                     l7198:
 19858  003524  AE26               	btfss	___awmod@divisor+1,7,c
 19859  003526  D7FA               	goto	l7196
 19860  003528                     u4490:
 19861  003528  5025               	movf	___awmod@divisor,w,c
 19862  00352A  5C23               	subwf	___awmod@dividend,w,c
 19863  00352C  5026               	movf	___awmod@divisor+1,w,c
 19864  00352E  5824               	subwfb	___awmod@dividend+1,w,c
 19865  003530  A0D8               	btfss	status,0,c
 19866  003532  D004               	goto	l7204
 19867  003534  5025               	movf	___awmod@divisor,w,c
 19868  003536  5E23               	subwf	___awmod@dividend,f,c
 19869  003538  5026               	movf	___awmod@divisor+1,w,c
 19870  00353A  5A24               	subwfb	___awmod@dividend+1,f,c
 19871  00353C                     l7204:
 19872  00353C  90D8               	bcf	status,0,c
 19873  00353E  3226               	rrcf	___awmod@divisor+1,f,c
 19874  003540  3225               	rrcf	___awmod@divisor,f,c
 19875  003542  2E27               	decfsz	___awmod@counter,f,c
 19876  003544  D7F1               	goto	u4490
 19877  003546                     l7208:
 19878  003546  5028               	movf	___awmod@sign,w,c
 19879  003548  B4D8               	btfsc	status,2,c
 19880  00354A  D004               	goto	l7212
 19881  00354C  6C23               	negf	___awmod@dividend,c
 19882  00354E  1E24               	comf	___awmod@dividend+1,f,c
 19883  003550  B0D8               	btfsc	status,0,c
 19884  003552  2A24               	incf	___awmod@dividend+1,f,c
 19885  003554                     l7212:
 19886  003554  C023  F023         	movff	___awmod@dividend,?___awmod
 19887  003558  C024  F024         	movff	___awmod@dividend+1,?___awmod+1
 19888  00355C  0012               	return		;funcret
 19889  00355E                     __end_of___awmod:
 19890                           	opt callstack 0
 19891                           
 19892 ;; *************** function _Create_shortest_command_depp_N1 *****************
 19893 ;; Defined at:
 19894 ;;		line 144 in file "master/IDA_CES.c"
 19895 ;; Parameters:    Size  Location     Type
 19896 ;;  check_depth     1    wreg     unsigned char 
 19897 ;; Auto vars:     Size  Location     Type
 19898 ;;  check_depth     1    2[COMRAM] unsigned char 
 19899 ;;  return_num      1    1[COMRAM] unsigned char 
 19900 ;; Return value:  Size  Location     Type
 19901 ;;                  1    wreg      unsigned char 
 19902 ;; Registers used:
 19903 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19904 ;; Tracked objects:
 19905 ;;		On entry : 0/0
 19906 ;;		On exit  : 0/0
 19907 ;;		Unchanged: 0/0
 19908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19909 ;;      Params:         0       0       0       0       0       0       0
 19910 ;;      Locals:         2       0       0       0       0       0       0
 19911 ;;      Temps:          1       0       0       0       0       0       0
 19912 ;;      Totals:         3       0       0       0       0       0       0
 19913 ;;Total ram usage:        3 bytes
 19914 ;; Hardware stack levels used:    1
 19915 ;; This function calls:
 19916 ;;		Nothing
 19917 ;; This function is called by:
 19918 ;;		_Create_Shoretest_command_Most_deep
 19919 ;; This function uses a non-reentrant model
 19920 ;;
 19921                           
 19922                           	psect	text94
 19923  002CDA                     __ptext94:
 19924                           	opt callstack 0
 19925  002CDA                     _Create_shortest_command_depp_N1:
 19926                           	opt callstack 28
 19927                           
 19928                           ;incstack = 0
 19929                           ;Create_shortest_command_depp_N1@check_depth stored from wreg
 19930  002CDA  6E03               	movwf	Create_shortest_command_depp_N1@check_depth,c
 19931                           
 19932                           ;master/IDA_CES.c: 144: char Create_shortest_command_depp_N1(char check_depth);master/ID
      +                          A_CES.c: 145: {;master/IDA_CES.c: 146:  char return_num;;master/IDA_CES.c: 147:  return_
      +                          num = 0;
 19933  002CDC  0E00               	movlw	0
 19934  002CDE  6E02               	movwf	Create_shortest_command_depp_N1@return_num,c
 19935                           
 19936                           ;master/IDA_CES.c: 148:  if (shortest_command[check_depth] == 18)
 19937  002CE0  0E03               	movlw	low _shortest_command
 19938  002CE2  2403               	addwf	Create_shortest_command_depp_N1@check_depth,w,c
 19939  002CE4  6ED9               	movwf	fsr2l,c
 19940  002CE6  6ADA               	clrf	fsr2h,c
 19941  002CE8  0E01               	movlw	high _shortest_command
 19942  002CEA  22DA               	addwfc	fsr2h,f,c
 19943  002CEC  0E12               	movlw	18
 19944  002CEE  18DE               	xorwf	postinc2,w,c
 19945  002CF0  A4D8               	btfss	status,2,c
 19946  002CF2  D00B               	goto	l9340
 19947                           
 19948                           ;master/IDA_CES.c: 149:  {;master/IDA_CES.c: 150:   shortest_command[check_depth] = 1;
 19949  002CF4  0E03               	movlw	low _shortest_command
 19950  002CF6  2403               	addwf	Create_shortest_command_depp_N1@check_depth,w,c
 19951  002CF8  6ED9               	movwf	fsr2l,c
 19952  002CFA  6ADA               	clrf	fsr2h,c
 19953  002CFC  0E01               	movlw	high _shortest_command
 19954  002CFE  22DA               	addwfc	fsr2h,f,c
 19955  002D00  0E01               	movlw	1
 19956  002D02  6EDF               	movwf	indf2,c
 19957                           
 19958                           ;master/IDA_CES.c: 152:   return_num = 1;
 19959  002D04  0E01               	movlw	1
 19960  002D06  6E02               	movwf	Create_shortest_command_depp_N1@return_num,c
 19961                           
 19962                           ;master/IDA_CES.c: 153:  }
 19963  002D08  D007               	goto	l9342
 19964  002D0A                     l9340:
 19965                           
 19966                           ;master/IDA_CES.c: 155:  {;master/IDA_CES.c: 156:   shortest_command[check_depth]++;
 19967  002D0A  0E03               	movlw	low _shortest_command
 19968  002D0C  2403               	addwf	Create_shortest_command_depp_N1@check_depth,w,c
 19969  002D0E  6ED9               	movwf	fsr2l,c
 19970  002D10  6ADA               	clrf	fsr2h,c
 19971  002D12  0E01               	movlw	high _shortest_command
 19972  002D14  22DA               	addwfc	fsr2h,f,c
 19973  002D16  2ADF               	incf	indf2,f,c
 19974  002D18                     l9342:
 19975                           
 19976                           ;master/IDA_CES.c: 158:  return return_num;
 19977  002D18  5002               	movf	Create_shortest_command_depp_N1@return_num,w,c
 19978  002D1A  0012               	return		;funcret
 19979  002D1C                     __end_of_Create_shortest_command_depp_N1:
 19980                           	opt callstack 0
 19981                           
 19982 ;; *************** function _SPI_RET *****************
 19983 ;; Defined at:
 19984 ;;		line 98 in file "master/master_SPI.c"
 19985 ;; Parameters:    Size  Location     Type
 19986 ;;		None
 19987 ;; Auto vars:     Size  Location     Type
 19988 ;;  i               1    9[COMRAM] unsigned char 
 19989 ;; Return value:  Size  Location     Type
 19990 ;;                  1    wreg      void 
 19991 ;; Registers used:
 19992 ;;		wreg, status,2, status,0, cstack
 19993 ;; Tracked objects:
 19994 ;;		On entry : 0/0
 19995 ;;		On exit  : 0/0
 19996 ;;		Unchanged: 0/0
 19997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19998 ;;      Params:         0       0       0       0       0       0       0
 19999 ;;      Locals:         1       0       0       0       0       0       0
 20000 ;;      Temps:          2       0       0       0       0       0       0
 20001 ;;      Totals:         3       0       0       0       0       0       0
 20002 ;;Total ram usage:        3 bytes
 20003 ;; Hardware stack levels used:    1
 20004 ;; Hardware stack levels required when called:    3
 20005 ;; This function calls:
 20006 ;;		_SPI_RET_2
 20007 ;; This function is called by:
 20008 ;;		_main
 20009 ;; This function uses a non-reentrant model
 20010 ;;
 20011                           
 20012                           	psect	text95
 20013  002A42                     __ptext95:
 20014                           	opt callstack 0
 20015  002A42                     _SPI_RET:
 20016                           	opt callstack 27
 20017                           
 20018                           ;master/master_SPI.c: 99:     for (char i = 0; i < 10; i++) {
 20019                           
 20020                           ;incstack = 0
 20021  002A42  0E00               	movlw	0
 20022  002A44  6E0A               	movwf	SPI_RET@i,c
 20023  002A46                     l9924:
 20024                           
 20025                           ;master/master_SPI.c: 100:         SPI_RET_2();
 20026  002A46  EC6D  F014         	call	_SPI_RET_2	;wreg free
 20027                           
 20028                           ;master/master_SPI.c: 101:         _delay((unsigned long)((50)*(64000000/4000.0)));
 20029  002A4A  0E05               	movlw	5
 20030  002A4C  6E09               	movwf	(??_SPI_RET+1)& (0+255),c
 20031  002A4E  0E0F               	movlw	15
 20032  002A50  6E08               	movwf	??_SPI_RET& (0+255),c
 20033  002A52  0EF1               	movlw	241
 20034  002A54                     u8487:
 20035  002A54  2EE8               	decfsz	wreg,f,c
 20036  002A56  D7FE               	bra	u8487
 20037  002A58  2E08               	decfsz	??_SPI_RET& (0+255),f,c
 20038  002A5A  D7FC               	bra	u8487
 20039  002A5C  2E09               	decfsz	(??_SPI_RET+1)& (0+255),f,c
 20040  002A5E  D7FA               	bra	u8487
 20041  002A60  F000               	nop	
 20042                           
 20043                           ;master/master_SPI.c: 102:     }
 20044  002A62  2A0A               	incf	SPI_RET@i,f,c
 20045  002A64  0E09               	movlw	9
 20046  002A66  640A               	cpfsgt	SPI_RET@i,c
 20047  002A68  D7EE               	goto	l9924
 20048  002A6A  0012               	return	
 20049  002A6C                     __end_of_SPI_RET:
 20050                           	opt callstack 0
 20051                           
 20052 ;; *************** function _SPI_RET_2 *****************
 20053 ;; Defined at:
 20054 ;;		line 105 in file "master/master_SPI.c"
 20055 ;; Parameters:    Size  Location     Type
 20056 ;;		None
 20057 ;; Auto vars:     Size  Location     Type
 20058 ;;  j               1    6[COMRAM] unsigned char 
 20059 ;; Return value:  Size  Location     Type
 20060 ;;                  1    wreg      void 
 20061 ;; Registers used:
 20062 ;;		wreg, status,2, status,0, cstack
 20063 ;; Tracked objects:
 20064 ;;		On entry : 0/0
 20065 ;;		On exit  : 0/0
 20066 ;;		Unchanged: 0/0
 20067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20068 ;;      Params:         0       0       0       0       0       0       0
 20069 ;;      Locals:         1       0       0       0       0       0       0
 20070 ;;      Temps:          0       0       0       0       0       0       0
 20071 ;;      Totals:         1       0       0       0       0       0       0
 20072 ;;Total ram usage:        1 bytes
 20073 ;; Hardware stack levels used:    1
 20074 ;; Hardware stack levels required when called:    2
 20075 ;; This function calls:
 20076 ;;		_SPI_readM_2
 20077 ;; This function is called by:
 20078 ;;		_SPI_special
 20079 ;;		_Special_input
 20080 ;;		_SPI_RET
 20081 ;;		_animation_3
 20082 ;;		_animation_4
 20083 ;; This function uses a non-reentrant model
 20084 ;;
 20085                           
 20086                           	psect	text96
 20087  0028DA                     __ptext96:
 20088                           	opt callstack 0
 20089  0028DA                     _SPI_RET_2:
 20090                           	opt callstack 26
 20091                           
 20092                           ;master/master_SPI.c: 106:     for (char j = 0; j < 6; j++) {
 20093                           
 20094                           ;incstack = 0
 20095  0028DA  0E00               	movlw	0
 20096  0028DC  6E07               	movwf	SPI_RET_2@j,c
 20097  0028DE                     l7088:
 20098  0028DE  5007               	movf	SPI_RET_2@j,w,c
 20099  0028E0  EC48  F01E         	call	_SPI_readM_2
 20100  0028E4  0900               	iorlw	0
 20101  0028E6  A4D8               	btfss	status,2,c
 20102  0028E8  D7FA               	goto	l7088
 20103                           
 20104                           ;master/master_SPI.c: 108:     }
 20105  0028EA  2A07               	incf	SPI_RET_2@j,f,c
 20106  0028EC  0E05               	movlw	5
 20107  0028EE  6407               	cpfsgt	SPI_RET_2@j,c
 20108  0028F0  D7F6               	goto	l7088
 20109  0028F2  0012               	return	
 20110  0028F4                     __end_of_SPI_RET_2:
 20111                           	opt callstack 0
 20112                           
 20113 ;; *************** function _SPI_readM_2 *****************
 20114 ;; Defined at:
 20115 ;;		line 32 in file "master/master_SPI.c"
 20116 ;; Parameters:    Size  Location     Type
 20117 ;;  csPIN           1    wreg     const unsigned char 
 20118 ;; Auto vars:     Size  Location     Type
 20119 ;;  csPIN           1    2[COMRAM] const unsigned char 
 20120 ;;  i               2    4[COMRAM] int 
 20121 ;;  data            1    3[COMRAM] unsigned char 
 20122 ;; Return value:  Size  Location     Type
 20123 ;;                  1    wreg      unsigned char 
 20124 ;; Registers used:
 20125 ;;		wreg, status,2, status,0, cstack
 20126 ;; Tracked objects:
 20127 ;;		On entry : 0/0
 20128 ;;		On exit  : 0/0
 20129 ;;		Unchanged: 0/0
 20130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20131 ;;      Params:         0       0       0       0       0       0       0
 20132 ;;      Locals:         4       0       0       0       0       0       0
 20133 ;;      Temps:          2       0       0       0       0       0       0
 20134 ;;      Totals:         6       0       0       0       0       0       0
 20135 ;;Total ram usage:        6 bytes
 20136 ;; Hardware stack levels used:    1
 20137 ;; Hardware stack levels required when called:    1
 20138 ;; This function calls:
 20139 ;;		_SPIreadM
 20140 ;; This function is called by:
 20141 ;;		_SPI_special
 20142 ;;		_main
 20143 ;;		_SPI_RET_2
 20144 ;; This function uses a non-reentrant model
 20145 ;;
 20146                           
 20147                           	psect	text97
 20148  003C90                     __ptext97:
 20149                           	opt callstack 0
 20150  003C90                     _SPI_readM_2:
 20151                           	opt callstack 27
 20152                           
 20153                           ;incstack = 0
 20154                           ;SPI_readM_2@csPIN stored from wreg
 20155  003C90  6E03               	movwf	SPI_readM_2@csPIN,c
 20156                           
 20157                           ;master/master_SPI.c: 33:     int i = 0;
 20158  003C92  0E00               	movlw	0
 20159  003C94  6E06               	movwf	SPI_readM_2@i+1,c
 20160  003C96  0E00               	movlw	0
 20161  003C98  6E05               	movwf	SPI_readM_2@i,c
 20162                           
 20163                           ;master/master_SPI.c: 34:     char data;;master/master_SPI.c: 35:     for (i = 0; i < 2;
      +                           i++) {
 20164  003C9A  0E00               	movlw	0
 20165  003C9C  6E06               	movwf	SPI_readM_2@i+1,c
 20166  003C9E  0E00               	movlw	0
 20167  003CA0  6E05               	movwf	SPI_readM_2@i,c
 20168  003CA2  D024               	goto	l6628
 20169  003CA4                     l578:
 20170                           
 20171                           ;master/master_SPI.c: 38:                 LATAbits.LATA0 = i;
 20172  003CA4  B005               	btfsc	SPI_readM_2@i,0,c
 20173  003CA6  D002               	bra	u4105
 20174  003CA8  9089               	bcf	3977,0,c	;volatile
 20175  003CAA  D001               	bra	u4106
 20176  003CAC                     u4105:
 20177  003CAC  8089               	bsf	3977,0,c	;volatile
 20178  003CAE                     u4106:
 20179                           
 20180                           ;master/master_SPI.c: 39:                 break;
 20181  003CAE  D038               	goto	l6630
 20182  003CB0                     l580:
 20183                           
 20184                           ;master/master_SPI.c: 41:                 LATAbits.LATA1 = i;
 20185  003CB0  B005               	btfsc	SPI_readM_2@i,0,c
 20186  003CB2  D002               	bra	u4115
 20187  003CB4  9289               	bcf	3977,1,c	;volatile
 20188  003CB6  D001               	bra	u4116
 20189  003CB8                     u4115:
 20190  003CB8  8289               	bsf	3977,1,c	;volatile
 20191  003CBA                     u4116:
 20192                           
 20193                           ;master/master_SPI.c: 42:                 break;
 20194  003CBA  D032               	goto	l6630
 20195  003CBC                     l581:
 20196                           
 20197                           ;master/master_SPI.c: 44:                 LATAbits.LATA2 = i;
 20198  003CBC  B005               	btfsc	SPI_readM_2@i,0,c
 20199  003CBE  D002               	bra	u4125
 20200  003CC0  9489               	bcf	3977,2,c	;volatile
 20201  003CC2  D001               	bra	u4126
 20202  003CC4                     u4125:
 20203  003CC4  8489               	bsf	3977,2,c	;volatile
 20204  003CC6                     u4126:
 20205                           
 20206                           ;master/master_SPI.c: 45:                 break;
 20207  003CC6  D02C               	goto	l6630
 20208  003CC8                     l582:
 20209                           
 20210                           ;master/master_SPI.c: 47:                 LATAbits.LATA3 = i;
 20211  003CC8  B005               	btfsc	SPI_readM_2@i,0,c
 20212  003CCA  D002               	bra	u4135
 20213  003CCC  9689               	bcf	3977,3,c	;volatile
 20214  003CCE  D001               	bra	u4136
 20215  003CD0                     u4135:
 20216  003CD0  8689               	bsf	3977,3,c	;volatile
 20217  003CD2                     u4136:
 20218                           
 20219                           ;master/master_SPI.c: 48:                 break;
 20220  003CD2  D026               	goto	l6630
 20221  003CD4                     l583:
 20222                           
 20223                           ;master/master_SPI.c: 50:                 LATAbits.LATA4 = i;
 20224  003CD4  B005               	btfsc	SPI_readM_2@i,0,c
 20225  003CD6  D002               	bra	u4145
 20226  003CD8  9889               	bcf	3977,4,c	;volatile
 20227  003CDA  D001               	bra	u4146
 20228  003CDC                     u4145:
 20229  003CDC  8889               	bsf	3977,4,c	;volatile
 20230  003CDE                     u4146:
 20231                           
 20232                           ;master/master_SPI.c: 51:                 break;
 20233  003CDE  D020               	goto	l6630
 20234  003CE0                     l584:
 20235                           
 20236                           ;master/master_SPI.c: 53:                 LATAbits.LATA5 = i;
 20237  003CE0  B005               	btfsc	SPI_readM_2@i,0,c
 20238  003CE2  D002               	bra	u4155
 20239  003CE4  9A89               	bcf	3977,5,c	;volatile
 20240  003CE6  D001               	bra	u4156
 20241  003CE8                     u4155:
 20242  003CE8  8A89               	bsf	3977,5,c	;volatile
 20243  003CEA                     u4156:
 20244                           
 20245                           ;master/master_SPI.c: 54:                 break;
 20246  003CEA  D01A               	goto	l6630
 20247  003CEC                     l6628:
 20248  003CEC  5003               	movf	SPI_readM_2@csPIN,w,c
 20249  003CEE  6E01               	movwf	??_SPI_readM_2& (0+255),c
 20250  003CF0  6A02               	clrf	(??_SPI_readM_2+1)& (0+255),c
 20251                           
 20252                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20253                           ; Switch size 1, requested type "simple"
 20254                           ; Number of cases is 1, Range of values is 0 to 0
 20255                           ; switch strategies available:
 20256                           ; Name         Instructions Cycles
 20257                           ; simple_byte            4     3 (average)
 20258                           ;	Chosen strategy is simple_byte
 20259  003CF2  5002               	movf	??_SPI_readM_2+1,w,c
 20260  003CF4  0A00               	xorlw	0	; case 0
 20261  003CF6  A4D8               	btfss	status,2,c
 20262  003CF8  D013               	goto	l6630
 20263                           
 20264                           ; Switch size 1, requested type "simple"
 20265                           ; Number of cases is 6, Range of values is 0 to 5
 20266                           ; switch strategies available:
 20267                           ; Name         Instructions Cycles
 20268                           ; simple_byte           19    10 (average)
 20269                           ;	Chosen strategy is simple_byte
 20270  003CFA  5001               	movf	??_SPI_readM_2,w,c
 20271  003CFC  0A00               	xorlw	0	; case 0
 20272  003CFE  B4D8               	btfsc	status,2,c
 20273  003D00  D7D1               	goto	l578
 20274  003D02  0A01               	xorlw	1	; case 1
 20275  003D04  B4D8               	btfsc	status,2,c
 20276  003D06  D7D4               	goto	l580
 20277  003D08  0A03               	xorlw	3	; case 2
 20278  003D0A  B4D8               	btfsc	status,2,c
 20279  003D0C  D7D7               	goto	l581
 20280  003D0E  0A01               	xorlw	1	; case 3
 20281  003D10  B4D8               	btfsc	status,2,c
 20282  003D12  D7DA               	goto	l582
 20283  003D14  0A07               	xorlw	7	; case 4
 20284  003D16  B4D8               	btfsc	status,2,c
 20285  003D18  D7DD               	goto	l583
 20286  003D1A  0A01               	xorlw	1	; case 5
 20287  003D1C  B4D8               	btfsc	status,2,c
 20288  003D1E  D7E0               	goto	l584
 20289  003D20                     l6630:
 20290                           
 20291                           ;master/master_SPI.c: 56:         if (i == 0)
 20292  003D20  5005               	movf	SPI_readM_2@i,w,c
 20293  003D22  1006               	iorwf	SPI_readM_2@i+1,w,c
 20294  003D24  A4D8               	btfss	status,2,c
 20295  003D26  D003               	goto	l6634
 20296                           
 20297                           ;master/master_SPI.c: 57:             data = SPIreadM();
 20298  003D28  ECF4  F013         	call	_SPIreadM	;wreg free
 20299  003D2C  6E04               	movwf	SPI_readM_2@data,c
 20300  003D2E                     l6634:
 20301                           
 20302                           ;master/master_SPI.c: 58:     }
 20303  003D2E  4A05               	infsnz	SPI_readM_2@i,f,c
 20304  003D30  2A06               	incf	SPI_readM_2@i+1,f,c
 20305  003D32  BE06               	btfsc	SPI_readM_2@i+1,7,c
 20306  003D34  D7DB               	goto	l6628
 20307  003D36  5006               	movf	SPI_readM_2@i+1,w,c
 20308  003D38  E104               	bnz	u4170
 20309  003D3A  0E02               	movlw	2
 20310  003D3C  5C05               	subwf	SPI_readM_2@i,w,c
 20311  003D3E  A0D8               	btfss	status,0,c
 20312  003D40  D7D5               	goto	l6628
 20313  003D42                     u4170:
 20314                           
 20315                           ;master/master_SPI.c: 59:     return data;
 20316  003D42  5004               	movf	SPI_readM_2@data,w,c
 20317  003D44  0012               	return		;funcret
 20318  003D46                     __end_of_SPI_readM_2:
 20319                           	opt callstack 0
 20320                           
 20321 ;; *************** function _SPIreadM *****************
 20322 ;; Defined at:
 20323 ;;		line 15 in file "master/master_SPI.c"
 20324 ;; Parameters:    Size  Location     Type
 20325 ;;		None
 20326 ;; Auto vars:     Size  Location     Type
 20327 ;;  dumy            1    0        unsigned char 
 20328 ;; Return value:  Size  Location     Type
 20329 ;;                  1    wreg      unsigned char 
 20330 ;; Registers used:
 20331 ;;		wreg, status,2, status,0
 20332 ;; Tracked objects:
 20333 ;;		On entry : 0/0
 20334 ;;		On exit  : 0/0
 20335 ;;		Unchanged: 0/0
 20336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20337 ;;      Params:         0       0       0       0       0       0       0
 20338 ;;      Locals:         0       0       0       0       0       0       0
 20339 ;;      Temps:          0       0       0       0       0       0       0
 20340 ;;      Totals:         0       0       0       0       0       0       0
 20341 ;;Total ram usage:        0 bytes
 20342 ;; Hardware stack levels used:    1
 20343 ;; This function calls:
 20344 ;;		Nothing
 20345 ;; This function is called by:
 20346 ;;		_SPI_readM_2
 20347 ;; This function uses a non-reentrant model
 20348 ;;
 20349                           
 20350                           	psect	text98
 20351  0027E8                     __ptext98:
 20352                           	opt callstack 0
 20353  0027E8                     _SPIreadM:
 20354                           	opt callstack 27
 20355                           
 20356                           ;master/master_SPI.c: 16:     char dumy;;master/master_SPI.c: 20:     SSP1BUF = 0;
 20357                           
 20358                           ;incstack = 0
 20359  0027E8  0E00               	movlw	0
 20360  0027EA  6EC9               	movwf	4041,c	;volatile
 20361  0027EC                     l569:
 20362                           
 20363                           ;master/master_SPI.c: 21:     while (!SSP1STATbits.BF)
 20364  0027EC  A0C7               	btfss	4039,0,c	;volatile
 20365  0027EE  D7FE               	goto	l569
 20366                           
 20367                           ;master/master_SPI.c: 24:     return ((SSP1BUF >> 1));
 20368  0027F0  90D8               	bcf	status,0,c
 20369  0027F2  30C9               	rrcf	4041,w,c	;volatile
 20370  0027F4  0012               	return		;funcret
 20371  0027F6                     __end_of_SPIreadM:
 20372                           	opt callstack 0
 20373                           
 20374 ;; *************** function _SPI_M_ioport *****************
 20375 ;; Defined at:
 20376 ;;		line 62 in file "master/master_SPI.c"
 20377 ;; Parameters:    Size  Location     Type
 20378 ;;		None
 20379 ;; Auto vars:     Size  Location     Type
 20380 ;;		None
 20381 ;; Return value:  Size  Location     Type
 20382 ;;                  1    wreg      void 
 20383 ;; Registers used:
 20384 ;;		wreg, status,2
 20385 ;; Tracked objects:
 20386 ;;		On entry : 0/0
 20387 ;;		On exit  : 0/0
 20388 ;;		Unchanged: 0/0
 20389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20390 ;;      Params:         0       0       0       0       0       0       0
 20391 ;;      Locals:         0       0       0       0       0       0       0
 20392 ;;      Temps:          0       0       0       0       0       0       0
 20393 ;;      Totals:         0       0       0       0       0       0       0
 20394 ;;Total ram usage:        0 bytes
 20395 ;; Hardware stack levels used:    1
 20396 ;; This function calls:
 20397 ;;		Nothing
 20398 ;; This function is called by:
 20399 ;;		_main
 20400 ;; This function uses a non-reentrant model
 20401 ;;
 20402                           
 20403                           	psect	text99
 20404  002C60                     __ptext99:
 20405                           	opt callstack 0
 20406  002C60                     _SPI_M_ioport:
 20407                           	opt callstack 30
 20408                           
 20409                           ;master/master_SPI.c: 64:     SSP1STATbits.SMP = 0;
 20410                           
 20411                           ;incstack = 0
 20412  002C60  9EC7               	bcf	4039,7,c	;volatile
 20413                           
 20414                           ;master/master_SPI.c: 65:     SSP1STATbits.CKE = 0;
 20415  002C62  9CC7               	bcf	4039,6,c	;volatile
 20416                           
 20417                           ;master/master_SPI.c: 66:     SSP1CON1bits.SSPEN = 1;
 20418  002C64  8AC6               	bsf	4038,5,c	;volatile
 20419                           
 20420                           ;master/master_SPI.c: 67:     SSP1CON1bits.CKP = 0;
 20421  002C66  98C6               	bcf	4038,4,c	;volatile
 20422                           
 20423                           ;master/master_SPI.c: 68:     SSP1CON1bits.SSPM = 0b0000;
 20424  002C68  0EF0               	movlw	-16
 20425  002C6A  16C6               	andwf	4038,f,c	;volatile
 20426                           
 20427                           ;master/master_SPI.c: 70:     SSP1CON1 = 0b00100001;
 20428  002C6C  0E21               	movlw	33
 20429  002C6E  6EC6               	movwf	4038,c	;volatile
 20430                           
 20431                           ;master/master_SPI.c: 71:     SSP1STAT = 0b00000000;
 20432  002C70  0E00               	movlw	0
 20433  002C72  6EC7               	movwf	4039,c	;volatile
 20434                           
 20435                           ;master/master_SPI.c: 73:     TRISCbits.TRISC4 = 1;
 20436  002C74  8894               	bsf	3988,4,c	;volatile
 20437                           
 20438                           ;master/master_SPI.c: 74:     TRISCbits.TRISC5 = 0;
 20439  002C76  9A94               	bcf	3988,5,c	;volatile
 20440                           
 20441                           ;master/master_SPI.c: 75:     TRISCbits.TRISC3 = 0;
 20442  002C78  9694               	bcf	3988,3,c	;volatile
 20443                           
 20444                           ;master/master_SPI.c: 78:     TRISAbits.TRISA0 = 0;
 20445  002C7A  9092               	bcf	3986,0,c	;volatile
 20446                           
 20447                           ;master/master_SPI.c: 79:     TRISAbits.TRISA1 = 0;
 20448  002C7C  9292               	bcf	3986,1,c	;volatile
 20449                           
 20450                           ;master/master_SPI.c: 80:     TRISAbits.TRISA2 = 0;
 20451  002C7E  9492               	bcf	3986,2,c	;volatile
 20452                           
 20453                           ;master/master_SPI.c: 81:     TRISAbits.TRISA3 = 0;
 20454  002C80  9692               	bcf	3986,3,c	;volatile
 20455                           
 20456                           ;master/master_SPI.c: 82:     TRISAbits.TRISA4 = 0;
 20457  002C82  9892               	bcf	3986,4,c	;volatile
 20458                           
 20459                           ;master/master_SPI.c: 83:     TRISAbits.TRISA5 = 0;
 20460  002C84  9A92               	bcf	3986,5,c	;volatile
 20461                           
 20462                           ;master/master_SPI.c: 85:     ANSELCbits.ANSC3 = 0;
 20463  002C86  010F               	movlb	15	; () banked
 20464  002C88  973A               	bcf	58,3,b	;volatile
 20465                           
 20466                           ; BSR set to: 15
 20467                           ;master/master_SPI.c: 86:     ANSELCbits.ANSC4 = 0;
 20468  002C8A  993A               	bcf	58,4,b	;volatile
 20469                           
 20470                           ; BSR set to: 15
 20471                           ;master/master_SPI.c: 87:     ANSELCbits.ANSC5 = 0;
 20472  002C8C  9B3A               	bcf	58,5,b	;volatile
 20473                           
 20474                           ; BSR set to: 15
 20475                           ;master/master_SPI.c: 90:     LATAbits.LATA0 = 1;
 20476  002C8E  8089               	bsf	3977,0,c	;volatile
 20477                           
 20478                           ; BSR set to: 15
 20479                           ;master/master_SPI.c: 91:     LATAbits.LATA1 = 1;
 20480  002C90  8289               	bsf	3977,1,c	;volatile
 20481                           
 20482                           ; BSR set to: 15
 20483                           ;master/master_SPI.c: 92:     LATAbits.LATA2 = 1;
 20484  002C92  8489               	bsf	3977,2,c	;volatile
 20485                           
 20486                           ; BSR set to: 15
 20487                           ;master/master_SPI.c: 93:     LATAbits.LATA3 = 1;
 20488  002C94  8689               	bsf	3977,3,c	;volatile
 20489                           
 20490                           ; BSR set to: 15
 20491                           ;master/master_SPI.c: 94:     LATAbits.LATA4 = 1;
 20492  002C96  8889               	bsf	3977,4,c	;volatile
 20493                           
 20494                           ; BSR set to: 15
 20495                           ;master/master_SPI.c: 95:     LATAbits.LATA5 = 1;
 20496  002C98  8A89               	bsf	3977,5,c	;volatile
 20497                           
 20498                           ; BSR set to: 15
 20499  002C9A  0012               	return		;funcret
 20500  002C9C                     __end_of_SPI_M_ioport:
 20501                           	opt callstack 0
 20502                           
 20503 ;; *************** function _EEROM_W_DEFF *****************
 20504 ;; Defined at:
 20505 ;;		line 166 in file "master/EEROM_WR.c"
 20506 ;; Parameters:    Size  Location     Type
 20507 ;;		None
 20508 ;; Auto vars:     Size  Location     Type
 20509 ;;  i               2   11[COMRAM] int 
 20510 ;;  i               2    9[COMRAM] int 
 20511 ;;  i               2    7[COMRAM] int 
 20512 ;;  i               2    5[COMRAM] int 
 20513 ;;  i               2    3[COMRAM] int 
 20514 ;;  WRITE_ADDRES    1   13[COMRAM] unsigned char 
 20515 ;; Return value:  Size  Location     Type
 20516 ;;                  1    wreg      void 
 20517 ;; Registers used:
 20518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20519 ;; Tracked objects:
 20520 ;;		On entry : 0/0
 20521 ;;		On exit  : 0/0
 20522 ;;		Unchanged: 0/0
 20523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20524 ;;      Params:         0       0       0       0       0       0       0
 20525 ;;      Locals:        11       0       0       0       0       0       0
 20526 ;;      Temps:          0       0       0       0       0       0       0
 20527 ;;      Totals:        11       0       0       0       0       0       0
 20528 ;;Total ram usage:       11 bytes
 20529 ;; Hardware stack levels used:    1
 20530 ;; Hardware stack levels required when called:    1
 20531 ;; This function calls:
 20532 ;;		_DATAEE_WriteByte
 20533 ;; This function is called by:
 20534 ;;		_main
 20535 ;; This function uses a non-reentrant model
 20536 ;;
 20537                           
 20538                           	psect	text100
 20539  00481E                     __ptext100:
 20540                           	opt callstack 0
 20541  00481E                     _EEROM_W_DEFF:
 20542                           	opt callstack 29
 20543                           
 20544                           ;master/EEROM_WR.c: 168:  char WRITE_ADDRESS;;master/EEROM_WR.c: 170:  DATAEE_WriteByte(
      +                          0, 0);
 20545                           
 20546                           ; BSR set to: 15
 20547                           ;incstack = 0
 20548  00481E  0E00               	movlw	0
 20549  004820  6E01               	movwf	DATAEE_WriteByte@bData,c
 20550  004822  0E00               	movlw	0
 20551  004824  ECF9  F015         	call	_DATAEE_WriteByte
 20552                           
 20553                           ;master/EEROM_WR.c: 171:  WRITE_ADDRESS = 3;
 20554  004828  0E03               	movlw	3
 20555  00482A  6E0E               	movwf	EEROM_W_DEFF@WRITE_ADDRESS,c
 20556                           
 20557                           ;master/EEROM_WR.c: 172:  for (int i = 0; i < 8; i++)
 20558  00482C  0E00               	movlw	0
 20559  00482E  6E05               	movwf	EEROM_W_DEFF@i+1,c
 20560  004830  0E00               	movlw	0
 20561  004832  6E04               	movwf	EEROM_W_DEFF@i,c
 20562  004834                     l9812:
 20563                           
 20564                           ;master/EEROM_WR.c: 173:  {;master/EEROM_WR.c: 174:   DATAEE_WriteByte(WRITE_ADDRESS, (u
      +                          nsigned char)state_CE.cp[i]);
 20565  004834  0E90               	movlw	low _state_CE
 20566  004836  2404               	addwf	EEROM_W_DEFF@i,w,c
 20567  004838  6ED9               	movwf	fsr2l,c
 20568  00483A  0E01               	movlw	high _state_CE
 20569  00483C  2005               	addwfc	EEROM_W_DEFF@i+1,w,c
 20570  00483E  6EDA               	movwf	fsr2h,c
 20571  004840  50DF               	movf	indf2,w,c
 20572  004842  6E01               	movwf	DATAEE_WriteByte@bData,c
 20573  004844  500E               	movf	EEROM_W_DEFF@WRITE_ADDRESS,w,c
 20574  004846  ECF9  F015         	call	_DATAEE_WriteByte
 20575                           
 20576                           ;master/EEROM_WR.c: 175:   WRITE_ADDRESS++;
 20577  00484A  2A0E               	incf	EEROM_W_DEFF@WRITE_ADDRESS,f,c
 20578                           
 20579                           ;master/EEROM_WR.c: 176:  }
 20580  00484C  4A04               	infsnz	EEROM_W_DEFF@i,f,c
 20581  00484E  2A05               	incf	EEROM_W_DEFF@i+1,f,c
 20582  004850  BE05               	btfsc	EEROM_W_DEFF@i+1,7,c
 20583  004852  D7F0               	goto	l9812
 20584  004854  5005               	movf	EEROM_W_DEFF@i+1,w,c
 20585  004856  E104               	bnz	u7730
 20586  004858  0E08               	movlw	8
 20587  00485A  5C04               	subwf	EEROM_W_DEFF@i,w,c
 20588  00485C  A0D8               	btfss	status,0,c
 20589  00485E  D7EA               	goto	l9812
 20590  004860                     u7730:
 20591                           
 20592                           ;master/EEROM_WR.c: 177:  for (int i = 0; i < 8; i++)
 20593  004860  0E00               	movlw	0
 20594  004862  6E07               	movwf	EEROM_W_DEFF@i_301+1,c
 20595  004864  0E00               	movlw	0
 20596  004866  6E06               	movwf	EEROM_W_DEFF@i_301,c
 20597  004868                     l9826:
 20598                           
 20599                           ;master/EEROM_WR.c: 178:  {;master/EEROM_WR.c: 179:   DATAEE_WriteByte(WRITE_ADDRESS, (u
      +                          nsigned char)state_CE.co[i]);
 20600  004868  0E98               	movlw	low (_state_CE+8)
 20601  00486A  2406               	addwf	EEROM_W_DEFF@i_301,w,c
 20602  00486C  6ED9               	movwf	fsr2l,c
 20603  00486E  0E01               	movlw	high (_state_CE+8)
 20604  004870  2007               	addwfc	EEROM_W_DEFF@i_301+1,w,c
 20605  004872  6EDA               	movwf	fsr2h,c
 20606  004874  50DF               	movf	indf2,w,c
 20607  004876  6E01               	movwf	DATAEE_WriteByte@bData,c
 20608  004878  500E               	movf	EEROM_W_DEFF@WRITE_ADDRESS,w,c
 20609  00487A  ECF9  F015         	call	_DATAEE_WriteByte
 20610                           
 20611                           ;master/EEROM_WR.c: 180:   WRITE_ADDRESS++;
 20612  00487E  2A0E               	incf	EEROM_W_DEFF@WRITE_ADDRESS,f,c
 20613                           
 20614                           ;master/EEROM_WR.c: 181:  }
 20615  004880  4A06               	infsnz	EEROM_W_DEFF@i_301,f,c
 20616  004882  2A07               	incf	EEROM_W_DEFF@i_301+1,f,c
 20617  004884  BE07               	btfsc	EEROM_W_DEFF@i_301+1,7,c
 20618  004886  D7F0               	goto	l9826
 20619  004888  5007               	movf	EEROM_W_DEFF@i_301+1,w,c
 20620  00488A  E104               	bnz	u7740
 20621  00488C  0E08               	movlw	8
 20622  00488E  5C06               	subwf	EEROM_W_DEFF@i_301,w,c
 20623  004890  A0D8               	btfss	status,0,c
 20624  004892  D7EA               	goto	l9826
 20625  004894                     u7740:
 20626                           
 20627                           ;master/EEROM_WR.c: 182:  for (int i = 0; i < 12; i++)
 20628  004894  0E00               	movlw	0
 20629  004896  6E09               	movwf	EEROM_W_DEFF@i_302+1,c
 20630  004898  0E00               	movlw	0
 20631  00489A  6E08               	movwf	EEROM_W_DEFF@i_302,c
 20632  00489C                     l9840:
 20633                           
 20634                           ;master/EEROM_WR.c: 183:  {;master/EEROM_WR.c: 184:   DATAEE_WriteByte(WRITE_ADDRESS, (u
      +                          nsigned char)state_CE.ep[i]);
 20635  00489C  0EA0               	movlw	low (_state_CE+16)
 20636  00489E  2408               	addwf	EEROM_W_DEFF@i_302,w,c
 20637  0048A0  6ED9               	movwf	fsr2l,c
 20638  0048A2  0E01               	movlw	high (_state_CE+16)
 20639  0048A4  2009               	addwfc	EEROM_W_DEFF@i_302+1,w,c
 20640  0048A6  6EDA               	movwf	fsr2h,c
 20641  0048A8  50DF               	movf	indf2,w,c
 20642  0048AA  6E01               	movwf	DATAEE_WriteByte@bData,c
 20643  0048AC  500E               	movf	EEROM_W_DEFF@WRITE_ADDRESS,w,c
 20644  0048AE  ECF9  F015         	call	_DATAEE_WriteByte
 20645                           
 20646                           ;master/EEROM_WR.c: 185:   WRITE_ADDRESS++;
 20647  0048B2  2A0E               	incf	EEROM_W_DEFF@WRITE_ADDRESS,f,c
 20648                           
 20649                           ;master/EEROM_WR.c: 186:  }
 20650  0048B4  4A08               	infsnz	EEROM_W_DEFF@i_302,f,c
 20651  0048B6  2A09               	incf	EEROM_W_DEFF@i_302+1,f,c
 20652  0048B8  BE09               	btfsc	EEROM_W_DEFF@i_302+1,7,c
 20653  0048BA  D7F0               	goto	l9840
 20654  0048BC  5009               	movf	EEROM_W_DEFF@i_302+1,w,c
 20655  0048BE  E104               	bnz	u7750
 20656  0048C0  0E0C               	movlw	12
 20657  0048C2  5C08               	subwf	EEROM_W_DEFF@i_302,w,c
 20658  0048C4  A0D8               	btfss	status,0,c
 20659  0048C6  D7EA               	goto	l9840
 20660  0048C8                     u7750:
 20661                           
 20662                           ;master/EEROM_WR.c: 187:  for (int i = 0; i < 12; i++)
 20663  0048C8  0E00               	movlw	0
 20664  0048CA  6E0B               	movwf	EEROM_W_DEFF@i_303+1,c
 20665  0048CC  0E00               	movlw	0
 20666  0048CE  6E0A               	movwf	EEROM_W_DEFF@i_303,c
 20667  0048D0                     l9854:
 20668                           
 20669                           ;master/EEROM_WR.c: 188:  {;master/EEROM_WR.c: 189:   DATAEE_WriteByte(WRITE_ADDRESS, (u
      +                          nsigned char)state_CE.eo[i]);
 20670  0048D0  0EAC               	movlw	low (_state_CE+28)
 20671  0048D2  240A               	addwf	EEROM_W_DEFF@i_303,w,c
 20672  0048D4  6ED9               	movwf	fsr2l,c
 20673  0048D6  0E01               	movlw	high (_state_CE+28)
 20674  0048D8  200B               	addwfc	EEROM_W_DEFF@i_303+1,w,c
 20675  0048DA  6EDA               	movwf	fsr2h,c
 20676  0048DC  50DF               	movf	indf2,w,c
 20677  0048DE  6E01               	movwf	DATAEE_WriteByte@bData,c
 20678  0048E0  500E               	movf	EEROM_W_DEFF@WRITE_ADDRESS,w,c
 20679  0048E2  ECF9  F015         	call	_DATAEE_WriteByte
 20680                           
 20681                           ;master/EEROM_WR.c: 190:   WRITE_ADDRESS++;
 20682  0048E6  2A0E               	incf	EEROM_W_DEFF@WRITE_ADDRESS,f,c
 20683                           
 20684                           ;master/EEROM_WR.c: 191:  }
 20685  0048E8  4A0A               	infsnz	EEROM_W_DEFF@i_303,f,c
 20686  0048EA  2A0B               	incf	EEROM_W_DEFF@i_303+1,f,c
 20687  0048EC  BE0B               	btfsc	EEROM_W_DEFF@i_303+1,7,c
 20688  0048EE  D7F0               	goto	l9854
 20689  0048F0  500B               	movf	EEROM_W_DEFF@i_303+1,w,c
 20690  0048F2  E104               	bnz	u7760
 20691  0048F4  0E0C               	movlw	12
 20692  0048F6  5C0A               	subwf	EEROM_W_DEFF@i_303,w,c
 20693  0048F8  A0D8               	btfss	status,0,c
 20694  0048FA  D7EA               	goto	l9854
 20695  0048FC                     u7760:
 20696                           
 20697                           ;master/EEROM_WR.c: 192:  for (int i = 0; i < 6; i++)
 20698  0048FC  0E00               	movlw	0
 20699  0048FE  6E0D               	movwf	EEROM_W_DEFF@i_304+1,c
 20700  004900  0E00               	movlw	0
 20701  004902  6E0C               	movwf	EEROM_W_DEFF@i_304,c
 20702  004904                     l9868:
 20703                           
 20704                           ;master/EEROM_WR.c: 193:  {;master/EEROM_WR.c: 194:   DATAEE_WriteByte(WRITE_ADDRESS, (u
      +                          nsigned char)state_CE.sp[i]);
 20705  004904  0EB8               	movlw	low (_state_CE+40)
 20706  004906  240C               	addwf	EEROM_W_DEFF@i_304,w,c
 20707  004908  6ED9               	movwf	fsr2l,c
 20708  00490A  0E01               	movlw	high (_state_CE+40)
 20709  00490C  200D               	addwfc	EEROM_W_DEFF@i_304+1,w,c
 20710  00490E  6EDA               	movwf	fsr2h,c
 20711  004910  50DF               	movf	indf2,w,c
 20712  004912  6E01               	movwf	DATAEE_WriteByte@bData,c
 20713  004914  500E               	movf	EEROM_W_DEFF@WRITE_ADDRESS,w,c
 20714  004916  ECF9  F015         	call	_DATAEE_WriteByte
 20715                           
 20716                           ;master/EEROM_WR.c: 195:   WRITE_ADDRESS++;
 20717  00491A  2A0E               	incf	EEROM_W_DEFF@WRITE_ADDRESS,f,c
 20718                           
 20719                           ;master/EEROM_WR.c: 196:  }
 20720  00491C  4A0C               	infsnz	EEROM_W_DEFF@i_304,f,c
 20721  00491E  2A0D               	incf	EEROM_W_DEFF@i_304+1,f,c
 20722  004920  BE0D               	btfsc	EEROM_W_DEFF@i_304+1,7,c
 20723  004922  D7F0               	goto	l9868
 20724  004924  500D               	movf	EEROM_W_DEFF@i_304+1,w,c
 20725  004926  E105               	bnz	u7770
 20726  004928  0E06               	movlw	6
 20727  00492A  5C0C               	subwf	EEROM_W_DEFF@i_304,w,c
 20728  00492C  B0D8               	btfsc	status,0,c
 20729  00492E  0012               	return	
 20730  004930  D7E9               	goto	l9868
 20731  004932                     u7770:
 20732  004932  0012               	return		;funcret
 20733  004934                     __end_of_EEROM_W_DEFF:
 20734                           	opt callstack 0
 20735                           
 20736 ;; *************** function _EEROM_WR_ioport *****************
 20737 ;; Defined at:
 20738 ;;		line 94 in file "master/EEROM_WR.c"
 20739 ;; Parameters:    Size  Location     Type
 20740 ;;		None
 20741 ;; Auto vars:     Size  Location     Type
 20742 ;;		None
 20743 ;; Return value:  Size  Location     Type
 20744 ;;                  1    wreg      void 
 20745 ;; Registers used:
 20746 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20747 ;; Tracked objects:
 20748 ;;		On entry : 0/0
 20749 ;;		On exit  : 0/0
 20750 ;;		Unchanged: 0/0
 20751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20752 ;;      Params:         0       0       0       0       0       0       0
 20753 ;;      Locals:         0       0       0       0       0       0       0
 20754 ;;      Temps:          0       0       0       0       0       0       0
 20755 ;;      Totals:         0       0       0       0       0       0       0
 20756 ;;Total ram usage:        0 bytes
 20757 ;; Hardware stack levels used:    1
 20758 ;; Hardware stack levels required when called:    2
 20759 ;; This function calls:
 20760 ;;		_DATAEE_ReadByte
 20761 ;;		_DATAEE_WriteByte
 20762 ;;		_EEROM_R_DEFF
 20763 ;;		_over_write_CE
 20764 ;; This function is called by:
 20765 ;;		_main
 20766 ;; This function uses a non-reentrant model
 20767 ;;
 20768                           
 20769                           	psect	text101
 20770  00313A                     __ptext101:
 20771                           	opt callstack 0
 20772  00313A                     _EEROM_WR_ioport:
 20773                           	opt callstack 28
 20774                           
 20775                           ;master/EEROM_WR.c: 97:  if (DATAEE_ReadByte(0) == 0xFF)
 20776                           
 20777                           ;incstack = 0
 20778  00313A  0E00               	movlw	0
 20779  00313C  EC0A  F014         	call	_DATAEE_ReadByte
 20780  003140  0AFF               	xorlw	255
 20781  003142  A4D8               	btfss	status,2,c
 20782  003144  D013               	goto	l9786
 20783                           
 20784                           ;master/EEROM_WR.c: 98:  {;master/EEROM_WR.c: 99:   over_write_CE(deff_CE);
 20785  003146  0EE9               	movlw	low _deff_CE
 20786  003148  6EF6               	movwf	tblptrl,c
 20787  00314A                     	if	1	;There is more than 1 active tblptr byte
 20788  00314A  0E7D               	movlw	high _deff_CE
 20789  00314C  6EF7               	movwf	tblptrh,c
 20790  00314E                     	endif
 20791  00314E                     	if	0	;There are less than 3 active tblptr bytes
 20792  00314E                     	endif
 20793  00314E  EE00  F001         	lfsr	0,over_write_CE@write_CE
 20794  003152  0E2D               	movlw	45
 20795  003154                     u7710:
 20796  003154  0009               	tblrd		*+
 20797  003156  CFF5 FFEE          	movff	tablat,postinc0
 20798  00315A  06E8               	decf	wreg,f,c
 20799  00315C  E2FB               	bc	u7710
 20800  00315E  0E2E               	movlw	46
 20801  003160  5EE9               	subwf	fsr0l,f,c
 20802  003162  6AE8               	clrf	wreg,c
 20803  003164  5AEA               	subwfb	fsr0h,f,c
 20804  003166  EC85  F023         	call	_over_write_CE	;wreg free
 20805                           
 20806                           ;master/EEROM_WR.c: 101:  }
 20807  00316A  D002               	goto	l9788
 20808  00316C                     l9786:
 20809                           
 20810                           ;master/EEROM_WR.c: 103:  {;master/EEROM_WR.c: 104:   EEROM_R_DEFF();
 20811  00316C  EC04  F023         	call	_EEROM_R_DEFF	;wreg free
 20812  003170                     l9788:
 20813                           
 20814                           ;master/EEROM_WR.c: 107:  game_flag = DATAEE_ReadByte(2);
 20815  003170  0E02               	movlw	2
 20816  003172  EC0A  F014         	call	_DATAEE_ReadByte
 20817  003176  0100               	movlb	0	; () banked
 20818  003178  6FF5               	movwf	_game_flag& (0+255),b
 20819                           
 20820                           ; BSR set to: 0
 20821                           ;master/EEROM_WR.c: 108:  if (game_flag == 0xFF)
 20822  00317A  29F5               	incf	_game_flag& (0+255),w,b
 20823  00317C  A4D8               	btfss	status,2,c
 20824  00317E  0012               	return	
 20825                           
 20826                           ; BSR set to: 0
 20827                           ;master/EEROM_WR.c: 109:  {;master/EEROM_WR.c: 110:   game_flag = 0;
 20828  003180  0E00               	movlw	0
 20829  003182  6FF5               	movwf	_game_flag& (0+255),b
 20830                           
 20831                           ; BSR set to: 0
 20832                           ;master/EEROM_WR.c: 111:   DATAEE_WriteByte(2, 0);
 20833  003184  0E00               	movlw	0
 20834  003186  6E01               	movwf	DATAEE_WriteByte@bData,c
 20835  003188  0E02               	movlw	2
 20836  00318A  ECF9  F015         	call	_DATAEE_WriteByte
 20837  00318E  0012               	return		;funcret
 20838  003190                     __end_of_EEROM_WR_ioport:
 20839                           	opt callstack 0
 20840                           
 20841 ;; *************** function _over_write_CE *****************
 20842 ;; Defined at:
 20843 ;;		line 324 in file "master/operation_CES.c"
 20844 ;; Parameters:    Size  Location     Type
 20845 ;;  write_CE       46    0[COMRAM] const struct CE_2
 20846 ;; Auto vars:     Size  Location     Type
 20847 ;;  i               2   48[COMRAM] int 
 20848 ;; Return value:  Size  Location     Type
 20849 ;;                  1    wreg      void 
 20850 ;; Registers used:
 20851 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20852 ;; Tracked objects:
 20853 ;;		On entry : 0/0
 20854 ;;		On exit  : 0/0
 20855 ;;		Unchanged: 0/0
 20856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20857 ;;      Params:        46       0       0       0       0       0       0
 20858 ;;      Locals:         2       0       0       0       0       0       0
 20859 ;;      Temps:          2       0       0       0       0       0       0
 20860 ;;      Totals:        50       0       0       0       0       0       0
 20861 ;;Total ram usage:       50 bytes
 20862 ;; Hardware stack levels used:    1
 20863 ;; This function calls:
 20864 ;;		Nothing
 20865 ;; This function is called by:
 20866 ;;		_EEROM_R_SAVE
 20867 ;;		_EEROM_WR_ioport
 20868 ;; This function uses a non-reentrant model
 20869 ;;
 20870                           
 20871                           	psect	text102
 20872  00470A                     __ptext102:
 20873                           	opt callstack 0
 20874  00470A                     _over_write_CE:
 20875                           	opt callstack 28
 20876                           
 20877                           ;master/operation_CES.c: 324: void over_write_CE(const CE write_CE);master/operation_CES
      +                          .c: 325: {;master/operation_CES.c: 326:      int i;;master/operation_CES.c: 327:      fo
      +                          r (i = 0; i < 8; i++)
 20878                           
 20879                           ;incstack = 0
 20880  00470A  0E00               	movlw	0
 20881  00470C  6E32               	movwf	over_write_CE@i+1,c
 20882  00470E  0E00               	movlw	0
 20883  004710  6E31               	movwf	over_write_CE@i,c
 20884  004712                     l8970:
 20885                           
 20886                           ;master/operation_CES.c: 328:      {;master/operation_CES.c: 329:          state_CE.co[i
      +                          ] = write_CE.co[i];
 20887  004712  0E08               	movlw	8
 20888  004714  2431               	addwf	over_write_CE@i,w,c
 20889  004716  6E2F               	movwf	??_over_write_CE& (0+255),c
 20890  004718  0E00               	movlw	0
 20891  00471A  2032               	addwfc	over_write_CE@i+1,w,c
 20892  00471C  6E30               	movwf	(??_over_write_CE+1)& (0+255),c
 20893  00471E  0E01               	movlw	low over_write_CE@write_CE
 20894  004720  242F               	addwf	??_over_write_CE,w,c
 20895  004722  6ED9               	movwf	fsr2l,c
 20896  004724  0E00               	movlw	high over_write_CE@write_CE
 20897  004726  2030               	addwfc	??_over_write_CE+1,w,c
 20898  004728  6EDA               	movwf	fsr2h,c
 20899  00472A  0E98               	movlw	low (_state_CE+8)
 20900  00472C  2431               	addwf	over_write_CE@i,w,c
 20901  00472E  6EE1               	movwf	fsr1l,c
 20902  004730  0E01               	movlw	high (_state_CE+8)
 20903  004732  2032               	addwfc	over_write_CE@i+1,w,c
 20904  004734  6EE2               	movwf	fsr1h,c
 20905  004736  CFDF FFE7          	movff	indf2,indf1
 20906                           
 20907                           ;master/operation_CES.c: 330:          state_CE.cp[i] = write_CE.cp[i];
 20908  00473A  0E01               	movlw	low over_write_CE@write_CE
 20909  00473C  2431               	addwf	over_write_CE@i,w,c
 20910  00473E  6ED9               	movwf	fsr2l,c
 20911  004740  0E00               	movlw	high over_write_CE@write_CE
 20912  004742  2032               	addwfc	over_write_CE@i+1,w,c
 20913  004744  6EDA               	movwf	fsr2h,c
 20914  004746  0E90               	movlw	low _state_CE
 20915  004748  2431               	addwf	over_write_CE@i,w,c
 20916  00474A  6EE1               	movwf	fsr1l,c
 20917  00474C  0E01               	movlw	high _state_CE
 20918  00474E  2032               	addwfc	over_write_CE@i+1,w,c
 20919  004750  6EE2               	movwf	fsr1h,c
 20920  004752  CFDF FFE7          	movff	indf2,indf1
 20921                           
 20922                           ;master/operation_CES.c: 331:      }
 20923  004756  4A31               	infsnz	over_write_CE@i,f,c
 20924  004758  2A32               	incf	over_write_CE@i+1,f,c
 20925  00475A  BE32               	btfsc	over_write_CE@i+1,7,c
 20926  00475C  D7DA               	goto	l8970
 20927  00475E  5032               	movf	over_write_CE@i+1,w,c
 20928  004760  E104               	bnz	u6820
 20929  004762  0E08               	movlw	8
 20930  004764  5C31               	subwf	over_write_CE@i,w,c
 20931  004766  A0D8               	btfss	status,0,c
 20932  004768  D7D4               	goto	l8970
 20933  00476A                     u6820:
 20934                           
 20935                           ;master/operation_CES.c: 332:      for (i = 0; i < 12; i++)
 20936  00476A  0E00               	movlw	0
 20937  00476C  6E32               	movwf	over_write_CE@i+1,c
 20938  00476E  0E00               	movlw	0
 20939  004770  6E31               	movwf	over_write_CE@i,c
 20940  004772                     l8982:
 20941                           
 20942                           ;master/operation_CES.c: 333:      {;master/operation_CES.c: 334:          state_CE.eo[i
      +                          ] = write_CE.eo[i];
 20943  004772  0E1C               	movlw	28
 20944  004774  2431               	addwf	over_write_CE@i,w,c
 20945  004776  6E2F               	movwf	??_over_write_CE& (0+255),c
 20946  004778  0E00               	movlw	0
 20947  00477A  2032               	addwfc	over_write_CE@i+1,w,c
 20948  00477C  6E30               	movwf	(??_over_write_CE+1)& (0+255),c
 20949  00477E  0E01               	movlw	low over_write_CE@write_CE
 20950  004780  242F               	addwf	??_over_write_CE,w,c
 20951  004782  6ED9               	movwf	fsr2l,c
 20952  004784  0E00               	movlw	high over_write_CE@write_CE
 20953  004786  2030               	addwfc	??_over_write_CE+1,w,c
 20954  004788  6EDA               	movwf	fsr2h,c
 20955  00478A  0EAC               	movlw	low (_state_CE+28)
 20956  00478C  2431               	addwf	over_write_CE@i,w,c
 20957  00478E  6EE1               	movwf	fsr1l,c
 20958  004790  0E01               	movlw	high (_state_CE+28)
 20959  004792  2032               	addwfc	over_write_CE@i+1,w,c
 20960  004794  6EE2               	movwf	fsr1h,c
 20961  004796  CFDF FFE7          	movff	indf2,indf1
 20962                           
 20963                           ;master/operation_CES.c: 335:          state_CE.ep[i] = write_CE.ep[i];
 20964  00479A  0E10               	movlw	16
 20965  00479C  2431               	addwf	over_write_CE@i,w,c
 20966  00479E  6E2F               	movwf	??_over_write_CE& (0+255),c
 20967  0047A0  0E00               	movlw	0
 20968  0047A2  2032               	addwfc	over_write_CE@i+1,w,c
 20969  0047A4  6E30               	movwf	(??_over_write_CE+1)& (0+255),c
 20970  0047A6  0E01               	movlw	low over_write_CE@write_CE
 20971  0047A8  242F               	addwf	??_over_write_CE,w,c
 20972  0047AA  6ED9               	movwf	fsr2l,c
 20973  0047AC  0E00               	movlw	high over_write_CE@write_CE
 20974  0047AE  2030               	addwfc	??_over_write_CE+1,w,c
 20975  0047B0  6EDA               	movwf	fsr2h,c
 20976  0047B2  0EA0               	movlw	low (_state_CE+16)
 20977  0047B4  2431               	addwf	over_write_CE@i,w,c
 20978  0047B6  6EE1               	movwf	fsr1l,c
 20979  0047B8  0E01               	movlw	high (_state_CE+16)
 20980  0047BA  2032               	addwfc	over_write_CE@i+1,w,c
 20981  0047BC  6EE2               	movwf	fsr1h,c
 20982  0047BE  CFDF FFE7          	movff	indf2,indf1
 20983                           
 20984                           ;master/operation_CES.c: 336:      }
 20985  0047C2  4A31               	infsnz	over_write_CE@i,f,c
 20986  0047C4  2A32               	incf	over_write_CE@i+1,f,c
 20987  0047C6  BE32               	btfsc	over_write_CE@i+1,7,c
 20988  0047C8  D7D4               	goto	l8982
 20989  0047CA  5032               	movf	over_write_CE@i+1,w,c
 20990  0047CC  E104               	bnz	u6830
 20991  0047CE  0E0C               	movlw	12
 20992  0047D0  5C31               	subwf	over_write_CE@i,w,c
 20993  0047D2  A0D8               	btfss	status,0,c
 20994  0047D4  D7CE               	goto	l8982
 20995  0047D6                     u6830:
 20996                           
 20997                           ;master/operation_CES.c: 337:      for (i = 0; i < 6; i++)
 20998  0047D6  0E00               	movlw	0
 20999  0047D8  6E32               	movwf	over_write_CE@i+1,c
 21000  0047DA  0E00               	movlw	0
 21001  0047DC  6E31               	movwf	over_write_CE@i,c
 21002  0047DE                     l8994:
 21003                           
 21004                           ;master/operation_CES.c: 338:      {;master/operation_CES.c: 339:          state_CE.sp[i
      +                          ] = write_CE.sp[i];
 21005  0047DE  0E28               	movlw	40
 21006  0047E0  2431               	addwf	over_write_CE@i,w,c
 21007  0047E2  6E2F               	movwf	??_over_write_CE& (0+255),c
 21008  0047E4  0E00               	movlw	0
 21009  0047E6  2032               	addwfc	over_write_CE@i+1,w,c
 21010  0047E8  6E30               	movwf	(??_over_write_CE+1)& (0+255),c
 21011  0047EA  0E01               	movlw	low over_write_CE@write_CE
 21012  0047EC  242F               	addwf	??_over_write_CE,w,c
 21013  0047EE  6ED9               	movwf	fsr2l,c
 21014  0047F0  0E00               	movlw	high over_write_CE@write_CE
 21015  0047F2  2030               	addwfc	??_over_write_CE+1,w,c
 21016  0047F4  6EDA               	movwf	fsr2h,c
 21017  0047F6  0EB8               	movlw	low (_state_CE+40)
 21018  0047F8  2431               	addwf	over_write_CE@i,w,c
 21019  0047FA  6EE1               	movwf	fsr1l,c
 21020  0047FC  0E01               	movlw	high (_state_CE+40)
 21021  0047FE  2032               	addwfc	over_write_CE@i+1,w,c
 21022  004800  6EE2               	movwf	fsr1h,c
 21023  004802  CFDF FFE7          	movff	indf2,indf1
 21024                           
 21025                           ;master/operation_CES.c: 340:      }
 21026  004806  4A31               	infsnz	over_write_CE@i,f,c
 21027  004808  2A32               	incf	over_write_CE@i+1,f,c
 21028  00480A  BE32               	btfsc	over_write_CE@i+1,7,c
 21029  00480C  D7E8               	goto	l8994
 21030  00480E  5032               	movf	over_write_CE@i+1,w,c
 21031  004810  E105               	bnz	u6840
 21032  004812  0E06               	movlw	6
 21033  004814  5C31               	subwf	over_write_CE@i,w,c
 21034  004816  B0D8               	btfsc	status,0,c
 21035  004818  0012               	return	
 21036  00481A  D7E1               	goto	l8994
 21037  00481C                     u6840:
 21038  00481C  0012               	return		;funcret
 21039  00481E                     __end_of_over_write_CE:
 21040                           	opt callstack 0
 21041                           
 21042 ;; *************** function _EEROM_R_DEFF *****************
 21043 ;; Defined at:
 21044 ;;		line 135 in file "master/EEROM_WR.c"
 21045 ;; Parameters:    Size  Location     Type
 21046 ;;		None
 21047 ;; Auto vars:     Size  Location     Type
 21048 ;;  i               2    9[COMRAM] int 
 21049 ;;  i               2    7[COMRAM] int 
 21050 ;;  i               2    5[COMRAM] int 
 21051 ;;  i               2    3[COMRAM] int 
 21052 ;;  i               2    1[COMRAM] int 
 21053 ;;  READ_ADDRESS    1   11[COMRAM] unsigned char 
 21054 ;; Return value:  Size  Location     Type
 21055 ;;                  1    wreg      void 
 21056 ;; Registers used:
 21057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21058 ;; Tracked objects:
 21059 ;;		On entry : 0/0
 21060 ;;		On exit  : 0/0
 21061 ;;		Unchanged: 0/0
 21062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21063 ;;      Params:         0       0       0       0       0       0       0
 21064 ;;      Locals:        11       0       0       0       0       0       0
 21065 ;;      Temps:          0       0       0       0       0       0       0
 21066 ;;      Totals:        11       0       0       0       0       0       0
 21067 ;;Total ram usage:       11 bytes
 21068 ;; Hardware stack levels used:    1
 21069 ;; Hardware stack levels required when called:    1
 21070 ;; This function calls:
 21071 ;;		_DATAEE_ReadByte
 21072 ;; This function is called by:
 21073 ;;		_EEROM_WR_ioport
 21074 ;; This function uses a non-reentrant model
 21075 ;;
 21076                           
 21077                           	psect	text103
 21078  004608                     __ptext103:
 21079                           	opt callstack 0
 21080  004608                     _EEROM_R_DEFF:
 21081                           	opt callstack 28
 21082                           
 21083                           ;master/EEROM_WR.c: 137:  char READ_ADDRESS;;master/EEROM_WR.c: 138:  READ_ADDRESS = 3;
 21084                           
 21085                           ;incstack = 0
 21086  004608  0E03               	movlw	3
 21087  00460A  6E0C               	movwf	EEROM_R_DEFF@READ_ADDRESS,c
 21088                           
 21089                           ;master/EEROM_WR.c: 139:  for (int i = 0; i < 8; i++)
 21090  00460C  0E00               	movlw	0
 21091  00460E  6E03               	movwf	EEROM_R_DEFF@i+1,c
 21092  004610  0E00               	movlw	0
 21093  004612  6E02               	movwf	EEROM_R_DEFF@i,c
 21094  004614                     l9506:
 21095                           
 21096                           ;master/EEROM_WR.c: 140:  {;master/EEROM_WR.c: 141:   state_CE.cp[i] = (unsigned char)DA
      +                          TAEE_ReadByte(READ_ADDRESS);
 21097  004614  0E90               	movlw	low _state_CE
 21098  004616  2402               	addwf	EEROM_R_DEFF@i,w,c
 21099  004618  6ED9               	movwf	fsr2l,c
 21100  00461A  0E01               	movlw	high _state_CE
 21101  00461C  2003               	addwfc	EEROM_R_DEFF@i+1,w,c
 21102  00461E  6EDA               	movwf	fsr2h,c
 21103  004620  500C               	movf	EEROM_R_DEFF@READ_ADDRESS,w,c
 21104  004622  EC0A  F014         	call	_DATAEE_ReadByte
 21105  004626  6EDF               	movwf	indf2,c
 21106                           
 21107                           ;master/EEROM_WR.c: 142:   READ_ADDRESS++;
 21108  004628  2A0C               	incf	EEROM_R_DEFF@READ_ADDRESS,f,c
 21109                           
 21110                           ;master/EEROM_WR.c: 143:  }
 21111  00462A  4A02               	infsnz	EEROM_R_DEFF@i,f,c
 21112  00462C  2A03               	incf	EEROM_R_DEFF@i+1,f,c
 21113  00462E  BE03               	btfsc	EEROM_R_DEFF@i+1,7,c
 21114  004630  D7F1               	goto	l9506
 21115  004632  5003               	movf	EEROM_R_DEFF@i+1,w,c
 21116  004634  E104               	bnz	u7430
 21117  004636  0E08               	movlw	8
 21118  004638  5C02               	subwf	EEROM_R_DEFF@i,w,c
 21119  00463A  A0D8               	btfss	status,0,c
 21120  00463C  D7EB               	goto	l9506
 21121  00463E                     u7430:
 21122                           
 21123                           ;master/EEROM_WR.c: 144:  for (int i = 0; i < 8; i++)
 21124  00463E  0E00               	movlw	0
 21125  004640  6E05               	movwf	EEROM_R_DEFF@i_294+1,c
 21126  004642  0E00               	movlw	0
 21127  004644  6E04               	movwf	EEROM_R_DEFF@i_294,c
 21128  004646                     l9520:
 21129                           
 21130                           ;master/EEROM_WR.c: 145:  {;master/EEROM_WR.c: 146:   state_CE.co[i] = (unsigned char)DA
      +                          TAEE_ReadByte(READ_ADDRESS);
 21131  004646  0E98               	movlw	low (_state_CE+8)
 21132  004648  2404               	addwf	EEROM_R_DEFF@i_294,w,c
 21133  00464A  6ED9               	movwf	fsr2l,c
 21134  00464C  0E01               	movlw	high (_state_CE+8)
 21135  00464E  2005               	addwfc	EEROM_R_DEFF@i_294+1,w,c
 21136  004650  6EDA               	movwf	fsr2h,c
 21137  004652  500C               	movf	EEROM_R_DEFF@READ_ADDRESS,w,c
 21138  004654  EC0A  F014         	call	_DATAEE_ReadByte
 21139  004658  6EDF               	movwf	indf2,c
 21140                           
 21141                           ;master/EEROM_WR.c: 147:   READ_ADDRESS++;
 21142  00465A  2A0C               	incf	EEROM_R_DEFF@READ_ADDRESS,f,c
 21143                           
 21144                           ;master/EEROM_WR.c: 148:  }
 21145  00465C  4A04               	infsnz	EEROM_R_DEFF@i_294,f,c
 21146  00465E  2A05               	incf	EEROM_R_DEFF@i_294+1,f,c
 21147  004660  BE05               	btfsc	EEROM_R_DEFF@i_294+1,7,c
 21148  004662  D7F1               	goto	l9520
 21149  004664  5005               	movf	EEROM_R_DEFF@i_294+1,w,c
 21150  004666  E104               	bnz	u7440
 21151  004668  0E08               	movlw	8
 21152  00466A  5C04               	subwf	EEROM_R_DEFF@i_294,w,c
 21153  00466C  A0D8               	btfss	status,0,c
 21154  00466E  D7EB               	goto	l9520
 21155  004670                     u7440:
 21156                           
 21157                           ;master/EEROM_WR.c: 149:  for (int i = 0; i < 12; i++)
 21158  004670  0E00               	movlw	0
 21159  004672  6E07               	movwf	EEROM_R_DEFF@i_295+1,c
 21160  004674  0E00               	movlw	0
 21161  004676  6E06               	movwf	EEROM_R_DEFF@i_295,c
 21162  004678                     l9534:
 21163                           
 21164                           ;master/EEROM_WR.c: 150:  {;master/EEROM_WR.c: 151:   state_CE.ep[i] = (unsigned char)DA
      +                          TAEE_ReadByte(READ_ADDRESS);
 21165  004678  0EA0               	movlw	low (_state_CE+16)
 21166  00467A  2406               	addwf	EEROM_R_DEFF@i_295,w,c
 21167  00467C  6ED9               	movwf	fsr2l,c
 21168  00467E  0E01               	movlw	high (_state_CE+16)
 21169  004680  2007               	addwfc	EEROM_R_DEFF@i_295+1,w,c
 21170  004682  6EDA               	movwf	fsr2h,c
 21171  004684  500C               	movf	EEROM_R_DEFF@READ_ADDRESS,w,c
 21172  004686  EC0A  F014         	call	_DATAEE_ReadByte
 21173  00468A  6EDF               	movwf	indf2,c
 21174                           
 21175                           ;master/EEROM_WR.c: 152:   READ_ADDRESS++;
 21176  00468C  2A0C               	incf	EEROM_R_DEFF@READ_ADDRESS,f,c
 21177                           
 21178                           ;master/EEROM_WR.c: 153:  }
 21179  00468E  4A06               	infsnz	EEROM_R_DEFF@i_295,f,c
 21180  004690  2A07               	incf	EEROM_R_DEFF@i_295+1,f,c
 21181  004692  BE07               	btfsc	EEROM_R_DEFF@i_295+1,7,c
 21182  004694  D7F1               	goto	l9534
 21183  004696  5007               	movf	EEROM_R_DEFF@i_295+1,w,c
 21184  004698  E104               	bnz	u7450
 21185  00469A  0E0C               	movlw	12
 21186  00469C  5C06               	subwf	EEROM_R_DEFF@i_295,w,c
 21187  00469E  A0D8               	btfss	status,0,c
 21188  0046A0  D7EB               	goto	l9534
 21189  0046A2                     u7450:
 21190                           
 21191                           ;master/EEROM_WR.c: 154:  for (int i = 0; i < 12; i++)
 21192  0046A2  0E00               	movlw	0
 21193  0046A4  6E09               	movwf	EEROM_R_DEFF@i_296+1,c
 21194  0046A6  0E00               	movlw	0
 21195  0046A8  6E08               	movwf	EEROM_R_DEFF@i_296,c
 21196  0046AA                     l9548:
 21197                           
 21198                           ;master/EEROM_WR.c: 155:  {;master/EEROM_WR.c: 156:   state_CE.eo[i] = (unsigned char)DA
      +                          TAEE_ReadByte(READ_ADDRESS);
 21199  0046AA  0EAC               	movlw	low (_state_CE+28)
 21200  0046AC  2408               	addwf	EEROM_R_DEFF@i_296,w,c
 21201  0046AE  6ED9               	movwf	fsr2l,c
 21202  0046B0  0E01               	movlw	high (_state_CE+28)
 21203  0046B2  2009               	addwfc	EEROM_R_DEFF@i_296+1,w,c
 21204  0046B4  6EDA               	movwf	fsr2h,c
 21205  0046B6  500C               	movf	EEROM_R_DEFF@READ_ADDRESS,w,c
 21206  0046B8  EC0A  F014         	call	_DATAEE_ReadByte
 21207  0046BC  6EDF               	movwf	indf2,c
 21208                           
 21209                           ;master/EEROM_WR.c: 157:   READ_ADDRESS++;
 21210  0046BE  2A0C               	incf	EEROM_R_DEFF@READ_ADDRESS,f,c
 21211                           
 21212                           ;master/EEROM_WR.c: 158:  }
 21213  0046C0  4A08               	infsnz	EEROM_R_DEFF@i_296,f,c
 21214  0046C2  2A09               	incf	EEROM_R_DEFF@i_296+1,f,c
 21215  0046C4  BE09               	btfsc	EEROM_R_DEFF@i_296+1,7,c
 21216  0046C6  D7F1               	goto	l9548
 21217  0046C8  5009               	movf	EEROM_R_DEFF@i_296+1,w,c
 21218  0046CA  E104               	bnz	u7460
 21219  0046CC  0E0C               	movlw	12
 21220  0046CE  5C08               	subwf	EEROM_R_DEFF@i_296,w,c
 21221  0046D0  A0D8               	btfss	status,0,c
 21222  0046D2  D7EB               	goto	l9548
 21223  0046D4                     u7460:
 21224                           
 21225                           ;master/EEROM_WR.c: 159:  for (int i = 0; i < 6; i++)
 21226  0046D4  0E00               	movlw	0
 21227  0046D6  6E0B               	movwf	EEROM_R_DEFF@i_297+1,c
 21228  0046D8  0E00               	movlw	0
 21229  0046DA  6E0A               	movwf	EEROM_R_DEFF@i_297,c
 21230  0046DC                     l9562:
 21231                           
 21232                           ;master/EEROM_WR.c: 160:  {;master/EEROM_WR.c: 161:   state_CE.sp[i] = (unsigned char)DA
      +                          TAEE_ReadByte(READ_ADDRESS);
 21233  0046DC  0EB8               	movlw	low (_state_CE+40)
 21234  0046DE  240A               	addwf	EEROM_R_DEFF@i_297,w,c
 21235  0046E0  6ED9               	movwf	fsr2l,c
 21236  0046E2  0E01               	movlw	high (_state_CE+40)
 21237  0046E4  200B               	addwfc	EEROM_R_DEFF@i_297+1,w,c
 21238  0046E6  6EDA               	movwf	fsr2h,c
 21239  0046E8  500C               	movf	EEROM_R_DEFF@READ_ADDRESS,w,c
 21240  0046EA  EC0A  F014         	call	_DATAEE_ReadByte
 21241  0046EE  6EDF               	movwf	indf2,c
 21242                           
 21243                           ;master/EEROM_WR.c: 162:   READ_ADDRESS++;
 21244  0046F0  2A0C               	incf	EEROM_R_DEFF@READ_ADDRESS,f,c
 21245                           
 21246                           ;master/EEROM_WR.c: 163:  }
 21247  0046F2  4A0A               	infsnz	EEROM_R_DEFF@i_297,f,c
 21248  0046F4  2A0B               	incf	EEROM_R_DEFF@i_297+1,f,c
 21249  0046F6  BE0B               	btfsc	EEROM_R_DEFF@i_297+1,7,c
 21250  0046F8  D7F1               	goto	l9562
 21251  0046FA  500B               	movf	EEROM_R_DEFF@i_297+1,w,c
 21252  0046FC  E105               	bnz	u7470
 21253  0046FE  0E06               	movlw	6
 21254  004700  5C0A               	subwf	EEROM_R_DEFF@i_297,w,c
 21255  004702  B0D8               	btfsc	status,0,c
 21256  004704  0012               	return	
 21257  004706  D7EA               	goto	l9562
 21258  004708                     u7470:
 21259  004708  0012               	return		;funcret
 21260  00470A                     __end_of_EEROM_R_DEFF:
 21261                           	opt callstack 0
 21262                           
 21263 ;; *************** function _DATAEE_ReadByte *****************
 21264 ;; Defined at:
 21265 ;;		line 221 in file "master/EEROM_WR.c"
 21266 ;; Parameters:    Size  Location     Type
 21267 ;;  bAdd            1    wreg     unsigned char 
 21268 ;; Auto vars:     Size  Location     Type
 21269 ;;  bAdd            1    0[COMRAM] unsigned char 
 21270 ;; Return value:  Size  Location     Type
 21271 ;;                  1    wreg      unsigned char 
 21272 ;; Registers used:
 21273 ;;		wreg, status,2
 21274 ;; Tracked objects:
 21275 ;;		On entry : 0/0
 21276 ;;		On exit  : 0/0
 21277 ;;		Unchanged: 0/0
 21278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21279 ;;      Params:         0       0       0       0       0       0       0
 21280 ;;      Locals:         1       0       0       0       0       0       0
 21281 ;;      Temps:          0       0       0       0       0       0       0
 21282 ;;      Totals:         1       0       0       0       0       0       0
 21283 ;;Total ram usage:        1 bytes
 21284 ;; Hardware stack levels used:    1
 21285 ;; This function calls:
 21286 ;;		Nothing
 21287 ;; This function is called by:
 21288 ;;		_EEROM_R_SAVE
 21289 ;;		_EEROM_WR_ioport
 21290 ;;		_EEROM_R_DEFF
 21291 ;; This function uses a non-reentrant model
 21292 ;;
 21293                           
 21294                           	psect	text104
 21295  002814                     __ptext104:
 21296                           	opt callstack 0
 21297  002814                     _DATAEE_ReadByte:
 21298                           	opt callstack 28
 21299                           
 21300                           ;incstack = 0
 21301                           ;DATAEE_ReadByte@bAdd stored from wreg
 21302  002814  6E01               	movwf	DATAEE_ReadByte@bAdd,c
 21303                           
 21304                           ;master/EEROM_WR.c: 221: unsigned char DATAEE_ReadByte(unsigned char bAdd);master/EEROM_
      +                          WR.c: 222: {;master/EEROM_WR.c: 223:  EEADR = (unsigned char)(bAdd & 0xFF);
 21305  002816  C001  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 21306                           
 21307                           ;master/EEROM_WR.c: 224:  EECON1bits.CFGS = 0;
 21308  00281A  9CA6               	bcf	4006,6,c	;volsfr
 21309                           
 21310                           ;master/EEROM_WR.c: 225:  EECON1bits.EEPGD = 0;
 21311  00281C  9EA6               	bcf	4006,7,c	;volsfr
 21312                           
 21313                           ;master/EEROM_WR.c: 226:  EECON1bits.RD = 1;
 21314  00281E  80A6               	bsf	4006,0,c	;volsfr
 21315                           
 21316                           ;master/EEROM_WR.c: 227:  __nop();
 21317  002820  F000               	nop	
 21318                           
 21319                           ;master/EEROM_WR.c: 228:  __nop();
 21320  002822  F000               	nop	
 21321                           
 21322                           ;master/EEROM_WR.c: 230:  return (EEDATA);
 21323  002824  50A8               	movf	4008,w,c	;volatile
 21324  002826  0012               	return		;funcret
 21325  002828                     __end_of_DATAEE_ReadByte:
 21326                           	opt callstack 0
 21327                           
 21328 ;; *************** function _EEROM_GAME_OFF *****************
 21329 ;; Defined at:
 21330 ;;		line 128 in file "master/EEROM_WR.c"
 21331 ;; Parameters:    Size  Location     Type
 21332 ;;		None
 21333 ;; Auto vars:     Size  Location     Type
 21334 ;;		None
 21335 ;; Return value:  Size  Location     Type
 21336 ;;                  1    wreg      void 
 21337 ;; Registers used:
 21338 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21339 ;; Tracked objects:
 21340 ;;		On entry : 0/0
 21341 ;;		On exit  : 0/0
 21342 ;;		Unchanged: 0/0
 21343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21344 ;;      Params:         0       0       0       0       0       0       0
 21345 ;;      Locals:         0       0       0       0       0       0       0
 21346 ;;      Temps:          0       0       0       0       0       0       0
 21347 ;;      Totals:         0       0       0       0       0       0       0
 21348 ;;Total ram usage:        0 bytes
 21349 ;; Hardware stack levels used:    1
 21350 ;; Hardware stack levels required when called:    2
 21351 ;; This function calls:
 21352 ;;		_DATAEE_WriteByte
 21353 ;;		_EEROM_W_SAVE
 21354 ;; This function is called by:
 21355 ;;		_main
 21356 ;; This function uses a non-reentrant model
 21357 ;;
 21358                           
 21359                           	psect	text105
 21360  00283C                     __ptext105:
 21361                           	opt callstack 0
 21362  00283C                     _EEROM_GAME_OFF:
 21363                           	opt callstack 28
 21364                           
 21365                           ;master/EEROM_WR.c: 130:  game_flag = 0;
 21366                           
 21367                           ;incstack = 0
 21368  00283C  0E00               	movlw	0
 21369  00283E  0100               	movlb	0	; () banked
 21370  002840  6FF5               	movwf	_game_flag& (0+255),b
 21371                           
 21372                           ; BSR set to: 0
 21373                           ;master/EEROM_WR.c: 131:  DATAEE_WriteByte(2, 0);
 21374  002842  0E00               	movlw	0
 21375  002844  6E01               	movwf	DATAEE_WriteByte@bData,c
 21376  002846  0E02               	movlw	2
 21377  002848  ECF9  F015         	call	_DATAEE_WriteByte
 21378                           
 21379                           ;master/EEROM_WR.c: 132:  EEROM_W_SAVE();
 21380  00284C  EC0E  F02D         	call	_EEROM_W_SAVE	;wreg free
 21381  002850  0012               	return		;funcret
 21382  002852                     __end_of_EEROM_GAME_OFF:
 21383                           	opt callstack 0
 21384                           
 21385 ;; *************** function _EEROM_W_SAVE *****************
 21386 ;; Defined at:
 21387 ;;		line 6 in file "master/EEROM_WR.c"
 21388 ;; Parameters:    Size  Location     Type
 21389 ;;		None
 21390 ;; Auto vars:     Size  Location     Type
 21391 ;;  i               2   11[COMRAM] int 
 21392 ;;  i               2    9[COMRAM] int 
 21393 ;;  i               2    7[COMRAM] int 
 21394 ;;  i               2    5[COMRAM] int 
 21395 ;;  i               2    3[COMRAM] int 
 21396 ;;  i               2   14[COMRAM] int 
 21397 ;;  WRITE_ADDRES    1   13[COMRAM] unsigned char 
 21398 ;; Return value:  Size  Location     Type
 21399 ;;                  1    wreg      void 
 21400 ;; Registers used:
 21401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21402 ;; Tracked objects:
 21403 ;;		On entry : 0/0
 21404 ;;		On exit  : 0/0
 21405 ;;		Unchanged: 0/0
 21406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21407 ;;      Params:         0       0       0       0       0       0       0
 21408 ;;      Locals:        13       0       0       0       0       0       0
 21409 ;;      Temps:          0       0       0       0       0       0       0
 21410 ;;      Totals:        13       0       0       0       0       0       0
 21411 ;;Total ram usage:       13 bytes
 21412 ;; Hardware stack levels used:    1
 21413 ;; Hardware stack levels required when called:    1
 21414 ;; This function calls:
 21415 ;;		_DATAEE_WriteByte
 21416 ;; This function is called by:
 21417 ;;		_EEROM_GAME_ON
 21418 ;;		_EEROM_GAME_OFF
 21419 ;;		_Special_input
 21420 ;; This function uses a non-reentrant model
 21421 ;;
 21422                           
 21423                           	psect	text106
 21424  005A1C                     __ptext106:
 21425                           	opt callstack 0
 21426  005A1C                     _EEROM_W_SAVE:
 21427                           	opt callstack 28
 21428                           
 21429                           ;master/EEROM_WR.c: 8:  int i;;master/EEROM_WR.c: 9:  for (i = 0; i < 8; i++)
 21430                           
 21431                           ;incstack = 0
 21432  005A1C  0E00               	movlw	0
 21433  005A1E  6E10               	movwf	EEROM_W_SAVE@i+1,c
 21434  005A20  0E00               	movlw	0
 21435  005A22  6E0F               	movwf	EEROM_W_SAVE@i,c
 21436  005A24                     l8844:
 21437                           
 21438                           ;master/EEROM_WR.c: 10:  {;master/EEROM_WR.c: 11:   save_CE.co[i] = state_CE.co[i];
 21439  005A24  0E98               	movlw	low (_state_CE+8)
 21440  005A26  240F               	addwf	EEROM_W_SAVE@i,w,c
 21441  005A28  6ED9               	movwf	fsr2l,c
 21442  005A2A  0E01               	movlw	high (_state_CE+8)
 21443  005A2C  2010               	addwfc	EEROM_W_SAVE@i+1,w,c
 21444  005A2E  6EDA               	movwf	fsr2h,c
 21445  005A30  0E08               	movlw	low (_save_CE+8)
 21446  005A32  240F               	addwf	EEROM_W_SAVE@i,w,c
 21447  005A34  6EE1               	movwf	fsr1l,c
 21448  005A36  0E02               	movlw	high (_save_CE+8)
 21449  005A38  2010               	addwfc	EEROM_W_SAVE@i+1,w,c
 21450  005A3A  6EE2               	movwf	fsr1h,c
 21451  005A3C  CFDF FFE7          	movff	indf2,indf1
 21452                           
 21453                           ;master/EEROM_WR.c: 12:   save_CE.cp[i] = state_CE.cp[i];
 21454  005A40  0E90               	movlw	low _state_CE
 21455  005A42  240F               	addwf	EEROM_W_SAVE@i,w,c
 21456  005A44  6ED9               	movwf	fsr2l,c
 21457  005A46  0E01               	movlw	high _state_CE
 21458  005A48  2010               	addwfc	EEROM_W_SAVE@i+1,w,c
 21459  005A4A  6EDA               	movwf	fsr2h,c
 21460  005A4C  0E00               	movlw	low _save_CE
 21461  005A4E  240F               	addwf	EEROM_W_SAVE@i,w,c
 21462  005A50  6EE1               	movwf	fsr1l,c
 21463  005A52  0E02               	movlw	high _save_CE
 21464  005A54  2010               	addwfc	EEROM_W_SAVE@i+1,w,c
 21465  005A56  6EE2               	movwf	fsr1h,c
 21466  005A58  CFDF FFE7          	movff	indf2,indf1
 21467                           
 21468                           ;master/EEROM_WR.c: 13:  }
 21469  005A5C  4A0F               	infsnz	EEROM_W_SAVE@i,f,c
 21470  005A5E  2A10               	incf	EEROM_W_SAVE@i+1,f,c
 21471  005A60  BE10               	btfsc	EEROM_W_SAVE@i+1,7,c
 21472  005A62  D7E0               	goto	l8844
 21473  005A64  5010               	movf	EEROM_W_SAVE@i+1,w,c
 21474  005A66  E104               	bnz	u6740
 21475  005A68  0E08               	movlw	8
 21476  005A6A  5C0F               	subwf	EEROM_W_SAVE@i,w,c
 21477  005A6C  A0D8               	btfss	status,0,c
 21478  005A6E  D7DA               	goto	l8844
 21479  005A70                     u6740:
 21480                           
 21481                           ;master/EEROM_WR.c: 14:  for (i = 0; i < 12; i++)
 21482  005A70  0E00               	movlw	0
 21483  005A72  6E10               	movwf	EEROM_W_SAVE@i+1,c
 21484  005A74  0E00               	movlw	0
 21485  005A76  6E0F               	movwf	EEROM_W_SAVE@i,c
 21486  005A78                     l8856:
 21487                           
 21488                           ;master/EEROM_WR.c: 15:  {;master/EEROM_WR.c: 16:   save_CE.eo[i] = state_CE.eo[i];
 21489  005A78  0EAC               	movlw	low (_state_CE+28)
 21490  005A7A  240F               	addwf	EEROM_W_SAVE@i,w,c
 21491  005A7C  6ED9               	movwf	fsr2l,c
 21492  005A7E  0E01               	movlw	high (_state_CE+28)
 21493  005A80  2010               	addwfc	EEROM_W_SAVE@i+1,w,c
 21494  005A82  6EDA               	movwf	fsr2h,c
 21495  005A84  0E1C               	movlw	low (_save_CE+28)
 21496  005A86  240F               	addwf	EEROM_W_SAVE@i,w,c
 21497  005A88  6EE1               	movwf	fsr1l,c
 21498  005A8A  0E02               	movlw	high (_save_CE+28)
 21499  005A8C  2010               	addwfc	EEROM_W_SAVE@i+1,w,c
 21500  005A8E  6EE2               	movwf	fsr1h,c
 21501  005A90  CFDF FFE7          	movff	indf2,indf1
 21502                           
 21503                           ;master/EEROM_WR.c: 17:   save_CE.ep[i] = state_CE.ep[i];
 21504  005A94  0EA0               	movlw	low (_state_CE+16)
 21505  005A96  240F               	addwf	EEROM_W_SAVE@i,w,c
 21506  005A98  6ED9               	movwf	fsr2l,c
 21507  005A9A  0E01               	movlw	high (_state_CE+16)
 21508  005A9C  2010               	addwfc	EEROM_W_SAVE@i+1,w,c
 21509  005A9E  6EDA               	movwf	fsr2h,c
 21510  005AA0  0E10               	movlw	low (_save_CE+16)
 21511  005AA2  240F               	addwf	EEROM_W_SAVE@i,w,c
 21512  005AA4  6EE1               	movwf	fsr1l,c
 21513  005AA6  0E02               	movlw	high (_save_CE+16)
 21514  005AA8  2010               	addwfc	EEROM_W_SAVE@i+1,w,c
 21515  005AAA  6EE2               	movwf	fsr1h,c
 21516  005AAC  CFDF FFE7          	movff	indf2,indf1
 21517                           
 21518                           ;master/EEROM_WR.c: 18:  }
 21519  005AB0  4A0F               	infsnz	EEROM_W_SAVE@i,f,c
 21520  005AB2  2A10               	incf	EEROM_W_SAVE@i+1,f,c
 21521  005AB4  BE10               	btfsc	EEROM_W_SAVE@i+1,7,c
 21522  005AB6  D7E0               	goto	l8856
 21523  005AB8  5010               	movf	EEROM_W_SAVE@i+1,w,c
 21524  005ABA  E104               	bnz	u6750
 21525  005ABC  0E0C               	movlw	12
 21526  005ABE  5C0F               	subwf	EEROM_W_SAVE@i,w,c
 21527  005AC0  A0D8               	btfss	status,0,c
 21528  005AC2  D7DA               	goto	l8856
 21529  005AC4                     u6750:
 21530                           
 21531                           ;master/EEROM_WR.c: 19:  for (i = 0; i < 6; i++)
 21532  005AC4  0E00               	movlw	0
 21533  005AC6  6E10               	movwf	EEROM_W_SAVE@i+1,c
 21534  005AC8  0E00               	movlw	0
 21535  005ACA  6E0F               	movwf	EEROM_W_SAVE@i,c
 21536  005ACC                     l8868:
 21537                           
 21538                           ;master/EEROM_WR.c: 20:  {;master/EEROM_WR.c: 21:   save_CE.sp[i] = state_CE.sp[i];
 21539  005ACC  0EB8               	movlw	low (_state_CE+40)
 21540  005ACE  240F               	addwf	EEROM_W_SAVE@i,w,c
 21541  005AD0  6ED9               	movwf	fsr2l,c
 21542  005AD2  0E01               	movlw	high (_state_CE+40)
 21543  005AD4  2010               	addwfc	EEROM_W_SAVE@i+1,w,c
 21544  005AD6  6EDA               	movwf	fsr2h,c
 21545  005AD8  0E28               	movlw	low (_save_CE+40)
 21546  005ADA  240F               	addwf	EEROM_W_SAVE@i,w,c
 21547  005ADC  6EE1               	movwf	fsr1l,c
 21548  005ADE  0E02               	movlw	high (_save_CE+40)
 21549  005AE0  2010               	addwfc	EEROM_W_SAVE@i+1,w,c
 21550  005AE2  6EE2               	movwf	fsr1h,c
 21551  005AE4  CFDF FFE7          	movff	indf2,indf1
 21552                           
 21553                           ;master/EEROM_WR.c: 22:  }
 21554  005AE8  4A0F               	infsnz	EEROM_W_SAVE@i,f,c
 21555  005AEA  2A10               	incf	EEROM_W_SAVE@i+1,f,c
 21556  005AEC  BE10               	btfsc	EEROM_W_SAVE@i+1,7,c
 21557  005AEE  D7EE               	goto	l8868
 21558  005AF0  5010               	movf	EEROM_W_SAVE@i+1,w,c
 21559  005AF2  E104               	bnz	u6760
 21560  005AF4  0E06               	movlw	6
 21561  005AF6  5C0F               	subwf	EEROM_W_SAVE@i,w,c
 21562  005AF8  A0D8               	btfss	status,0,c
 21563  005AFA  D7E8               	goto	l8868
 21564  005AFC                     u6760:
 21565                           
 21566                           ;master/EEROM_WR.c: 24:  char WRITE_ADDRESS;;master/EEROM_WR.c: 26:  DATAEE_WriteByte(1,
      +                           0);
 21567  005AFC  0E00               	movlw	0
 21568  005AFE  6E01               	movwf	DATAEE_WriteByte@bData,c
 21569  005B00  0E01               	movlw	1
 21570  005B02  ECF9  F015         	call	_DATAEE_WriteByte
 21571                           
 21572                           ;master/EEROM_WR.c: 27:  WRITE_ADDRESS = 49;
 21573  005B06  0E31               	movlw	49
 21574  005B08  6E0E               	movwf	EEROM_W_SAVE@WRITE_ADDRESS,c
 21575                           
 21576                           ;master/EEROM_WR.c: 28:  for (int i = 0; i < 8; i++)
 21577  005B0A  0E00               	movlw	0
 21578  005B0C  6E05               	movwf	EEROM_W_SAVE@i_275+1,c
 21579  005B0E  0E00               	movlw	0
 21580  005B10  6E04               	movwf	EEROM_W_SAVE@i_275,c
 21581  005B12                     l8884:
 21582                           
 21583                           ;master/EEROM_WR.c: 29:  {;master/EEROM_WR.c: 30:   DATAEE_WriteByte(WRITE_ADDRESS, (uns
      +                          igned char)save_CE.cp[i]);
 21584  005B12  0E00               	movlw	low _save_CE
 21585  005B14  2404               	addwf	EEROM_W_SAVE@i_275,w,c
 21586  005B16  6ED9               	movwf	fsr2l,c
 21587  005B18  0E02               	movlw	high _save_CE
 21588  005B1A  2005               	addwfc	EEROM_W_SAVE@i_275+1,w,c
 21589  005B1C  6EDA               	movwf	fsr2h,c
 21590  005B1E  50DF               	movf	indf2,w,c
 21591  005B20  6E01               	movwf	DATAEE_WriteByte@bData,c
 21592  005B22  500E               	movf	EEROM_W_SAVE@WRITE_ADDRESS,w,c
 21593  005B24  ECF9  F015         	call	_DATAEE_WriteByte
 21594                           
 21595                           ;master/EEROM_WR.c: 31:   WRITE_ADDRESS++;
 21596  005B28  2A0E               	incf	EEROM_W_SAVE@WRITE_ADDRESS,f,c
 21597                           
 21598                           ;master/EEROM_WR.c: 32:  }
 21599  005B2A  4A04               	infsnz	EEROM_W_SAVE@i_275,f,c
 21600  005B2C  2A05               	incf	EEROM_W_SAVE@i_275+1,f,c
 21601  005B2E  BE05               	btfsc	EEROM_W_SAVE@i_275+1,7,c
 21602  005B30  D7F0               	goto	l8884
 21603  005B32  5005               	movf	EEROM_W_SAVE@i_275+1,w,c
 21604  005B34  E104               	bnz	u6770
 21605  005B36  0E08               	movlw	8
 21606  005B38  5C04               	subwf	EEROM_W_SAVE@i_275,w,c
 21607  005B3A  A0D8               	btfss	status,0,c
 21608  005B3C  D7EA               	goto	l8884
 21609  005B3E                     u6770:
 21610                           
 21611                           ;master/EEROM_WR.c: 33:  for (int i = 0; i < 8; i++)
 21612  005B3E  0E00               	movlw	0
 21613  005B40  6E07               	movwf	EEROM_W_SAVE@i_276+1,c
 21614  005B42  0E00               	movlw	0
 21615  005B44  6E06               	movwf	EEROM_W_SAVE@i_276,c
 21616  005B46                     l8898:
 21617                           
 21618                           ;master/EEROM_WR.c: 34:  {;master/EEROM_WR.c: 35:   DATAEE_WriteByte(WRITE_ADDRESS, (uns
      +                          igned char)save_CE.co[i]);
 21619  005B46  0E08               	movlw	low (_save_CE+8)
 21620  005B48  2406               	addwf	EEROM_W_SAVE@i_276,w,c
 21621  005B4A  6ED9               	movwf	fsr2l,c
 21622  005B4C  0E02               	movlw	high (_save_CE+8)
 21623  005B4E  2007               	addwfc	EEROM_W_SAVE@i_276+1,w,c
 21624  005B50  6EDA               	movwf	fsr2h,c
 21625  005B52  50DF               	movf	indf2,w,c
 21626  005B54  6E01               	movwf	DATAEE_WriteByte@bData,c
 21627  005B56  500E               	movf	EEROM_W_SAVE@WRITE_ADDRESS,w,c
 21628  005B58  ECF9  F015         	call	_DATAEE_WriteByte
 21629                           
 21630                           ;master/EEROM_WR.c: 36:   WRITE_ADDRESS++;
 21631  005B5C  2A0E               	incf	EEROM_W_SAVE@WRITE_ADDRESS,f,c
 21632                           
 21633                           ;master/EEROM_WR.c: 37:  }
 21634  005B5E  4A06               	infsnz	EEROM_W_SAVE@i_276,f,c
 21635  005B60  2A07               	incf	EEROM_W_SAVE@i_276+1,f,c
 21636  005B62  BE07               	btfsc	EEROM_W_SAVE@i_276+1,7,c
 21637  005B64  D7F0               	goto	l8898
 21638  005B66  5007               	movf	EEROM_W_SAVE@i_276+1,w,c
 21639  005B68  E104               	bnz	u6780
 21640  005B6A  0E08               	movlw	8
 21641  005B6C  5C06               	subwf	EEROM_W_SAVE@i_276,w,c
 21642  005B6E  A0D8               	btfss	status,0,c
 21643  005B70  D7EA               	goto	l8898
 21644  005B72                     u6780:
 21645                           
 21646                           ;master/EEROM_WR.c: 38:  for (int i = 0; i < 12; i++)
 21647  005B72  0E00               	movlw	0
 21648  005B74  6E09               	movwf	EEROM_W_SAVE@i_277+1,c
 21649  005B76  0E00               	movlw	0
 21650  005B78  6E08               	movwf	EEROM_W_SAVE@i_277,c
 21651  005B7A                     l8912:
 21652                           
 21653                           ;master/EEROM_WR.c: 39:  {;master/EEROM_WR.c: 40:   DATAEE_WriteByte(WRITE_ADDRESS, (uns
      +                          igned char)save_CE.ep[i]);
 21654  005B7A  0E10               	movlw	low (_save_CE+16)
 21655  005B7C  2408               	addwf	EEROM_W_SAVE@i_277,w,c
 21656  005B7E  6ED9               	movwf	fsr2l,c
 21657  005B80  0E02               	movlw	high (_save_CE+16)
 21658  005B82  2009               	addwfc	EEROM_W_SAVE@i_277+1,w,c
 21659  005B84  6EDA               	movwf	fsr2h,c
 21660  005B86  50DF               	movf	indf2,w,c
 21661  005B88  6E01               	movwf	DATAEE_WriteByte@bData,c
 21662  005B8A  500E               	movf	EEROM_W_SAVE@WRITE_ADDRESS,w,c
 21663  005B8C  ECF9  F015         	call	_DATAEE_WriteByte
 21664                           
 21665                           ;master/EEROM_WR.c: 41:   WRITE_ADDRESS++;
 21666  005B90  2A0E               	incf	EEROM_W_SAVE@WRITE_ADDRESS,f,c
 21667                           
 21668                           ;master/EEROM_WR.c: 42:  }
 21669  005B92  4A08               	infsnz	EEROM_W_SAVE@i_277,f,c
 21670  005B94  2A09               	incf	EEROM_W_SAVE@i_277+1,f,c
 21671  005B96  BE09               	btfsc	EEROM_W_SAVE@i_277+1,7,c
 21672  005B98  D7F0               	goto	l8912
 21673  005B9A  5009               	movf	EEROM_W_SAVE@i_277+1,w,c
 21674  005B9C  E104               	bnz	u6790
 21675  005B9E  0E0C               	movlw	12
 21676  005BA0  5C08               	subwf	EEROM_W_SAVE@i_277,w,c
 21677  005BA2  A0D8               	btfss	status,0,c
 21678  005BA4  D7EA               	goto	l8912
 21679  005BA6                     u6790:
 21680                           
 21681                           ;master/EEROM_WR.c: 43:  for (int i = 0; i < 12; i++)
 21682  005BA6  0E00               	movlw	0
 21683  005BA8  6E0B               	movwf	EEROM_W_SAVE@i_278+1,c
 21684  005BAA  0E00               	movlw	0
 21685  005BAC  6E0A               	movwf	EEROM_W_SAVE@i_278,c
 21686  005BAE                     l8926:
 21687                           
 21688                           ;master/EEROM_WR.c: 44:  {;master/EEROM_WR.c: 45:   DATAEE_WriteByte(WRITE_ADDRESS, (uns
      +                          igned char)save_CE.eo[i]);
 21689  005BAE  0E1C               	movlw	low (_save_CE+28)
 21690  005BB0  240A               	addwf	EEROM_W_SAVE@i_278,w,c
 21691  005BB2  6ED9               	movwf	fsr2l,c
 21692  005BB4  0E02               	movlw	high (_save_CE+28)
 21693  005BB6  200B               	addwfc	EEROM_W_SAVE@i_278+1,w,c
 21694  005BB8  6EDA               	movwf	fsr2h,c
 21695  005BBA  50DF               	movf	indf2,w,c
 21696  005BBC  6E01               	movwf	DATAEE_WriteByte@bData,c
 21697  005BBE  500E               	movf	EEROM_W_SAVE@WRITE_ADDRESS,w,c
 21698  005BC0  ECF9  F015         	call	_DATAEE_WriteByte
 21699                           
 21700                           ;master/EEROM_WR.c: 46:   WRITE_ADDRESS++;
 21701  005BC4  2A0E               	incf	EEROM_W_SAVE@WRITE_ADDRESS,f,c
 21702                           
 21703                           ;master/EEROM_WR.c: 47:  }
 21704  005BC6  4A0A               	infsnz	EEROM_W_SAVE@i_278,f,c
 21705  005BC8  2A0B               	incf	EEROM_W_SAVE@i_278+1,f,c
 21706  005BCA  BE0B               	btfsc	EEROM_W_SAVE@i_278+1,7,c
 21707  005BCC  D7F0               	goto	l8926
 21708  005BCE  500B               	movf	EEROM_W_SAVE@i_278+1,w,c
 21709  005BD0  E104               	bnz	u6800
 21710  005BD2  0E0C               	movlw	12
 21711  005BD4  5C0A               	subwf	EEROM_W_SAVE@i_278,w,c
 21712  005BD6  A0D8               	btfss	status,0,c
 21713  005BD8  D7EA               	goto	l8926
 21714  005BDA                     u6800:
 21715                           
 21716                           ;master/EEROM_WR.c: 48:  for (int i = 0; i < 6; i++)
 21717  005BDA  0E00               	movlw	0
 21718  005BDC  6E0D               	movwf	EEROM_W_SAVE@i_279+1,c
 21719  005BDE  0E00               	movlw	0
 21720  005BE0  6E0C               	movwf	EEROM_W_SAVE@i_279,c
 21721  005BE2                     l8940:
 21722                           
 21723                           ;master/EEROM_WR.c: 49:  {;master/EEROM_WR.c: 50:   DATAEE_WriteByte(WRITE_ADDRESS, (uns
      +                          igned char)save_CE.sp[i]);
 21724  005BE2  0E28               	movlw	low (_save_CE+40)
 21725  005BE4  240C               	addwf	EEROM_W_SAVE@i_279,w,c
 21726  005BE6  6ED9               	movwf	fsr2l,c
 21727  005BE8  0E02               	movlw	high (_save_CE+40)
 21728  005BEA  200D               	addwfc	EEROM_W_SAVE@i_279+1,w,c
 21729  005BEC  6EDA               	movwf	fsr2h,c
 21730  005BEE  50DF               	movf	indf2,w,c
 21731  005BF0  6E01               	movwf	DATAEE_WriteByte@bData,c
 21732  005BF2  500E               	movf	EEROM_W_SAVE@WRITE_ADDRESS,w,c
 21733  005BF4  ECF9  F015         	call	_DATAEE_WriteByte
 21734                           
 21735                           ;master/EEROM_WR.c: 51:   WRITE_ADDRESS++;
 21736  005BF8  2A0E               	incf	EEROM_W_SAVE@WRITE_ADDRESS,f,c
 21737                           
 21738                           ;master/EEROM_WR.c: 52:  }
 21739  005BFA  4A0C               	infsnz	EEROM_W_SAVE@i_279,f,c
 21740  005BFC  2A0D               	incf	EEROM_W_SAVE@i_279+1,f,c
 21741  005BFE  BE0D               	btfsc	EEROM_W_SAVE@i_279+1,7,c
 21742  005C00  D7F0               	goto	l8940
 21743  005C02  500D               	movf	EEROM_W_SAVE@i_279+1,w,c
 21744  005C04  E105               	bnz	u6810
 21745  005C06  0E06               	movlw	6
 21746  005C08  5C0C               	subwf	EEROM_W_SAVE@i_279,w,c
 21747  005C0A  B0D8               	btfsc	status,0,c
 21748  005C0C  0012               	return	
 21749  005C0E  D7E9               	goto	l8940
 21750  005C10                     u6810:
 21751  005C10  0012               	return		;funcret
 21752  005C12                     __end_of_EEROM_W_SAVE:
 21753                           	opt callstack 0
 21754                           
 21755 ;; *************** function _DATAEE_WriteByte *****************
 21756 ;; Defined at:
 21757 ;;		line 199 in file "master/EEROM_WR.c"
 21758 ;; Parameters:    Size  Location     Type
 21759 ;;  bAdd            1    wreg     unsigned char 
 21760 ;;  bData           1    0[COMRAM] unsigned char 
 21761 ;; Auto vars:     Size  Location     Type
 21762 ;;  bAdd            1    1[COMRAM] unsigned char 
 21763 ;;  GIEBitValue     1    2[COMRAM] unsigned char 
 21764 ;; Return value:  Size  Location     Type
 21765 ;;                  1    wreg      void 
 21766 ;; Registers used:
 21767 ;;		wreg, status,2
 21768 ;; Tracked objects:
 21769 ;;		On entry : 0/0
 21770 ;;		On exit  : 0/0
 21771 ;;		Unchanged: 0/0
 21772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21773 ;;      Params:         1       0       0       0       0       0       0
 21774 ;;      Locals:         2       0       0       0       0       0       0
 21775 ;;      Temps:          0       0       0       0       0       0       0
 21776 ;;      Totals:         3       0       0       0       0       0       0
 21777 ;;Total ram usage:        3 bytes
 21778 ;; Hardware stack levels used:    1
 21779 ;; This function calls:
 21780 ;;		Nothing
 21781 ;; This function is called by:
 21782 ;;		_EEROM_W_SAVE
 21783 ;;		_EEROM_WR_ioport
 21784 ;;		_EEROM_GAME_ON
 21785 ;;		_EEROM_GAME_OFF
 21786 ;;		_EEROM_W_DEFF
 21787 ;; This function uses a non-reentrant model
 21788 ;;
 21789                           
 21790                           	psect	text107
 21791  002BF2                     __ptext107:
 21792                           	opt callstack 0
 21793  002BF2                     _DATAEE_WriteByte:
 21794                           	opt callstack 28
 21795                           
 21796                           ;incstack = 0
 21797                           ;DATAEE_WriteByte@bAdd stored from wreg
 21798  002BF2  6E02               	movwf	DATAEE_WriteByte@bAdd,c
 21799                           
 21800                           ;master/EEROM_WR.c: 199: void DATAEE_WriteByte(unsigned char bAdd, unsigned char bData);
      +                          master/EEROM_WR.c: 200: {;master/EEROM_WR.c: 201:  char GIEBitValue = INTCONbits.GIE;
 21801  002BF4  0E00               	movlw	0
 21802  002BF6  BEF2               	btfsc	4082,7,c	;volatile
 21803  002BF8  0E01               	movlw	1
 21804  002BFA  6E03               	movwf	DATAEE_WriteByte@GIEBitValue,c
 21805                           
 21806                           ;master/EEROM_WR.c: 203:  EEADR = (unsigned char)(bAdd & 0xFF);
 21807  002BFC  C002  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 21808                           
 21809                           ;master/EEROM_WR.c: 204:  EEDATA = bData;
 21810  002C00  C001  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 21811                           
 21812                           ;master/EEROM_WR.c: 205:  EECON1bits.EEPGD = 0;
 21813  002C04  9EA6               	bcf	4006,7,c	;volsfr
 21814                           
 21815                           ;master/EEROM_WR.c: 206:  EECON1bits.CFGS = 0;
 21816  002C06  9CA6               	bcf	4006,6,c	;volsfr
 21817                           
 21818                           ;master/EEROM_WR.c: 207:  EECON1bits.WREN = 1;
 21819  002C08  84A6               	bsf	4006,2,c	;volsfr
 21820                           
 21821                           ;master/EEROM_WR.c: 208:  INTCONbits.GIE = 0;
 21822  002C0A  9EF2               	bcf	4082,7,c	;volatile
 21823                           
 21824                           ;master/EEROM_WR.c: 209:  EECON2 = 0x55;
 21825  002C0C  0E55               	movlw	85
 21826  002C0E  6EA7               	movwf	4007,c	;volsfr
 21827                           
 21828                           ;master/EEROM_WR.c: 210:  EECON2 = 0xAA;
 21829  002C10  0EAA               	movlw	170
 21830  002C12  6EA7               	movwf	4007,c	;volsfr
 21831                           
 21832                           ;master/EEROM_WR.c: 211:  EECON1bits.WR = 1;
 21833  002C14  82A6               	bsf	4006,1,c	;volsfr
 21834  002C16                     l279:
 21835                           
 21836                           ;master/EEROM_WR.c: 213:  while (EECON1bits.WR)
 21837  002C16  B2A6               	btfsc	4006,1,c	;volsfr
 21838  002C18  D7FE               	goto	l279
 21839                           
 21840                           ;master/EEROM_WR.c: 217:  EECON1bits.WREN = 0;
 21841  002C1A  94A6               	bcf	4006,2,c	;volsfr
 21842                           
 21843                           ;master/EEROM_WR.c: 218:  INTCONbits.GIE = GIEBitValue;
 21844  002C1C  B003               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 21845  002C1E  D002               	bra	u5655
 21846  002C20  9EF2               	bcf	4082,7,c	;volatile
 21847  002C22  D001               	bra	u5656
 21848  002C24                     u5655:
 21849  002C24  8EF2               	bsf	4082,7,c	;volatile
 21850  002C26                     u5656:
 21851  002C26  0012               	return		;funcret
 21852  002C28                     __end_of_DATAEE_WriteByte:
 21853                           	opt callstack 0
 21854                           
 21855                           	psect	text108
 21856  000000                     __ptext108:
 21857                           	opt callstack 0
 21858                           
 21859                           	psect	rparam
 21860  0000                     tosu	equ	0xFFF
 21861                           tosh	equ	0xFFE
 21862                           tosl	equ	0xFFD
 21863                           stkptr	equ	0xFFC
 21864                           pclatu	equ	0xFFB
 21865                           pclath	equ	0xFFA
 21866                           pcl	equ	0xFF9
 21867                           tblptru	equ	0xFF8
 21868                           tblptrh	equ	0xFF7
 21869                           tblptrl	equ	0xFF6
 21870                           tablat	equ	0xFF5
 21871                           prodh	equ	0xFF4
 21872                           prodl	equ	0xFF3
 21873                           indf0	equ	0xFEF
 21874                           postinc0	equ	0xFEE
 21875                           postdec0	equ	0xFED
 21876                           preinc0	equ	0xFEC
 21877                           plusw0	equ	0xFEB
 21878                           fsr0h	equ	0xFEA
 21879                           fsr0l	equ	0xFE9
 21880                           wreg	equ	0xFE8
 21881                           indf1	equ	0xFE7
 21882                           postinc1	equ	0xFE6
 21883                           postdec1	equ	0xFE5
 21884                           preinc1	equ	0xFE4
 21885                           plusw1	equ	0xFE3
 21886                           fsr1h	equ	0xFE2
 21887                           fsr1l	equ	0xFE1
 21888                           bsr	equ	0xFE0
 21889                           indf2	equ	0xFDF
 21890                           postinc2	equ	0xFDE
 21891                           postdec2	equ	0xFDD
 21892                           preinc2	equ	0xFDC
 21893                           plusw2	equ	0xFDB
 21894                           fsr2h	equ	0xFDA
 21895                           fsr2l	equ	0xFD9
 21896                           status	equ	0xFD8


Data Sizes:
    Strings     107
    Constant    1578
    Data        75
    BSS         188
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    131     158
    BANK1           256     52     242
    BANK2           256      0      46
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    command_turn_ARRAY_2_3@s3	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_179(CODE[3]), STR_176(CODE[3]), STR_173(CODE[2]), STR_169(CODE[3]), 
		 -> STR_165(CODE[3]), STR_162(CODE[3]), STR_159(CODE[2]), STR_155(CODE[3]), 
		 -> STR_151(CODE[3]), STR_148(CODE[3]), STR_145(CODE[2]), STR_141(CODE[3]), 
		 -> STR_137(CODE[3]), STR_134(CODE[3]), STR_131(CODE[2]), STR_127(CODE[3]), 
		 -> STR_123(CODE[3]), STR_120(CODE[3]), STR_117(CODE[2]), STR_113(CODE[3]), 
		 -> STR_109(CODE[3]), STR_106(CODE[3]), STR_103(CODE[2]), STR_99(CODE[3]), 

    command_turn_ARRAY_2_3@s2	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_178(CODE[3]), STR_175(CODE[3]), STR_172(CODE[2]), STR_168(CODE[3]), 
		 -> STR_164(CODE[3]), STR_161(CODE[3]), STR_158(CODE[2]), STR_154(CODE[3]), 
		 -> STR_150(CODE[2]), STR_147(CODE[2]), STR_144(CODE[3]), STR_140(CODE[2]), 
		 -> STR_136(CODE[3]), STR_133(CODE[3]), STR_130(CODE[2]), STR_126(CODE[3]), 
		 -> STR_122(CODE[3]), STR_119(CODE[3]), STR_116(CODE[2]), STR_112(CODE[3]), 
		 -> STR_108(CODE[2]), STR_105(CODE[2]), STR_102(CODE[3]), STR_98(CODE[2]), 

    command_turn_ARRAY_2_3@s1	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_177(CODE[2]), STR_174(CODE[2]), STR_171(CODE[3]), STR_167(CODE[2]), 
		 -> STR_163(CODE[2]), STR_160(CODE[2]), STR_157(CODE[3]), STR_153(CODE[2]), 
		 -> STR_149(CODE[2]), STR_146(CODE[2]), STR_143(CODE[3]), STR_139(CODE[2]), 
		 -> STR_135(CODE[2]), STR_132(CODE[2]), STR_129(CODE[3]), STR_125(CODE[2]), 
		 -> STR_121(CODE[2]), STR_118(CODE[2]), STR_115(CODE[3]), STR_111(CODE[2]), 
		 -> STR_107(CODE[2]), STR_104(CODE[2]), STR_101(CODE[3]), STR_97(CODE[2]), 

    command_turn_ARRAY_2_2@s	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_198(CODE[3]), STR_197(CODE[3]), STR_196(CODE[3]), STR_195(CODE[3]), 
		 -> STR_194(CODE[3]), STR_193(CODE[3]), STR_192(CODE[3]), STR_191(CODE[3]), 
		 -> STR_190(CODE[3]), STR_189(CODE[3]), STR_188(CODE[3]), STR_187(CODE[3]), 
		 -> STR_186(CODE[2]), STR_185(CODE[2]), STR_184(CODE[2]), STR_183(CODE[2]), 
		 -> STR_182(CODE[2]), STR_181(CODE[2]), STR_180(CODE[5]), command_turn_ARRAY_3_end@s2(COMRAM[3]), 
		 -> STR_38(CODE[3]), STR_37(CODE[3]), STR_36(CODE[3]), STR_35(CODE[3]), 
		 -> STR_34(CODE[3]), STR_33(CODE[3]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), 
		 -> STR_22(CODE[2]), STR_21(CODE[2]), STR_20(CODE[3]), STR_19(CODE[3]), 
		 -> STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[3]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 
		 -> STR_2(CODE[6]), STR_1(CODE[5]), 

    command_turn_ARRAY_2@s	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_198(CODE[3]), STR_197(CODE[3]), STR_196(CODE[3]), STR_195(CODE[3]), 
		 -> STR_194(CODE[3]), STR_193(CODE[3]), STR_192(CODE[3]), STR_191(CODE[3]), 
		 -> STR_190(CODE[3]), STR_189(CODE[3]), STR_188(CODE[3]), STR_187(CODE[3]), 
		 -> STR_186(CODE[2]), STR_185(CODE[2]), STR_184(CODE[2]), STR_183(CODE[2]), 
		 -> STR_182(CODE[2]), STR_181(CODE[2]), STR_180(CODE[5]), STR_38(CODE[3]), 
		 -> STR_37(CODE[3]), STR_36(CODE[3]), STR_35(CODE[3]), STR_34(CODE[3]), 
		 -> STR_33(CODE[3]), STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), 
		 -> STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), 
		 -> STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), STR_22(CODE[2]), 
		 -> STR_21(CODE[2]), STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[3]), 
		 -> STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), 
		 -> STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[6]), 
		 -> STR_1(CODE[5]), 

    command_turn_ARRAY_3@s	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_95(CODE[2]), STR_94(CODE[2]), STR_93(CODE[3]), STR_92(CODE[3]), 
		 -> STR_91(CODE[3]), STR_90(CODE[2]), STR_89(CODE[2]), STR_88(CODE[3]), 
		 -> STR_87(CODE[2]), STR_86(CODE[3]), STR_85(CODE[3]), STR_84(CODE[2]), 
		 -> STR_83(CODE[2]), STR_82(CODE[3]), STR_81(CODE[2]), STR_80(CODE[2]), 
		 -> make_step_8@step8(CODE[21]), make_step_7@step7(CODE[42]), STR_79(CODE[2]), STR_78(CODE[3]), 
		 -> STR_77(CODE[2]), STR_76(CODE[2]), make_step_7@start7(CODE[60]), STR_75(CODE[2]), 
		 -> STR_74(CODE[2]), STR_73(CODE[2]), all_yellow@step6(CODE[21]), yellow_cross@step5(CODE[18]), 
		 -> STR_72(CODE[2]), STR_71(CODE[2]), STR_70(CODE[2]), STR_69(CODE[2]), 
		 -> STR_68(CODE[2]), STR_67(CODE[2]), STR_66(CODE[2]), STR_65(CODE[3]), 
		 -> STR_64(CODE[3]), STR_63(CODE[2]), STR_62(CODE[2]), STR_61(CODE[2]), 
		 -> STR_60(CODE[2]), make_second_flower_perfect@command_drop_left(CODE[24]), make_second_flower_perfect@command_drop_right(CODE[24]), STR_59(CODE[2]), 
		 -> STR_58(CODE[2]), STR_57(CODE[3]), STR_56(CODE[3]), STR_55(CODE[3]), 
		 -> STR_54(CODE[3]), STR_53(CODE[2]), STR_52(CODE[2]), make_white_yellow_flower@command(CODE[54]), 
		 -> STR_51(CODE[2]), STR_50(CODE[2]), STR_49(CODE[3]), STR_48(CODE[2]), 
		 -> STR_47(CODE[2]), STR_46(CODE[2]), STR_45(CODE[2]), STR_44(CODE[2]), 
		 -> STR_43(CODE[2]), STR_42(CODE[2]), STR_41(CODE[2]), STR_40(CODE[2]), 
		 -> STR_39(CODE[2]), made_cube@start8(CODE[42]), 

    if_yellow_co@co	PTR const unsigned char  size(2) Largest target is 32
		 -> all_yellow@CO(CODE[32]), 

    if_yellow_eo@eo	PTR const unsigned char  size(2) Largest target is 8
		 -> yellow_cross@cross_eo(CODE[4]), yellow_cross@check_eo(CODE[8]), 

    OUT_LED_ARRAY@LED_COLOR_ARRAY_2D	PTR unsigned char [9] size(2) Largest target is 54
		 -> LED_ARRAY(BANK1[54]), 

    over_write_CE_from_A_to_B@B	PTR struct CE_2 size(2) Largest target is 46
		 -> animation_4@anime_4_before_CE(BANK0[46]), Special_input@IDA_CE(BANK1[46]), state_CE(BANK1[46]), 

    str_cmp_const@p2	PTR unsigned char  size(2) Largest target is 6
		 -> STR_198(CODE[3]), STR_197(CODE[3]), STR_196(CODE[3]), STR_195(CODE[3]), 
		 -> STR_194(CODE[3]), STR_193(CODE[3]), STR_192(CODE[3]), STR_191(CODE[3]), 
		 -> STR_190(CODE[3]), STR_189(CODE[3]), STR_188(CODE[3]), STR_187(CODE[3]), 
		 -> STR_186(CODE[2]), STR_185(CODE[2]), STR_184(CODE[2]), STR_183(CODE[2]), 
		 -> STR_182(CODE[2]), STR_181(CODE[2]), STR_180(CODE[5]), STR_170(CODE[3]), 
		 -> STR_166(CODE[2]), STR_156(CODE[3]), STR_152(CODE[2]), STR_142(CODE[3]), 
		 -> STR_138(CODE[2]), STR_128(CODE[3]), STR_124(CODE[2]), STR_114(CODE[3]), 
		 -> STR_110(CODE[2]), STR_100(CODE[3]), STR_96(CODE[2]), STR_38(CODE[3]), 
		 -> STR_37(CODE[3]), STR_36(CODE[3]), STR_35(CODE[3]), STR_34(CODE[3]), 
		 -> STR_33(CODE[3]), STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), 
		 -> STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), 
		 -> STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), STR_22(CODE[2]), 
		 -> STR_21(CODE[2]), STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[3]), 
		 -> STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), 
		 -> STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[6]), 
		 -> STR_1(CODE[5]), 

    str_cmp_const@p1	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_198(CODE[3]), STR_197(CODE[3]), STR_196(CODE[3]), STR_195(CODE[3]), 
		 -> STR_194(CODE[3]), STR_193(CODE[3]), STR_192(CODE[3]), STR_191(CODE[3]), 
		 -> STR_190(CODE[3]), STR_189(CODE[3]), STR_188(CODE[3]), STR_187(CODE[3]), 
		 -> STR_186(CODE[2]), STR_185(CODE[2]), STR_184(CODE[2]), STR_183(CODE[2]), 
		 -> STR_182(CODE[2]), STR_181(CODE[2]), STR_180(CODE[5]), command_turn_ARRAY_3_end@s2(COMRAM[3]), 
		 -> STR_95(CODE[2]), STR_94(CODE[2]), STR_93(CODE[3]), STR_92(CODE[3]), 
		 -> STR_91(CODE[3]), STR_90(CODE[2]), STR_89(CODE[2]), STR_88(CODE[3]), 
		 -> STR_87(CODE[2]), STR_86(CODE[3]), STR_85(CODE[3]), STR_84(CODE[2]), 
		 -> STR_83(CODE[2]), STR_82(CODE[3]), STR_81(CODE[2]), STR_80(CODE[2]), 
		 -> make_step_8@step8(CODE[21]), make_step_7@step7(CODE[42]), STR_79(CODE[2]), STR_78(CODE[3]), 
		 -> STR_77(CODE[2]), STR_76(CODE[2]), make_step_7@start7(CODE[60]), STR_75(CODE[2]), 
		 -> STR_74(CODE[2]), STR_73(CODE[2]), all_yellow@step6(CODE[21]), yellow_cross@step5(CODE[18]), 
		 -> STR_72(CODE[2]), STR_71(CODE[2]), STR_70(CODE[2]), STR_69(CODE[2]), 
		 -> STR_68(CODE[2]), STR_67(CODE[2]), STR_66(CODE[2]), STR_65(CODE[3]), 
		 -> STR_64(CODE[3]), STR_63(CODE[2]), STR_62(CODE[2]), STR_61(CODE[2]), 
		 -> STR_60(CODE[2]), make_second_flower_perfect@command_drop_left(CODE[24]), make_second_flower_perfect@command_drop_right(CODE[24]), STR_59(CODE[2]), 
		 -> STR_58(CODE[2]), STR_57(CODE[3]), STR_56(CODE[3]), STR_55(CODE[3]), 
		 -> STR_54(CODE[3]), STR_53(CODE[2]), STR_52(CODE[2]), make_white_yellow_flower@command(CODE[54]), 
		 -> STR_51(CODE[2]), STR_50(CODE[2]), STR_49(CODE[3]), STR_48(CODE[2]), 
		 -> STR_47(CODE[2]), STR_46(CODE[2]), STR_45(CODE[2]), STR_44(CODE[2]), 
		 -> STR_43(CODE[2]), STR_42(CODE[2]), STR_41(CODE[2]), STR_40(CODE[2]), 
		 -> STR_39(CODE[2]), made_cube@start8(CODE[42]), STR_38(CODE[3]), STR_37(CODE[3]), 
		 -> STR_36(CODE[3]), STR_35(CODE[3]), STR_34(CODE[3]), STR_33(CODE[3]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), STR_29(CODE[3]), 
		 -> STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[3]), 
		 -> STR_24(CODE[3]), STR_23(CODE[2]), STR_22(CODE[2]), STR_21(CODE[2]), 
		 -> STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[3]), STR_17(CODE[3]), 
		 -> STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[3]), STR_13(CODE[3]), 
		 -> STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[3]), STR_9(CODE[3]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[2]), 
		 -> STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[6]), STR_1(CODE[5]), 
		 -> SPI_D2S@str_SPI(COMRAM[3]), 

    command_turn_CE@s	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_198(CODE[3]), STR_197(CODE[3]), STR_196(CODE[3]), STR_195(CODE[3]), 
		 -> STR_194(CODE[3]), STR_193(CODE[3]), STR_192(CODE[3]), STR_191(CODE[3]), 
		 -> STR_190(CODE[3]), STR_189(CODE[3]), STR_188(CODE[3]), STR_187(CODE[3]), 
		 -> STR_186(CODE[2]), STR_185(CODE[2]), STR_184(CODE[2]), STR_183(CODE[2]), 
		 -> STR_182(CODE[2]), STR_181(CODE[2]), STR_180(CODE[5]), STR_95(CODE[2]), 
		 -> STR_94(CODE[2]), STR_93(CODE[3]), STR_92(CODE[3]), STR_91(CODE[3]), 
		 -> STR_90(CODE[2]), STR_89(CODE[2]), STR_88(CODE[3]), STR_87(CODE[2]), 
		 -> STR_86(CODE[3]), STR_85(CODE[3]), STR_84(CODE[2]), STR_83(CODE[2]), 
		 -> STR_82(CODE[3]), STR_81(CODE[2]), STR_80(CODE[2]), make_step_8@step8(CODE[21]), 
		 -> make_step_7@step7(CODE[42]), STR_79(CODE[2]), STR_78(CODE[3]), STR_77(CODE[2]), 
		 -> STR_76(CODE[2]), make_step_7@start7(CODE[60]), STR_75(CODE[2]), STR_74(CODE[2]), 
		 -> STR_73(CODE[2]), all_yellow@step6(CODE[21]), yellow_cross@step5(CODE[18]), STR_72(CODE[2]), 
		 -> STR_71(CODE[2]), STR_70(CODE[2]), STR_69(CODE[2]), STR_68(CODE[2]), 
		 -> STR_67(CODE[2]), STR_66(CODE[2]), STR_65(CODE[3]), STR_64(CODE[3]), 
		 -> STR_63(CODE[2]), STR_62(CODE[2]), STR_61(CODE[2]), STR_60(CODE[2]), 
		 -> make_second_flower_perfect@command_drop_left(CODE[24]), make_second_flower_perfect@command_drop_right(CODE[24]), STR_59(CODE[2]), STR_58(CODE[2]), 
		 -> STR_57(CODE[3]), STR_56(CODE[3]), STR_55(CODE[3]), STR_54(CODE[3]), 
		 -> STR_53(CODE[2]), STR_52(CODE[2]), make_white_yellow_flower@command(CODE[54]), STR_51(CODE[2]), 
		 -> STR_50(CODE[2]), STR_49(CODE[3]), STR_48(CODE[2]), STR_47(CODE[2]), 
		 -> STR_46(CODE[2]), STR_45(CODE[2]), STR_44(CODE[2]), STR_43(CODE[2]), 
		 -> STR_42(CODE[2]), STR_41(CODE[2]), STR_40(CODE[2]), STR_39(CODE[2]), 
		 -> made_cube@start8(CODE[42]), STR_38(CODE[3]), STR_37(CODE[3]), STR_36(CODE[3]), 
		 -> STR_35(CODE[3]), STR_34(CODE[3]), STR_33(CODE[3]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), STR_29(CODE[3]), STR_28(CODE[3]), 
		 -> STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), 
		 -> STR_23(CODE[2]), STR_22(CODE[2]), STR_21(CODE[2]), STR_20(CODE[3]), 
		 -> STR_19(CODE[3]), STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[3]), 
		 -> STR_15(CODE[3]), STR_14(CODE[3]), STR_13(CODE[3]), STR_12(CODE[3]), 
		 -> STR_11(CODE[3]), STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), 
		 -> STR_3(CODE[2]), STR_2(CODE[6]), STR_1(CODE[5]), 

    command_turn_ARRAY@MEN_NUM	PTR const struct TURN_NUM2 size(2) Largest target is 16
		 -> command_turn_ARRAY@TURN_NUM_E(CODE[16]), command_turn_ARRAY@TURN_NUM_S(CODE[16]), command_turn_ARRAY@TURN_NUM_M(CODE[16]), command_turn_ARRAY@TURN_NUM_B(CODE[16]), 
		 -> command_turn_ARRAY@TURN_NUM_D(CODE[16]), command_turn_ARRAY@TURN_NUM_L(CODE[16]), command_turn_ARRAY@TURN_NUM_F(CODE[16]), command_turn_ARRAY@TURN_NUM_U(CODE[16]), 
		 -> command_turn_ARRAY@TURN_NUM_R(CODE[16]), 

    command_turn_ARRAY@s	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_198(CODE[3]), STR_197(CODE[3]), STR_196(CODE[3]), STR_195(CODE[3]), 
		 -> STR_194(CODE[3]), STR_193(CODE[3]), STR_192(CODE[3]), STR_191(CODE[3]), 
		 -> STR_190(CODE[3]), STR_189(CODE[3]), STR_188(CODE[3]), STR_187(CODE[3]), 
		 -> STR_186(CODE[2]), STR_185(CODE[2]), STR_184(CODE[2]), STR_183(CODE[2]), 
		 -> STR_182(CODE[2]), STR_181(CODE[2]), STR_180(CODE[5]), command_turn_ARRAY_2_2@s2(COMRAM[3]), 
		 -> STR_179(CODE[3]), STR_178(CODE[3]), STR_177(CODE[2]), STR_176(CODE[3]), 
		 -> STR_175(CODE[3]), STR_174(CODE[2]), STR_173(CODE[2]), STR_172(CODE[2]), 
		 -> STR_171(CODE[3]), STR_169(CODE[3]), STR_168(CODE[3]), STR_167(CODE[2]), 
		 -> STR_165(CODE[3]), STR_164(CODE[3]), STR_163(CODE[2]), STR_162(CODE[3]), 
		 -> STR_161(CODE[3]), STR_160(CODE[2]), STR_159(CODE[2]), STR_158(CODE[2]), 
		 -> STR_157(CODE[3]), STR_155(CODE[3]), STR_154(CODE[3]), STR_153(CODE[2]), 
		 -> STR_151(CODE[3]), STR_150(CODE[2]), STR_149(CODE[2]), STR_148(CODE[3]), 
		 -> STR_147(CODE[2]), STR_146(CODE[2]), STR_145(CODE[2]), STR_144(CODE[3]), 
		 -> STR_143(CODE[3]), STR_141(CODE[3]), STR_140(CODE[2]), STR_139(CODE[2]), 
		 -> STR_137(CODE[3]), STR_136(CODE[3]), STR_135(CODE[2]), STR_134(CODE[3]), 
		 -> STR_133(CODE[3]), STR_132(CODE[2]), STR_131(CODE[2]), STR_130(CODE[2]), 
		 -> STR_129(CODE[3]), STR_127(CODE[3]), STR_126(CODE[3]), STR_125(CODE[2]), 
		 -> STR_123(CODE[3]), STR_122(CODE[3]), STR_121(CODE[2]), STR_120(CODE[3]), 
		 -> STR_119(CODE[3]), STR_118(CODE[2]), STR_117(CODE[2]), STR_116(CODE[2]), 
		 -> STR_115(CODE[3]), STR_113(CODE[3]), STR_112(CODE[3]), STR_111(CODE[2]), 
		 -> STR_109(CODE[3]), STR_108(CODE[2]), STR_107(CODE[2]), STR_106(CODE[3]), 
		 -> STR_105(CODE[2]), STR_104(CODE[2]), STR_103(CODE[2]), STR_102(CODE[3]), 
		 -> STR_101(CODE[3]), STR_99(CODE[3]), STR_98(CODE[2]), STR_97(CODE[2]), 
		 -> STR_38(CODE[3]), STR_37(CODE[3]), STR_36(CODE[3]), STR_35(CODE[3]), 
		 -> STR_34(CODE[3]), STR_33(CODE[3]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), 
		 -> STR_22(CODE[2]), STR_21(CODE[2]), STR_20(CODE[3]), STR_19(CODE[3]), 
		 -> STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[3]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 
		 -> STR_2(CODE[6]), STR_1(CODE[5]), 

    turn_CE@change.name	PTR unsigned char  size(2) Largest target is 6
		 -> STR_198(CODE[3]), STR_197(CODE[3]), STR_196(CODE[3]), STR_195(CODE[3]), 
		 -> STR_194(CODE[3]), STR_193(CODE[3]), STR_192(CODE[3]), STR_191(CODE[3]), 
		 -> STR_190(CODE[3]), STR_189(CODE[3]), STR_188(CODE[3]), STR_187(CODE[3]), 
		 -> STR_186(CODE[2]), STR_185(CODE[2]), STR_184(CODE[2]), STR_183(CODE[2]), 
		 -> STR_182(CODE[2]), STR_181(CODE[2]), STR_180(CODE[5]), STR_38(CODE[3]), 
		 -> STR_37(CODE[3]), STR_36(CODE[3]), STR_35(CODE[3]), STR_34(CODE[3]), 
		 -> STR_33(CODE[3]), STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), 
		 -> STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), 
		 -> STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), STR_22(CODE[2]), 
		 -> STR_21(CODE[2]), STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[3]), 
		 -> STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), 
		 -> STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[6]), 
		 -> STR_1(CODE[5]), 

    turn_CE@change.DATA	PTR const struct CE_2 size(2) Largest target is 46
		 -> z_CE(CODE[46]), x_CE(CODE[46]), y_CE(CODE[46]), e_CE(CODE[46]), 
		 -> s_CE(CODE[46]), m_CE(CODE[46]), b_CE(CODE[46]), f_CE(CODE[46]), 
		 -> l_CE(CODE[46]), d_CE(CODE[46]), u_CE(CODE[46]), r_CE(CODE[46]), 
		 -> deff_CE(CODE[46]), state_CE(BANK1[46]), 

    turn_CE@change	PTR const struct enm size(2) Largest target is 266
		 -> CE_LIST(CODE[190]), 

    CE_IDA_LIST.name	PTR unsigned char  size(2) Largest target is 6
		 -> STR_198(CODE[3]), STR_197(CODE[3]), STR_196(CODE[3]), STR_195(CODE[3]), 
		 -> STR_194(CODE[3]), STR_193(CODE[3]), STR_192(CODE[3]), STR_191(CODE[3]), 
		 -> STR_190(CODE[3]), STR_189(CODE[3]), STR_188(CODE[3]), STR_187(CODE[3]), 
		 -> STR_186(CODE[2]), STR_185(CODE[2]), STR_184(CODE[2]), STR_183(CODE[2]), 
		 -> STR_182(CODE[2]), STR_181(CODE[2]), STR_180(CODE[5]), STR_38(CODE[3]), 
		 -> STR_37(CODE[3]), STR_36(CODE[3]), STR_35(CODE[3]), STR_34(CODE[3]), 
		 -> STR_33(CODE[3]), STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), 
		 -> STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), 
		 -> STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), STR_22(CODE[2]), 
		 -> STR_21(CODE[2]), STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[3]), 
		 -> STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), 
		 -> STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[6]), 
		 -> STR_1(CODE[5]), 

    CE_IDA_LIST.DATA	PTR const struct CE_2 size(2) Largest target is 46
		 -> z_CE(CODE[46]), x_CE(CODE[46]), y_CE(CODE[46]), e_CE(CODE[46]), 
		 -> s_CE(CODE[46]), m_CE(CODE[46]), b_CE(CODE[46]), f_CE(CODE[46]), 
		 -> l_CE(CODE[46]), d_CE(CODE[46]), u_CE(CODE[46]), r_CE(CODE[46]), 
		 -> deff_CE(CODE[46]), state_CE(BANK1[46]), 

    LED_COLOR	PTR FTN(unsigned char ,)void [7] size(2) Largest target is 1
		 -> OUT_NONE(), OUT_YELLOW(), OUT_ORANGE(), OUT_BLUE(), 
		 -> OUT_RED(), OUT_GREEN(), OUT_WHITE(), 

    S114enm$name	PTR unsigned char  size(2) Largest target is 6
		 -> STR_198(CODE[3]), STR_197(CODE[3]), STR_196(CODE[3]), STR_195(CODE[3]), 
		 -> STR_194(CODE[3]), STR_193(CODE[3]), STR_192(CODE[3]), STR_191(CODE[3]), 
		 -> STR_190(CODE[3]), STR_189(CODE[3]), STR_188(CODE[3]), STR_187(CODE[3]), 
		 -> STR_186(CODE[2]), STR_185(CODE[2]), STR_184(CODE[2]), STR_183(CODE[2]), 
		 -> STR_182(CODE[2]), STR_181(CODE[2]), STR_180(CODE[5]), STR_38(CODE[3]), 
		 -> STR_37(CODE[3]), STR_36(CODE[3]), STR_35(CODE[3]), STR_34(CODE[3]), 
		 -> STR_33(CODE[3]), STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), 
		 -> STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), 
		 -> STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), STR_22(CODE[2]), 
		 -> STR_21(CODE[2]), STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[3]), 
		 -> STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), 
		 -> STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[6]), 
		 -> STR_1(CODE[5]), 

    CE_LIST.name	PTR unsigned char  size(2) Largest target is 6
		 -> STR_198(CODE[3]), STR_197(CODE[3]), STR_196(CODE[3]), STR_195(CODE[3]), 
		 -> STR_194(CODE[3]), STR_193(CODE[3]), STR_192(CODE[3]), STR_191(CODE[3]), 
		 -> STR_190(CODE[3]), STR_189(CODE[3]), STR_188(CODE[3]), STR_187(CODE[3]), 
		 -> STR_186(CODE[2]), STR_185(CODE[2]), STR_184(CODE[2]), STR_183(CODE[2]), 
		 -> STR_182(CODE[2]), STR_181(CODE[2]), STR_180(CODE[5]), STR_38(CODE[3]), 
		 -> STR_37(CODE[3]), STR_36(CODE[3]), STR_35(CODE[3]), STR_34(CODE[3]), 
		 -> STR_33(CODE[3]), STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), 
		 -> STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), 
		 -> STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), STR_22(CODE[2]), 
		 -> STR_21(CODE[2]), STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[3]), 
		 -> STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), 
		 -> STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[6]), 
		 -> STR_1(CODE[5]), 

    S114enm$DATA	PTR const struct CE_2 size(2) Largest target is 46
		 -> z_CE(CODE[46]), x_CE(CODE[46]), y_CE(CODE[46]), e_CE(CODE[46]), 
		 -> s_CE(CODE[46]), m_CE(CODE[46]), b_CE(CODE[46]), f_CE(CODE[46]), 
		 -> l_CE(CODE[46]), d_CE(CODE[46]), u_CE(CODE[46]), r_CE(CODE[46]), 
		 -> deff_CE(CODE[46]), state_CE(BANK1[46]), 

    CE_LIST.DATA	PTR const struct CE_2 size(2) Largest target is 46
		 -> z_CE(CODE[46]), x_CE(CODE[46]), y_CE(CODE[46]), e_CE(CODE[46]), 
		 -> s_CE(CODE[46]), m_CE(CODE[46]), b_CE(CODE[46]), f_CE(CODE[46]), 
		 -> l_CE(CODE[46]), d_CE(CODE[46]), u_CE(CODE[46]), r_CE(CODE[46]), 
		 -> deff_CE(CODE[46]), state_CE(BANK1[46]), 

    SOUND_NOTE	PTR FTN()void [7] size(2) Largest target is 1
		 -> do2(), si1(), ra1(), so1(), 
		 -> mi1(), re1(), do1(), 


Critical Paths under _main in COMRAM

    _animation_2->_OUT_LED_ARRAY
    _command_turn_ARRAY_2->_command_turn_ARRAY_2_2
    _shuffle_state_CE->_command_turn_CE
    _rand->___omul
    _made_cube->_command_turn_ARRAY_3
    _made_cube->_if_perfect_white
    _yellow_cross->_command_turn_ARRAY_3
    _make_white_yellow_flower->_command_turn_ARRAY_3
    _make_while_flower->_command_turn_ARRAY_3
    _make_up_yellow->_command_turn_ARRAY_3
    _make_step_8->_command_turn_ARRAY_3
    _make_step_7->_command_turn_ARRAY_3
    _make_step_7->_if_no_pair
    _if_no_pair->_command_turn_ARRAY_3_end
    _make_second_flower_perfect->_command_turn_ARRAY_3
    _if_second_flower_perfect->_if_EP
    _make_perfect_white->_command_turn_ARRAY_3
    _make_perfect_white->_if_perfect_white
    _make_flont_green->_command_turn_ARRAY_3
    _if_perfect_white->_command_turn_ARRAY_3_end
    _make_justice_axis->_command_turn_ARRAY_3
    _make_up_white->_command_turn_ARRAY_3
    _if_start_step8->_command_turn_ARRAY_3
    _all_yellow->_command_turn_ARRAY_3
    _command_turn_ARRAY_3->_command_turn_ARRAY_3_end
    _command_turn_CE->_turn_CE
    _turn_CE->___awmod
    _command_turn_ARRAY_3_end->_command_turn_ARRAY_2_2
    _set_CES->_set_C
    _set_C->___awmod
    _command_turn_ARRAY_2_3->_OUT_LED_ARRAY
    _command_turn_ARRAY_2_2->_OUT_LED_ARRAY
    _command_turn_ARRAY->_ARRAY_LINE_TURN
    _animation_3->_OUT_LED_ARRAY
    _set_all_LED_ARRAY->___wmul
    _animation_1->_OUT_LED_ARRAY
    _convert_ROTtoLED->___wmul
    _SPI_special->_SPI_D2S
    _SPI_D2S->_str_cmp_const
    _str_cmp_const->___wmul
    _OUT_LED_ARRAY->___wmul
    _OUT_YELLOW->_OUT_CHECK
    _OUT_WHITE->_OUT_CHECK
    _OUT_RED->_OUT_CHECK
    _OUT_ORANGE->_OUT_CHECK
    _OUT_NONE->_OUT_CHECK
    _OUT_GREEN->_OUT_CHECK
    _OUT_BLUE->_OUT_CHECK
    _EEROM_R_SAVE->_over_write_CE
    _EEROM_GAME_ON->_EEROM_W_SAVE
    _Create_Shoretest_command_Most_deep->_branch_off
    _branch_off->___awmod
    ___awmod->_rand
    _SPI_RET->_SPI_RET_2
    _SPI_RET_2->_SPI_readM_2
    _EEROM_W_DEFF->_DATAEE_WriteByte
    _EEROM_WR_ioport->_over_write_CE
    _EEROM_R_DEFF->_DATAEE_ReadByte
    _EEROM_GAME_OFF->_EEROM_W_SAVE
    _EEROM_W_SAVE->_DATAEE_WriteByte

Critical Paths under _main in BANK0

    _main->_Special_input
    _Special_input->_animation_4
    _animation_4->_made_cube
    _made_cube->_make_perfect_white
    _yellow_cross->_command_turn_ARRAY_3
    _make_white_yellow_flower->_command_turn_ARRAY_3
    _make_while_flower->_command_turn_ARRAY_3
    _make_up_yellow->_command_turn_ARRAY_3
    _make_step_8->_command_turn_ARRAY_3
    _make_step_7->_make_flont_green
    _make_second_flower_perfect->_make_flont_green
    _make_perfect_white->_make_flont_green
    _make_flont_green->_command_turn_ARRAY_3
    _make_justice_axis->_command_turn_ARRAY_3
    _make_up_white->_command_turn_ARRAY_3
    _if_start_step8->_command_turn_ARRAY_3
    _all_yellow->_command_turn_ARRAY_3
    _command_turn_CE->_turn_CE

Critical Paths under _main in BANK1

    _main->_Special_input

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0 3564717
                                            123 BANK0      8     8      0
                     _EEROM_GAME_OFF
                    _EEROM_WR_ioport
                       _EEROM_W_DEFF
                            _LED_RET
                      _OUT_LED_ARRAY
                            _SPI_D2S
                       _SPI_M_ioport
                            _SPI_RET
                        _SPI_readM_2
                      _Special_input
                        _animation_2
                        _animation_3
                 _command_turn_ARRAY
                    _command_turn_CE
                   _convert_ROTtoLED
                                _fa1
                        _if_game_end
                             _ioport
                                _re1
                            _set_CES
                  _set_all_LED_ARRAY
 ---------------------------------------------------------------------------------
 (1) _ioport                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _if_game_end                                          7     7      0     205
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _animation_2                                          3     3      0   18514
                                             73 COMRAM     3     3      0
                      _OUT_LED_ARRAY
                        _SPI_special
                            ___awmod
                                _do1 *
                                _do2 *
                                _mi1 *
                                _ra1 *
                                _re1 *
                  _set_all_LED_ARRAY
                                _si1 *
                                _so1 *
 ---------------------------------------------------------------------------------
 (1) _Special_input                                       55    55      0 3492739
                                            120 BANK0      3     3      0
                                              0 BANK1     52    52      0
 _Create_Shoretest_command_Most_deep
                      _EEROM_GAME_ON
                       _EEROM_R_SAVE
                       _EEROM_W_SAVE
                      _OUT_LED_ARRAY
                          _SPI_RET_2
                        _SPI_special
                        _animation_1
                        _animation_3
                        _animation_4
               _command_turn_ARRAY_2
                    _command_turn_CE
                   _convert_ROTtoLED
                    _if_solution_end
    _initialization_shortest_command
                          _made_cube
                  _make_justice_axis
          _over_write_CE_from_A_to_B
                  _set_all_LED_ARRAY
                   _shuffle_state_CE
 ---------------------------------------------------------------------------------
 (2) _initialization_shortest_command                      1     1      0      68
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _command_turn_ARRAY_2                                 4     2      2   57298
                                             86 COMRAM     4     2      2
             _command_turn_ARRAY_2_2
             _command_turn_ARRAY_2_3
                    _command_turn_CE
                      _str_cmp_const
 ---------------------------------------------------------------------------------
 (2) _animation_4                                         50    48      2 1611149
                                             70 BANK0     50    48      2
                      _OUT_LED_ARRAY
                          _SPI_RET_2
                   _convert_ROTtoLED
                          _made_cube
          _over_write_CE_from_A_to_B
                   _shuffle_state_CE
 ---------------------------------------------------------------------------------
 (2) _shuffle_state_CE                                    24    22      2   14328
                                             54 COMRAM    24    22      2
                            ___awmod
                    _command_turn_CE
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (3) _srand                                                6     4      2      98
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _rand                                                10     8      2     370
                                             24 COMRAM    10     8      2
                             ___omul
 ---------------------------------------------------------------------------------
 (4) ___omul                                              24     8     16     370
                                              0 COMRAM    24     8     16
 ---------------------------------------------------------------------------------
 (2) _over_write_CE_from_A_to_B                           54     6     48    1343
                                              0 COMRAM    54     6     48
 ---------------------------------------------------------------------------------
 (2) _made_cube                                            6     5      1 1587202
                                             64 BANK0      6     5      1
                         _all_yellow
               _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
                   _if_perfect_white
                  _if_perfect_yellow
           _if_second_flower_perfect
                    _if_solution_end
                     _if_start_step8
                  _make_justice_axis
                 _make_perfect_white
         _make_second_flower_perfect
                        _make_step_7
                        _make_step_8
                      _make_up_white
                     _make_up_yellow
                  _make_while_flower
           _make_white_yellow_flower
                    _operation_first
                       _yellow_cross
 ---------------------------------------------------------------------------------
 (3) _yellow_cross                                         7     7      0   75851
                                             54 BANK0      7     7      0
               _command_turn_ARRAY_3
                       _if_yellow_eo
                    _operation_limit
                    _operation_setup
 ---------------------------------------------------------------------------------
 (4) _if_yellow_eo                                         6     4      2     264
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _operation_first                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _make_white_yellow_flower                             3     3      0   75503
                                             54 BANK0      3     3      0
               _command_turn_ARRAY_3
                              _if_EP
 ---------------------------------------------------------------------------------
 (3) _make_while_flower                                    1     1      0   75450
                                             54 BANK0      1     1      0
               _command_turn_ARRAY_3
                    _operation_limit
                    _operation_setup
 ---------------------------------------------------------------------------------
 (3) _make_up_yellow                                       0     0      0   74622
               _command_turn_ARRAY_3
 ---------------------------------------------------------------------------------
 (3) _make_step_8                                          3     3      0   76219
                                             54 BANK0      3     3      0
               _command_turn_ARRAY_3
                    _if_solution_end
                    _operation_limit
                    _operation_setup
 ---------------------------------------------------------------------------------
 (4) _if_solution_end                                     11    11      0     654
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 (3) _make_step_7                                          3     3      0  214315
                                             56 BANK0      3     3      0
               _command_turn_ARRAY_3
                           _if_2pair
                       _if_all_2pair
                         _if_no_pair
                   _make_flont_green
                    _operation_limit
                    _operation_setup
 ---------------------------------------------------------------------------------
 (4) _if_no_pair                                           3     3      0   63917
                                             93 COMRAM     2     2      0
                                              0 BANK0      1     1      0
           _command_turn_ARRAY_3_end
                              _set_C
 ---------------------------------------------------------------------------------
 (4) _if_all_2pair                                        16    16      0     229
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 (4) _if_2pair                                             3     3      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _make_second_flower_perfect                           7     7      0  152042
                                             56 BANK0      7     7      0
               _command_turn_ARRAY_3
           _if_second_flower_perfect
                   _make_flont_green
                    _operation_limit
                    _operation_setup
 ---------------------------------------------------------------------------------
 (4) _if_second_flower_perfect                             7     7      0    1060
                                              5 COMRAM     7     7      0
                              _if_EP
 ---------------------------------------------------------------------------------
 (4) _if_EP                                                5     3      2     720
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _make_perfect_white                                   8     8      0  270882
                                             56 BANK0      8     8      0
               _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
                              _if_CP
                   _if_perfect_white
                   _make_flont_green
                    _operation_limit
                    _operation_setup
 ---------------------------------------------------------------------------------
 (4) _make_flont_green                                     2     2      0   74629
                                             54 BANK0      2     2      0
               _command_turn_ARRAY_3
 ---------------------------------------------------------------------------------
 (4) _if_perfect_white                                    12    12      0   60487
                                             93 COMRAM     2     2      0
                                              0 BANK0     10    10      0
           _command_turn_ARRAY_3_end
                              _if_CP
 ---------------------------------------------------------------------------------
 (5) _if_CP                                                6     4      2     440
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _make_justice_axis                                    0     0      0  150026
               _command_turn_ARRAY_3
                      _make_up_white
                    _operation_limit
                    _operation_setup
 ---------------------------------------------------------------------------------
 (3) _make_up_white                                        0     0      0   74622
               _command_turn_ARRAY_3
 ---------------------------------------------------------------------------------
 (3) _if_start_step8                                       4     4      0   74669
                                             54 BANK0      4     4      0
               _command_turn_ARRAY_3
 ---------------------------------------------------------------------------------
 (3) _if_perfect_yellow                                    6     6      0     249
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (3) _all_yellow                                           3     3      0   75807
                                             54 BANK0      3     3      0
               _command_turn_ARRAY_3
                       _if_yellow_co
                    _operation_limit
                    _operation_setup
 ---------------------------------------------------------------------------------
 (3) _operation_setup                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _operation_limit                                      3     1      2     782
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _if_yellow_co                                         6     4      2     264
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _command_turn_ARRAY_3                                 6     4      2   74622
                                             93 COMRAM     2     0      2
                                             50 BANK0      4     4      0
           _command_turn_ARRAY_3_end
                    _command_turn_CE
 ---------------------------------------------------------------------------------
 (1) _command_turn_CE                                      4     2      2    9407
                                             50 COMRAM     4     2      2
                             ___wmul
                      _str_cmp_const
                            _turn_CE
 ---------------------------------------------------------------------------------
 (2) _turn_CE                                             60    58      2    4890
                                             40 COMRAM    10     8      2
                                              0 BANK0     50    50      0
                            ___awmod
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _command_turn_ARRAY_3_end                             7     7      0   59731
                                             86 COMRAM     7     7      0
                      _OUT_LED_ARRAY
             _command_turn_ARRAY_2_2
             _command_turn_ARRAY_2_3
                   _convert_ROTtoLED
                            _set_CES
                      _str_cmp_const
 ---------------------------------------------------------------------------------
 (1) _set_CES                                              2     2      0    4096
                              _set_C
                              _set_E
                              _set_S
 ---------------------------------------------------------------------------------
 (2) _set_S                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _set_E                                                3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _set_C                                                2     2      0    4096
                                             40 COMRAM     2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) _command_turn_ARRAY_2_3                              10     4      6   25232
                                             73 COMRAM    10     4      6
                      _OUT_LED_ARRAY
                        _SPI_special
                            ___awmod
                 _command_turn_ARRAY
                   _convert_ROTtoLED
 ---------------------------------------------------------------------------------
 (6) _command_turn_ARRAY_2_2                              13    11      2   20079
                                             73 COMRAM    13    11      2
                      _OUT_LED_ARRAY
                        _SPI_special
                            ___awmod
                 _command_turn_ARRAY
                   _convert_ROTtoLED
 ---------------------------------------------------------------------------------
 (1) _command_turn_ARRAY                                  12    10      2    1524
                                             30 COMRAM    12    10      2
                    _ARRAY_LINE_TURN
                    _ARRAY_SIDE_TURN
 ---------------------------------------------------------------------------------
 (2) _ARRAY_SIDE_TURN                                     11    11      0     201
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 (2) _ARRAY_LINE_TURN                                     31    15     16     663
                                              0 COMRAM    30    14     16
 ---------------------------------------------------------------------------------
 (1) _animation_3                                          5     4      1   14726
                                             73 COMRAM     5     4      1
                      _OUT_LED_ARRAY
                          _SPI_RET_2
                        _SPI_special
                                _do1
                                _re1
                  _set_all_LED_ARRAY
 ---------------------------------------------------------------------------------
 (1) _set_all_LED_ARRAY                                    7     7      0    1833
                                              6 COMRAM     7     7      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _animation_1                                          6     6      0   18716
                                             73 COMRAM     6     6      0
                      _OUT_LED_ARRAY
                        _SPI_special
                            ___awmod
                   _convert_ROTtoLED
                                _do1 *
                                _do2 *
                                _mi1 *
                                _ra1 *
                                _re1 *
                                _si1 *
                                _so1 *
 ---------------------------------------------------------------------------------
 (2) _so1                                                  5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _si1                                                  4     4      0      46
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _re1                                                  4     4      0      46
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _ra1                                                  5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _mi1                                                  4     4      0      46
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _do2                                                  5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _do1                                                  4     4      0      46
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _convert_ROTtoLED                                     8     8      0    1855
                                              6 COMRAM     8     8      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _SPI_special                                          1     1      0    6218
                                             26 COMRAM     1     1      0
                            _SPI_D2S
                          _SPI_RET_2
                        _SPI_readM_2
                                _fa1
 ---------------------------------------------------------------------------------
 (1) _fa1                                                  5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (3) _SPI_D2S                                              9     8      1    5568
                                             17 COMRAM     9     8      1
                          _SPI0_D2S0
                          _SPI1_D2S0
                          _SPI2_D2S0
                          _SPI3_D2S0
                          _SPI4_D2S0
                          _SPI5_D2S0
                        _SPI_readM_2 (ARG)
                             ___wmul
                      _str_cmp_const
 ---------------------------------------------------------------------------------
 (2) _str_cmp_const                                       11     7      4    2306
                                              6 COMRAM    11     7      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _SPI5_D2S0                                            3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _SPI4_D2S0                                            3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _SPI3_D2S0                                            3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _SPI2_D2S0                                            3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _SPI1_D2S0                                            3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _SPI0_D2S0                                            3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _OUT_LED_ARRAY                                       67    64      3    5955
                                              6 COMRAM    67    64      3
                            _LED_RET
                           _OUT_BLUE *
                          _OUT_GREEN *
                           _OUT_NONE *
                         _OUT_ORANGE *
                            _OUT_RED *
                          _OUT_WHITE *
                         _OUT_YELLOW *
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1675
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _OUT_YELLOW                                           1     1      0     113
                                              3 COMRAM     1     1      0
                          _OUT_CHECK
 ---------------------------------------------------------------------------------
 (3) _OUT_WHITE                                            1     1      0     135
                                              3 COMRAM     1     1      0
                          _OUT_CHECK
 ---------------------------------------------------------------------------------
 (3) _OUT_RED                                              1     1      0      91
                                              3 COMRAM     1     1      0
                          _OUT_CHECK
 ---------------------------------------------------------------------------------
 (3) _OUT_ORANGE                                           1     1      0     113
                                              3 COMRAM     1     1      0
                          _OUT_CHECK
 ---------------------------------------------------------------------------------
 (3) _OUT_NONE                                             1     1      0      69
                          _OUT_CHECK
 ---------------------------------------------------------------------------------
 (3) _OUT_GREEN                                            1     1      0      91
                                              3 COMRAM     1     1      0
                          _OUT_CHECK
 ---------------------------------------------------------------------------------
 (3) _OUT_BLUE                                             1     1      0      91
                                              3 COMRAM     1     1      0
                          _OUT_CHECK
 ---------------------------------------------------------------------------------
 (4) _OUT_CHECK                                            3     3      0      69
                                              0 COMRAM     3     3      0
                           _OUT_HIGH
                            _OUT_LOW
 ---------------------------------------------------------------------------------
 (5) _OUT_LOW                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _OUT_HIGH                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LED_RET                                              2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _EEROM_R_SAVE                                        11    11      0    1179
                                             50 COMRAM    11    11      0
                    _DATAEE_ReadByte
                      _over_write_CE
 ---------------------------------------------------------------------------------
 (2) _EEROM_GAME_ON                                        0     0      0    3228
                   _DATAEE_WriteByte
                       _EEROM_W_SAVE
 ---------------------------------------------------------------------------------
 (2) _Create_Shoretest_command_Most_deep                   2     2      0    4937
                                             50 COMRAM     2     2      0
    _Create_shortest_command_depp_N1
                         _branch_off
                          _depth_add
 ---------------------------------------------------------------------------------
 (3) _depth_add                                            3     3      0      70
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _branch_off                                          10    10      0    4707
                                             40 COMRAM    10    10      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    4096
                                             34 COMRAM     6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) _Create_shortest_command_depp_N1                      3     3      0      90
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SPI_RET                                              3     3      0     360
                                              7 COMRAM     3     3      0
                          _SPI_RET_2
 ---------------------------------------------------------------------------------
 (3) _SPI_RET_2                                            1     1      0     314
                                              6 COMRAM     1     1      0
                        _SPI_readM_2
 ---------------------------------------------------------------------------------
 (3) _SPI_readM_2                                          6     6      0     246
                                              0 COMRAM     6     6      0
                           _SPIreadM
 ---------------------------------------------------------------------------------
 (4) _SPIreadM                                             1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_M_ioport                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EEROM_W_DEFF                                        11    11      0    1663
                                              3 COMRAM    11    11      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (1) _EEROM_WR_ioport                                      0     0      0    2408
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                       _EEROM_R_DEFF
                      _over_write_CE
 ---------------------------------------------------------------------------------
 (3) _over_write_CE                                       50     4     46     701
                                              0 COMRAM    50     4     46
 ---------------------------------------------------------------------------------
 (2) _EEROM_R_DEFF                                        11    11      0     478
                                              1 COMRAM    11    11      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _EEROM_GAME_OFF                                       0     0      0    3228
                   _DATAEE_WriteByte
                       _EEROM_W_SAVE
 ---------------------------------------------------------------------------------
 (2) _EEROM_W_SAVE                                        13    13      0    2021
                                              3 COMRAM    13    13      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1    1207
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEROM_GAME_OFF
     _DATAEE_WriteByte
     _EEROM_W_SAVE
       _DATAEE_WriteByte
   _EEROM_WR_ioport
     _DATAEE_ReadByte
     _DATAEE_WriteByte
     _EEROM_R_DEFF
       _DATAEE_ReadByte
     _over_write_CE
   _EEROM_W_DEFF
     _DATAEE_WriteByte
   _LED_RET
   _OUT_LED_ARRAY
     _LED_RET
     _OUT_BLUE *
       _OUT_CHECK
         _OUT_HIGH
         _OUT_LOW
     _OUT_GREEN *
       _OUT_CHECK
         _OUT_HIGH
         _OUT_LOW
     _OUT_NONE *
       _OUT_CHECK
         _OUT_HIGH
         _OUT_LOW
     _OUT_ORANGE *
       _OUT_CHECK
         _OUT_HIGH
         _OUT_LOW
     _OUT_RED *
       _OUT_CHECK
         _OUT_HIGH
         _OUT_LOW
     _OUT_WHITE *
       _OUT_CHECK
         _OUT_HIGH
         _OUT_LOW
     _OUT_YELLOW *
       _OUT_CHECK
         _OUT_HIGH
         _OUT_LOW
     ___wmul *
   _SPI_D2S
     _SPI0_D2S0
     _SPI1_D2S0
     _SPI2_D2S0
     _SPI3_D2S0
     _SPI4_D2S0
     _SPI5_D2S0
     _SPI_readM_2 (ARG)
       _SPIreadM
     ___wmul (ARG)
     _str_cmp_const (ARG)
       ___wmul (ARG)
   _SPI_M_ioport
   _SPI_RET
     _SPI_RET_2
       _SPI_readM_2
         _SPIreadM
   _SPI_readM_2
     _SPIreadM
   _Special_input
     _Create_Shoretest_command_Most_deep
       _Create_shortest_command_depp_N1
       _branch_off
         ___awmod
           _rand (ARG)
             ___omul
       _depth_add
     _EEROM_GAME_ON
       _DATAEE_WriteByte
       _EEROM_W_SAVE
         _DATAEE_WriteByte
     _EEROM_R_SAVE
       _DATAEE_ReadByte
       _over_write_CE
     _EEROM_W_SAVE
       _DATAEE_WriteByte
     _OUT_LED_ARRAY
       _LED_RET
       _OUT_BLUE *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_GREEN *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_NONE *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_ORANGE *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_RED *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_WHITE *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_YELLOW *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       ___wmul *
     _SPI_RET_2
       _SPI_readM_2
         _SPIreadM
     _SPI_special
       _SPI_D2S
         _SPI0_D2S0
         _SPI1_D2S0
         _SPI2_D2S0
         _SPI3_D2S0
         _SPI4_D2S0
         _SPI5_D2S0
         _SPI_readM_2 (ARG)
           _SPIreadM
         ___wmul (ARG)
         _str_cmp_const (ARG)
           ___wmul (ARG)
       _SPI_RET_2
         _SPI_readM_2
           _SPIreadM
       _SPI_readM_2
         _SPIreadM
       _fa1
     _animation_1
       _OUT_LED_ARRAY
         _LED_RET
         _OUT_BLUE *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_GREEN *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_NONE *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_ORANGE *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_RED *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_WHITE *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_YELLOW *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         ___wmul *
       _SPI_special
         _SPI_D2S
           _SPI0_D2S0
           _SPI1_D2S0
           _SPI2_D2S0
           _SPI3_D2S0
           _SPI4_D2S0
           _SPI5_D2S0
           _SPI_readM_2 (ARG)
             _SPIreadM
           ___wmul (ARG)
           _str_cmp_const (ARG)
             ___wmul (ARG)
         _SPI_RET_2
           _SPI_readM_2
             _SPIreadM
         _SPI_readM_2
           _SPIreadM
         _fa1
       ___awmod
         _rand (ARG)
           ___omul
       _convert_ROTtoLED
         ___wmul
       _do1 *
       _do2 *
       _mi1 *
       _ra1 *
       _re1 *
       _si1 *
       _so1 *
     _animation_3
       _OUT_LED_ARRAY
         _LED_RET
         _OUT_BLUE *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_GREEN *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_NONE *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_ORANGE *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_RED *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_WHITE *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_YELLOW *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         ___wmul *
       _SPI_RET_2
         _SPI_readM_2
           _SPIreadM
       _SPI_special
         _SPI_D2S
           _SPI0_D2S0
           _SPI1_D2S0
           _SPI2_D2S0
           _SPI3_D2S0
           _SPI4_D2S0
           _SPI5_D2S0
           _SPI_readM_2 (ARG)
             _SPIreadM
           ___wmul (ARG)
           _str_cmp_const (ARG)
             ___wmul (ARG)
         _SPI_RET_2
           _SPI_readM_2
             _SPIreadM
         _SPI_readM_2
           _SPIreadM
         _fa1
       _do1
       _re1
       _set_all_LED_ARRAY
         ___wmul
     _animation_4
       _OUT_LED_ARRAY
         _LED_RET
         _OUT_BLUE *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_GREEN *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_NONE *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_ORANGE *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_RED *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_WHITE *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         _OUT_YELLOW *
           _OUT_CHECK
             _OUT_HIGH
             _OUT_LOW
         ___wmul *
       _SPI_RET_2
         _SPI_readM_2
           _SPIreadM
       _convert_ROTtoLED
         ___wmul
       _made_cube
         _all_yellow
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
           _if_yellow_co
           _operation_limit
           _operation_setup
         _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _command_turn_CE
             ___wmul
             _str_cmp_const
               ___wmul (ARG)
             _turn_CE
               ___awmod
                 _rand (ARG)
                   ___omul
               ___wmul (ARG)
         _command_turn_ARRAY_3_end
           _OUT_LED_ARRAY
             _LED_RET
             _OUT_BLUE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_GREEN *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_NONE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_ORANGE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_RED *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_WHITE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_YELLOW *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             ___wmul *
           _command_turn_ARRAY_2_2
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _SPI_special
               _SPI_D2S
                 _SPI0_D2S0
                 _SPI1_D2S0
                 _SPI2_D2S0
                 _SPI3_D2S0
                 _SPI4_D2S0
                 _SPI5_D2S0
                 _SPI_readM_2 (ARG)
                   _SPIreadM
                 ___wmul (ARG)
                 _str_cmp_const (ARG)
                   ___wmul (ARG)
               _SPI_RET_2
                 _SPI_readM_2
                   _SPIreadM
               _SPI_readM_2
                 _SPIreadM
               _fa1
             ___awmod
               _rand (ARG)
                 ___omul
             _command_turn_ARRAY
               _ARRAY_LINE_TURN
               _ARRAY_SIDE_TURN
             _convert_ROTtoLED
               ___wmul
           _command_turn_ARRAY_2_3
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _SPI_special
               _SPI_D2S
                 _SPI0_D2S0
                 _SPI1_D2S0
                 _SPI2_D2S0
                 _SPI3_D2S0
                 _SPI4_D2S0
                 _SPI5_D2S0
                 _SPI_readM_2 (ARG)
                   _SPIreadM
                 ___wmul (ARG)
                 _str_cmp_const (ARG)
                   ___wmul (ARG)
               _SPI_RET_2
                 _SPI_readM_2
                   _SPIreadM
               _SPI_readM_2
                 _SPIreadM
               _fa1
             ___awmod
               _rand (ARG)
                 ___omul
             _command_turn_ARRAY
               _ARRAY_LINE_TURN
               _ARRAY_SIDE_TURN
             _convert_ROTtoLED
               ___wmul
           _convert_ROTtoLED
             ___wmul
           _set_CES
             _set_C
               ___awmod
                 _rand (ARG)
                   ___omul
             _set_E
             _set_S
           _str_cmp_const
             ___wmul (ARG)
         _if_perfect_white
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _if_CP
         _if_perfect_yellow
         _if_second_flower_perfect
           _if_EP
         _if_solution_end
         _if_start_step8
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
         _make_justice_axis
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
           _make_up_white
             _command_turn_ARRAY_3
               _command_turn_ARRAY_3_end
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _command_turn_ARRAY_2_2
                   _OUT_LED_ARRAY
                     _LED_RET
                     _OUT_BLUE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_GREEN *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_NONE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_ORANGE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_RED *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_WHITE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_YELLOW *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     ___wmul *
                   _SPI_special
                     _SPI_D2S
                       _SPI0_D2S0
                       _SPI1_D2S0
                       _SPI2_D2S0
                       _SPI3_D2S0
                       _SPI4_D2S0
                       _SPI5_D2S0
                       _SPI_readM_2 (ARG)
                         _SPIreadM
                       ___wmul (ARG)
                       _str_cmp_const (ARG)
                         ___wmul (ARG)
                     _SPI_RET_2
                       _SPI_readM_2
                         _SPIreadM
                     _SPI_readM_2
                       _SPIreadM
                     _fa1
                   ___awmod
                     _rand (ARG)
                       ___omul
                   _command_turn_ARRAY
                     _ARRAY_LINE_TURN
                     _ARRAY_SIDE_TURN
                   _convert_ROTtoLED
                     ___wmul
                 _command_turn_ARRAY_2_3
                   _OUT_LED_ARRAY
                     _LED_RET
                     _OUT_BLUE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_GREEN *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_NONE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_ORANGE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_RED *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_WHITE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_YELLOW *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     ___wmul *
                   _SPI_special
                     _SPI_D2S
                       _SPI0_D2S0
                       _SPI1_D2S0
                       _SPI2_D2S0
                       _SPI3_D2S0
                       _SPI4_D2S0
                       _SPI5_D2S0
                       _SPI_readM_2 (ARG)
                         _SPIreadM
                       ___wmul (ARG)
                       _str_cmp_const (ARG)
                         ___wmul (ARG)
                     _SPI_RET_2
                       _SPI_readM_2
                         _SPIreadM
                     _SPI_readM_2
                       _SPIreadM
                     _fa1
                   ___awmod
                     _rand (ARG)
                       ___omul
                   _command_turn_ARRAY
                     _ARRAY_LINE_TURN
                     _ARRAY_SIDE_TURN
                   _convert_ROTtoLED
                     ___wmul
                 _convert_ROTtoLED
                   ___wmul
                 _set_CES
                   _set_C
                     ___awmod
                       _rand (ARG)
                         ___omul
                   _set_E
                   _set_S
                 _str_cmp_const
                   ___wmul (ARG)
               _command_turn_CE
                 ___wmul
                 _str_cmp_const
                   ___wmul (ARG)
                 _turn_CE
                   ___awmod
                     _rand (ARG)
                       ___omul
                   ___wmul (ARG)
           _operation_limit
           _operation_setup
         _make_perfect_white
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _if_CP
           _if_perfect_white
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _if_CP
           _make_flont_green
             _command_turn_ARRAY_3
               _command_turn_ARRAY_3_end
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _command_turn_ARRAY_2_2
                   _OUT_LED_ARRAY
                     _LED_RET
                     _OUT_BLUE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_GREEN *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_NONE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_ORANGE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_RED *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_WHITE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_YELLOW *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     ___wmul *
                   _SPI_special
                     _SPI_D2S
                       _SPI0_D2S0
                       _SPI1_D2S0
                       _SPI2_D2S0
                       _SPI3_D2S0
                       _SPI4_D2S0
                       _SPI5_D2S0
                       _SPI_readM_2 (ARG)
                         _SPIreadM
                       ___wmul (ARG)
                       _str_cmp_const (ARG)
                         ___wmul (ARG)
                     _SPI_RET_2
                       _SPI_readM_2
                         _SPIreadM
                     _SPI_readM_2
                       _SPIreadM
                     _fa1
                   ___awmod
                     _rand (ARG)
                       ___omul
                   _command_turn_ARRAY
                     _ARRAY_LINE_TURN
                     _ARRAY_SIDE_TURN
                   _convert_ROTtoLED
                     ___wmul
                 _command_turn_ARRAY_2_3
                   _OUT_LED_ARRAY
                     _LED_RET
                     _OUT_BLUE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_GREEN *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_NONE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_ORANGE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_RED *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_WHITE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_YELLOW *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     ___wmul *
                   _SPI_special
                     _SPI_D2S
                       _SPI0_D2S0
                       _SPI1_D2S0
                       _SPI2_D2S0
                       _SPI3_D2S0
                       _SPI4_D2S0
                       _SPI5_D2S0
                       _SPI_readM_2 (ARG)
                         _SPIreadM
                       ___wmul (ARG)
                       _str_cmp_const (ARG)
                         ___wmul (ARG)
                     _SPI_RET_2
                       _SPI_readM_2
                         _SPIreadM
                     _SPI_readM_2
                       _SPIreadM
                     _fa1
                   ___awmod
                     _rand (ARG)
                       ___omul
                   _command_turn_ARRAY
                     _ARRAY_LINE_TURN
                     _ARRAY_SIDE_TURN
                   _convert_ROTtoLED
                     ___wmul
                 _convert_ROTtoLED
                   ___wmul
                 _set_CES
                   _set_C
                     ___awmod
                       _rand (ARG)
                         ___omul
                   _set_E
                   _set_S
                 _str_cmp_const
                   ___wmul (ARG)
               _command_turn_CE
                 ___wmul
                 _str_cmp_const
                   ___wmul (ARG)
                 _turn_CE
                   ___awmod
                     _rand (ARG)
                       ___omul
                   ___wmul (ARG)
           _operation_limit
           _operation_setup
         _make_second_flower_perfect
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
           _if_second_flower_perfect
             _if_EP
           _make_flont_green
             _command_turn_ARRAY_3
               _command_turn_ARRAY_3_end
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _command_turn_ARRAY_2_2
                   _OUT_LED_ARRAY
                     _LED_RET
                     _OUT_BLUE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_GREEN *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_NONE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_ORANGE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_RED *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_WHITE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_YELLOW *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     ___wmul *
                   _SPI_special
                     _SPI_D2S
                       _SPI0_D2S0
                       _SPI1_D2S0
                       _SPI2_D2S0
                       _SPI3_D2S0
                       _SPI4_D2S0
                       _SPI5_D2S0
                       _SPI_readM_2 (ARG)
                         _SPIreadM
                       ___wmul (ARG)
                       _str_cmp_const (ARG)
                         ___wmul (ARG)
                     _SPI_RET_2
                       _SPI_readM_2
                         _SPIreadM
                     _SPI_readM_2
                       _SPIreadM
                     _fa1
                   ___awmod
                     _rand (ARG)
                       ___omul
                   _command_turn_ARRAY
                     _ARRAY_LINE_TURN
                     _ARRAY_SIDE_TURN
                   _convert_ROTtoLED
                     ___wmul
                 _command_turn_ARRAY_2_3
                   _OUT_LED_ARRAY
                     _LED_RET
                     _OUT_BLUE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_GREEN *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_NONE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_ORANGE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_RED *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_WHITE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_YELLOW *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     ___wmul *
                   _SPI_special
                     _SPI_D2S
                       _SPI0_D2S0
                       _SPI1_D2S0
                       _SPI2_D2S0
                       _SPI3_D2S0
                       _SPI4_D2S0
                       _SPI5_D2S0
                       _SPI_readM_2 (ARG)
                         _SPIreadM
                       ___wmul (ARG)
                       _str_cmp_const (ARG)
                         ___wmul (ARG)
                     _SPI_RET_2
                       _SPI_readM_2
                         _SPIreadM
                     _SPI_readM_2
                       _SPIreadM
                     _fa1
                   ___awmod
                     _rand (ARG)
                       ___omul
                   _command_turn_ARRAY
                     _ARRAY_LINE_TURN
                     _ARRAY_SIDE_TURN
                   _convert_ROTtoLED
                     ___wmul
                 _convert_ROTtoLED
                   ___wmul
                 _set_CES
                   _set_C
                     ___awmod
                       _rand (ARG)
                         ___omul
                   _set_E
                   _set_S
                 _str_cmp_const
                   ___wmul (ARG)
               _command_turn_CE
                 ___wmul
                 _str_cmp_const
                   ___wmul (ARG)
                 _turn_CE
                   ___awmod
                     _rand (ARG)
                       ___omul
                   ___wmul (ARG)
           _operation_limit
           _operation_setup
         _make_step_7
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
           _if_2pair
           _if_all_2pair
           _if_no_pair
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _set_C
               ___awmod
                 _rand (ARG)
                   ___omul
           _make_flont_green
             _command_turn_ARRAY_3
               _command_turn_ARRAY_3_end
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _command_turn_ARRAY_2_2
                   _OUT_LED_ARRAY
                     _LED_RET
                     _OUT_BLUE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_GREEN *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_NONE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_ORANGE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_RED *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_WHITE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_YELLOW *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     ___wmul *
                   _SPI_special
                     _SPI_D2S
                       _SPI0_D2S0
                       _SPI1_D2S0
                       _SPI2_D2S0
                       _SPI3_D2S0
                       _SPI4_D2S0
                       _SPI5_D2S0
                       _SPI_readM_2 (ARG)
                         _SPIreadM
                       ___wmul (ARG)
                       _str_cmp_const (ARG)
                         ___wmul (ARG)
                     _SPI_RET_2
                       _SPI_readM_2
                         _SPIreadM
                     _SPI_readM_2
                       _SPIreadM
                     _fa1
                   ___awmod
                     _rand (ARG)
                       ___omul
                   _command_turn_ARRAY
                     _ARRAY_LINE_TURN
                     _ARRAY_SIDE_TURN
                   _convert_ROTtoLED
                     ___wmul
                 _command_turn_ARRAY_2_3
                   _OUT_LED_ARRAY
                     _LED_RET
                     _OUT_BLUE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_GREEN *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_NONE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_ORANGE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_RED *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_WHITE *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     _OUT_YELLOW *
                       _OUT_CHECK
                         _OUT_HIGH
                         _OUT_LOW
                     ___wmul *
                   _SPI_special
                     _SPI_D2S
                       _SPI0_D2S0
                       _SPI1_D2S0
                       _SPI2_D2S0
                       _SPI3_D2S0
                       _SPI4_D2S0
                       _SPI5_D2S0
                       _SPI_readM_2 (ARG)
                         _SPIreadM
                       ___wmul (ARG)
                       _str_cmp_const (ARG)
                         ___wmul (ARG)
                     _SPI_RET_2
                       _SPI_readM_2
                         _SPIreadM
                     _SPI_readM_2
                       _SPIreadM
                     _fa1
                   ___awmod
                     _rand (ARG)
                       ___omul
                   _command_turn_ARRAY
                     _ARRAY_LINE_TURN
                     _ARRAY_SIDE_TURN
                   _convert_ROTtoLED
                     ___wmul
                 _convert_ROTtoLED
                   ___wmul
                 _set_CES
                   _set_C
                     ___awmod
                       _rand (ARG)
                         ___omul
                   _set_E
                   _set_S
                 _str_cmp_const
                   ___wmul (ARG)
               _command_turn_CE
                 ___wmul
                 _str_cmp_const
                   ___wmul (ARG)
                 _turn_CE
                   ___awmod
                     _rand (ARG)
                       ___omul
                   ___wmul (ARG)
           _operation_limit
           _operation_setup
         _make_step_8
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
           _if_solution_end
           _operation_limit
           _operation_setup
         _make_up_white
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
         _make_up_yellow
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
         _make_while_flower
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
           _operation_limit
           _operation_setup
         _make_white_yellow_flower
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
           _if_EP
         _operation_first
         _yellow_cross
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
           _if_yellow_eo
           _operation_limit
           _operation_setup
       _over_write_CE_from_A_to_B
       _shuffle_state_CE
         ___awmod
           _rand (ARG)
             ___omul
         _command_turn_CE
           ___wmul
           _str_cmp_const
             ___wmul (ARG)
           _turn_CE
             ___awmod
               _rand (ARG)
                 ___omul
             ___wmul (ARG)
         _rand
           ___omul
         _srand
     _command_turn_ARRAY_2
       _command_turn_ARRAY_2_2
         _OUT_LED_ARRAY
           _LED_RET
           _OUT_BLUE *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_GREEN *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_NONE *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_ORANGE *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_RED *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_WHITE *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_YELLOW *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           ___wmul *
         _SPI_special
           _SPI_D2S
             _SPI0_D2S0
             _SPI1_D2S0
             _SPI2_D2S0
             _SPI3_D2S0
             _SPI4_D2S0
             _SPI5_D2S0
             _SPI_readM_2 (ARG)
               _SPIreadM
             ___wmul (ARG)
             _str_cmp_const (ARG)
               ___wmul (ARG)
           _SPI_RET_2
             _SPI_readM_2
               _SPIreadM
           _SPI_readM_2
             _SPIreadM
           _fa1
         ___awmod
           _rand (ARG)
             ___omul
         _command_turn_ARRAY
           _ARRAY_LINE_TURN
           _ARRAY_SIDE_TURN
         _convert_ROTtoLED
           ___wmul
       _command_turn_ARRAY_2_3
         _OUT_LED_ARRAY
           _LED_RET
           _OUT_BLUE *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_GREEN *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_NONE *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_ORANGE *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_RED *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_WHITE *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_YELLOW *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           ___wmul *
         _SPI_special
           _SPI_D2S
             _SPI0_D2S0
             _SPI1_D2S0
             _SPI2_D2S0
             _SPI3_D2S0
             _SPI4_D2S0
             _SPI5_D2S0
             _SPI_readM_2 (ARG)
               _SPIreadM
             ___wmul (ARG)
             _str_cmp_const (ARG)
               ___wmul (ARG)
           _SPI_RET_2
             _SPI_readM_2
               _SPIreadM
           _SPI_readM_2
             _SPIreadM
           _fa1
         ___awmod
           _rand (ARG)
             ___omul
         _command_turn_ARRAY
           _ARRAY_LINE_TURN
           _ARRAY_SIDE_TURN
         _convert_ROTtoLED
           ___wmul
       _command_turn_CE
         ___wmul
         _str_cmp_const
           ___wmul (ARG)
         _turn_CE
           ___awmod
             _rand (ARG)
               ___omul
           ___wmul (ARG)
       _str_cmp_const
         ___wmul (ARG)
     _command_turn_CE
       ___wmul
       _str_cmp_const
         ___wmul (ARG)
       _turn_CE
         ___awmod
           _rand (ARG)
             ___omul
         ___wmul (ARG)
     _convert_ROTtoLED
       ___wmul
     _if_solution_end
     _initialization_shortest_command
     _made_cube
       _all_yellow
         _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _command_turn_CE
             ___wmul
             _str_cmp_const
               ___wmul (ARG)
             _turn_CE
               ___awmod
                 _rand (ARG)
                   ___omul
               ___wmul (ARG)
         _if_yellow_co
         _operation_limit
         _operation_setup
       _command_turn_ARRAY_3
         _command_turn_ARRAY_3_end
           _OUT_LED_ARRAY
             _LED_RET
             _OUT_BLUE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_GREEN *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_NONE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_ORANGE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_RED *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_WHITE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_YELLOW *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             ___wmul *
           _command_turn_ARRAY_2_2
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _SPI_special
               _SPI_D2S
                 _SPI0_D2S0
                 _SPI1_D2S0
                 _SPI2_D2S0
                 _SPI3_D2S0
                 _SPI4_D2S0
                 _SPI5_D2S0
                 _SPI_readM_2 (ARG)
                   _SPIreadM
                 ___wmul (ARG)
                 _str_cmp_const (ARG)
                   ___wmul (ARG)
               _SPI_RET_2
                 _SPI_readM_2
                   _SPIreadM
               _SPI_readM_2
                 _SPIreadM
               _fa1
             ___awmod
               _rand (ARG)
                 ___omul
             _command_turn_ARRAY
               _ARRAY_LINE_TURN
               _ARRAY_SIDE_TURN
             _convert_ROTtoLED
               ___wmul
           _command_turn_ARRAY_2_3
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _SPI_special
               _SPI_D2S
                 _SPI0_D2S0
                 _SPI1_D2S0
                 _SPI2_D2S0
                 _SPI3_D2S0
                 _SPI4_D2S0
                 _SPI5_D2S0
                 _SPI_readM_2 (ARG)
                   _SPIreadM
                 ___wmul (ARG)
                 _str_cmp_const (ARG)
                   ___wmul (ARG)
               _SPI_RET_2
                 _SPI_readM_2
                   _SPIreadM
               _SPI_readM_2
                 _SPIreadM
               _fa1
             ___awmod
               _rand (ARG)
                 ___omul
             _command_turn_ARRAY
               _ARRAY_LINE_TURN
               _ARRAY_SIDE_TURN
             _convert_ROTtoLED
               ___wmul
           _convert_ROTtoLED
             ___wmul
           _set_CES
             _set_C
               ___awmod
                 _rand (ARG)
                   ___omul
             _set_E
             _set_S
           _str_cmp_const
             ___wmul (ARG)
         _command_turn_CE
           ___wmul
           _str_cmp_const
             ___wmul (ARG)
           _turn_CE
             ___awmod
               _rand (ARG)
                 ___omul
             ___wmul (ARG)
       _command_turn_ARRAY_3_end
         _OUT_LED_ARRAY
           _LED_RET
           _OUT_BLUE *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_GREEN *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_NONE *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_ORANGE *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_RED *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_WHITE *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           _OUT_YELLOW *
             _OUT_CHECK
               _OUT_HIGH
               _OUT_LOW
           ___wmul *
         _command_turn_ARRAY_2_2
           _OUT_LED_ARRAY
             _LED_RET
             _OUT_BLUE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_GREEN *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_NONE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_ORANGE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_RED *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_WHITE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_YELLOW *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             ___wmul *
           _SPI_special
             _SPI_D2S
               _SPI0_D2S0
               _SPI1_D2S0
               _SPI2_D2S0
               _SPI3_D2S0
               _SPI4_D2S0
               _SPI5_D2S0
               _SPI_readM_2 (ARG)
                 _SPIreadM
               ___wmul (ARG)
               _str_cmp_const (ARG)
                 ___wmul (ARG)
             _SPI_RET_2
               _SPI_readM_2
                 _SPIreadM
             _SPI_readM_2
               _SPIreadM
             _fa1
           ___awmod
             _rand (ARG)
               ___omul
           _command_turn_ARRAY
             _ARRAY_LINE_TURN
             _ARRAY_SIDE_TURN
           _convert_ROTtoLED
             ___wmul
         _command_turn_ARRAY_2_3
           _OUT_LED_ARRAY
             _LED_RET
             _OUT_BLUE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_GREEN *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_NONE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_ORANGE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_RED *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_WHITE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_YELLOW *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             ___wmul *
           _SPI_special
             _SPI_D2S
               _SPI0_D2S0
               _SPI1_D2S0
               _SPI2_D2S0
               _SPI3_D2S0
               _SPI4_D2S0
               _SPI5_D2S0
               _SPI_readM_2 (ARG)
                 _SPIreadM
               ___wmul (ARG)
               _str_cmp_const (ARG)
                 ___wmul (ARG)
             _SPI_RET_2
               _SPI_readM_2
                 _SPIreadM
             _SPI_readM_2
               _SPIreadM
             _fa1
           ___awmod
             _rand (ARG)
               ___omul
           _command_turn_ARRAY
             _ARRAY_LINE_TURN
             _ARRAY_SIDE_TURN
           _convert_ROTtoLED
             ___wmul
         _convert_ROTtoLED
           ___wmul
         _set_CES
           _set_C
             ___awmod
               _rand (ARG)
                 ___omul
           _set_E
           _set_S
         _str_cmp_const
           ___wmul (ARG)
       _if_perfect_white
         _command_turn_ARRAY_3_end
           _OUT_LED_ARRAY
             _LED_RET
             _OUT_BLUE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_GREEN *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_NONE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_ORANGE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_RED *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_WHITE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_YELLOW *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             ___wmul *
           _command_turn_ARRAY_2_2
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _SPI_special
               _SPI_D2S
                 _SPI0_D2S0
                 _SPI1_D2S0
                 _SPI2_D2S0
                 _SPI3_D2S0
                 _SPI4_D2S0
                 _SPI5_D2S0
                 _SPI_readM_2 (ARG)
                   _SPIreadM
                 ___wmul (ARG)
                 _str_cmp_const (ARG)
                   ___wmul (ARG)
               _SPI_RET_2
                 _SPI_readM_2
                   _SPIreadM
               _SPI_readM_2
                 _SPIreadM
               _fa1
             ___awmod
               _rand (ARG)
                 ___omul
             _command_turn_ARRAY
               _ARRAY_LINE_TURN
               _ARRAY_SIDE_TURN
             _convert_ROTtoLED
               ___wmul
           _command_turn_ARRAY_2_3
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _SPI_special
               _SPI_D2S
                 _SPI0_D2S0
                 _SPI1_D2S0
                 _SPI2_D2S0
                 _SPI3_D2S0
                 _SPI4_D2S0
                 _SPI5_D2S0
                 _SPI_readM_2 (ARG)
                   _SPIreadM
                 ___wmul (ARG)
                 _str_cmp_const (ARG)
                   ___wmul (ARG)
               _SPI_RET_2
                 _SPI_readM_2
                   _SPIreadM
               _SPI_readM_2
                 _SPIreadM
               _fa1
             ___awmod
               _rand (ARG)
                 ___omul
             _command_turn_ARRAY
               _ARRAY_LINE_TURN
               _ARRAY_SIDE_TURN
             _convert_ROTtoLED
               ___wmul
           _convert_ROTtoLED
             ___wmul
           _set_CES
             _set_C
               ___awmod
                 _rand (ARG)
                   ___omul
             _set_E
             _set_S
           _str_cmp_const
             ___wmul (ARG)
         _if_CP
       _if_perfect_yellow
       _if_second_flower_perfect
         _if_EP
       _if_solution_end
       _if_start_step8
         _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _command_turn_CE
             ___wmul
             _str_cmp_const
               ___wmul (ARG)
             _turn_CE
               ___awmod
                 _rand (ARG)
                   ___omul
               ___wmul (ARG)
       _make_justice_axis
         _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _command_turn_CE
             ___wmul
             _str_cmp_const
               ___wmul (ARG)
             _turn_CE
               ___awmod
                 _rand (ARG)
                   ___omul
               ___wmul (ARG)
         _make_up_white
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
         _operation_limit
         _operation_setup
       _make_perfect_white
         _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _command_turn_CE
             ___wmul
             _str_cmp_const
               ___wmul (ARG)
             _turn_CE
               ___awmod
                 _rand (ARG)
                   ___omul
               ___wmul (ARG)
         _command_turn_ARRAY_3_end
           _OUT_LED_ARRAY
             _LED_RET
             _OUT_BLUE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_GREEN *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_NONE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_ORANGE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_RED *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_WHITE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_YELLOW *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             ___wmul *
           _command_turn_ARRAY_2_2
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _SPI_special
               _SPI_D2S
                 _SPI0_D2S0
                 _SPI1_D2S0
                 _SPI2_D2S0
                 _SPI3_D2S0
                 _SPI4_D2S0
                 _SPI5_D2S0
                 _SPI_readM_2 (ARG)
                   _SPIreadM
                 ___wmul (ARG)
                 _str_cmp_const (ARG)
                   ___wmul (ARG)
               _SPI_RET_2
                 _SPI_readM_2
                   _SPIreadM
               _SPI_readM_2
                 _SPIreadM
               _fa1
             ___awmod
               _rand (ARG)
                 ___omul
             _command_turn_ARRAY
               _ARRAY_LINE_TURN
               _ARRAY_SIDE_TURN
             _convert_ROTtoLED
               ___wmul
           _command_turn_ARRAY_2_3
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _SPI_special
               _SPI_D2S
                 _SPI0_D2S0
                 _SPI1_D2S0
                 _SPI2_D2S0
                 _SPI3_D2S0
                 _SPI4_D2S0
                 _SPI5_D2S0
                 _SPI_readM_2 (ARG)
                   _SPIreadM
                 ___wmul (ARG)
                 _str_cmp_const (ARG)
                   ___wmul (ARG)
               _SPI_RET_2
                 _SPI_readM_2
                   _SPIreadM
               _SPI_readM_2
                 _SPIreadM
               _fa1
             ___awmod
               _rand (ARG)
                 ___omul
             _command_turn_ARRAY
               _ARRAY_LINE_TURN
               _ARRAY_SIDE_TURN
             _convert_ROTtoLED
               ___wmul
           _convert_ROTtoLED
             ___wmul
           _set_CES
             _set_C
               ___awmod
                 _rand (ARG)
                   ___omul
             _set_E
             _set_S
           _str_cmp_const
             ___wmul (ARG)
         _if_CP
         _if_perfect_white
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _if_CP
         _make_flont_green
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
         _operation_limit
         _operation_setup
       _make_second_flower_perfect
         _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _command_turn_CE
             ___wmul
             _str_cmp_const
               ___wmul (ARG)
             _turn_CE
               ___awmod
                 _rand (ARG)
                   ___omul
               ___wmul (ARG)
         _if_second_flower_perfect
           _if_EP
         _make_flont_green
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
         _operation_limit
         _operation_setup
       _make_step_7
         _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _command_turn_CE
             ___wmul
             _str_cmp_const
               ___wmul (ARG)
             _turn_CE
               ___awmod
                 _rand (ARG)
                   ___omul
               ___wmul (ARG)
         _if_2pair
         _if_all_2pair
         _if_no_pair
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _set_C
             ___awmod
               _rand (ARG)
                 ___omul
         _make_flont_green
           _command_turn_ARRAY_3
             _command_turn_ARRAY_3_end
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _command_turn_ARRAY_2_2
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _command_turn_ARRAY_2_3
                 _OUT_LED_ARRAY
                   _LED_RET
                   _OUT_BLUE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_GREEN *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_NONE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_ORANGE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_RED *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_WHITE *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   _OUT_YELLOW *
                     _OUT_CHECK
                       _OUT_HIGH
                       _OUT_LOW
                   ___wmul *
                 _SPI_special
                   _SPI_D2S
                     _SPI0_D2S0
                     _SPI1_D2S0
                     _SPI2_D2S0
                     _SPI3_D2S0
                     _SPI4_D2S0
                     _SPI5_D2S0
                     _SPI_readM_2 (ARG)
                       _SPIreadM
                     ___wmul (ARG)
                     _str_cmp_const (ARG)
                       ___wmul (ARG)
                   _SPI_RET_2
                     _SPI_readM_2
                       _SPIreadM
                   _SPI_readM_2
                     _SPIreadM
                   _fa1
                 ___awmod
                   _rand (ARG)
                     ___omul
                 _command_turn_ARRAY
                   _ARRAY_LINE_TURN
                   _ARRAY_SIDE_TURN
                 _convert_ROTtoLED
                   ___wmul
               _convert_ROTtoLED
                 ___wmul
               _set_CES
                 _set_C
                   ___awmod
                     _rand (ARG)
                       ___omul
                 _set_E
                 _set_S
               _str_cmp_const
                 ___wmul (ARG)
             _command_turn_CE
               ___wmul
               _str_cmp_const
                 ___wmul (ARG)
               _turn_CE
                 ___awmod
                   _rand (ARG)
                     ___omul
                 ___wmul (ARG)
         _operation_limit
         _operation_setup
       _make_step_8
         _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _command_turn_CE
             ___wmul
             _str_cmp_const
               ___wmul (ARG)
             _turn_CE
               ___awmod
                 _rand (ARG)
                   ___omul
               ___wmul (ARG)
         _if_solution_end
         _operation_limit
         _operation_setup
       _make_up_white
         _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _command_turn_CE
             ___wmul
             _str_cmp_const
               ___wmul (ARG)
             _turn_CE
               ___awmod
                 _rand (ARG)
                   ___omul
               ___wmul (ARG)
       _make_up_yellow
         _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _command_turn_CE
             ___wmul
             _str_cmp_const
               ___wmul (ARG)
             _turn_CE
               ___awmod
                 _rand (ARG)
                   ___omul
               ___wmul (ARG)
       _make_while_flower
         _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _command_turn_CE
             ___wmul
             _str_cmp_const
               ___wmul (ARG)
             _turn_CE
               ___awmod
                 _rand (ARG)
                   ___omul
               ___wmul (ARG)
         _operation_limit
         _operation_setup
       _make_white_yellow_flower
         _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _command_turn_CE
             ___wmul
             _str_cmp_const
               ___wmul (ARG)
             _turn_CE
               ___awmod
                 _rand (ARG)
                   ___omul
               ___wmul (ARG)
         _if_EP
       _operation_first
       _yellow_cross
         _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _command_turn_CE
             ___wmul
             _str_cmp_const
               ___wmul (ARG)
             _turn_CE
               ___awmod
                 _rand (ARG)
                   ___omul
               ___wmul (ARG)
         _if_yellow_eo
         _operation_limit
         _operation_setup
     _make_justice_axis
       _command_turn_ARRAY_3
         _command_turn_ARRAY_3_end
           _OUT_LED_ARRAY
             _LED_RET
             _OUT_BLUE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_GREEN *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_NONE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_ORANGE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_RED *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_WHITE *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             _OUT_YELLOW *
               _OUT_CHECK
                 _OUT_HIGH
                 _OUT_LOW
             ___wmul *
           _command_turn_ARRAY_2_2
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _SPI_special
               _SPI_D2S
                 _SPI0_D2S0
                 _SPI1_D2S0
                 _SPI2_D2S0
                 _SPI3_D2S0
                 _SPI4_D2S0
                 _SPI5_D2S0
                 _SPI_readM_2 (ARG)
                   _SPIreadM
                 ___wmul (ARG)
                 _str_cmp_const (ARG)
                   ___wmul (ARG)
               _SPI_RET_2
                 _SPI_readM_2
                   _SPIreadM
               _SPI_readM_2
                 _SPIreadM
               _fa1
             ___awmod
               _rand (ARG)
                 ___omul
             _command_turn_ARRAY
               _ARRAY_LINE_TURN
               _ARRAY_SIDE_TURN
             _convert_ROTtoLED
               ___wmul
           _command_turn_ARRAY_2_3
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _SPI_special
               _SPI_D2S
                 _SPI0_D2S0
                 _SPI1_D2S0
                 _SPI2_D2S0
                 _SPI3_D2S0
                 _SPI4_D2S0
                 _SPI5_D2S0
                 _SPI_readM_2 (ARG)
                   _SPIreadM
                 ___wmul (ARG)
                 _str_cmp_const (ARG)
                   ___wmul (ARG)
               _SPI_RET_2
                 _SPI_readM_2
                   _SPIreadM
               _SPI_readM_2
                 _SPIreadM
               _fa1
             ___awmod
               _rand (ARG)
                 ___omul
             _command_turn_ARRAY
               _ARRAY_LINE_TURN
               _ARRAY_SIDE_TURN
             _convert_ROTtoLED
               ___wmul
           _convert_ROTtoLED
             ___wmul
           _set_CES
             _set_C
               ___awmod
                 _rand (ARG)
                   ___omul
             _set_E
             _set_S
           _str_cmp_const
             ___wmul (ARG)
         _command_turn_CE
           ___wmul
           _str_cmp_const
             ___wmul (ARG)
           _turn_CE
             ___awmod
               _rand (ARG)
                 ___omul
             ___wmul (ARG)
       _make_up_white
         _command_turn_ARRAY_3
           _command_turn_ARRAY_3_end
             _OUT_LED_ARRAY
               _LED_RET
               _OUT_BLUE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_GREEN *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_NONE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_ORANGE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_RED *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_WHITE *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               _OUT_YELLOW *
                 _OUT_CHECK
                   _OUT_HIGH
                   _OUT_LOW
               ___wmul *
             _command_turn_ARRAY_2_2
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _command_turn_ARRAY_2_3
               _OUT_LED_ARRAY
                 _LED_RET
                 _OUT_BLUE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_GREEN *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_NONE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_ORANGE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_RED *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_WHITE *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 _OUT_YELLOW *
                   _OUT_CHECK
                     _OUT_HIGH
                     _OUT_LOW
                 ___wmul *
               _SPI_special
                 _SPI_D2S
                   _SPI0_D2S0
                   _SPI1_D2S0
                   _SPI2_D2S0
                   _SPI3_D2S0
                   _SPI4_D2S0
                   _SPI5_D2S0
                   _SPI_readM_2 (ARG)
                     _SPIreadM
                   ___wmul (ARG)
                   _str_cmp_const (ARG)
                     ___wmul (ARG)
                 _SPI_RET_2
                   _SPI_readM_2
                     _SPIreadM
                 _SPI_readM_2
                   _SPIreadM
                 _fa1
               ___awmod
                 _rand (ARG)
                   ___omul
               _command_turn_ARRAY
                 _ARRAY_LINE_TURN
                 _ARRAY_SIDE_TURN
               _convert_ROTtoLED
                 ___wmul
             _convert_ROTtoLED
               ___wmul
             _set_CES
               _set_C
                 ___awmod
                   _rand (ARG)
                     ___omul
               _set_E
               _set_S
             _str_cmp_const
               ___wmul (ARG)
           _command_turn_CE
             ___wmul
             _str_cmp_const
               ___wmul (ARG)
             _turn_CE
               ___awmod
                 _rand (ARG)
                   ___omul
               ___wmul (ARG)
       _operation_limit
       _operation_setup
     _over_write_CE_from_A_to_B
     _set_all_LED_ARRAY
       ___wmul
     _shuffle_state_CE
       ___awmod
         _rand (ARG)
           ___omul
       _command_turn_CE
         ___wmul
         _str_cmp_const
           ___wmul (ARG)
         _turn_CE
           ___awmod
             _rand (ARG)
               ___omul
           ___wmul (ARG)
       _rand
         ___omul
       _srand
   _animation_2
     _OUT_LED_ARRAY
       _LED_RET
       _OUT_BLUE *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_GREEN *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_NONE *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_ORANGE *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_RED *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_WHITE *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_YELLOW *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       ___wmul *
     _SPI_special
       _SPI_D2S
         _SPI0_D2S0
         _SPI1_D2S0
         _SPI2_D2S0
         _SPI3_D2S0
         _SPI4_D2S0
         _SPI5_D2S0
         _SPI_readM_2 (ARG)
           _SPIreadM
         ___wmul (ARG)
         _str_cmp_const (ARG)
           ___wmul (ARG)
       _SPI_RET_2
         _SPI_readM_2
           _SPIreadM
       _SPI_readM_2
         _SPIreadM
       _fa1
     ___awmod
       _rand (ARG)
         ___omul
     _do1 *
     _do2 *
     _mi1 *
     _ra1 *
     _re1 *
     _set_all_LED_ARRAY *
       ___wmul
     _si1 *
     _so1 *
   _animation_3
     _OUT_LED_ARRAY
       _LED_RET
       _OUT_BLUE *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_GREEN *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_NONE *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_ORANGE *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_RED *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_WHITE *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       _OUT_YELLOW *
         _OUT_CHECK
           _OUT_HIGH
           _OUT_LOW
       ___wmul *
     _SPI_RET_2
       _SPI_readM_2
         _SPIreadM
     _SPI_special
       _SPI_D2S
         _SPI0_D2S0
         _SPI1_D2S0
         _SPI2_D2S0
         _SPI3_D2S0
         _SPI4_D2S0
         _SPI5_D2S0
         _SPI_readM_2 (ARG)
           _SPIreadM
         ___wmul (ARG)
         _str_cmp_const (ARG)
           ___wmul (ARG)
       _SPI_RET_2
         _SPI_readM_2
           _SPIreadM
       _SPI_readM_2
         _SPIreadM
       _fa1
     _do1
     _re1
     _set_all_LED_ARRAY
       ___wmul
   _command_turn_ARRAY
     _ARRAY_LINE_TURN
     _ARRAY_SIDE_TURN
   _command_turn_CE
     ___wmul
     _str_cmp_const
       ___wmul (ARG)
     _turn_CE
       ___awmod
         _rand (ARG)
           ___omul
       ___wmul (ARG)
   _convert_ROTtoLED
     ___wmul
   _fa1
   _if_game_end
   _ioport
   _re1
   _set_CES
     _set_C
       ___awmod
         _rand (ARG)
           ___omul
     _set_E
     _set_S
   _set_all_LED_ARRAY
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      2E       8       18.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     34      F2       6       94.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     83      9E       4       98.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     21D       9        0.0%
DATA                 0      0     21D      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Feb 10 00:24:59 2020

                                       ?_if_yellow_co 0001  
                                       ?_if_yellow_eo 0001  
                                      _past_command_3 00F2  
                                      ?_OUT_LED_ARRAY 0007  
                                     ?_if_start_step8 0001  
                             __end_of_ARRAY_SIDE_TURN 4A50  
                                 ___wmul@multiplicand 0003  
                             __size_of_EEROM_GAME_OFF 0016  
                                _command_turn_ARRAY_2 5E16  
                                _command_turn_ARRAY_3 35D0  
                                        __CFG_CP0$OFF 000000  
                                        __CFG_CP1$OFF 000000  
                                        __CFG_CP2$OFF 000000  
                                        __CFG_CP3$OFF 000000  
                                         __CFG_LVP$ON 000000  
                                                 l279 2C16  
                                                 l449 58A2  
                                                 l580 3CB0  
                                                 l581 3CBC  
                                                 l709 3C8E  
                                                 l582 3CC8  
                                                 l583 3CD4  
                                                 l584 3CE0  
                                                 l569 27EC  
                                                 l578 3CA4  
                                                 l842 2B94  
                                                 l828 294E  
                                        __CFG_CPB$OFF 000000  
                                        __CFG_CPD$OFF 000000  
                                          _TURN_COUNT 00F4  
                                                 _fa1 3190  
                                                 _do1 3004  
                                                 _do2 33BE  
                                                 _mi1 30EA  
                                                 _ra1 335E  
                                                 _re1 32FE  
                                   _make_justice_axis 2C9C  
                                                 _si1 3242  
                                                 _so1 329E  
                                                 fsr0 000FE9  
                               __size_of_yellow_cross 00C8  
                                        ___awmod@sign 0028  
                                                 prod 000FF3  
                                                 tosl 000FFD  
                                                 wreg 000FE8  
                             __end_of_operation_first 2814  
                                         _SPI_readM_2 3C90  
                             __end_of_operation_limit 2A42  
                                        ?_make_step_7 0001  
                                        ?_make_step_8 0001  
                                  ?_make_justice_axis 0001  
                             __end_of_operation_setup 28DA  
                                     __end_of_CE_LIST 7B4F  
                           EEROM_W_SAVE@WRITE_ADDRESS 000E  
                                     __end_of_LED_RET 2966  
                                                ?_fa1 0001  
                                                ?_do1 0001  
                                                ?_do2 0001  
                                                ?_mi1 0001  
                                                ?_ra1 0001  
                                                l1400 3376  
                                                ?_re1 0001  
                                                l1412 33D6  
                                         _SPI_special 2F2C  
                                                l1406 325A  
                                                l1371 301C  
                                                l1383 3102  
                                                ?_si1 0001  
                                                l1377 3316  
                                                l1394 32B6  
                                                l1387 31A0  
                                                l1629 408C  
                                                ?_so1 0001  
                                                l7000 67EA  
                                                l7010 6824  
                                                l7022 6834  
                                                l7008 67EE  
                                                l8000 28CE  
                                                l7122 4FE0  
                                                l7114 4FCC  
                                                l7212 3554  
                                                l7204 353C  
                                                l7028 687E  
                                                l7300 5510  
                                                l8030 2B80  
                                                l7208 3546  
                                                l7224 2F6E  
                                                l7240 3810  
                                                l7152 498E  
                                                l7160 4A3E  
                                                l7312 5532  
                                                l8016 2A3E  
                                                l8120 2FAC  
                                                l8200 2C48  
                                                l7234 3808  
                                                l7306 5522  
                                                l8114 2F80  
                                                l8202 2C54  
                                                l6700 2D76  
                                                l9012 3496  
                                                l7324 5550  
                                                l8028 2B74  
                                                l8044 2F20  
                                                l6630 3D20  
                                                l7262 424E  
                                                l9006 348E  
                                                l7350 55FA  
                                                l7334 5572  
                                                l7318 5544  
                                                l8302 516A  
                                                l8142 2AF2  
                                                l8134 2AE2  
                                                l8206 4518  
                                                l8038 2EEE  
                                                l7088 28DE  
                                                l7192 350E  
                                                l7256 4246  
                                                l6720 2DB0  
                                                l6712 2DA8  
                                                l7328 5560  
                                                l7440 6D54  
                                                l8064 2EDE  
                                                l8216 453A  
                                                l9120 532A  
                                                l8152 3686  
                                                l6634 3D2E  
                                                l6730 2DB8  
                                                l6810 2E76  
                                                l6802 2E6E  
                                                l7362 565C  
                                                l7338 5584  
                                                l7346 5590  
                                                l7514 4E3A  
                                                l7602 6090  
                                                l7426 6C12  
                                                l7418 6BF8  
                                                l8058 2EAC  
                                                l8322 51FC  
                                                l8250 45FE  
                                                l9130 5366  
                                                l6628 3CEC  
                                                l7196 351C  
                                                l7188 3502  
                                                l6660 2D2C  
                                                l6652 2D24  
                                                l6724 2DB4  
                                                l6716 2DAC  
                                                l6708 2DA4  
                                                l6820 2E7E  
                                                l6900 65EA  
                                                l7356 5626  
                                                l7348 55F4  
                                                l7292 54FA  
                                                l7524 4EA0  
                                                l7452 6E98  
                                                l7460 6F1E  
                                                l8332 521C  
                                                l8316 51F0  
                                                l8092 3ACC  
                                                l8236 4584  
                                                l8244 45AC  
                                                l8228 456A  
                                                l9132 536A  
                                                l9124 534C  
                                                l9108 530A  
                                                l8148 3662  
                                                l9060 3728  
                                                l7198 3524  
                                                l7278 42DA  
                                                l6670 2D34  
                                                l6750 2DF2  
                                                l6742 2DEA  
                                                l6814 2E7A  
                                                l6806 2E72  
                                                l6902 65F2  
                                                l7366 5664  
                                                l7294 5500  
                                                l7534 4EE0  
                                                l7526 4ECE  
                                                l7470 4094  
                                                l7710 3616  
                                                l8190 2CD0  
                                                l8342 524A  
                                                l8326 5216  
                                                l8510 6524  
                                                l8078 3A94  
                                                l8262 377A  
                                                l9126 5350  
                                                l9320 321E  
                                                l6664 2D30  
                                                l6656 2D28  
                                                l6648 2D20  
                                                l6760 2DFA  
                                                l6920 6634  
                                                l6912 6624  
                                                l6904 65F6  
                                                l7528 4ED8  
                                                l7632 6140  
                                                l7624 60D0  
                                                l7704 35FC  
                                                l8184 2CB2  
                                                l8352 52AA  
                                                l8344 5270  
                                                l8336 5240  
                                                l8520 654E  
                                                l8432 6400  
                                                l8096 3B14  
                                                l8248 45E6  
                                                l8600 3E14  
                                                l9136 537C  
                                                l9072 4B7C  
                                                l9048 36F0  
                                                l9402 5DC6  
                                                l9322 3220  
                                                l6690 2D6E  
                                                l6682 2D66  
                                                l6754 2DF6  
                                                l6746 2DEE  
                                                l6738 2DE6  
                                                l6834 3B86  
                                                l7650 61EA  
                                                l7642 617A  
                                                l7706 360A  
                                                l7714 361A  
                                                l8346 5276  
                                                l8338 5244  
                                                l8354 52BC  
                                                l7722 2AA0  
                                                l7730 2ABA  
                                                l8514 6540  
                                                l8426 63E0  
                                                l8418 63D6  
                                                l7802 5758  
                                                l8290 37F6  
                                                l8610 3E2C  
                                                l9170 5404  
                                                l9138 5380  
                                                l9340 2D0A  
                                                l9412 5DFA  
                                                l9404 5DD2  
                                                l9316 3206  
                                                l6780 2E34  
                                                l6772 2E2C  
                                                l6828 3B36  
                                                l6836 3B8A  
                                                l6932 666C  
                                                l6924 6658  
                                                l6916 662C  
                                                l6908 65FA  
                                                l7564 4F84  
                                                l7660 6224  
                                                l7628 6108  
                                                l7708 3610  
                                                l7740 2BCA  
                                                l8532 656A  
                                                l8524 655E  
                                                l8540 6590  
                                                l8612 3E32  
                                                l8620 3E64  
                                                l9148 539E  
                                                l9156 53C0  
                                                l9084 4BE8  
                                                l9342 2D18  
                                                l9414 5E06  
                                                l6694 2D72  
                                                l6686 2D6A  
                                                l6678 2D62  
                                                l6790 2E3C  
                                                l6926 665C  
                                                l7566 4F88  
                                                l7646 61B2  
                                                l7574 3BE6  
                                                l7910 439E  
                                                l8366 52E0  
                                                l8462 6480  
                                                l8454 6448  
                                                l8438 6404  
                                                l8382 630A  
                                                l9190 5456  
                                                l9520 4646  
                                                l9408 5DE8  
                                                l9360 5CBE  
                                                l9416 5E08  
                                                l9352 5C2A  
                                                l6856 2B9E  
                                                l6784 2E38  
                                                l6776 2E30  
                                                l6768 2E28  
                                                l6944 6696  
                                                l6928 6664  
                                                l9600 35A8  
                                                l7664 625C  
                                                l7680 62CE  
                                                l7744 2BE4  
                                                l8368 52EC  
                                                l7728 2AB8  
                                                l8480 64D4  
                                                l8464 6498  
                                                l8448 6442  
                                                l8392 6322  
                                                l7816 577A  
                                                l8288 37EA  
                                                l8632 3E9E  
                                                l8616 3E54  
                                                l9176 5410  
                                                l9096 4C6C  
                                                l9506 4614  
                                                l9354 5C30  
                                                l9434 4CF6  
                                                l6858 2BA2  
                                                l6882 65CA  
                                                l7682 62F0  
                                                l7594 6076  
                                                l7586 3C78  
                                                l8562 3A10  
                                                l7746 2BE6  
                                                l7930 3ED4  
                                                l8474 64B4  
                                                l8466 649C  
                                                l8722 44A2  
                                                l8714 4480  
                                                l7842 5846  
                                                l7818 5784  
                                                l9178 5438  
                                                l9194 5490  
                                                l9428 4CEA  
                                                l6964 66E4  
                                                l6956 66BA  
                                                l6972 6716  
                                                l6892 65D8  
                                                l9604 35B0  
                                                l7668 6294  
                                                l8556 39DE  
                                                l7852 2B42  
                                                l7916 440A  
                                                l8708 4462  
                                                l7828 57FC  
                                                l7780 5700  
                                                l7772 56A2  
                                                l8820 4B3E  
                                                l9534 4678  
                                                l9462 4D5A  
                                                l6798 2E6A  
                                                l6990 6786  
                                                l6974 674C  
                                                l8646 38AA  
                                                l8574 3A2C  
                                                l8558 3A0C  
                                                l8750 3056  
                                                l7854 2B4E  
                                                l7870 434A  
                                                l8486 64D8  
                                                l7774 56AC  
                                                l7758 5684  
                                                l8814 4B1E  
                                                l9710 5E94  
                                                l9702 5E24  
                                                l8912 5B7A  
                                                l9376 5D74  
                                                l9448 4D28  
                                                l6992 679A  
                                                l6968 66EC  
                                                l9632 415E  
                                                l9616 35CC  
                                                l9608 35B8  
                                                l8664 38E2  
                                                l8656 38C2  
                                                l7880 435A  
                                                l7864 4332  
                                                l7960 3F2E  
                                                l7936 3EEC  
                                                l8496 64FC  
                                                l8736 44EC  
                                                l8728 44CC  
                                                l7784 5712  
                                                l8808 4B1A  
                                                l9562 46DC  
                                                l9394 5DA0  
                                                l9490 4DBE  
                                                l6994 67AE  
                                                l6986 676C  
                                                l6978 6756  
                                                l6898 65E6  
                                                l9626 415A  
                                                l8674 3906  
                                                l8682 391E  
                                                l7946 3F00  
                                                l9730 5FAE  
                                                l9722 5F3E  
                                                l9714 5ECE  
                                                l9706 5E5C  
                   __end_of_over_write_CE_from_A_to_B 4CB8  
                                                l8940 5BE2  
                                                l8844 5A24  
                                                l9548 46AA  
                                                l9812 4834  
                                                l9396 5DAE  
                                                l9388 5D90  
                                                l9476 4D8C  
                                                l6996 67C2  
                                                l6988 6772  
                                                l8756 3076  
                                                l7980 3F4E  
                                                l8692 442A  
                                                l9740 6020  
                                                l8926 5BAE  
                                                l9398 5DB4  
                                                l6998 67D6  
                                                l9662 421A  
                                                l9638 4162  
                                                l9582 3572  
                                                l7886 4370  
                                                l7966 3F32  
                                                l9742 604C  
                                                l9734 5FE6  
                                                l9726 5F78  
                                                l9718 5F06  
                                                l8856 5A78  
                                                l9840 489C  
                                                l7896 4380  
                                                l8970 4712  
                                                l9826 4868  
                                                l9594 3598  
                                                l7986 3F8E  
                                                l8778 4A6A  
                                                l8884 5B12  
                                                l8868 5ACC  
                                                l9924 2A46  
                                                l9692 2A84  
                                                l9588 358C  
                                                l8796 4AC4  
                                                l9676 29B8  
                                                l9940 68AA  
                                                l8982 4772  
                                                l9854 48D0  
                                                l9950 68DE  
                                                l9934 689A  
                                                STR_1 7F99  
                                                l9688 2A7A  
                                                l9952 68EC  
                                                l9960 6916  
                                                STR_2 7F93  
                                                STR_3 7FF6  
                                                l8898 5B46  
                                                l8994 47DE  
                                                l9786 316C  
                                                l9778 3E04  
                                                l9962 6948  
                                                l9954 68FA  
                                                l9946 68CA  
                                                STR_4 7FE8  
                                                STR_5 7FEE  
                                                l9788 3170  
                                                l9868 4904  
                                                l9956 6908  
                                                STR_6 7FF2  
                                                STR_7 7FEC  
                                                l9982 699E  
                                                STR_8 7FE6  
                                                STR_9 7FB6  
                                                l9992 69C0  
                                                l9968 6960  
                                                l9988 69B6  
                                                l9998 69F0  
                                                u4105 3CAC  
                                                u4106 3CAE  
                                                u4115 3CB8  
                                                u4116 3CBA  
                                                u4125 3CC4  
                                                u4126 3CC6  
                                                u4230 2BBC  
                                                u5110 569E  
                                                u4135 3CD0  
                                                u4136 3CD2  
                                                u5120 56FC  
                                                u4145 3CDC  
                                                u4170 3D42  
                                                u4146 3CDE  
                                                u4155 3CE8  
                                                u4156 3CEA  
                                                u4180 3B82  
                                                u4340 31E6  
                                                u4190 3BB6  
                                                u5310 439A  
                                                u6110 63B8  
                                                u5240 2B34  
                                                u5320 4406  
                                                u5400 3F4A  
                                                u7000 53BC  
                                                u4185 3B7C  
                                                u4530 3884  
                                                u4610 55B0  
                                                u5090 2BEE  
                                                u5170 5772  
                                                u4187 3B72  
                                                u4540 3896  
                                                u4620 560C  
                                                u4700 6D4C  
                                                u6300 65A0  
                                                u6220 64F6  
                                                u4197 3BAC  
                                                u4550 42C2  
                                                u7110 32FC  
                                                u4710 6D98  
                                                u6150 6422  
                                                u7030 5446  
                                                u4560 42D2  
                                                u4800 4118  
                                                u4720 6E12  
                                                u6320 3A0C  
                                                u6400 3E92  
                                                u4617 55A6  
                                                u4490 3528  
                                                u7130 33BC  
                                                u4730 6E5A  
                                                u6090 6372  
                                                u5530 3ABC  
                                                u5611 365C  
                                                u4580 4324  
                                                u4900 4F4C  
                                                u4820 4E20  
                                                u4740 6E90  
                                                u5460 2B66  
                                                u6260 6548  
                                                u5540 3B0C  
                                                u6420 3EBC  
                                                u4717 6D8E  
                                                u4661 6C02  
                                                u7070 304E  
                                                u7150 329C  
                                                u4590 54F0  
                                                u4750 6EDC  
                                                u4670 6C4E  
                                                u5550 3B28  
                                                u6510 4448  
                                                u5710 2C3A  
                                                u4727 6E08  
                                                u7400 4DB6  
                                                u4840 4E5A  
                                                u4760 6F1A  
                                                u4680 6CC0  
                                                u8120 59A0  
                                                u4737 6E50  
                                                u7410 4DE8  
                                                u4578 42FE  
                                                u7090 3138  
                                                u7170 341C  
                                                u4690 6D00  
                                                u6290 6598  
                                                u4579 4314  
                                                u4827 4E16  
                                                u7340 5E12  
                                                u4860 4E90  
                                                u4940 3C60  
                                                u5580 2ADE  
                                                u7421 4DF2  
                                                u4597 54E6  
                                                u4757 6ED2  
                                                u4677 6C44  
                                                u7430 463E  
                                                u7270 5D58  
                                                u4950 3C70  
                                                u5830 379E  
                                                u5750 4558  
                                                u8038 3976  
                                                u5655 2C24  
                                                u4847 4E50  
                                                u4687 6CB6  
                                                u8207 39A0  
                                                u8039 398A  
                                                u5656 2C26  
                                                u6800 5BDA  
                                                u7440 4670  
                                                u7360 4CD2  
                                                u4880 4ECC  
                                                u4960 3C8E  
                                                u6480 391C  
                                                u4697 6CF6  
                                                u8217 39C6  
                                                u6810 5C10  
                                                u7450 46A2  
                                                u7370 4D20  
                                                u4970 606E  
                                                u5850 37AE  
                                                u6730 406A  
                                                u8307 4202  
                                                u4867 4E86  
                                                u8227 6AE2  
                                                u6740 5A70  
                                                u7460 46D4  
                                                u6820 476A  
                                                u7380 4D52  
                                                u8317 422C  
                                                u8237 3D94  
                                                u6750 5AC4  
                                                u7470 4708  
                                                u6830 47D6  
                                                u7710 3154  
                                                u7390 4D84  
                                                u5950 51C0  
                                                u5870 37BC  
                                                u6910 4BE0  
                                                u8407 331A  
                                                u8327 33DE  
                                                u4887 4EC2  
                                                u6735 4058  
                                                u8247 3DCE  
                                                u6760 5AFC  
                                                u6840 481C  
                                                u6920 4C64  
                                                u8417 332C  
                                                u8337 33F0  
                                                u8257 54A8  
                                                u8177 597C  
                                                u6770 5B3E  
                                                u7730 4860  
                                                u6850 34DA  
                                                u5890 37CC  
                                                u6930 4CB6  
                                                u8427 3020  
                                                u8347 325E  
                                                u8267 40F6  
                                                u8187 59D6  
                                                u6780 5B72  
                                                u7740 4894  
                                                u6860 34EC  
                                                u8437 3028  
                                                u8357 326E  
                                                u8277 413E  
                                                u7901 6A7A  
                                                u7821 6982  
                                                u8197 59FE  
                                                u6790 5BA6  
                                                u7750 48C8  
                                                u7590 2A8A  
                                                u7558 41D8  
                                                u5990 52D6  
                                                u8447 32BE  
                                                u8367 337E  
                                                u7559 41EC  
                                                u8287 4F2A  
                                                u7671 3D50  
                                                u7760 48FC  
                                                u6880 335C  
                                                u8457 32D0  
                                                u8377 3390  
                                                u8297 4F72  
                                                u7681 3DE4  
                                                u7770 4932  
                                                u8467 31A8  
                                                u8387 3106  
                                                u8477 31BA  
                                                u8397 3110  
                                                u7861 69D0  
                                                u8487 2A54  
                                                u7890 6A70  
                                                u7980 6BA8  
                                    ?_if_solution_end 0001  
                                                fa1@i 0002  
                         make_second_flower_perfect@i 009E  
                         make_second_flower_perfect@j 009C  
                                                _b_CE 7CD5  
                                                _d_CE 7D5F  
                                                _e_CE 7C4B  
                                                do1@i 0001  
                                                _f_CE 7D03  
                                 ??_make_justice_axis 0060  
                                                do2@i 0002  
                                                _l_CE 7D31  
                                                _m_CE 7CA7  
                                                mi1@i 0001  
                                                _r_CE 7DBB  
                                                _s_CE 7C79  
                                                ra1@i 0002  
                                                _u_CE 7D8D  
                                                re1@i 0001  
                                                _x_CE 7BEF  
                                     __end_of_SPI_D2S 6894  
                                                _y_CE 7C1D  
                                                _z_CE 7BC1  
                                                _main 584A  
                                                si1@i 0001  
                                                _rand 3F9E  
                                                _seed 00F6  
                                                so1@i 0002  
                                     __end_of_SPI_RET 2A6C  
                                                fsr0h 000FEA  
                                                indf0 000FEF  
                                                fsr0l 000FE9  
                                                indf1 000FE7  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                     __end_of_OUT_RED 2894  
                                     __end_of_OUT_LOW 29AE  
                                       __CFG_BORV$190 000000  
                                       __CFG_BOREN$ON 000000  
                                                prodh 000FF4  
                                                prodl 000FF3  
                                                start 0000  
                                       __CFG_IESO$OFF 000000  
                      command_turn_ARRAY@SIDE_SURFACE 0026  
                               over_write_CE@write_CE 0001  
                                    ?_command_turn_CE 0033  
                                      ??_if_yellow_co 0003  
                                      ??_if_yellow_eo 0003  
                                        ___param_bank 000000  
                              _command_turn_ARRAY_2_2 4E00  
                              _command_turn_ARRAY_2_3 4078  
                         command_turn_ARRAY@for_count 0023  
                                       _make_up_white 2B26  
                                               ??_fa1 0001  
                                               ??_do1 0001  
                                               ??_do2 0001  
                                               ??_mi1 0001  
                                               ??_ra1 0001  
                                               ??_re1 0001  
                                               ??_si1 0001  
                                               ??_so1 0001  
                           __size_of_DATAEE_WriteByte 0036  
                                        _yellow_cross 3E08  
 __end_ofmake_second_flower_perfect@command_drop_left 7EA3  
         make_second_flower_perfect@command_drop_left 7E8B  
                                __end_of_EEROM_R_DEFF 470A  
                               ?_command_turn_ARRAY_2 0057  
                               ?_command_turn_ARRAY_3 005E  
                                __end_of_EEROM_R_SAVE 4E00  
                                __end_of_EEROM_W_DEFF 4934  
                                               l10002 6A32  
                                               l10020 6ABA  
                                               l10040 6B54  
                                               l10016 6AA4  
                                               l10008 6A68  
                                               l10112 3480  
                                               l10050 6B7A  
                                               l10042 6B5A  
                                               l10034 6B0C  
                                               l10122 3936  
                                               l10044 6B60  
                                               l10204 58F4  
                                               l10038 6B4A  
                                               l10232 59A4  
                                               l10218 5934  
                                               l10068 6BB2  
                                               l10166 5888  
                                               l10096 343E  
                                               l10088 3426  
                                               l10178 58AA  
                                               l10196 58DE  
                                               l10188 58D2  
                           __end_of_make_justice_axis 2CDA  
                                __end_of_EEROM_W_SAVE 5C12  
                                               ?_main 0001  
                                               ?_rand 0019  
                                               _EEADR 000FA9  
                                               STR_10 7FA1  
                                               STR_11 7FAA  
                                               STR_20 7FC2  
                                               STR_12 7FB0  
                                               STR_21 7FEA  
                                               STR_13 7FA7  
                                               STR_30 7FF8  
                                               STR_22 7FF4  
                                               STR_14 7F9E  
                                               STR_31 7FFA  
                                               STR_23 7FF0  
                                               STR_15 7FDA  
                                               STR_40 7FEE  
                                               STR_32 7FFC  
                                               STR_24 7FC8  
                                               STR_16 7FC5  
                                               STR_41 7FF6  
                                               STR_33 7FB9  
                                               STR_25 7FD7  
                                               STR_17 7FCE  
                                               STR_42 7FE6  
                                               STR_50 7FFA  
                                               STR_34 7FBC  
                                               STR_26 7FD1  
                                               STR_18 7FD4  
                                               STR_43 7FF2  
                                               STR_51 7FF6  
                                               STR_35 7FBF  
                                               STR_27 7FA4  
                                               STR_19 7FCB  
                                               STR_44 7FEE  
                                               STR_60 7FFA  
                                               STR_52 7FFA  
                                               STR_36 7FDD  
                                               STR_28 7FB3  
                                     __end_of___awmod 355E  
                                               STR_53 7FF0  
                                               STR_45 7FF6  
                                               STR_61 7FFA  
                                               STR_37 7FE0  
                                               STR_29 7FAD  
                                               STR_54 7FC5  
                                               STR_46 7FE6  
                                               STR_62 7FEA  
                                               STR_70 7FFA  
                                               STR_38 7FE3  
                                               STR_55 7FAD  
                                               STR_63 7FE8  
                                               STR_39 7FF2  
                                               STR_71 7FF8  
                                               STR_47 7FFA  
                                               STR_64 7FA4  
                                               STR_56 7FA4  
                                               STR_80 7FE8  
                                               STR_72 7FE8  
                                               STR_48 7FFA  
                                               STR_65 7FA1  
                                               STR_57 7FA1  
                                               STR_49 7FC2  
                                               STR_73 7FE8  
                                               STR_81 7FF6  
                                               STR_82 7FA4  
                                               STR_90 7FE8  
                                               STR_66 7FF6  
                                               STR_74 7FFA  
                                               STR_58 7FFA  
                                               STR_91 7FAA  
                                               STR_83 7FEE  
                                               STR_75 7FF8  
                                               STR_67 7FFA  
                                               STR_59 7FFA  
                                               STR_92 7FA1  
                                               STR_84 7FE8  
                                               STR_76 7FE8  
                                               STR_68 7FF8  
                                               STR_93 7FA1  
                                               STR_85 7FAA  
                                               STR_77 7FE8  
                                               STR_69 7FFA  
                                               STR_86 7FA1  
                                               STR_78 7FB6  
                                               STR_94 7FFA  
                                               STR_79 7FEA  
                                               STR_87 7FF6  
                                               STR_95 7FFA  
                                               STR_88 7FA4  
                                               STR_96 7FFC  
                                               STR_97 7FEC  
                                               STR_89 7FEE  
                                               STR_98 7FF4  
                                               STR_99 7F9E  
                              __size_of_str_cmp_const 00B2  
                                  __size_of_SPI0_D2S0 0042  
                                  __size_of_SPI1_D2S0 0042  
                                   ?_convert_ROTtoLED 0001  
                                  __size_of_SPI2_D2S0 0042  
                                               _LED_C 7A6A  
                                               _LED_E 7A52  
                                  __size_of_SPI3_D2S0 0042  
                                  __size_of_SPI4_D2S0 0042  
                                  __size_of_SPI5_D2S0 0042  
                                               _PLLEN 007CDE  
                                     SPI_readM_2@data 0004  
                                     __end_of_deff_CE 7E17  
                                               _PORTA 000F80  
                                               _PORTB 000F81  
                                               _POWER 00F0  
                                               _TRISA 000F92  
                                               _TRISB 000F93  
                          __size_of_set_all_LED_ARRAY 006A  
                                       __CFG_WRT0$OFF 000000  
                                       __CFG_WRT1$OFF 000000  
                          __size_of_if_perfect_yellow 00A6  
                                       __CFG_WRT2$OFF 000000  
                                       __CFG_WRT3$OFF 000000  
                                  ??_convert_ROTtoLED 0007  
                                      __CFG_EBTR0$OFF 000000  
                                      __CFG_FCMEN$OFF 000000  
                                      __CFG_EBTR1$OFF 000000  
                                      __CFG_EBTR2$OFF 000000  
                                      __CFG_EBTR3$OFF 000000  
                                       __CFG_WRTB$OFF 000000  
                                       __CFG_WRTC$OFF 000000  
                                       __CFG_WRTD$OFF 000000  
                                branch_off@return_num 002D  
                                               _if_CP 2BBE  
                                               _if_EP 2A98  
                                     _DATAEE_ReadByte 2814  
                                      __CFG_EBTRB$OFF 000000  
                                operation_limit@count 0001  
                                               _set_C 73D4  
                                               _set_E 6F50  
                                               _set_S 290E  
                                    __end_of_OUT_BLUE 28AA  
                                    __end_of_OUT_HIGH 298A  
                                  __CFG_MCLRE$EXTMCLR 000000  
                                               _srand 2AF6  
                                     __end_of_set_CES 2804  
                                    __end_of_OUT_NONE 283C  
                                               main@i 00E2  
                                               main@q 00E1  
                              set_all_LED_ARRAY@color 0009  
                                  __size_of_SPI_RET_2 001A  
                                  __size_of_OUT_CHECK 0034  
                                               pclath 000FFA  
                                               tablat 000FF5  
                   __size_of_if_second_flower_perfect 00CE  
                           ?_if_second_flower_perfect 0001  
                                  __size_of_OUT_GREEN 0016  
                        animation_4@anime_4_before_CE 00AA  
                                               plusw0 000FEB  
                                               plusw1 000FE3  
                                               plusw2 000FDB  
                                    __end_of_SPIreadM 27F6  
                                  __size_of_OUT_WHITE 001C  
                                               status 000FD8  
                                   _make_while_flower 376A  
                                      __CFG_HFOFST$ON 000000  
                                     __end_of_turn_CE 6F50  
                                  make_while_flower@i 0096  
                                     ??_over_write_CE 002F  
                                 if_all_2pair@if_flag 0009  
                                      __CFG_PBADEN$ON 000000  
                                    ?_ARRAY_LINE_TURN 0001  
                                __end_of_if_all_2pair 3B2C  
                                  ?_make_while_flower 0001  
                              ARRAY_SIDE_TURN@surface 000A  
                                   if_perfect_white@i 005F  
                                   if_perfect_white@j 005E  
                                         ?_OUT_ORANGE 0001  
                     command_turn_ARRAY@SIDE_TURN_FLG 0025  
                                         ?_OUT_YELLOW 0001  
                                     __initialization 309C  
                                  made_cube@test_flag 00A5  
                                        __end_of_b_CE 7D03  
                                        __end_of_d_CE 7D8D  
                                        __end_of_e_CE 7C79  
                                        __end_of_f_CE 7D31  
                                     ??_OUT_LED_ARRAY 000A  
                                        __end_of_l_CE 7D5F  
                                        __end_of_m_CE 7CD5  
                                      ?_make_up_white 0001  
                                        __end_of_r_CE 7DE9  
                               __end_of_EEROM_GAME_ON 2868  
                                        __end_of_s_CE 7CA7  
                                        __end_of_u_CE 7DBB  
                                        __end_of_x_CE 7C1D  
                                        __end_of_y_CE 7C4B  
                                        __end_of_z_CE 7BEF  
                                        __end_of_main 5A1C  
                                        __end_of_rand 4078  
                                    _shuffle_state_CE 36E0  
                                 ??_make_while_flower 0060  
                                    ?_ARRAY_SIDE_TURN 0001  
                  __end_of_make_second_flower_perfect 65AC  
                          _make_second_flower_perfect 62FE  
                                      _make_up_yellow 2C28  
                           __size_of_make_flont_green 0032  
                                    __end_of_e_CE_IDA 79F6  
                                              ??_main 00DB  
                                              ??_rand 001B  
                                     if_game_end@deff 0004  
                    __end_of_make_white_yellow_flower 4608  
                                       __activetblptr 000002  
                          animation_1@animation_count 004E  
                                __size_of_animation_1 00EA  
                                __size_of_animation_2 00A4  
                                __size_of_animation_3 0072  
                                __size_of_animation_4 00C2  
                                           ??_LED_RET 0001  
                                       if_yellow_co@i 0006  
                                       if_yellow_eo@i 0006  
                                __size_of_if_game_end 0066  
                                    ?_operation_first 0001  
                                    ?_operation_limit 0001  
                         __size_of_make_perfect_white 01AC  
                                    ?_operation_setup 0001  
                                    __end_of_m_CE_IDA 7A52  
                                              ?_if_CP 0001  
                                              ?_if_EP 0001  
                                              _ADCON1 000FC1  
                                           ??_SPI_D2S 0013  
                                              _ADCON2 000FC0  
                                           ??_SPI_RET 0008  
                                              STR_100 7FBF  
                                              STR_101 7FA7  
                                              STR_102 7FB3  
                                              STR_110 7FFA  
                                              STR_103 7FE6  
                                              STR_111 7FF6  
                                              STR_120 7FA1  
                                              STR_112 7FA4  
                                              STR_104 7FEC  
                                              STR_113 7FA1  
                                              STR_105 7FF4  
                                              STR_121 7FF6  
                                              STR_106 7F9E  
                                              STR_122 7FA4  
                                              STR_114 7FBC  
                                              STR_130 7FF0  
                                              STR_123 7FA1  
                                              STR_115 7FB6  
                                              STR_107 7FEC  
                                              STR_131 7FEE  
                                              STR_116 7FEA  
                                              STR_132 7FF2  
                                              STR_140 7FF4  
                                              STR_108 7FF4  
                                              STR_124 7FF8  
                                              STR_141 7F9E  
                                              STR_109 7F9E  
                                              STR_133 7FAD  
                                              STR_117 7FE8  
                                              STR_125 7FF2  
                                              STR_134 7FAA  
                                              STR_126 7FAD  
                                              STR_142 7FBF  
                                              STR_150 7FF4  
                                              STR_118 7FF6  
                                              STR_151 7F9E  
                                              STR_119 7FA4  
                                              STR_143 7FA7  
                                              STR_127 7FAA  
                                              STR_135 7FF2  
                                              STR_136 7FAD  
                                              STR_144 7FB3  
                                              STR_128 7FB9  
                                              STR_160 7FF6  
                                              STR_152 7FFA  
                                              STR_161 7FA4  
                                              STR_137 7FAA  
                                              STR_129 7FB0  
                                              STR_145 7FE6  
                                              STR_153 7FF6  
                                              STR_162 7FA1  
                                              STR_154 7FA4  
                                              STR_170 7FB9  
                                              STR_146 7FEC  
                                              STR_138 7FFC  
                                              STR_155 7FA1  
                                              STR_171 7FB0  
                                              STR_139 7FEC  
                                              STR_147 7FF4  
                                              STR_163 7FF6  
                                              STR_148 7F9E  
                                              STR_164 7FA4  
                                              STR_156 7FBC  
                                              STR_172 7FF0  
                                              STR_180 7F99  
                                              STR_165 7FA1  
                                              STR_157 7FB6  
                                              STR_149 7FEC  
                                              STR_173 7FEE  
                                              _EEDATA 000FA8  
                                              STR_181 7FF6  
                                              STR_158 7FEA  
                                              STR_174 7FF2  
                                              STR_166 7FF8  
                                              STR_190 7FA1  
                                              STR_182 7FEE  
                                              STR_175 7FAD  
                                              STR_159 7FE8  
                                              STR_167 7FF2  
                                              STR_191 7FB0  
                                              STR_183 7FEC  
                                              STR_176 7FAA  
                                              STR_168 7FAD  
                                              STR_192 7F9E  
                                              STR_184 7FE8  
                                              STR_169 7FAA  
                                              STR_177 7FF2  
                                              STR_193 7FDA  
                                              STR_185 7FF2  
                                              STR_178 7FAD  
                                              STR_194 7FCE  
                                              STR_186 7FE6  
                                              STR_179 7FAA  
                                              STR_195 7FCB  
                                              STR_187 7FB6  
                                              STR_196 7FC5  
                                              STR_188 7FAA  
                                              STR_197 7FD4  
                                              STR_189 7FA7  
                                              STR_198 7FC2  
                                              ?_set_C 0001  
                                              ?_set_E 0001  
                                              _EECON2 000FA7  
                                              ?_set_S 0001  
                                           ??_OUT_RED 0004  
                                           ??_OUT_LOW 0001  
                                              ?_srand 0001  
                                              _ANSELA 000F38  
                                              _ANSELB 000F39  
                           __end_of_make_while_flower 3800  
                                   SPI2_D2S0@SPI_DATA 0003  
                                      __CFG_WDTEN$OFF 000000  
                                    __end_of_s_CE_IDA 7A24  
                                    SPI_readM_2@csPIN 0003  
                                              _OSCCON 000FD3  
                                    __end_of_if_2pair 2AF6  
                            __end_of_if_perfect_white 441A  
                                       _str_cmp_const 3B2C  
                              ARRAY_LINE_TURN@SURFASE 001C  
                            __size_of_EEROM_WR_ioport 0056  
                                   __end_of_SPI0_D2S0 2D5E  
                                   __end_of_SPI1_D2S0 2DA0  
                                   __end_of_SPI2_D2S0 2DE2  
                                   __end_of_SPI3_D2S0 2E24  
                                   __end_of_SPI4_D2S0 2E66  
                                   __end_of_SPI5_D2S0 2EA8  
                         if_perfect_yellow@distortion 0005  
                                      __CFG_XINST$OFF 000000  
                 make_second_flower_perfect@search_ep 009D  
                                        make_step_7@i 009A  
                                        make_step_8@i 0098  
                                              ___omul 3656  
                              __end_of_make_up_yellow 2C60  
                                              ___wmul 29F6  
                                      __CFG_STVREN$ON 000000  
                                           ??___awmod 0027  
                              ??_command_turn_ARRAY_2 0059  
                              ??_command_turn_ARRAY_3 0092  
                                              if_CP@i 0006  
                                              if_EP@i 0005  
                               command_turn_ARRAY_2@s 0057  
                               command_turn_ARRAY_3@s 005E  
                          __end_of_command_turn_ARRAY 567C  
                                      _EEROM_GAME_OFF 283C  
                                              clear_0 30C2  
                                              clear_1 30CE  
                                              clear_2 30DA  
                                   __end_of_SPI_RET_2 28F4  
                                   __end_of_OUT_CHECK 2BBE  
                                              _ioport 29D2  
                                     ___awmod@divisor 0025  
                                   __end_of_OUT_GREEN 287E  
                          __size_of_make_justice_axis 003E  
                                     ___awmod@counter 0027  
                                   yellow_cross@step5 7EE5  
                             __end_of_DATAEE_ReadByte 2828  
                                   __end_of_OUT_WHITE 2944  
                               __end_of_Special_input 6BEC  
                                           ??_set_CES 002B  
                                        __mediumconst 7968  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                             ARRAY_SIDE_TURN@side_NUM 7A82  
                                              srand@s 0001  
                                 __size_of_OUT_ORANGE 0018  
                                  depth_add@NEXT_FLAG 0002  
                                __end_of_if_yellow_co 2EEA  
                                __end_of_if_yellow_eo 2F2C  
                                 __size_of_OUT_YELLOW 001A  
                          animation_2@animation_count 004C  
                                           ??_turn_CE 002B  
                                __size_of_make_step_7 00F6  
                                __size_of_make_step_8 0124  
                              Special_input@deep_flag 01C3  
                                      ?_str_cmp_const 0007  
                                 Special_input@IDA_CE 01C4  
                                          __accesstop 0060  
                             __end_of__initialization 30E0  
             __end_of_initialization_shortest_command 29D2  
            __size_of_initialization_shortest_command 0024  
                   ??_initialization_shortest_command 0001  
                    ?_initialization_shortest_command 0001  
                     _initialization_shortest_command 29AE  
                                  set_all_LED_ARRAY@i 000A  
                                  set_all_LED_ARRAY@j 000C  
                                    make_step_7@step7 7E17  
                                       ___rparam_used 000001  
                                    make_step_8@step8 7EBB  
                                  OUT_CHECK@LED_POWER 0001  
                                       __end_of_LED_C 7A82  
                                       __end_of_LED_E 7A6A  
                                        SPI_readM_2@i 0005  
                                    ??_if_start_step8 0096  
                                     ??_make_up_white 0060  
                                  if_perfect_yellow@i 0006  
                               __size_of_EEROM_R_DEFF 0102  
                               __size_of_EEROM_R_SAVE 0148  
                               __size_of_EEROM_W_DEFF 0116  
                                      __pcstackCOMRAM 0001  
                               __size_of_EEROM_W_SAVE 01F6  
                                        __pidataBANK1 2FB9  
                              __end_of_EEROM_GAME_OFF 2852  
                                     ?_make_up_yellow 0001  
                                       __end_of_if_CP 2BF2  
                                       __end_of_if_EP 2AC6  
                            EEROM_R_DEFF@READ_ADDRESS 000C  
                                    _DATAEE_WriteByte 2BF2  
                                       __end_of_set_C 7968  
                                       __end_of_set_E 73D4  
                                       __end_of_set_S 2928  
                           __end_ofyellow_cross@step5 7EF7  
                                       __end_of_srand 2B26  
                                 ARRAY_LINE_TURN@temp 001B  
                                           ?_OUT_BLUE 0001  
                                      over_write_CE@i 0031  
                                           ?_OUT_HIGH 0001  
                                           ?_OUT_NONE 0001  
                            _command_turn_ARRAY_3_end 605A  
                                      str_cmp_const@i 0010  
                                           ?_SPIreadM 0001  
                                  __size_of_depth_add 005A  
                        animation_3@animation_count_2 004C  
                                        ?_SPI_readM_2 0001  
                                  __size_of_made_cube 01C0  
                                 command_turn_ARRAY@s 001F  
                                             ??_if_CP 0003  
                                             ??_if_EP 0003  
                                             ??_set_C 0029  
                                             ??_set_E 0001  
                                             ??_set_S 0001  
                                        ?_SPI_special 0001  
                                             ??_srand 0003  
                          __size_of_make_while_flower 0096  
                                          __pbssBANK0 00E3  
                                          __pbssBANK1 0100  
                                          __pbssBANK2 0200  
                               __size_of_if_all_2pair 00B0  
                                        _EEROM_R_DEFF 4608  
                                     __CFG_PLLCFG$OFF 000000  
                                        _EEROM_R_SAVE 4CB8  
                                        _EEROM_W_DEFF 481E  
                                animation_4@rand_seed 00A6  
                                        _EEROM_W_SAVE 5A1C  
                                      Special_input@i 01C2  
                                      Special_input@j 01C0  
                   __size_of_make_white_yellow_flower 00F8  
                                      if_yellow_co@co 0001  
                           ?_make_white_yellow_flower 0001  
                                      OUT_LED_ARRAY@i 0048  
                                      OUT_LED_ARRAY@j 0046  
                                      if_yellow_eo@eo 0001  
                             ?_command_turn_ARRAY_2_2 004A  
                             ?_command_turn_ARRAY_2_3 004A  
                                  __CFG_CCP2MX$PORTC1 000000  
                                          _all_yellow 3898  
                      command_turn_ARRAY_2_2@mouitido 0051  
                                             ?___omul 0001  
                                   ??_EEROM_WR_ioport 0033  
                                             ?___wmul 0001  
                                     ?_EEROM_GAME_OFF 0001  
                                  __CFG_CCP3MX$PORTB5 000000  
                                    if_solution_end@i 0009  
                                    if_solution_end@j 000B  
                                 ___omul@multiplicand 0009  
                                          ??_OUT_BLUE 0004  
                                          ??_OUT_HIGH 0001  
                                          _branch_off 5C12  
                                             ?_ioport 0001  
                                          ??_OUT_NONE 0004  
                                    _make_flont_green 2B58  
                                             _CE_LIST 7A91  
                                    ?_DATAEE_ReadByte 0001  
                                          if_CP@check 0004  
                                          ??_SPIreadM 0001  
                                           ?_if_2pair 0001  
                                          _if_no_pair 2F72  
                                             _LED_RET 2944  
                             ARRAY_LINE_TURN@MOVE_LOW 0001  
                                          if_EP@check 0004  
                                 OUT_LED_ARRAY@i_1494 0044  
                                        _if_all_2pair 3A7C  
                __end_ofcommand_turn_ARRAY@TURN_NUM_B 7F37  
                        command_turn_ARRAY@TURN_NUM_B 7F27  
                __end_ofcommand_turn_ARRAY@TURN_NUM_D 7F47  
                        command_turn_ARRAY@TURN_NUM_D 7F37  
                __end_ofcommand_turn_ARRAY@TURN_NUM_E 7F07  
                        command_turn_ARRAY@TURN_NUM_E 7EF7  
                __end_ofcommand_turn_ARRAY@TURN_NUM_F 7F67  
                        command_turn_ARRAY@TURN_NUM_F 7F57  
                               _total_number_of_moves 00E8  
                __end_ofcommand_turn_ARRAY@TURN_NUM_L 7F57  
                        command_turn_ARRAY@TURN_NUM_L 7F47  
                __end_ofcommand_turn_ARRAY@TURN_NUM_M 7F27  
                        command_turn_ARRAY@TURN_NUM_M 7F17  
                __end_ofcommand_turn_ARRAY@TURN_NUM_R 7F87  
                        command_turn_ARRAY@TURN_NUM_R 7F77  
                __end_ofcommand_turn_ARRAY@TURN_NUM_S 7F17  
                        command_turn_ARRAY@TURN_NUM_S 7F07  
                __end_ofcommand_turn_ARRAY@TURN_NUM_U 7F77  
                        command_turn_ARRAY@TURN_NUM_U 7F67  
                                             _SSP1BUF 000FC9  
                                             _SPI_D2S 65AC  
                                             _SPI_RET 2A42  
                                             _OUT_RED 287E  
                                             _OUT_LOW 298A  
                                     ??_str_cmp_const 000B  
       Create_Shoretest_command_Most_deep@check_depth 0033  
                            __end_of_shuffle_state_CE 376A  
                          ?_over_write_CE_from_A_to_B 0001  
                                DATAEE_WriteByte@bAdd 0002  
                                   OUT_NONE@LED_POWER 0001  
                      __end_of_command_turn_ARRAY_2_2 4FA4  
                      __end_of_command_turn_ARRAY_2_3 4154  
                           __size_of_convert_ROTtoLED 0098  
                                       _mode_cube_end 00F3  
                                     made_cube@start8 7E41  
                                     __CFG_PWRTEN$OFF 000000  
                                   __end_of_depth_add 3242  
                                _past_command_count_3 00F1  
                                        ??_OUT_ORANGE 0004  
                                             __Hparam 0000  
                                             __Lparam 0000  
                                        ??_OUT_YELLOW 0004  
                            __size_of_if_solution_end 01CE  
                                   __end_of_made_cube 54B8  
                                             ___awmod 34EE  
                                     __size_of___omul 008A  
                                     __size_of___wmul 0026  
                                     SPI_D2S@SPI_DATA 0012  
                                             _deff_CE 7DE9  
                                    command_turn_CE@i 0035  
                                    command_turn_CE@s 0033  
                                             __pcinit 309C  
                         ?_make_second_flower_perfect 0001  
                                             __ramtop 0600  
                                     __size_of_ioport 0024  
                            __size_of_command_turn_CE 00B2  
                                             __ptext0 584A  
                                             __ptext1 29D2  
                                             __ptext2 341E  
                                             __ptext3 3932  
                                             __ptext4 6894  
                                             __ptext5 29AE  
                                             __ptext6 5E16  
                                             __ptext7 3D46  
                                             __ptext8 36E0  
                                             __ptext9 2AF6  
                                 make_perfect_white@i 009C  
                                 make_perfect_white@j 009E  
                                  OUT_WHITE@LED_POWER 0004  
                          command_turn_ARRAY@MOVE_LOW 002A  
                                          ??_if_2pair 0001  
                               __size_of_if_yellow_co 0042  
                               __size_of_if_yellow_eo 0042  
                                        __size_of_fa1 0058  
                                        __size_of_do1 004C  
                                        __size_of_do2 0060  
                                        __size_of_mi1 0050  
                                        __size_of_ra1 0060  
                                        __size_of_re1 0060  
                                        __size_of_si1 005C  
                                        __size_of_so1 0060  
                     OUT_LED_ARRAY@LED_COLOR_ARRAY_2D 0007  
                                    ___awmod@dividend 0023  
                                             _set_CES 27F6  
                                             _save_CE 0200  
                                           _LED_ARRAY 0107  
                                           _LED_COLOR 0173  
                       command_turn_ARRAY_3_end@F5962 0100  
                                  __end_of_OUT_ORANGE 28C2  
                                             _turn_CE 6BEC  
                                           _LED_Light 013D  
                                      if_all_2pair@re 000B  
                                  __end_of_OUT_YELLOW 290E  
                                end_of_initialization 30E0  
                                      ___omul@product 0011  
                        make_perfect_white@mark_count 009F  
                         shuffle_state_CE@seed_number 0037  
                                   SPI3_D2S0@SPI_DATA 0003  
                                       __Lmediumconst 7968  
          __end_of_Create_Shoretest_command_Most_deep 2A98  
         __size_of_Create_Shoretest_command_Most_deep 002C  
                ??_Create_Shoretest_command_Most_deep 0033  
                 ?_Create_Shoretest_command_Most_deep 0001  
                  _Create_Shoretest_command_Most_deep 2A6C  
                                   ?_if_perfect_white 0001  
                                    OUT_RED@LED_POWER 0004  
                       command_turn_ARRAY@for_count_2 0024  
                                  ??_if_perfect_white 0060  
                               __end_of_over_write_CE 481E  
                                         ?_all_yellow 0001  
                                           _SPI0_D2S0 2D1C  
                                           _SPI1_D2S0 2D5E  
                                           _SPI2_D2S0 2DA0  
                                           _SPI3_D2S0 2DE2  
                                             postdec1 000FE5  
                                           _SPI4_D2S0 2E24  
                                           _SPI5_D2S0 2E66  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                           EEROM_W_DEFF@WRITE_ADDRESS 000E  
                                        _if_yellow_co 2EA8  
                                        _if_yellow_eo 2EEA  
                               __end_of_OUT_LED_ARRAY 432A  
                            __size_of_ARRAY_LINE_TURN 01A8  
                                       ??_animation_1 004A  
                                       ??_animation_2 004A  
                                       ??_animation_3 004B  
                                       ??_animation_4 00A8  
                                         ?_branch_off 0001  
                                     all_yellow@step6 7ED0  
                                           _PORTBbits 000F81  
                                 if_game_end@err_flag 0005  
                                   EEROM_R_DEFF@i_294 0004  
                                   EEROM_R_DEFF@i_295 0006  
                                   EEROM_R_DEFF@i_296 0008  
                                   EEROM_R_DEFF@i_297 000A  
                                       ??_if_game_end 0001  
                                         ?_if_no_pair 0001  
                          __end_of_make_perfect_white 52F8  
                            __end_ofmake_step_7@step7 7E41  
                            __end_ofmake_step_8@step8 7ED0  
                                           _SPI_RET_2 28DA  
                                           _OUT_CHECK 2B8A  
                                           _OUT_GREEN 2868  
                                           _TRISAbits 000F92  
                                           _TRISCbits 000F94  
                            __size_of_ARRAY_SIDE_TURN 011C  
                                           _OUT_WHITE 2928  
                            _if_second_flower_perfect 3ED0  
                                  _command_turn_ARRAY 54B8  
                                __size_of_SPI_readM_2 00B6  
                              __size_of_EEROM_GAME_ON 0016  
                             __end_ofmade_cube@start8 7E6B  
                            __end_of_DATAEE_WriteByte 2C28  
                                          made_cube@i 00A4  
                                   make_step_7@start7 7B4F  
                             Special_input@if_can_get 01BF  
                                __size_of_SPI_special 0046  
                            __size_of_operation_first 0010  
                            __size_of_operation_limit 0026  
                                          _sound_flag 018F  
                                 ?_command_turn_ARRAY 001F  
                            __size_of_operation_setup 0018  
                                    ??_make_up_yellow 0060  
                                 __end_of_CE_IDA_LIST 79C8  
                                       ?_SPI_M_ioport 0001  
                          ??_command_turn_ARRAY_3_end 0057  
                                       EEROM_R_DEFF@i 0002  
                          command_turn_ARRAY_3_end@s2 005B  
                                          ?_SPI0_D2S0 0001  
                                          ?_SPI1_D2S0 0001  
                                          ?_SPI2_D2S0 0001  
                                          ?_SPI3_D2S0 0001  
                                          ?_SPI4_D2S0 0001  
                                          ?_SPI5_D2S0 0001  
                                       EEROM_R_SAVE@i 0033  
                                       EEROM_W_DEFF@i 0004  
                                      __end_of___omul 36E0  
                                      __end_of___wmul 2A1C  
          Create_shortest_command_depp_N1@check_depth 0003  
                        __end_ofyellow_cross@check_eo 7F8F  
                                       EEROM_W_SAVE@i 000F  
                       __size_of_command_turn_ARRAY_2 0244  
                       __size_of_command_turn_ARRAY_3 0086  
                                   ??_if_solution_end 0001  
                                ??_command_turn_ARRAY 0021  
                                      __end_of_ioport 29F6  
                                   __size_of_OUT_BLUE 0016  
                            EEROM_R_SAVE@READ_ADDRESS 003D  
                                   __size_of_OUT_HIGH 0024  
                                   __size_of_OUT_NONE 0014  
                                          ?_SPI_RET_2 0001  
                                          ?_OUT_CHECK 0001  
                                 start_initialization 309C  
                                          ?_OUT_GREEN 0001  
                                       ??_make_step_7 0098  
                                       ??_make_step_8 0096  
                                 __end_of_animation_1 423E  
                                 __end_of_animation_2 39D6  
                                 __end_of_animation_3 35D0  
                                 __end_of_animation_4 3E08  
                                   __size_of_SPIreadM 000E  
                                          ?_OUT_WHITE 0001  
                                         __end_of_fa1 31E8  
                                         __end_of_do1 3050  
                                         __end_of_do2 341E  
                                         __end_of_mi1 313A  
                                         __end_of_ra1 33BE  
                                         __end_of_re1 335E  
                                         __end_of_si1 329E  
                        __end_ofyellow_cross@cross_eo 7F93  
                                         __end_of_so1 32FE  
                                   ??_command_turn_CE 0035  
                                     str_cmp_const@p1 0007  
                                     str_cmp_const@p2 0009  
                                 __size_of_all_yellow 009A  
                                 __end_of_if_game_end 3484  
                                __end_ofall_yellow@CO 7E8B  
                           __end_ofmake_step_7@start7 7B8B  
                                       yellow_cross@i 009C  
                                       yellow_cross@j 009B  
                                     _EEROM_WR_ioport 313A  
                                    _convert_ROTtoLED 3800  
                                 __size_of_branch_off 0204  
                            __end_of_make_flont_green 2B8A  
                                   ___omul@multiplier 0001  
                             animation_3@POWER_change 004E  
                                      ??_SPI_M_ioport 0001  
                                 DATAEE_ReadByte@bAdd 0001  
                                    ??_EEROM_GAME_OFF 0011  
             __end_ofmake_white_yellow_flower@command 7BC1  
                     make_white_yellow_flower@command 7B8B  
                                 __size_of_if_no_pair 0046  
                                _opereation_over_flag 00ED  
                              __size_of_Special_input 0358  
                             __end_ofall_yellow@step6 7EE5  
                               __end_of_make_up_white 2B58  
                                            ??___omul 0011  
                        OUT_LED_ARRAY@LED_COLOR_ARRAY 000E  
                                            ??___wmul 0005  
                                       SPI_special@CS 001B  
                                       _EEROM_GAME_ON 2852  
                                       ?_yellow_cross 0001  
                                         __pdataBANK1 0173  
                                 OUT_YELLOW@LED_POWER 0004  
                                     if_start_step8@i 0099  
                                            ??_ioport 0001  
                                            ?_LED_RET 0001  
                                   EEROM_R_SAVE@i_283 0035  
                                   EEROM_R_SAVE@i_284 0037  
                                   EEROM_R_SAVE@i_285 0039  
                                   EEROM_R_SAVE@i_286 003B  
       Create_Shoretest_command_Most_deep@search_flag 0034  
                                   ??_ARRAY_LINE_TURN 0011  
                                            LED_RET@i 0001  
                                       __pcstackBANK0 0060  
                                       __pcstackBANK1 01BE  
                                   __size_of_if_2pair 0030  
                                   SPI0_D2S0@SPI_DATA 0003  
                                            ?_SPI_D2S 0012  
                                            ?_SPI_RET 0001  
                                            ?_OUT_RED 0001  
                                     Special_input@SS 01BE  
                                            ?_OUT_LOW 0001  
                                         _CE_IDA_LIST 7969  
                                   ?_shuffle_state_CE 0037  
                               made_cube@Light_ON_OFF 00A3  
                                 __end_of_make_step_7 4510  
                                 __end_of_make_step_8 4B74  
                                   ??_ARRAY_SIDE_TURN 0001  
           Create_shortest_command_depp_N1@return_num 0002  
                         ??_over_write_CE_from_A_to_B 0031  
                                    _shortest_command 0103  
                                  ??_shuffle_state_CE 0039  
                                   EEROM_W_DEFF@i_301 0006  
                                   EEROM_W_DEFF@i_302 0008  
                                   EEROM_W_DEFF@i_303 000A  
                                   EEROM_W_DEFF@i_304 000C  
                                    ARRAY_LINE_TURN@i 001E  
                                    ARRAY_LINE_TURN@j 001D  
                                   convert_ROTtoLED@i 000B  
                                   convert_ROTtoLED@j 000D  
                                           _game_flag 00F5  
                                         ??_SPI0_D2S0 0001  
                                         ??_SPI1_D2S0 0001  
                                   ??_operation_first 0001  
                                         ??_SPI2_D2S0 0001  
                                           if_CP@DATA 0005  
                                      ?_EEROM_GAME_ON 0001  
                                         ??_SPI3_D2S0 0001  
                                   ??_operation_limit 0003  
                                         ??_SPI4_D2S0 0001  
                                      ??_yellow_cross 0096  
                                       __pmediumconst 7968  
                                         ??_SPI5_D2S0 0001  
            __end_ofcommand_turn_ARRAY@for_count_LIST 7A8E  
                    command_turn_ARRAY@for_count_LIST 7A8A  
                                   ??_operation_setup 0001  
                                           __ptext100 481E  
                                           __ptext101 313A  
                                           __ptext102 470A  
                                           __ptext103 4608  
                                           __ptext104 2814  
                                           __ptext105 283C  
                                           __ptext106 5A1C  
                                           __ptext107 2BF2  
                                           __ptext108 0000  
                                           _depth_add 31E8  
                                            ?___awmod 0023  
                                           if_CP@e_cp 0002  
                                           if_CP@s_cp 0001  
                                           if_EP@e_ep 0002  
                            command_turn_ARRAY_2_2@s2 0052  
                            command_turn_ARRAY_2_3@s1 004A  
                            command_turn_ARRAY_2_3@s2 004C  
                            command_turn_ARRAY_2_3@s3 004E  
                                           if_EP@s_ep 0001  
                                           _made_cube 52F8  
                                         _animation_1 4154  
                                         _animation_2 3932  
                                         _animation_3 355E  
                                         _animation_4 3D46  
                                            SPI_D2S@i 0016  
                                    __CFG_PRICLKEN$ON 000000  
                                   if_solution_end@xo 0008  
                             __size_of_if_start_step8 004C  
                           make_white_yellow_flower@t 0098  
                                            SPI_RET@i 000A  
                                         _if_game_end 341E  
                                         turn_CE@past 0062  
                         make_perfect_white@EPW_count 009D  
                                         ??_SPI_RET_2 0007  
                                         ??_OUT_CHECK 0001  
                                       _Special_input 6894  
                                            ?_set_CES 0001  
                                         ??_OUT_GREEN 0004  
                                         ??_OUT_WHITE 0004  
                             __end_of_EEROM_WR_ioport 3190  
                            ARRAY_LINE_TURN@MEN_NUM_1 0001  
                                      __size_of_if_CP 0034  
                                      __size_of_if_EP 002E  
                                            ?_turn_CE 0029  
                                      __size_of_set_C 0594  
                                      __size_of_set_E 0484  
                            __size_of_DATAEE_ReadByte 0014  
                                      __size_of_set_S 001A  
                                      __size_of_srand 0030  
                                         _GET_COMMAND 00EF  
                            _make_white_yellow_flower 4510  
                                           _rand_seed 00EA  
                               __end_of_str_cmp_const 3BDE  
                                yellow_cross@check_eo 7F87  
                                      ___wmul@product 0005  
                                            _LATAbits 000F89  
                                       if_all_2pair@i 000D  
                                            _LATBbits 000F8A  
                                       if_all_2pair@y 0007  
                                   SPI4_D2S0@SPI_DATA 0003  
                                    _opereation_count 00E6  
                                depth_add@check_depth 0003  
                    __end_of_command_turn_ARRAY_3_end 62FE  
                __end_ofcommand_turn_ARRAY_3_end@s2_2 7A91  
                        command_turn_ARRAY_3_end@s2_2 7A8E  
                                        ??_all_yellow 0060  
                                       animation_1@CS 004C  
                                       animation_3@CS 004A  
                                    ARRAY_SIDE_TURN@i 000B  
                                    __CFG_WDTPS$32768 000000  
                                yellow_cross@cross_eo 7F8F  
                                            _SSP1CON1 000FC6  
                                          ?_depth_add 0001  
                                            _SSP1STAT 000FC7  
__end_ofmake_second_flower_perfect@command_drop_right 7EBB  
        make_second_flower_perfect@command_drop_right 7EA3  
                                        ??_branch_off 0029  
                                            _OUT_BLUE 2894  
                                            _OUT_HIGH 2966  
                                          ?_made_cube 00A0  
                           _over_write_CE_from_A_to_B 4B74  
                                            _OUT_NONE 2828  
                          ??_if_second_flower_perfect 0006  
                           __size_of_if_perfect_white 00F0  
                                           main@i_559 00DF  
                                   ___wmul@multiplier 0001  
                                        ??_if_no_pair 005E  
                                            _SPIreadM 27E8  
                                      ?_Special_input 0001  
                                          SPI_RET_2@j 0007  
                                __end_of_SPI_M_ioport 2C9C  
                                          OUT_CHECK@i 0002  
                                       turn_CE@change 0029  
                                    __size_of_LED_RET 0022  
                              OUT_LED_ARRAY@LED_POWER 0009  
                               DATAEE_WriteByte@bData 0001  
                                         _make_step_7 441A  
                                         _make_step_8 4A50  
                                      SPI_D2S@str_SPI 0018  
                                           copy_data0 30B0  
                                  __end_of_all_yellow 3932  
                                    __size_of_SPI_D2S 02E8  
                                    __size_of_SPI_RET 002A  
                                    __size_of_OUT_RED 0016  
                                    __size_of_OUT_LOW 0024  
                                   ?_DATAEE_WriteByte 0001  
                    initialization_shortest_command@i 0001  
                                    made_cube@skip_CS 00A0  
                                     _Special_input_0 0105  
                                  _make_perfect_white 514C  
                                 OUT_ORANGE@LED_POWER 0004  
                                  ??_DATAEE_WriteByte 0002  
                                  __end_of_branch_off 5E16  
                                       _ARRAY_skip_CS 00EE  
                                          _EECON1bits 000FA6  
                                            _e_CE_IDA 79C8  
                                   OUT_BLUE@LED_POWER 0004  
                                      main@EEROM_FLAG 00DE  
                   make_second_flower_perfect@flont_0 009B  
                                     _if_solution_end 567C  
                                            __Hrparam 0000  
                                     ??_EEROM_GAME_ON 0011  
                                   EEROM_W_SAVE@i_275 0004  
                                   EEROM_W_SAVE@i_276 0006  
                                   EEROM_W_SAVE@i_277 0008  
                                   EEROM_W_SAVE@i_278 000A  
                                   EEROM_W_SAVE@i_279 000C  
                                  __end_of_if_no_pair 2FB8  
                                 ?_make_perfect_white 0001  
                                            __Lrparam 0000  
                                   __CFG_P2BMX$PORTB5 000000  
             __end_of_Create_shortest_command_depp_N1 2D1C  
            __size_of_Create_shortest_command_depp_N1 0042  
                   ??_Create_shortest_command_depp_N1 0001  
                    ?_Create_shortest_command_depp_N1 0001  
                     _Create_shortest_command_depp_N1 2CDA  
                                        all_yellow@CO 7E6B  
                                            _m_CE_IDA 7A24  
                                    __size_of___awmod 0070  
                                     _command_turn_CE 3BDE  
                                  OUT_GREEN@LED_POWER 0004  
                                  all_yellow@check_CO 0096  
                            __end_of_convert_ROTtoLED 3898  
                                            _s_CE_IDA 79F6  
                                          _ANSELCbits 000F3A  
                                            _if_2pair 2AC6  
                                       ??_SPI_readM_2 0001  
                                ??_make_perfect_white 0098  
                                    __size_of_set_CES 000E  
                                    ?_EEROM_WR_ioport 0001  
                            ??_command_turn_ARRAY_2_2 004C  
                            ??_command_turn_ARRAY_2_3 0050  
                              __size_of_over_write_CE 0114  
                                            __ptext10 3F9E  
                                            __ptext11 3656  
                                            __ptext20 4A50  
                                            __ptext12 4B74  
                                            __ptext21 567C  
                                            __ptext13 52F8  
                                            __ptext30 2B58  
                                            __ptext22 441A  
                                            __ptext14 3E08  
                                            __ptext31 432A  
                                            __ptext23 2F72  
                                            __ptext15 2EEA  
                                            __ptext40 2EA8  
                                            __ptext32 2BBE  
                                            __ptext24 3A7C  
                                            __ptext16 2804  
                                            __ptext41 35D0  
                                            __ptext33 2C9C  
                                            __ptext25 2AC6  
                                            __ptext17 4510  
                                            __ptext50 4E00  
                                            __ptext42 3BDE  
                                            __ptext34 2B26  
                                            __ptext26 62FE  
                                            __ptext18 376A  
                                            __ptext51 54B8  
                                            __ptext43 6BEC  
                                            __ptext35 3050  
                                            __ptext27 3ED0  
                                            __ptext19 2C28  
                                            __ptext60 30EA  
                                            __ptext52 4934  
                                            __ptext44 605A  
                                            __ptext36 39D6  
                                            __ptext28 2A98  
                                            __ptext61 32FE  
                                            __ptext53 4FA4  
                                            __ptext45 27F6  
                                            __ptext37 3898  
                                            __ptext29 514C  
                                            __ptext70 2E24  
                                            __ptext62 3004  
                                            __ptext54 355E  
                                            __ptext46 290E  
                                            __ptext38 28C2  
                                            __ptext71 2DE2  
                                            __ptext63 329E  
                                            __ptext55 3484  
                                            __ptext47 6F50  
                                            __ptext39 2A1C  
                                            __ptext80 287E  
                                            __ptext72 2DA0  
                                            __ptext64 3800  
                                            __ptext56 4154  
                                            __ptext48 73D4  
                                            __ptext81 2868  
                                            __ptext73 2D5E  
                                            __ptext65 2F2C  
                                            __ptext57 33BE  
                                            __ptext49 4078  
                                            __ptext90 2A6C  
                                            __ptext82 2928  
                                            __ptext74 2D1C  
                                            __ptext66 3190  
                                            __ptext58 3242  
                                            __ptext91 31E8  
                                            __ptext83 28F4  
                                            __ptext75 423E  
                                            __ptext67 65AC  
                                            __ptext59 335E  
                                            __ptext92 5C12  
                                            __ptext84 2B8A  
                                            __ptext76 29F6  
                                            __ptext68 3B2C  
                                            __ptext93 34EE  
                                            __ptext85 298A  
                                            __ptext77 2828  
                                            __ptext69 2E66  
                                            __ptext94 2CDA  
                                            __ptext86 2966  
                                            __ptext78 28AA  
                                            __ptext95 2A42  
                                            __ptext87 2944  
                                            __ptext79 2894  
                                            __ptext96 28DA  
                                            __ptext88 4CB8  
                                            __ptext97 3C90  
                                            __ptext89 2852  
                                            __ptext98 27E8  
                                            __ptext99 2C60  
                                        _SSP1CON1bits 000FC6  
                                       ??_SPI_special 001B  
                     command_turn_ARRAY@for_count_num 0027  
                             command_turn_ARRAY_2_2@i 0055  
                             command_turn_ARRAY_2_2@j 004F  
                             command_turn_ARRAY_2_3@i 0052  
                             command_turn_ARRAY_2_2@s 004A  
                                __end_of_yellow_cross 3ED0  
                                         _limit_count 00EC  
                         DATAEE_WriteByte@GIEBitValue 0003  
                                    __size_of_turn_CE 0364  
                        __end_of_command_turn_ARRAY_2 605A  
                        __end_of_command_turn_ARRAY_3 3656  
                                       ?_EEROM_R_DEFF 0001  
                              __size_of_OUT_LED_ARRAY 00EC  
                                       ?_EEROM_R_SAVE 0001  
                                       ?_EEROM_W_DEFF 0001  
                                       ?_EEROM_W_SAVE 0001  
                                       SPI_D2S@SPI_CS 0015  
                           if_second_flower_perfect@i 000C  
                                       __size_of_main 01D2  
                           if_second_flower_perfect@j 000B  
                                       __size_of_rand 00DA  
                                   ?_make_flont_green 0001  
                               branch_off@check_depth 0032  
                                   ??_DATAEE_ReadByte 0001  
                                  ??_make_flont_green 0060  
                     __end_ofARRAY_SIDE_TURN@side_NUM 7A8A  
                                        animation_1@i 004D  
                                        animation_1@j 004F  
                                         ??_depth_add 0001  
                                            _state_CE 0190  
                                     _ARRAY_LINE_TURN 4FA4  
                                        _SSP1STATbits 000FC7  
                                         ??_made_cube 00A1  
                                      _if_start_step8 3050  
                                     ??_Special_input 00D8  
                         __size_of_command_turn_ARRAY 01C4  
                                   shuffle_state_CE@i 004E  
                                 ARRAY_SIDE_TURN@temp 0009  
                                    animation_3@color 004B  
                   __size_of_command_turn_ARRAY_3_end 02A4  
                                     _ARRAY_SIDE_TURN 4934  
                                        if_game_end@i 0007  
                                        if_game_end@j 0006  
                                          _INTCONbits 000FF2  
                                       ?_if_all_2pair 0001  
                           ?_command_turn_ARRAY_3_end 0001  
                              if_solution_end@p_start 000A  
                                   _set_all_LED_ARRAY 3484  
                                         all_yellow@i 0097  
                                         all_yellow@j 0098  
                          over_write_CE_from_A_to_B@A 0001  
                          over_write_CE_from_A_to_B@B 002F  
                                   _if_perfect_yellow 39D6  
                          over_write_CE_from_A_to_B@i 0035  
                                   SPI1_D2S0@SPI_DATA 0003  
                                      ??_EEROM_R_DEFF 0002  
                           command_turn_ARRAY@MEN_NUM 0028  
                                  ?_set_all_LED_ARRAY 0001  
                                      ??_EEROM_R_SAVE 0033  
                                      ??_EEROM_W_DEFF 0004  
                             __end_of_if_solution_end 584A  
                                      _shortest_depth 0106  
                                  ?_if_perfect_yellow 0001  
                                     _operation_first 2804  
                                 __end_of_SPI_readM_2 3D46  
                                      ??_EEROM_W_SAVE 0004  
                                     _operation_limit 2A1C  
                  make_white_yellow_flower@mark_count 0097  
                                        SPI_D2S@F5811 00E3  
                                     _operation_setup 28C2  
                                 __end_of_SPI_special 2F72  
                                 ??_set_all_LED_ARRAY 0007  
                             shuffle_state_CE@rand_CE 003A  
                                 ??_if_perfect_yellow 0001  
                             __end_of_command_turn_CE 3C90  
                                       _over_write_CE 470A  
                              __end_of_if_start_step8 309C  
                           __size_of_shuffle_state_CE 008A  
                               __size_of_SPI_M_ioport 003C  
                                     animation_3@flag 004D  
                    __end_of_if_second_flower_perfect 3F9E  
                                       _OUT_LED_ARRAY 423E  
                                        ?_animation_1 0001  
                                        ?_animation_2 0001  
                                        ?_animation_3 004A  
                                        ?_animation_4 00A6  
                             __size_of_make_up_yellow 0038  
                        ??_make_second_flower_perfect 0098  
                                    _if_perfect_white 432A  
                                        ?_if_game_end 0001  
                                      ??_if_all_2pair 0001  
                          ??_make_white_yellow_flower 0060  
                                         branch_off@a 002C  
                                         branch_off@b 0030  
                                         branch_off@c 002E  
                                         branch_off@d 002F  
                                         branch_off@i 0031  
                                            turn_CE@i 0090  
                                            turn_CE@j 0060  
                           __end_of_set_all_LED_ARRAY 34EE  
                           __end_of_if_perfect_yellow 3A7C  
                                   __CFG_T3CMX$PORTC0 000000  
                  __size_of_over_write_CE_from_A_to_B 0144  
                     __size_of_command_turn_ARRAY_2_2 01A4  
                     __size_of_command_turn_ARRAY_2_3 00DC  
                              __size_of_make_up_white 0032  
                                        main@SPI_DATA 00DD  
                                   __CFG_FOSC$INTIO67 000000  
                                          _SOUND_NOTE 0181  
                                   SPI5_D2S0@SPI_DATA 0003  
                             __end_of_ARRAY_LINE_TURN 514C  
                                        _SPI_M_ioport 2C60  
                                          _OUT_ORANGE 28AA  
                                         if_no_pair@i 0060  
                                      ?_over_write_CE 0001  
                 __size_of_make_second_flower_perfect 02AE  
                                          _OUT_YELLOW 28F4  
